
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f438  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800f5fc  0800f5fc  0001f5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f664  0800f664  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800f664  0800f664  0001f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f66c  0800f66c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f66c  0800f66c  0001f66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f670  0800f670  0001f670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800f674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a54  20000160  0800f7d4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20002bb4  0800f7d4  00022bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022488  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f30  00000000  00000000  00042618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  00047548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00048f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002937b  00000000  00000000  0004a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024b1c  00000000  00000000  00073a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6779  00000000  00000000  00098547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ecc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cec  00000000  00000000  0017ed10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000160 	.word	0x20000160
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f5e4 	.word	0x0800f5e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000164 	.word	0x20000164
 8000200:	0800f5e4 	.word	0x0800f5e4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <AT24Cxx_Write_DMA>:
{
	return HAL_I2C_Mem_Write(hi2c, 0xA0 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
}

HAL_StatusTypeDef AT24Cxx_Write_DMA(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af02      	add	r7, sp, #8
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	607a      	str	r2, [r7, #4]
 8000512:	461a      	mov	r2, r3
 8000514:	460b      	mov	r3, r1
 8000516:	817b      	strh	r3, [r7, #10]
 8000518:	4613      	mov	r3, r2
 800051a:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write_DMA(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size);
 800051c:	897b      	ldrh	r3, [r7, #10]
 800051e:	09db      	lsrs	r3, r3, #7
 8000520:	b29b      	uxth	r3, r3
 8000522:	b21b      	sxth	r3, r3
 8000524:	f003 030e 	and.w	r3, r3, #14
 8000528:	b21b      	sxth	r3, r3
 800052a:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 800052e:	b21b      	sxth	r3, r3
 8000530:	b299      	uxth	r1, r3
 8000532:	897a      	ldrh	r2, [r7, #10]
 8000534:	893b      	ldrh	r3, [r7, #8]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2301      	movs	r3, #1
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f006 fc14 	bl	8006d6c <HAL_I2C_Mem_Write_DMA>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f003 fee4 	bl	8004320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f89a 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 fcc8 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000560:	f000 fc9e 	bl	8000ea0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000564:	f000 f906 	bl	8000774 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000568:	f000 f990 	bl	800088c <MX_ADC2_Init>
  MX_TIM7_Init();
 800056c:	f000 fbe0 	bl	8000d30 <MX_TIM7_Init>
  MX_CAN1_Init();
 8000570:	f000 fa16 	bl	80009a0 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000574:	f000 fa8c 	bl	8000a90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000578:	f000 fb28 	bl	8000bcc <MX_TIM2_Init>
  MX_TIM3_Init();
 800057c:	f000 fb7e 	bl	8000c7c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000580:	f000 fc0a 	bl	8000d98 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000584:	f000 fa56 	bl	8000a34 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000588:	f00e f95a 	bl	800e840 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 800058c:	f000 fa3e 	bl	8000a0c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 8000590:	4932      	ldr	r1, [pc, #200]	; (800065c <main+0x10c>)
 8000592:	4833      	ldr	r0, [pc, #204]	; (8000660 <main+0x110>)
 8000594:	f001 fe5a 	bl	800224c <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(Accumulator_Delay >= READING_DELAY)
 8000598:	4b32      	ldr	r3, [pc, #200]	; (8000664 <main+0x114>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b02      	cmp	r3, #2
 800059e:	dd02      	ble.n	80005a6 <main+0x56>
	  {
		  PDM_Read_Data(&Data_Conversion);
 80005a0:	4831      	ldr	r0, [pc, #196]	; (8000668 <main+0x118>)
 80005a2:	f003 f877 	bl	8003694 <PDM_Read_Data>
	  }

	  //check if output currents are below thresholds and timeouts
	  if(Accumulator_Output_Check >= OUTPUT_FUSE_FREQ)
 80005a6:	4b31      	ldr	r3, [pc, #196]	; (800066c <main+0x11c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b18      	cmp	r3, #24
 80005ac:	d901      	bls.n	80005b2 <main+0x62>
	  {
		  PDM_Output_Fuse();
 80005ae:	f002 f96b 	bl	8002888 <PDM_Output_Fuse>
	  }

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_10Hz >= DATA_FREQ_10HZ)
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <main+0x120>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ba:	d306      	bcc.n	80005ca <main+0x7a>
	  {
		  Accumulator_Msg_10Hz = 0;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <main+0x120>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 80005c2:	2101      	movs	r1, #1
 80005c4:	4826      	ldr	r0, [pc, #152]	; (8000660 <main+0x110>)
 80005c6:	f000 fe41 	bl	800124c <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_25Hz >= DATA_FREQ_25HZ)
 80005ca:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <main+0x124>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005d2:	d306      	bcc.n	80005e2 <main+0x92>
	  {
		  Accumulator_Msg_25Hz = 0;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <main+0x124>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 80005da:	2102      	movs	r1, #2
 80005dc:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0x110>)
 80005de:	f000 fe35 	bl	800124c <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_50Hz >= DATA_FREQ_50HZ)
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <main+0x128>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2bc7      	cmp	r3, #199	; 0xc7
 80005e8:	d906      	bls.n	80005f8 <main+0xa8>
	  {
		  Accumulator_Msg_50Hz = 0;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <main+0x128>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 80005f0:	2103      	movs	r1, #3
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0x110>)
 80005f4:	f000 fe2a 	bl	800124c <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_80Hz >= DATA_FREQ_80HZ)
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <main+0x12c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b7c      	cmp	r3, #124	; 0x7c
 80005fe:	d906      	bls.n	800060e <main+0xbe>
	  {
		  Accumulator_Msg_80Hz = 0;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <main+0x12c>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 8000606:	2104      	movs	r1, #4
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <main+0x110>)
 800060a:	f000 fe1f 	bl	800124c <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_100Hz >= DATA_FREQ_100HZ)
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <main+0x130>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b63      	cmp	r3, #99	; 0x63
 8000614:	d906      	bls.n	8000624 <main+0xd4>
	  {
		  Accumulator_Msg_100Hz = 0;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0x130>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 800061c:	2105      	movs	r1, #5
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <main+0x110>)
 8000620:	f000 fe14 	bl	800124c <PDM_CAN_Transmit_Data>
	  }

	  //Checks if USB accumulator is above time threshold
	  if((Accumulator_USB_Data >= DATA_FREQ_USB) && (USB_Connected_Flag == 1))
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <main+0x134>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800062c:	d3b4      	bcc.n	8000598 <main+0x48>
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <main+0x138>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d1b0      	bne.n	8000598 <main+0x48>
	  {
		  Accumulator_USB_Data = 0;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x134>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]

		  //If connected, send data channels via USB
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <main+0x13c>)
 8000642:	f006 f9df 	bl	8006a04 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d102      	bne.n	8000652 <main+0x102>
			  PDM_USB_Transmit_Data();
 800064c:	f001 fe9c 	bl	8002388 <PDM_USB_Transmit_Data>
 8000650:	e7a2      	b.n	8000598 <main+0x48>
		  //If disconnected reset flag
		  else
			  USB_Connected_Flag = 0;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <main+0x138>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	  if(Accumulator_Delay >= READING_DELAY)
 8000658:	e79e      	b.n	8000598 <main+0x48>
 800065a:	bf00      	nop
 800065c:	200002fc 	.word	0x200002fc
 8000660:	200002cc 	.word	0x200002cc
 8000664:	20000f28 	.word	0x20000f28
 8000668:	20000514 	.word	0x20000514
 800066c:	20000f44 	.word	0x20000f44
 8000670:	20000f2c 	.word	0x20000f2c
 8000674:	20000f30 	.word	0x20000f30
 8000678:	20000f34 	.word	0x20000f34
 800067c:	20000f38 	.word	0x20000f38
 8000680:	20000f3c 	.word	0x20000f3c
 8000684:	20000f40 	.word	0x20000f40
 8000688:	20000504 	.word	0x20000504
 800068c:	40020000 	.word	0x40020000

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00e fe9a 	bl	800f3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f009 f931 	bl	8009980 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 fd10 	bl	8001148 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f008 fa7a 	bl	8008c20 <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 fd09 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f008 fab3 	bl	8008cc0 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000760:	f000 fcf2 	bl	8001148 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000786:	4b3d      	ldr	r3, [pc, #244]	; (800087c <MX_ADC1_Init+0x108>)
 8000788:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <MX_ADC1_Init+0x10c>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800078c:	4b3b      	ldr	r3, [pc, #236]	; (800087c <MX_ADC1_Init+0x108>)
 800078e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000792:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000794:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_ADC1_Init+0x108>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800079a:	4b38      	ldr	r3, [pc, #224]	; (800087c <MX_ADC1_Init+0x108>)
 800079c:	2201      	movs	r2, #1
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a0:	4b36      	ldr	r3, [pc, #216]	; (800087c <MX_ADC1_Init+0x108>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a6:	4b35      	ldr	r3, [pc, #212]	; (800087c <MX_ADC1_Init+0x108>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_ADC1_Init+0x108>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <MX_ADC1_Init+0x108>)
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <MX_ADC1_Init+0x110>)
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_ADC1_Init+0x108>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_ADC1_Init+0x108>)
 80007c2:	2205      	movs	r2, #5
 80007c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_ADC1_Init+0x108>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_ADC1_Init+0x108>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	4829      	ldr	r0, [pc, #164]	; (800087c <MX_ADC1_Init+0x108>)
 80007d6:	f003 fe39 	bl	800444c <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 fcb2 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007e4:	2305      	movs	r3, #5
 80007e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007ec:	2307      	movs	r3, #7
 80007ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4821      	ldr	r0, [pc, #132]	; (800087c <MX_ADC1_Init+0x108>)
 80007f6:	f003 ff9b 	bl	8004730 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 fca2 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000804:	2306      	movs	r3, #6
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_ADC1_Init+0x108>)
 8000812:	f003 ff8d 	bl	8004730 <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800081c:	f000 fc94 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000820:	2307      	movs	r3, #7
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000824:	2303      	movs	r3, #3
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_ADC1_Init+0x108>)
 800082e:	f003 ff7f 	bl	8004730 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000838:	f000 fc86 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800083c:	230e      	movs	r3, #14
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_ADC1_Init+0x108>)
 800084a:	f003 ff71 	bl	8004730 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000854:	f000 fc78 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_ADC1_Init+0x114>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800085c:	2305      	movs	r3, #5
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_ADC1_Init+0x108>)
 8000866:	f003 ff63 	bl	8004730 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000870:	f000 fc6a 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000017c 	.word	0x2000017c
 8000880:	40012000 	.word	0x40012000
 8000884:	0f000001 	.word	0x0f000001
 8000888:	10000012 	.word	0x10000012

0800088c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <MX_ADC2_Init+0x108>)
 80008a0:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <MX_ADC2_Init+0x10c>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <MX_ADC2_Init+0x108>)
 80008a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <MX_ADC2_Init+0x108>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008b2:	4b38      	ldr	r3, [pc, #224]	; (8000994 <MX_ADC2_Init+0x108>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <MX_ADC2_Init+0x108>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b35      	ldr	r3, [pc, #212]	; (8000994 <MX_ADC2_Init+0x108>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <MX_ADC2_Init+0x108>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b31      	ldr	r3, [pc, #196]	; (8000994 <MX_ADC2_Init+0x108>)
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <MX_ADC2_Init+0x110>)
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <MX_ADC2_Init+0x108>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80008d8:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <MX_ADC2_Init+0x108>)
 80008da:	2205      	movs	r2, #5
 80008dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_ADC2_Init+0x108>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_ADC2_Init+0x108>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <MX_ADC2_Init+0x108>)
 80008ee:	f003 fdad 	bl	800444c <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 fc26 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000904:	2307      	movs	r3, #7
 8000906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4821      	ldr	r0, [pc, #132]	; (8000994 <MX_ADC2_Init+0x108>)
 800090e:	f003 ff0f 	bl	8004730 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000918:	f000 fc16 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800091c:	2301      	movs	r3, #1
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	481a      	ldr	r0, [pc, #104]	; (8000994 <MX_ADC2_Init+0x108>)
 800092a:	f003 ff01 	bl	8004730 <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000934:	f000 fc08 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000938:	2302      	movs	r3, #2
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800093c:	2303      	movs	r3, #3
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_ADC2_Init+0x108>)
 8000946:	f003 fef3 	bl	8004730 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000950:	f000 fbfa 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000954:	2303      	movs	r3, #3
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000958:	2304      	movs	r3, #4
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_ADC2_Init+0x108>)
 8000962:	f003 fee5 	bl	8004730 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800096c:	f000 fbec 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000970:	2304      	movs	r3, #4
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000974:	2305      	movs	r3, #5
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_ADC2_Init+0x108>)
 800097e:	f003 fed7 	bl	8004730 <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000988:	f000 fbde 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200001c4 	.word	0x200001c4
 8000998:	40012100 	.word	0x40012100
 800099c:	0f000001 	.word	0x0f000001

080009a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <MX_CAN1_Init+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009ac:	2205      	movs	r2, #5
 80009ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009b8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009bc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009c0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80009c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_CAN1_Init+0x64>)
 80009f2:	f004 f94d 	bl	8004c90 <HAL_CAN_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009fc:	f000 fba4 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200002cc 	.word	0x200002cc
 8000a08:	40006400 	.word	0x40006400

08000a0c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_CRC_Init+0x20>)
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <MX_CRC_Init+0x24>)
 8000a14:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_CRC_Init+0x20>)
 8000a18:	f005 f97f 	bl	8005d1a <HAL_CRC_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a22:	f000 fb91 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200002f4 	.word	0x200002f4
 8000a30:	40023000 	.word	0x40023000

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_I2C1_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_I2C1_Init+0x58>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a72:	f006 f837 	bl	8006ae4 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 fb64 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200002fc 	.word	0x200002fc
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	00061a80 	.word	0x00061a80

08000a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b096      	sub	sp, #88	; 0x58
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f00e fc85 	bl	800f3d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ace:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000ad0:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17;
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000ad6:	2211      	movs	r2, #17
 8000ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000ae2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000afa:	4832      	ldr	r0, [pc, #200]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000afc:	f009 f9de 	bl	8009ebc <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b06:	f000 fb1f 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b14:	4619      	mov	r1, r3
 8000b16:	482b      	ldr	r0, [pc, #172]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000b18:	f009 fda0 	bl	800a65c <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b22:	f000 fb11 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b26:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000b28:	f009 fab7 	bl	800a09a <HAL_TIM_PWM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b32:	f000 fb09 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b42:	4619      	mov	r1, r3
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000b46:	f00a f989 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b50:	f000 fafa 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	220c      	movs	r2, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000b76:	f009 fcaf 	bl	800a4d8 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b80:	f000 fae2 	bl	8001148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000ba8:	f00a f9d4 	bl	800af54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000bb2:	f000 fac9 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_TIM1_Init+0x134>)
 8000bb8:	f003 f9e0 	bl	8003f7c <HAL_TIM_MspPostInit>

}
 8000bbc:	bf00      	nop
 8000bbe:	3758      	adds	r7, #88	; 0x58
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000350 	.word	0x20000350
 8000bc8:	40010000 	.word	0x40010000

08000bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd2:	f107 0320 	add.w	r3, r7, #32
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c18:	f009 fa3f 	bl	800a09a <HAL_TIM_PWM_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c22:	f000 fa91 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	4619      	mov	r1, r3
 8000c34:	4810      	ldr	r0, [pc, #64]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c36:	f00a f911 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c40:	f000 fa82 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c44:	2360      	movs	r3, #96	; 0x60
 8000c46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2208      	movs	r2, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c5c:	f009 fc3c 	bl	800a4d8 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c66:	f000 fa6f 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM2_Init+0xac>)
 8000c6c:	f003 f986 	bl	8003f7c <HAL_TIM_MspPostInit>

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000398 	.word	0x20000398

08000c7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	615a      	str	r2, [r3, #20]
 8000c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <MX_TIM3_Init+0xb0>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000cb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000cc6:	f009 f9e8 	bl	800a09a <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cd0:	f000 fa3a 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000ce4:	f00a f8ba 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cee:	f000 fa2b 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	220c      	movs	r2, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000d0a:	f009 fbe5 	bl	800a4d8 <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d14:	f000 fa18 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM3_Init+0xac>)
 8000d1a:	f003 f92f 	bl	8003f7c <HAL_TIM_MspPostInit>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200003e0 	.word	0x200003e0
 8000d2c:	40000400 	.word	0x40000400

08000d30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d46:	2259      	movs	r2, #89	; 0x59
 8000d48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d52:	2263      	movs	r2, #99	; 0x63
 8000d54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d5e:	f009 f8ad 	bl	8009ebc <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000d68:	f000 f9ee 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d7a:	f00a f86f 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f9e0 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000428 	.word	0x20000428
 8000d94:	40001400 	.word	0x40001400

08000d98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00e fb08 	bl	800f3d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dca:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <MX_TIM8_Init+0x104>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dd0:	2211      	movs	r2, #17
 8000dd2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000ddc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000df4:	4828      	ldr	r0, [pc, #160]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000df6:	f009 f950 	bl	800a09a <HAL_TIM_PWM_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000e00:	f000 f9a2 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e10:	4619      	mov	r1, r3
 8000e12:	4821      	ldr	r0, [pc, #132]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e14:	f00a f822 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e1e:	f000 f993 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e22:	2370      	movs	r3, #112	; 0x70
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e48:	f009 fb46 	bl	800a4d8 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000e52:	f000 f979 	bl	8001148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e7a:	f00a f86b 	bl	800af54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000e84:	f000 f960 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e8a:	f003 f877 	bl	8003f7c <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3748      	adds	r7, #72	; 0x48
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000470 	.word	0x20000470
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_DMA_Init+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <MX_DMA_Init+0x4c>)
 8000eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_DMA_Init+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2038      	movs	r0, #56	; 0x38
 8000ec8:	f004 fee3 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ecc:	2038      	movs	r0, #56	; 0x38
 8000ece:	f004 fefc 	bl	8005cca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	203a      	movs	r0, #58	; 0x3a
 8000ed8:	f004 fedb 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000edc:	203a      	movs	r0, #58	; 0x3a
 8000ede:	f004 fef4 	bl	8005cca <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	4b88      	ldr	r3, [pc, #544]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a87      	ldr	r2, [pc, #540]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b85      	ldr	r3, [pc, #532]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	623b      	str	r3, [r7, #32]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	4b81      	ldr	r3, [pc, #516]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a80      	ldr	r2, [pc, #512]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b7e      	ldr	r3, [pc, #504]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4b7a      	ldr	r3, [pc, #488]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a79      	ldr	r2, [pc, #484]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b77      	ldr	r3, [pc, #476]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b73      	ldr	r3, [pc, #460]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a72      	ldr	r2, [pc, #456]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b70      	ldr	r3, [pc, #448]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b6c      	ldr	r3, [pc, #432]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a6b      	ldr	r2, [pc, #428]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b69      	ldr	r3, [pc, #420]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a64      	ldr	r2, [pc, #400]	; (800112c <MX_GPIO_Init+0x23c>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b5e      	ldr	r3, [pc, #376]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a5d      	ldr	r2, [pc, #372]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b57      	ldr	r3, [pc, #348]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a56      	ldr	r2, [pc, #344]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b54      	ldr	r3, [pc, #336]	; (800112c <MX_GPIO_Init+0x23c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	213c      	movs	r1, #60	; 0x3c
 8000fea:	4851      	ldr	r0, [pc, #324]	; (8001130 <MX_GPIO_Init+0x240>)
 8000fec:	f005 fd22 	bl	8006a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000ff6:	484f      	ldr	r0, [pc, #316]	; (8001134 <MX_GPIO_Init+0x244>)
 8000ff8:	f005 fd1c 	bl	8006a34 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001002:	484d      	ldr	r0, [pc, #308]	; (8001138 <MX_GPIO_Init+0x248>)
 8001004:	f005 fd16 	bl	8006a34 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8001008:	233c      	movs	r3, #60	; 0x3c
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800100c:	2311      	movs	r3, #17
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4844      	ldr	r0, [pc, #272]	; (8001130 <MX_GPIO_Init+0x240>)
 8001020:	f005 fa68 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001024:	230f      	movs	r3, #15
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001028:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4840      	ldr	r0, [pc, #256]	; (800113c <MX_GPIO_Init+0x24c>)
 800103a:	f005 fa5b 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800103e:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001044:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	483a      	ldr	r0, [pc, #232]	; (8001140 <MX_GPIO_Init+0x250>)
 8001056:	f005 fa4d 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800105a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001060:	2311      	movs	r3, #17
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4830      	ldr	r0, [pc, #192]	; (8001134 <MX_GPIO_Init+0x244>)
 8001074:	f005 fa3e 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001078:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800107e:	2311      	movs	r3, #17
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <MX_GPIO_Init+0x248>)
 8001092:	f005 fa2f 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 8001096:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800109c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4825      	ldr	r0, [pc, #148]	; (8001144 <MX_GPIO_Init+0x254>)
 80010ae:	f005 fa21 	bl	80064f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2101      	movs	r1, #1
 80010b6:	2006      	movs	r0, #6
 80010b8:	f004 fdeb 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010bc:	2006      	movs	r0, #6
 80010be:	f004 fe04 	bl	8005cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2101      	movs	r1, #1
 80010c6:	2007      	movs	r0, #7
 80010c8:	f004 fde3 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010cc:	2007      	movs	r0, #7
 80010ce:	f004 fdfc 	bl	8005cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2101      	movs	r1, #1
 80010d6:	2008      	movs	r0, #8
 80010d8:	f004 fddb 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010dc:	2008      	movs	r0, #8
 80010de:	f004 fdf4 	bl	8005cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	2009      	movs	r0, #9
 80010e8:	f004 fdd3 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010ec:	2009      	movs	r0, #9
 80010ee:	f004 fdec 	bl	8005cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	200a      	movs	r0, #10
 80010f8:	f004 fdcb 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f004 fde4 	bl	8005cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2101      	movs	r1, #1
 8001106:	2017      	movs	r0, #23
 8001108:	f004 fdc3 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800110c:	2017      	movs	r0, #23
 800110e:	f004 fddc 	bl	8005cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2101      	movs	r1, #1
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f004 fdbb 	bl	8005c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800111c:	2028      	movs	r0, #40	; 0x28
 800111e:	f004 fdd4 	bl	8005cca <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3738      	adds	r7, #56	; 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40021000 	.word	0x40021000
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021800 	.word	0x40021800
 800113c:	40021400 	.word	0x40021400
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>
	...

08001154 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, uint8_t CAN_BaudRate)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f003 fe90 	bl	8004e86 <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	if(CAN_BaudRate == CAN_Disable)
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <PDM_CAN_Init+0x1c>
	{
		return HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	e02b      	b.n	80011c8 <PDM_CAN_Init+0x74>
	}
	else if(CAN_BaudRate == CAN_125kbps)
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <PDM_CAN_Init+0x2a>
	{
		hcan->Init.Prescaler = 40;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2228      	movs	r2, #40	; 0x28
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	e013      	b.n	80011a6 <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_250kbps)
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d103      	bne.n	800118c <PDM_CAN_Init+0x38>
	{
		hcan->Init.Prescaler = 20;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2214      	movs	r2, #20
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	e00c      	b.n	80011a6 <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_500kbps)
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d103      	bne.n	800119a <PDM_CAN_Init+0x46>
	{
		hcan->Init.Prescaler = 10;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220a      	movs	r2, #10
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	e005      	b.n	80011a6 <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_1000kbps)
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d102      	bne.n	80011a6 <PDM_CAN_Init+0x52>
	{
		hcan->Init.Prescaler = 5;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2205      	movs	r2, #5
 80011a4:	605a      	str	r2, [r3, #4]
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f003 fd72 	bl	8004c90 <HAL_CAN_Init>

	//Initialize receive callbacks if there is at least one PWM CAN enabled
	if((PWM_Pin_Status & 0xF0) != 0x00)
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <PDM_CAN_Init+0x7c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <PDM_CAN_Init+0x6c>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011b8:	2102      	movs	r1, #2
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f004 fa15 	bl	80055ea <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f003 ff63 	bl	800508c <HAL_CAN_Start>
 80011c6:	4603      	mov	r3, r0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200005c4 	.word	0x200005c4

080011d4 <PDM_PWM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
HAL_StatusTypeDef PDM_PWM_CAN_Filter_Config(CAN_HandleTypeDef *hcan, PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4613      	mov	r3, r2
 80011e0:	71fb      	strb	r3, [r7, #7]
	//Double check if PWM CAN is enabled for this specific output
	if(((PWM_Pin_Status >> pwm_out_number) & 0x10) != OUTPUT_PWM_CAN_ENABLE)
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <PDM_PWM_CAN_Filter_Config+0x74>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	fa42 f303 	asr.w	r3, r2, r3
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <PDM_PWM_CAN_Filter_Config+0x26>
		return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e022      	b.n	8001240 <PDM_PWM_CAN_Filter_Config+0x6c>

	CAN_FilterTypeDef CAN_Filter_Config;

	//Sets CAN filter configuration
	CAN_Filter_Config.FilterBank = pwm_out_number;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 80011fe:	2301      	movs	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001202:	2301      	movs	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_Filter_Config.FilterIdHigh = pwm_struct->Command_Var_CAN_ID[0] >> 13;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	0b5b      	lsrs	r3, r3, #13
 800120c:	613b      	str	r3, [r7, #16]
	CAN_Filter_Config.FilterIdLow = (pwm_struct->Command_Var_CAN_ID[0] << 3) & 0xFFF8;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	b29b      	uxth	r3, r3
 8001216:	617b      	str	r3, [r7, #20]
	CAN_Filter_Config.FilterMaskIdHigh = pwm_struct->Command_Var_CAN_ID[1] >> 13;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	0b5b      	lsrs	r3, r3, #13
 800121e:	61bb      	str	r3, [r7, #24]
	CAN_Filter_Config.FilterMaskIdLow = (pwm_struct->Command_Var_CAN_ID[1] << 3) & 0xFFF8;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	b29b      	uxth	r3, r3
 8001228:	61fb      	str	r3, [r7, #28]
	CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
	CAN_Filter_Config.FilterActivation = ENABLE;
 800122e:	2301      	movs	r3, #1
 8001230:	633b      	str	r3, [r7, #48]	; 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &CAN_Filter_Config);
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f003 fe47 	bl	8004ecc <HAL_CAN_ConfigFilter>
 800123e:	4603      	mov	r3, r0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200005c4 	.word	0x200005c4

0800124c <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

	//Selects CAN transmission ID based on data transmission frequency
	switch(data_freq)
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	3b01      	subs	r3, #1
 8001260:	2b04      	cmp	r3, #4
 8001262:	d821      	bhi.n	80012a8 <PDM_CAN_Transmit_Data+0x5c>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <PDM_CAN_Transmit_Data+0x20>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	080012a1 	.word	0x080012a1
 8001270:	08001299 	.word	0x08001299
 8001274:	08001291 	.word	0x08001291
 8001278:	08001289 	.word	0x08001289
 800127c:	08001281 	.word	0x08001281
	{
	case Data_Freq_100Hz:
		CAN_Tx_Message.ExtId = 0x1E35C003;
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001282:	4a59      	ldr	r2, [pc, #356]	; (80013e8 <PDM_CAN_Transmit_Data+0x19c>)
 8001284:	605a      	str	r2, [r3, #4]
		break;
 8001286:	e011      	b.n	80012ac <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_80Hz:
		CAN_Tx_Message.ExtId = 0x1E35C004;
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 800128a:	4a58      	ldr	r2, [pc, #352]	; (80013ec <PDM_CAN_Transmit_Data+0x1a0>)
 800128c:	605a      	str	r2, [r3, #4]
		break;
 800128e:	e00d      	b.n	80012ac <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_50Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 8001290:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001292:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <PDM_CAN_Transmit_Data+0x1a4>)
 8001294:	605a      	str	r2, [r3, #4]
		break;
 8001296:	e009      	b.n	80012ac <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_25Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 8001298:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 800129a:	4a55      	ldr	r2, [pc, #340]	; (80013f0 <PDM_CAN_Transmit_Data+0x1a4>)
 800129c:	605a      	str	r2, [r3, #4]
		break;
 800129e:	e005      	b.n	80012ac <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_10Hz:
		CAN_Tx_Message.ExtId = 0x1E35C006;
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012a2:	4a54      	ldr	r2, [pc, #336]	; (80013f4 <PDM_CAN_Transmit_Data+0x1a8>)
 80012a4:	605a      	str	r2, [r3, #4]
		break;
 80012a6:	e001      	b.n	80012ac <PDM_CAN_Transmit_Data+0x60>
	default:
		return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e096      	b.n	80013da <PDM_CAN_Transmit_Data+0x18e>
	}

	//Prepares transmission header
	CAN_Tx_Message.DLC = 0;
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
	CAN_Tx_Message.IDE = CAN_ID_EXT;
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	609a      	str	r2, [r3, #8]
	CAN_Tx_Message.RTR = CAN_RTR_DATA;
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
	CAN_Tx_Message.TransmitGlobalTime = DISABLE;
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73bb      	strb	r3, [r7, #14]
 80012c8:	e068      	b.n	800139c <PDM_CAN_Transmit_Data+0x150>
	{
		//Place data and ID inside transmission buffer if the data has the same frequency as selected
		if(Data_Freq_Buffer[i] == data_freq)
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	4a4a      	ldr	r2, [pc, #296]	; (80013f8 <PDM_CAN_Transmit_Data+0x1ac>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d141      	bne.n	800135a <PDM_CAN_Transmit_Data+0x10e>
		{
			CAN_Tx_Data[CAN_Tx_Message.DLC]		 = Data_ID_Buffer[i] >> 8;
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	4a48      	ldr	r2, [pc, #288]	; (80013fc <PDM_CAN_Transmit_Data+0x1b0>)
 80012da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	b2d1      	uxtb	r1, r2
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 80012ea:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 1] |= Data_ID_Buffer[i] & 0xFF;
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a43      	ldr	r2, [pc, #268]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	4940      	ldr	r1, [pc, #256]	; (80013fc <PDM_CAN_Transmit_Data+0x1b0>)
 80012fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b25a      	sxtb	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	b2d1      	uxtb	r1, r2
 800130e:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 8001310:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 2]  = Data_Buffer[i] >> 8;
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	4a3b      	ldr	r2, [pc, #236]	; (8001404 <PDM_CAN_Transmit_Data+0x1b8>)
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	3302      	adds	r3, #2
 8001324:	b2d1      	uxtb	r1, r2
 8001326:	4a36      	ldr	r2, [pc, #216]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 8001328:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 3] |= Data_Buffer[i] & 0xFF;
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	3303      	adds	r3, #3
 8001330:	4a33      	ldr	r2, [pc, #204]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	b25a      	sxtb	r2, r3
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	4932      	ldr	r1, [pc, #200]	; (8001404 <PDM_CAN_Transmit_Data+0x1b8>)
 800133a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b25a      	sxtb	r2, r3
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	3303      	adds	r3, #3
 800134a:	b2d1      	uxtb	r1, r2
 800134c:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 800134e:	54d1      	strb	r1, [r2, r3]

			CAN_Tx_Message.DLC += 4;
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	3304      	adds	r3, #4
 8001356:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001358:	6113      	str	r3, [r2, #16]
		}

		//Sends transmission buffer if it's full
		if(CAN_Tx_Message.DLC == 8)
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d119      	bne.n	8001396 <PDM_CAN_Transmit_Data+0x14a>
		{
			ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <PDM_CAN_Transmit_Data+0x1bc>)
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 8001366:	491f      	ldr	r1, [pc, #124]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 ff1c 	bl	80051a6 <HAL_CAN_AddTxMessage>
 800136e:	4603      	mov	r3, r0
 8001370:	73fb      	strb	r3, [r7, #15]

			//Wait Transmission finish
			for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001372:	2300      	movs	r3, #0
 8001374:	737b      	strb	r3, [r7, #13]
 8001376:	e002      	b.n	800137e <PDM_CAN_Transmit_Data+0x132>
 8001378:	7b7b      	ldrb	r3, [r7, #13]
 800137a:	3301      	adds	r3, #1
 800137c:	737b      	strb	r3, [r7, #13]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f003 ffec 	bl	800535c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b03      	cmp	r3, #3
 8001388:	d002      	beq.n	8001390 <PDM_CAN_Transmit_Data+0x144>
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d9f3      	bls.n	8001378 <PDM_CAN_Transmit_Data+0x12c>

			CAN_Tx_Message.DLC = 0;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	73bb      	strb	r3, [r7, #14]
 800139c:	7bbb      	ldrb	r3, [r7, #14]
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	d993      	bls.n	80012ca <PDM_CAN_Transmit_Data+0x7e>
		}
	}

	//If there is only one data channel not sent, send it alone
	if(CAN_Tx_Message.DLC == 4)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d116      	bne.n	80013d8 <PDM_CAN_Transmit_Data+0x18c>
	{
		ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <PDM_CAN_Transmit_Data+0x1bc>)
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <PDM_CAN_Transmit_Data+0x1b4>)
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <PDM_CAN_Transmit_Data+0x198>)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f003 fef8 	bl	80051a6 <HAL_CAN_AddTxMessage>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80013ba:	2300      	movs	r3, #0
 80013bc:	733b      	strb	r3, [r7, #12]
 80013be:	e002      	b.n	80013c6 <PDM_CAN_Transmit_Data+0x17a>
 80013c0:	7b3b      	ldrb	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	733b      	strb	r3, [r7, #12]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f003 ffc8 	bl	800535c <HAL_CAN_GetTxMailboxesFreeLevel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d002      	beq.n	80013d8 <PDM_CAN_Transmit_Data+0x18c>
 80013d2:	7b3b      	ldrb	r3, [r7, #12]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d9f3      	bls.n	80013c0 <PDM_CAN_Transmit_Data+0x174>
	}

	return ret_val;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200004ec 	.word	0x200004ec
 80013e8:	1e35c003 	.word	0x1e35c003
 80013ec:	1e35c004 	.word	0x1e35c004
 80013f0:	1e35c005 	.word	0x1e35c005
 80013f4:	1e35c006 	.word	0x1e35c006
 80013f8:	20000518 	.word	0x20000518
 80013fc:	20000574 	.word	0x20000574
 8001400:	200004c4 	.word	0x200004c4
 8001404:	20000538 	.word	0x20000538
 8001408:	200004cc 	.word	0x200004cc

0800140c <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
	uint8_t receive_flag = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
	uint32_t rx_id = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]

	if(CAN_Rx_Message.IDE == CAN_ID_STD)
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <PDM_CAN_Process_Rx_Data+0x184>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <PDM_CAN_Process_Rx_Data+0x1e>
	{
		rx_id = CAN_Rx_Message.StdId;
 8001422:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <PDM_CAN_Process_Rx_Data+0x184>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	e002      	b.n	8001430 <PDM_CAN_Process_Rx_Data+0x24>
	}else{
		rx_id = CAN_Rx_Message.ExtId;
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <PDM_CAN_Process_Rx_Data+0x184>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i = 0; i < 4; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	e0a4      	b.n	8001580 <PDM_CAN_Process_Rx_Data+0x174>
	{
		//Checks if received message contains data to any PWN CAN output
		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[0])
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a56      	ldr	r2, [pc, #344]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 800143a:	f44f 710a 	mov.w	r1, #552	; 0x228
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	3314      	adds	r3, #20
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	429a      	cmp	r2, r3
 800144c:	d13c      	bne.n	80014c8 <PDM_CAN_Process_Rx_Data+0xbc>
		{
			PWM_Pins[i].Command_Var[0]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0]]) << 8;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a50      	ldr	r2, [pc, #320]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001452:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	3310      	adds	r3, #16
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001464:	5c9b      	ldrb	r3, [r3, r2]
 8001466:	021a      	lsls	r2, r3, #8
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	b210      	sxth	r0, r2
 800146c:	4a49      	ldr	r2, [pc, #292]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 800146e:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4413      	add	r3, r2
 8001478:	331e      	adds	r3, #30
 800147a:	4602      	mov	r2, r0
 800147c:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[0] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0] + 1]) & 0xFF;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4a44      	ldr	r2, [pc, #272]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001482:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	331e      	adds	r3, #30
 800148e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001496:	f44f 700a 	mov.w	r0, #552	; 0x228
 800149a:	fb00 f303 	mul.w	r3, r0, r3
 800149e:	4413      	add	r3, r2
 80014a0:	3310      	adds	r3, #16
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a3c      	ldr	r2, [pc, #240]	; (8001598 <PDM_CAN_Process_Rx_Data+0x18c>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	b210      	sxth	r0, r2
 80014b2:	4a38      	ldr	r2, [pc, #224]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 80014b4:	f44f 710a 	mov.w	r1, #552	; 0x228
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	331e      	adds	r3, #30
 80014c0:	4602      	mov	r2, r0
 80014c2:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
		}

		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[1])
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4a32      	ldr	r2, [pc, #200]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 80014cc:	f44f 710a 	mov.w	r1, #552	; 0x228
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	3318      	adds	r3, #24
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d13c      	bne.n	800155a <PDM_CAN_Process_Rx_Data+0x14e>
		{
			PWM_Pins[i].Command_Var[1]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1]]) << 8;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 80014e4:	f44f 710a 	mov.w	r1, #552	; 0x228
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3311      	adds	r3, #17
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <PDM_CAN_Process_Rx_Data+0x18c>)
 80014f6:	5c9b      	ldrb	r3, [r3, r2]
 80014f8:	021a      	lsls	r2, r3, #8
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	b210      	sxth	r0, r2
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001500:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	3320      	adds	r3, #32
 800150c:	4602      	mov	r2, r0
 800150e:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[1] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1] + 1]) & 0xFF;
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4a20      	ldr	r2, [pc, #128]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001514:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	3320      	adds	r3, #32
 8001520:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001528:	f44f 700a 	mov.w	r0, #552	; 0x228
 800152c:	fb00 f303 	mul.w	r3, r0, r3
 8001530:	4413      	add	r3, r2
 8001532:	3311      	adds	r3, #17
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <PDM_CAN_Process_Rx_Data+0x18c>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	b21a      	sxth	r2, r3
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	430a      	orrs	r2, r1
 8001542:	b210      	sxth	r0, r2
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 8001546:	f44f 710a 	mov.w	r1, #552	; 0x228
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	3320      	adds	r3, #32
 8001552:	4602      	mov	r2, r0
 8001554:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
		}

		//If the received message contains data to any PWM CAN output, set it's duty cycle
		if(receive_flag == 1)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10c      	bne.n	800157a <PDM_CAN_Process_Rx_Data+0x16e>
		{
			PDM_PWM_Output_Process(&PWM_Pins[i], i);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <PDM_CAN_Process_Rx_Data+0x188>)
 800156c:	4413      	add	r3, r2
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f001 ffac 	bl	80034d0 <PDM_PWM_Output_Process>
			return;
 8001578:	e007      	b.n	800158a <PDM_CAN_Process_Rx_Data+0x17e>
	for(uint8_t i = 0; i < 4; i++)
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	3301      	adds	r3, #1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b03      	cmp	r3, #3
 8001584:	f67f af57 	bls.w	8001436 <PDM_CAN_Process_Rx_Data+0x2a>
		}
	}

	return;
 8001588:	bf00      	nop
}
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200004d0 	.word	0x200004d0
 8001594:	20000688 	.word	0x20000688
 8001598:	200004bc 	.word	0x200004bc

0800159c <PDM_Load_Config_Buffer>:

//Use to load pin, current limit and basic pwm control into a buffer
//uint8_t *data_buffer - buffer to receive configuration
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Load_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 800159c:	b4b0      	push	{r4, r5, r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	f640 028c 	movw	r2, #2188	; 0x88c
 80015ae:	4293      	cmp	r3, r2
 80015b0:	f040 833b 	bne.w	8001c2a <PDM_Load_Config_Buffer+0x68e>
		return;

	uint16_t data_index = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	82fb      	strh	r3, [r7, #22]

	//Loads output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	82bb      	strh	r3, [r7, #20]
 80015bc:	e0e4      	b.n	8001788 <PDM_Load_Config_Buffer+0x1ec>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 80015be:	2300      	movs	r3, #0
 80015c0:	74fb      	strb	r3, [r7, #19]
 80015c2:	e073      	b.n	80016ac <PDM_Load_Config_Buffer+0x110>
		{
			Output_Pin[i].Enabled_Inputs[j]  = data_buffer[data_index++] << 8;
 80015c4:	8afb      	ldrh	r3, [r7, #22]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	82fa      	strh	r2, [r7, #22]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	8aba      	ldrh	r2, [r7, #20]
 80015d6:	7cf9      	ldrb	r1, [r7, #19]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b29c      	uxth	r4, r3
 80015dc:	488b      	ldr	r0, [pc, #556]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	4622      	mov	r2, r4
 80015ea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			Output_Pin[i].Enabled_Inputs[j] |= data_buffer[data_index++] & 0xFF;
 80015ee:	8afb      	ldrh	r3, [r7, #22]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	82fa      	strh	r2, [r7, #22]
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461c      	mov	r4, r3
 80015fe:	8aba      	ldrh	r2, [r7, #20]
 8001600:	7cf9      	ldrb	r1, [r7, #19]
 8001602:	4882      	ldr	r0, [pc, #520]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	440b      	add	r3, r1
 800160e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001612:	b21a      	sxth	r2, r3
 8001614:	b223      	sxth	r3, r4
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	8aba      	ldrh	r2, [r7, #20]
 800161c:	7cf9      	ldrb	r1, [r7, #19]
 800161e:	b29c      	uxth	r4, r3
 8001620:	487a      	ldr	r0, [pc, #488]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	4622      	mov	r2, r4
 800162e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

			Output_Pin[i].Input_Levels[j]	 = data_buffer[data_index++] << 8;
 8001632:	8afb      	ldrh	r3, [r7, #22]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	82fa      	strh	r2, [r7, #22]
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b29b      	uxth	r3, r3
 8001642:	8aba      	ldrh	r2, [r7, #20]
 8001644:	7cf9      	ldrb	r1, [r7, #19]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b29c      	uxth	r4, r3
 800164a:	4870      	ldr	r0, [pc, #448]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	440b      	add	r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4403      	add	r3, r0
 800165a:	4622      	mov	r2, r4
 800165c:	809a      	strh	r2, [r3, #4]
			Output_Pin[i].Input_Levels[j]	|= data_buffer[data_index++] & 0xFF;
 800165e:	8afb      	ldrh	r3, [r7, #22]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	82fa      	strh	r2, [r7, #22]
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461c      	mov	r4, r3
 800166e:	8aba      	ldrh	r2, [r7, #20]
 8001670:	7cf9      	ldrb	r1, [r7, #19]
 8001672:	4866      	ldr	r0, [pc, #408]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	440b      	add	r3, r1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4403      	add	r3, r0
 8001682:	889b      	ldrh	r3, [r3, #4]
 8001684:	b21a      	sxth	r2, r3
 8001686:	b223      	sxth	r3, r4
 8001688:	4313      	orrs	r3, r2
 800168a:	b21b      	sxth	r3, r3
 800168c:	8aba      	ldrh	r2, [r7, #20]
 800168e:	7cf9      	ldrb	r1, [r7, #19]
 8001690:	b29c      	uxth	r4, r3
 8001692:	485e      	ldr	r0, [pc, #376]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4403      	add	r3, r0
 80016a2:	4622      	mov	r2, r4
 80016a4:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 2 ; j++)
 80016a6:	7cfb      	ldrb	r3, [r7, #19]
 80016a8:	3301      	adds	r3, #1
 80016aa:	74fb      	strb	r3, [r7, #19]
 80016ac:	7cfb      	ldrb	r3, [r7, #19]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d988      	bls.n	80015c4 <PDM_Load_Config_Buffer+0x28>
		}
		Output_Pin[i].Current_Thresholds   = data_buffer[data_index++] << 8;
 80016b2:	8afb      	ldrh	r3, [r7, #22]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	82fa      	strh	r2, [r7, #22]
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	8aba      	ldrh	r2, [r7, #20]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b298      	uxth	r0, r3
 80016c8:	4950      	ldr	r1, [pc, #320]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3308      	adds	r3, #8
 80016d6:	4602      	mov	r2, r0
 80016d8:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Current_Thresholds  |= data_buffer[data_index++] & 0xFF;
 80016da:	8afb      	ldrh	r3, [r7, #22]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	82fa      	strh	r2, [r7, #22]
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	8aba      	ldrh	r2, [r7, #20]
 80016ec:	4947      	ldr	r1, [pc, #284]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3308      	adds	r3, #8
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	b203      	sxth	r3, r0
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	8aba      	ldrh	r2, [r7, #20]
 8001706:	b298      	uxth	r0, r3
 8001708:	4940      	ldr	r1, [pc, #256]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3308      	adds	r3, #8
 8001716:	4602      	mov	r2, r0
 8001718:	801a      	strh	r2, [r3, #0]

		Output_Pin[i].Timeout_Output_Fuse  = data_buffer[data_index++] << 8;
 800171a:	8afb      	ldrh	r3, [r7, #22]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	82fa      	strh	r2, [r7, #22]
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	8aba      	ldrh	r2, [r7, #20]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b298      	uxth	r0, r3
 8001730:	4936      	ldr	r1, [pc, #216]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	330a      	adds	r3, #10
 800173e:	4602      	mov	r2, r0
 8001740:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Timeout_Output_Fuse |= data_buffer[data_index++] & 0xFF;
 8001742:	8afb      	ldrh	r3, [r7, #22]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	82fa      	strh	r2, [r7, #22]
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	8aba      	ldrh	r2, [r7, #20]
 8001754:	492d      	ldr	r1, [pc, #180]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	330a      	adds	r3, #10
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b21a      	sxth	r2, r3
 8001766:	b203      	sxth	r3, r0
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	8aba      	ldrh	r2, [r7, #20]
 800176e:	b298      	uxth	r0, r3
 8001770:	4926      	ldr	r1, [pc, #152]	; (800180c <PDM_Load_Config_Buffer+0x270>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	330a      	adds	r3, #10
 800177e:	4602      	mov	r2, r0
 8001780:	801a      	strh	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001782:	8abb      	ldrh	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	82bb      	strh	r3, [r7, #20]
 8001788:	8abb      	ldrh	r3, [r7, #20]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f af17 	bls.w	80015be <PDM_Load_Config_Buffer+0x22>
	}

	//Loads each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	823b      	strh	r3, [r7, #16]
 8001794:	e00c      	b.n	80017b0 <PDM_Load_Config_Buffer+0x214>
	{
		Data_Freq_Buffer[i] = data_buffer[data_index++];
 8001796:	8afb      	ldrh	r3, [r7, #22]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	82fa      	strh	r2, [r7, #22]
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	441a      	add	r2, r3
 80017a2:	8a3b      	ldrh	r3, [r7, #16]
 80017a4:	7811      	ldrb	r1, [r2, #0]
 80017a6:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <PDM_Load_Config_Buffer+0x274>)
 80017a8:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80017aa:	8a3b      	ldrh	r3, [r7, #16]
 80017ac:	3301      	adds	r3, #1
 80017ae:	823b      	strh	r3, [r7, #16]
 80017b0:	8a3b      	ldrh	r3, [r7, #16]
 80017b2:	2b1d      	cmp	r3, #29
 80017b4:	d9ef      	bls.n	8001796 <PDM_Load_Config_Buffer+0x1fa>
	}

	//Loads CAN bus baud rate
	CAN_Baud_Rate = data_buffer[data_index++];
 80017b6:	8afb      	ldrh	r3, [r7, #22]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	82fa      	strh	r2, [r7, #22]
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <PDM_Load_Config_Buffer+0x278>)
 80017c6:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs general configuration (PWM CAN and PWM enabled)
	PWM_Pin_Status = data_buffer[data_index++];
 80017c8:	8afb      	ldrh	r3, [r7, #22]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	82fa      	strh	r2, [r7, #22]
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <PDM_Load_Config_Buffer+0x27c>)
 80017d8:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	81fb      	strh	r3, [r7, #14]
 80017de:	e1b6      	b.n	8001b4e <PDM_Load_Config_Buffer+0x5b2>
	{
		PWM_Pins[i].PWM_Frequency = data_buffer[data_index++];
 80017e0:	8afb      	ldrh	r3, [r7, #22]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	82fa      	strh	r2, [r7, #22]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	b290      	uxth	r0, r2
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <PDM_Load_Config_Buffer+0x280>)
 80017f4:	f44f 710a 	mov.w	r1, #552	; 0x228
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3302      	adds	r3, #2
 8001800:	4602      	mov	r2, r0
 8001802:	801a      	strh	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001804:	2300      	movs	r3, #0
 8001806:	737b      	strb	r3, [r7, #13]
 8001808:	e081      	b.n	800190e <PDM_Load_Config_Buffer+0x372>
 800180a:	bf00      	nop
 800180c:	200005c8 	.word	0x200005c8
 8001810:	20000518 	.word	0x20000518
 8001814:	200004b8 	.word	0x200004b8
 8001818:	200005c4 	.word	0x200005c4
 800181c:	20000688 	.word	0x20000688
		{
			PWM_Pins[i].Input_DC_Preset_Enable[j]  = data_buffer[data_index++] << 8;
 8001820:	8afb      	ldrh	r3, [r7, #22]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	82fa      	strh	r2, [r7, #22]
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b299      	uxth	r1, r3
 8001830:	89fa      	ldrh	r2, [r7, #14]
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	0209      	lsls	r1, r1, #8
 8001836:	b28c      	uxth	r4, r1
 8001838:	4938      	ldr	r1, [pc, #224]	; (800191c <PDM_Load_Config_Buffer+0x380>)
 800183a:	f44f 708a 	mov.w	r0, #276	; 0x114
 800183e:	fb00 f202 	mul.w	r2, r0, r2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	440b      	add	r3, r1
 8001848:	4622      	mov	r2, r4
 800184a:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset_Enable[j] |= data_buffer[data_index++] & 0xFF;
 800184c:	8afb      	ldrh	r3, [r7, #22]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	82fa      	strh	r2, [r7, #22]
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461c      	mov	r4, r3
 800185c:	89fa      	ldrh	r2, [r7, #14]
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	492e      	ldr	r1, [pc, #184]	; (800191c <PDM_Load_Config_Buffer+0x380>)
 8001862:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001866:	fb00 f202 	mul.w	r2, r0, r2
 800186a:	4413      	add	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	440b      	add	r3, r1
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	b21a      	sxth	r2, r3
 8001874:	b223      	sxth	r3, r4
 8001876:	4313      	orrs	r3, r2
 8001878:	b219      	sxth	r1, r3
 800187a:	89fa      	ldrh	r2, [r7, #14]
 800187c:	7b7b      	ldrb	r3, [r7, #13]
 800187e:	b28c      	uxth	r4, r1
 8001880:	4926      	ldr	r1, [pc, #152]	; (800191c <PDM_Load_Config_Buffer+0x380>)
 8001882:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001886:	fb00 f202 	mul.w	r2, r0, r2
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	440b      	add	r3, r1
 8001890:	4622      	mov	r2, r4
 8001892:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Input_DC_Preset[j] 		   = data_buffer[data_index++] << 8;
 8001894:	8afb      	ldrh	r3, [r7, #22]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	82fa      	strh	r2, [r7, #22]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b299      	uxth	r1, r3
 80018a4:	89fa      	ldrh	r2, [r7, #14]
 80018a6:	7b7b      	ldrb	r3, [r7, #13]
 80018a8:	0209      	lsls	r1, r1, #8
 80018aa:	b28c      	uxth	r4, r1
 80018ac:	491b      	ldr	r1, [pc, #108]	; (800191c <PDM_Load_Config_Buffer+0x380>)
 80018ae:	f44f 708a 	mov.w	r0, #276	; 0x114
 80018b2:	fb00 f202 	mul.w	r2, r0, r2
 80018b6:	4413      	add	r3, r2
 80018b8:	3304      	adds	r3, #4
 80018ba:	4622      	mov	r2, r4
 80018bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PWM_Pins[i].Input_DC_Preset[j] 		  |= data_buffer[data_index++] & 0xFF;
 80018c0:	8afb      	ldrh	r3, [r7, #22]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	82fa      	strh	r2, [r7, #22]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461c      	mov	r4, r3
 80018d0:	89fa      	ldrh	r2, [r7, #14]
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	4911      	ldr	r1, [pc, #68]	; (800191c <PDM_Load_Config_Buffer+0x380>)
 80018d6:	f44f 708a 	mov.w	r0, #276	; 0x114
 80018da:	fb00 f202 	mul.w	r2, r0, r2
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	b223      	sxth	r3, r4
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b219      	sxth	r1, r3
 80018ee:	89fa      	ldrh	r2, [r7, #14]
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	b28c      	uxth	r4, r1
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <PDM_Load_Config_Buffer+0x380>)
 80018f6:	f44f 708a 	mov.w	r0, #276	; 0x114
 80018fa:	fb00 f202 	mul.w	r2, r0, r2
 80018fe:	4413      	add	r3, r2
 8001900:	3304      	adds	r3, #4
 8001902:	4622      	mov	r2, r4
 8001904:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t j = 0; j < 4; j++)
 8001908:	7b7b      	ldrb	r3, [r7, #13]
 800190a:	3301      	adds	r3, #1
 800190c:	737b      	strb	r3, [r7, #13]
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d985      	bls.n	8001820 <PDM_Load_Config_Buffer+0x284>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001914:	2300      	movs	r3, #0
 8001916:	733b      	strb	r3, [r7, #12]
 8001918:	e112      	b.n	8001b40 <PDM_Load_Config_Buffer+0x5a4>
 800191a:	bf00      	nop
 800191c:	20000688 	.word	0x20000688
		{
			PWM_Pins[i].Duty_Cycle_Preset[j]	 = data_buffer[data_index++] << 8;
 8001920:	8afb      	ldrh	r3, [r7, #22]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	82fa      	strh	r2, [r7, #22]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b299      	uxth	r1, r3
 8001930:	89fa      	ldrh	r2, [r7, #14]
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	0209      	lsls	r1, r1, #8
 8001936:	b28c      	uxth	r4, r1
 8001938:	498b      	ldr	r1, [pc, #556]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 800193a:	f44f 708a 	mov.w	r0, #276	; 0x114
 800193e:	fb00 f202 	mul.w	r2, r0, r2
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	440b      	add	r3, r1
 800194a:	4622      	mov	r2, r4
 800194c:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Duty_Cycle_Preset[j]	|= data_buffer[data_index++] & 0xFF;
 800194e:	8afb      	ldrh	r3, [r7, #22]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	82fa      	strh	r2, [r7, #22]
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461c      	mov	r4, r3
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	7b3b      	ldrb	r3, [r7, #12]
 8001962:	4981      	ldr	r1, [pc, #516]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001964:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001968:	fb00 f202 	mul.w	r2, r0, r2
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	b21a      	sxth	r2, r3
 8001978:	b223      	sxth	r3, r4
 800197a:	4313      	orrs	r3, r2
 800197c:	b219      	sxth	r1, r3
 800197e:	89fa      	ldrh	r2, [r7, #14]
 8001980:	7b3b      	ldrb	r3, [r7, #12]
 8001982:	b28c      	uxth	r4, r1
 8001984:	4978      	ldr	r1, [pc, #480]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001986:	f44f 708a 	mov.w	r0, #276	; 0x114
 800198a:	fb00 f202 	mul.w	r2, r0, r2
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	440b      	add	r3, r1
 8001996:	4622      	mov	r2, r4
 8001998:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Command_Var_Position[j]  = data_buffer[data_index++];
 800199a:	8afb      	ldrh	r3, [r7, #22]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	82fa      	strh	r2, [r7, #22]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	1899      	adds	r1, r3, r2
 80019a6:	89fa      	ldrh	r2, [r7, #14]
 80019a8:	7b3b      	ldrb	r3, [r7, #12]
 80019aa:	780c      	ldrb	r4, [r1, #0]
 80019ac:	496e      	ldr	r1, [pc, #440]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 80019ae:	f44f 700a 	mov.w	r0, #552	; 0x228
 80019b2:	fb00 f202 	mul.w	r2, r0, r2
 80019b6:	440a      	add	r2, r1
 80019b8:	4413      	add	r3, r2
 80019ba:	3310      	adds	r3, #16
 80019bc:	4622      	mov	r2, r4
 80019be:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_CAN_ID[j]	 = data_buffer[data_index++] << 24;
 80019c0:	8afb      	ldrh	r3, [r7, #22]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	82fa      	strh	r2, [r7, #22]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	0619      	lsls	r1, r3, #24
 80019d0:	89fa      	ldrh	r2, [r7, #14]
 80019d2:	7b3b      	ldrb	r3, [r7, #12]
 80019d4:	460c      	mov	r4, r1
 80019d6:	4964      	ldr	r1, [pc, #400]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 80019d8:	208a      	movs	r0, #138	; 0x8a
 80019da:	fb00 f202 	mul.w	r2, r0, r2
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	605c      	str	r4, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 16;
 80019e8:	8afb      	ldrh	r3, [r7, #22]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	82fa      	strh	r2, [r7, #22]
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	041c      	lsls	r4, r3, #16
 80019f8:	89fa      	ldrh	r2, [r7, #14]
 80019fa:	7b3b      	ldrb	r3, [r7, #12]
 80019fc:	495a      	ldr	r1, [pc, #360]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 80019fe:	208a      	movs	r0, #138	; 0x8a
 8001a00:	fb00 f202 	mul.w	r2, r0, r2
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4620      	mov	r0, r4
 8001a10:	89f9      	ldrh	r1, [r7, #14]
 8001a12:	7b3b      	ldrb	r3, [r7, #12]
 8001a14:	4302      	orrs	r2, r0
 8001a16:	4854      	ldr	r0, [pc, #336]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001a18:	248a      	movs	r4, #138	; 0x8a
 8001a1a:	fb04 f101 	mul.w	r1, r4, r1
 8001a1e:	440b      	add	r3, r1
 8001a20:	3304      	adds	r3, #4
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4403      	add	r3, r0
 8001a26:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 8;
 8001a28:	8afb      	ldrh	r3, [r7, #22]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	82fa      	strh	r2, [r7, #22]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	021c      	lsls	r4, r3, #8
 8001a38:	89fa      	ldrh	r2, [r7, #14]
 8001a3a:	7b3b      	ldrb	r3, [r7, #12]
 8001a3c:	494a      	ldr	r1, [pc, #296]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001a3e:	208a      	movs	r0, #138	; 0x8a
 8001a40:	fb00 f202 	mul.w	r2, r0, r2
 8001a44:	4413      	add	r3, r2
 8001a46:	3304      	adds	r3, #4
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4620      	mov	r0, r4
 8001a50:	89f9      	ldrh	r1, [r7, #14]
 8001a52:	7b3b      	ldrb	r3, [r7, #12]
 8001a54:	4302      	orrs	r2, r0
 8001a56:	4844      	ldr	r0, [pc, #272]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001a58:	248a      	movs	r4, #138	; 0x8a
 8001a5a:	fb04 f101 	mul.w	r1, r4, r1
 8001a5e:	440b      	add	r3, r1
 8001a60:	3304      	adds	r3, #4
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4403      	add	r3, r0
 8001a66:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] & 0xFF;
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	82fa      	strh	r2, [r7, #22]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461c      	mov	r4, r3
 8001a78:	89fa      	ldrh	r2, [r7, #14]
 8001a7a:	7b3b      	ldrb	r3, [r7, #12]
 8001a7c:	493a      	ldr	r1, [pc, #232]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001a7e:	208a      	movs	r0, #138	; 0x8a
 8001a80:	fb00 f202 	mul.w	r2, r0, r2
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4620      	mov	r0, r4
 8001a90:	89f9      	ldrh	r1, [r7, #14]
 8001a92:	7b3b      	ldrb	r3, [r7, #12]
 8001a94:	4302      	orrs	r2, r0
 8001a96:	4834      	ldr	r0, [pc, #208]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001a98:	248a      	movs	r4, #138	; 0x8a
 8001a9a:	fb04 f101 	mul.w	r1, r4, r1
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4403      	add	r3, r0
 8001aa6:	605a      	str	r2, [r3, #4]

			PWM_Pins[i].Map_Lengths[j]			 = data_buffer[data_index++] & 0xFF;
 8001aa8:	8afb      	ldrh	r3, [r7, #22]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	82fa      	strh	r2, [r7, #22]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	1899      	adds	r1, r3, r2
 8001ab4:	89fa      	ldrh	r2, [r7, #14]
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	780c      	ldrb	r4, [r1, #0]
 8001aba:	492b      	ldr	r1, [pc, #172]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001abc:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001ac0:	fb00 f202 	mul.w	r2, r0, r2
 8001ac4:	440a      	add	r2, r1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	331c      	adds	r3, #28
 8001aca:	4622      	mov	r2, r4
 8001acc:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_Lim[j][0]	 = data_buffer[data_index++] << 8;
 8001ace:	8afb      	ldrh	r3, [r7, #22]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	82fa      	strh	r2, [r7, #22]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	0219      	lsls	r1, r3, #8
 8001ade:	89fa      	ldrh	r2, [r7, #14]
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b20c      	sxth	r4, r1
 8001ae4:	4920      	ldr	r1, [pc, #128]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001ae6:	208a      	movs	r0, #138	; 0x8a
 8001ae8:	fb00 f202 	mul.w	r2, r0, r2
 8001aec:	4413      	add	r3, r2
 8001aee:	3308      	adds	r3, #8
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	4622      	mov	r2, r4
 8001af6:	805a      	strh	r2, [r3, #2]
			PWM_Pins[i].Command_Var_Lim[j][1]	|= data_buffer[data_index++] & 0xFF;
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	82fa      	strh	r2, [r7, #22]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461c      	mov	r4, r3
 8001b08:	89fa      	ldrh	r2, [r7, #14]
 8001b0a:	7b3b      	ldrb	r3, [r7, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001b0e:	208a      	movs	r0, #138	; 0x8a
 8001b10:	fb00 f202 	mul.w	r2, r0, r2
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f9b3 0024 	ldrsh.w	r0, [r3, #36]	; 0x24
 8001b1e:	b221      	sxth	r1, r4
 8001b20:	89fa      	ldrh	r2, [r7, #14]
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	4301      	orrs	r1, r0
 8001b26:	b20c      	sxth	r4, r1
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <PDM_Load_Config_Buffer+0x5cc>)
 8001b2a:	208a      	movs	r0, #138	; 0x8a
 8001b2c:	fb00 f202 	mul.w	r2, r0, r2
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	4622      	mov	r2, r4
 8001b38:	849a      	strh	r2, [r3, #36]	; 0x24
		for(uint8_t j = 0; j < 2; j++)
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	733b      	strb	r3, [r7, #12]
 8001b40:	7b3b      	ldrb	r3, [r7, #12]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f67f aeec 	bls.w	8001920 <PDM_Load_Config_Buffer+0x384>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	81fb      	strh	r3, [r7, #14]
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	f67f ae45 	bls.w	80017e0 <PDM_Load_Config_Buffer+0x244>
		}
	}

	//Loads PWM 3D maps
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	817b      	strh	r3, [r7, #10]
 8001b5a:	e062      	b.n	8001c22 <PDM_Load_Config_Buffer+0x686>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	727b      	strb	r3, [r7, #9]
 8001b60:	e059      	b.n	8001c16 <PDM_Load_Config_Buffer+0x67a>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	723b      	strb	r3, [r7, #8]
 8001b66:	e050      	b.n	8001c0a <PDM_Load_Config_Buffer+0x66e>
 8001b68:	20000688 	.word	0x20000688
			{
				PWM_Pins[i].Duty_Cycle_Map[j][k]  = data_buffer[data_index++] << 8;
 8001b6c:	8afb      	ldrh	r3, [r7, #22]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	82fa      	strh	r2, [r7, #22]
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	8978      	ldrh	r0, [r7, #10]
 8001b7e:	7a7a      	ldrb	r2, [r7, #9]
 8001b80:	7a39      	ldrb	r1, [r7, #8]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b29d      	uxth	r5, r3
 8001b86:	4c2b      	ldr	r4, [pc, #172]	; (8001c34 <PDM_Load_Config_Buffer+0x698>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001b92:	fb00 f202 	mul.w	r2, r0, r2
 8001b96:	4413      	add	r3, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3330      	adds	r3, #48	; 0x30
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4423      	add	r3, r4
 8001ba0:	462a      	mov	r2, r5
 8001ba2:	80da      	strh	r2, [r3, #6]
				PWM_Pins[i].Duty_Cycle_Map[j][k] |= data_buffer[data_index++] & 0xFF;
 8001ba4:	8afb      	ldrh	r3, [r7, #22]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	82fa      	strh	r2, [r7, #22]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	8978      	ldrh	r0, [r7, #10]
 8001bb6:	7a7a      	ldrb	r2, [r7, #9]
 8001bb8:	7a39      	ldrb	r1, [r7, #8]
 8001bba:	4c1e      	ldr	r4, [pc, #120]	; (8001c34 <PDM_Load_Config_Buffer+0x698>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001bc6:	fb00 f202 	mul.w	r2, r0, r2
 8001bca:	4413      	add	r3, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3330      	adds	r3, #48	; 0x30
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4423      	add	r3, r4
 8001bd4:	88db      	ldrh	r3, [r3, #6]
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	b22b      	sxth	r3, r5
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	8978      	ldrh	r0, [r7, #10]
 8001be0:	7a7a      	ldrb	r2, [r7, #9]
 8001be2:	7a39      	ldrb	r1, [r7, #8]
 8001be4:	b29d      	uxth	r5, r3
 8001be6:	4c13      	ldr	r4, [pc, #76]	; (8001c34 <PDM_Load_Config_Buffer+0x698>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001bf2:	fb00 f202 	mul.w	r2, r0, r2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3330      	adds	r3, #48	; 0x30
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4423      	add	r3, r4
 8001c00:	462a      	mov	r2, r5
 8001c02:	80da      	strh	r2, [r3, #6]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001c04:	7a3b      	ldrb	r3, [r7, #8]
 8001c06:	3301      	adds	r3, #1
 8001c08:	723b      	strb	r3, [r7, #8]
 8001c0a:	7a3b      	ldrb	r3, [r7, #8]
 8001c0c:	2b0e      	cmp	r3, #14
 8001c0e:	d9ad      	bls.n	8001b6c <PDM_Load_Config_Buffer+0x5d0>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	3301      	adds	r3, #1
 8001c14:	727b      	strb	r3, [r7, #9]
 8001c16:	7a7b      	ldrb	r3, [r7, #9]
 8001c18:	2b0e      	cmp	r3, #14
 8001c1a:	d9a2      	bls.n	8001b62 <PDM_Load_Config_Buffer+0x5c6>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	817b      	strh	r3, [r7, #10]
 8001c22:	897b      	ldrh	r3, [r7, #10]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d999      	bls.n	8001b5c <PDM_Load_Config_Buffer+0x5c0>
			}
		}
	}

	return;
 8001c28:	e000      	b.n	8001c2c <PDM_Load_Config_Buffer+0x690>
		return;
 8001c2a:	bf00      	nop
}
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bcb0      	pop	{r4, r5, r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000688 	.word	0x20000688

08001c38 <PDM_Write_Config_Buffer>:

//Use to write pin, current limit and basic pwm control into their respective variables
//uint8_t *data_buffer - buffer to send config
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Write_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001c38:	b490      	push	{r4, r7}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	f640 028c 	movw	r2, #2188	; 0x88c
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	f040 826f 	bne.w	800212e <PDM_Write_Config_Buffer+0x4f6>
		return;

	uint16_t data_index = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	82fb      	strh	r3, [r7, #22]

	//Writes output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	82bb      	strh	r3, [r7, #20]
 8001c58:	e0a1      	b.n	8001d9e <PDM_Write_Config_Buffer+0x166>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	74fb      	strb	r3, [r7, #19]
 8001c5e:	e050      	b.n	8001d02 <PDM_Write_Config_Buffer+0xca>
		{
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] >> 8;
 8001c60:	8aba      	ldrh	r2, [r7, #20]
 8001c62:	7cf9      	ldrb	r1, [r7, #19]
 8001c64:	489a      	ldr	r0, [pc, #616]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	440b      	add	r3, r1
 8001c70:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	8afb      	ldrh	r3, [r7, #22]
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	82f9      	strh	r1, [r7, #22]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	440b      	add	r3, r1
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] & 0xFF;
 8001c88:	8aba      	ldrh	r2, [r7, #20]
 8001c8a:	7cf9      	ldrb	r1, [r7, #19]
 8001c8c:	4890      	ldr	r0, [pc, #576]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	440b      	add	r3, r1
 8001c98:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	82f9      	strh	r1, [r7, #22]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] >> 8;
 8001cac:	8aba      	ldrh	r2, [r7, #20]
 8001cae:	7cf9      	ldrb	r1, [r7, #19]
 8001cb0:	4887      	ldr	r0, [pc, #540]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	440b      	add	r3, r1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4403      	add	r3, r0
 8001cc0:	889b      	ldrh	r3, [r3, #4]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	8afb      	ldrh	r3, [r7, #22]
 8001cc8:	1c59      	adds	r1, r3, #1
 8001cca:	82f9      	strh	r1, [r7, #22]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	440b      	add	r3, r1
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] & 0xFF;
 8001cd6:	8aba      	ldrh	r2, [r7, #20]
 8001cd8:	7cf9      	ldrb	r1, [r7, #19]
 8001cda:	487d      	ldr	r0, [pc, #500]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	440b      	add	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4403      	add	r3, r0
 8001cea:	889a      	ldrh	r2, [r3, #4]
 8001cec:	8afb      	ldrh	r3, [r7, #22]
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	82f9      	strh	r1, [r7, #22]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2 ; j++)
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	74fb      	strb	r3, [r7, #19]
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d9ab      	bls.n	8001c60 <PDM_Write_Config_Buffer+0x28>
		}
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds >> 8;
 8001d08:	8aba      	ldrh	r2, [r7, #20]
 8001d0a:	4971      	ldr	r1, [pc, #452]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3308      	adds	r3, #8
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	8afb      	ldrh	r3, [r7, #22]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	82f9      	strh	r1, [r7, #22]
 8001d24:	4619      	mov	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	440b      	add	r3, r1
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds & 0xFF;
 8001d2e:	8aba      	ldrh	r2, [r7, #20]
 8001d30:	4967      	ldr	r1, [pc, #412]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	8afb      	ldrh	r3, [r7, #22]
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	82f9      	strh	r1, [r7, #22]
 8001d46:	4619      	mov	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	440b      	add	r3, r1
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]

		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse >> 8;
 8001d50:	8aba      	ldrh	r2, [r7, #20]
 8001d52:	495f      	ldr	r1, [pc, #380]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	330a      	adds	r3, #10
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	8afb      	ldrh	r3, [r7, #22]
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	82f9      	strh	r1, [r7, #22]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	440b      	add	r3, r1
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse & 0xFF;
 8001d76:	8aba      	ldrh	r2, [r7, #20]
 8001d78:	4955      	ldr	r1, [pc, #340]	; (8001ed0 <PDM_Write_Config_Buffer+0x298>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	330a      	adds	r3, #10
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	1c59      	adds	r1, r3, #1
 8001d8c:	82f9      	strh	r1, [r7, #22]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	440b      	add	r3, r1
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001d98:	8abb      	ldrh	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	82bb      	strh	r3, [r7, #20]
 8001d9e:	8abb      	ldrh	r3, [r7, #20]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	f67f af5a 	bls.w	8001c5a <PDM_Write_Config_Buffer+0x22>
	}

	//Writes each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	823b      	strh	r3, [r7, #16]
 8001daa:	e00c      	b.n	8001dc6 <PDM_Write_Config_Buffer+0x18e>
	{
		data_buffer[data_index++] = Data_Freq_Buffer[i];
 8001dac:	8a3a      	ldrh	r2, [r7, #16]
 8001dae:	8afb      	ldrh	r3, [r7, #22]
 8001db0:	1c59      	adds	r1, r3, #1
 8001db2:	82f9      	strh	r1, [r7, #22]
 8001db4:	4619      	mov	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	440b      	add	r3, r1
 8001dba:	4946      	ldr	r1, [pc, #280]	; (8001ed4 <PDM_Write_Config_Buffer+0x29c>)
 8001dbc:	5c8a      	ldrb	r2, [r1, r2]
 8001dbe:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001dc0:	8a3b      	ldrh	r3, [r7, #16]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	823b      	strh	r3, [r7, #16]
 8001dc6:	8a3b      	ldrh	r3, [r7, #16]
 8001dc8:	2b1d      	cmp	r3, #29
 8001dca:	d9ef      	bls.n	8001dac <PDM_Write_Config_Buffer+0x174>
	}

	//Writes CAN bus baud rate
	data_buffer[data_index++] = CAN_Baud_Rate;
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	82fa      	strh	r2, [r7, #22]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a3f      	ldr	r2, [pc, #252]	; (8001ed8 <PDM_Write_Config_Buffer+0x2a0>)
 8001dda:	7812      	ldrb	r2, [r2, #0]
 8001ddc:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs general configuration (PWM CAN and PWM enabled)
	data_buffer[data_index++] = PWM_Pin_Status;
 8001dde:	8afb      	ldrh	r3, [r7, #22]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	82fa      	strh	r2, [r7, #22]
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <PDM_Write_Config_Buffer+0x2a4>)
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	81fb      	strh	r3, [r7, #14]
 8001df4:	e147      	b.n	8002086 <PDM_Write_Config_Buffer+0x44e>
	{
		data_buffer[data_index++] = PWM_Pins[i].PWM_Frequency;
 8001df6:	89fb      	ldrh	r3, [r7, #14]
 8001df8:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <PDM_Write_Config_Buffer+0x2a8>)
 8001dfa:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	3302      	adds	r3, #2
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	8afb      	ldrh	r3, [r7, #22]
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	82f9      	strh	r1, [r7, #22]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	440b      	add	r3, r1
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	737b      	strb	r3, [r7, #13]
 8001e1c:	e052      	b.n	8001ec4 <PDM_Write_Config_Buffer+0x28c>
		{
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] >> 8;
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	7b7b      	ldrb	r3, [r7, #13]
 8001e22:	492f      	ldr	r1, [pc, #188]	; (8001ee0 <PDM_Write_Config_Buffer+0x2a8>)
 8001e24:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001e28:	fb00 f202 	mul.w	r2, r0, r2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	8afb      	ldrh	r3, [r7, #22]
 8001e3a:	1c59      	adds	r1, r3, #1
 8001e3c:	82f9      	strh	r1, [r7, #22]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	440b      	add	r3, r1
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] & 0xFF;
 8001e48:	89fa      	ldrh	r2, [r7, #14]
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	4924      	ldr	r1, [pc, #144]	; (8001ee0 <PDM_Write_Config_Buffer+0x2a8>)
 8001e4e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001e52:	fb00 f202 	mul.w	r2, r0, r2
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	440b      	add	r3, r1
 8001e5c:	889a      	ldrh	r2, [r3, #4]
 8001e5e:	8afb      	ldrh	r3, [r7, #22]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	82f9      	strh	r1, [r7, #22]
 8001e64:	4619      	mov	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	440b      	add	r3, r1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] >> 8;
 8001e6e:	89fa      	ldrh	r2, [r7, #14]
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
 8001e72:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <PDM_Write_Config_Buffer+0x2a8>)
 8001e74:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001e78:	fb00 f202 	mul.w	r2, r0, r2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	8afb      	ldrh	r3, [r7, #22]
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	82f9      	strh	r1, [r7, #22]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	440b      	add	r3, r1
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] & 0xFF;
 8001e98:	89fa      	ldrh	r2, [r7, #14]
 8001e9a:	7b7b      	ldrb	r3, [r7, #13]
 8001e9c:	4910      	ldr	r1, [pc, #64]	; (8001ee0 <PDM_Write_Config_Buffer+0x2a8>)
 8001e9e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001ea2:	fb00 f202 	mul.w	r2, r0, r2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001eae:	8afb      	ldrh	r3, [r7, #22]
 8001eb0:	1c59      	adds	r1, r3, #1
 8001eb2:	82f9      	strh	r1, [r7, #22]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	440b      	add	r3, r1
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 4; j++)
 8001ebe:	7b7b      	ldrb	r3, [r7, #13]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	737b      	strb	r3, [r7, #13]
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d9a9      	bls.n	8001e1e <PDM_Write_Config_Buffer+0x1e6>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	733b      	strb	r3, [r7, #12]
 8001ece:	e0d3      	b.n	8002078 <PDM_Write_Config_Buffer+0x440>
 8001ed0:	200005c8 	.word	0x200005c8
 8001ed4:	20000518 	.word	0x20000518
 8001ed8:	200004b8 	.word	0x200004b8
 8001edc:	200005c4 	.word	0x200005c4
 8001ee0:	20000688 	.word	0x20000688
		{
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] >> 8;
 8001ee4:	89fa      	ldrh	r2, [r7, #14]
 8001ee6:	7b3b      	ldrb	r3, [r7, #12]
 8001ee8:	4993      	ldr	r1, [pc, #588]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001eea:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001eee:	fb00 f202 	mul.w	r2, r0, r2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	440b      	add	r3, r1
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	1c59      	adds	r1, r3, #1
 8001f04:	82f9      	strh	r1, [r7, #22]
 8001f06:	4619      	mov	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] & 0xFF;
 8001f10:	89fa      	ldrh	r2, [r7, #14]
 8001f12:	7b3b      	ldrb	r3, [r7, #12]
 8001f14:	4988      	ldr	r1, [pc, #544]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001f16:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001f1a:	fb00 f202 	mul.w	r2, r0, r2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	440b      	add	r3, r1
 8001f26:	889a      	ldrh	r2, [r3, #4]
 8001f28:	8afb      	ldrh	r3, [r7, #22]
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	82f9      	strh	r1, [r7, #22]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	440b      	add	r3, r1
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Position[j];
 8001f38:	89f9      	ldrh	r1, [r7, #14]
 8001f3a:	7b3a      	ldrb	r2, [r7, #12]
 8001f3c:	8afb      	ldrh	r3, [r7, #22]
 8001f3e:	1c58      	adds	r0, r3, #1
 8001f40:	82f8      	strh	r0, [r7, #22]
 8001f42:	4618      	mov	r0, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4403      	add	r3, r0
 8001f48:	487b      	ldr	r0, [pc, #492]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001f4a:	f44f 740a 	mov.w	r4, #552	; 0x228
 8001f4e:	fb04 f101 	mul.w	r1, r4, r1
 8001f52:	4401      	add	r1, r0
 8001f54:	440a      	add	r2, r1
 8001f56:	3210      	adds	r2, #16
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 24;
 8001f5c:	89fa      	ldrh	r2, [r7, #14]
 8001f5e:	7b3b      	ldrb	r3, [r7, #12]
 8001f60:	4975      	ldr	r1, [pc, #468]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001f62:	208a      	movs	r0, #138	; 0x8a
 8001f64:	fb00 f202 	mul.w	r2, r0, r2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0e1a      	lsrs	r2, r3, #24
 8001f74:	8afb      	ldrh	r3, [r7, #22]
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	82f9      	strh	r1, [r7, #22]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	440b      	add	r3, r1
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 16;
 8001f84:	89fa      	ldrh	r2, [r7, #14]
 8001f86:	7b3b      	ldrb	r3, [r7, #12]
 8001f88:	496b      	ldr	r1, [pc, #428]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001f8a:	208a      	movs	r0, #138	; 0x8a
 8001f8c:	fb00 f202 	mul.w	r2, r0, r2
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0c1a      	lsrs	r2, r3, #16
 8001f9c:	8afb      	ldrh	r3, [r7, #22]
 8001f9e:	1c59      	adds	r1, r3, #1
 8001fa0:	82f9      	strh	r1, [r7, #22]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 8;
 8001fac:	89fa      	ldrh	r2, [r7, #14]
 8001fae:	7b3b      	ldrb	r3, [r7, #12]
 8001fb0:	4961      	ldr	r1, [pc, #388]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001fb2:	208a      	movs	r0, #138	; 0x8a
 8001fb4:	fb00 f202 	mul.w	r2, r0, r2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0a1a      	lsrs	r2, r3, #8
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	82f9      	strh	r1, [r7, #22]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	440b      	add	r3, r1
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] & 0xFF;
 8001fd4:	89fa      	ldrh	r2, [r7, #14]
 8001fd6:	7b3b      	ldrb	r3, [r7, #12]
 8001fd8:	4957      	ldr	r1, [pc, #348]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8001fda:	208a      	movs	r0, #138	; 0x8a
 8001fdc:	fb00 f202 	mul.w	r2, r0, r2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	8afb      	ldrh	r3, [r7, #22]
 8001fec:	1c59      	adds	r1, r3, #1
 8001fee:	82f9      	strh	r1, [r7, #22]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	440b      	add	r3, r1
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Map_Lengths[j];
 8001ffa:	89f9      	ldrh	r1, [r7, #14]
 8001ffc:	7b3a      	ldrb	r2, [r7, #12]
 8001ffe:	8afb      	ldrh	r3, [r7, #22]
 8002000:	1c58      	adds	r0, r3, #1
 8002002:	82f8      	strh	r0, [r7, #22]
 8002004:	4618      	mov	r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4403      	add	r3, r0
 800200a:	484b      	ldr	r0, [pc, #300]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 800200c:	f44f 740a 	mov.w	r4, #552	; 0x228
 8002010:	fb04 f101 	mul.w	r1, r4, r1
 8002014:	4401      	add	r1, r0
 8002016:	440a      	add	r2, r1
 8002018:	321c      	adds	r2, #28
 800201a:	7812      	ldrb	r2, [r2, #0]
 800201c:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] >> 8;
 800201e:	89fa      	ldrh	r2, [r7, #14]
 8002020:	7b3b      	ldrb	r3, [r7, #12]
 8002022:	4945      	ldr	r1, [pc, #276]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8002024:	208a      	movs	r0, #138	; 0x8a
 8002026:	fb00 f202 	mul.w	r2, r0, r2
 800202a:	4413      	add	r3, r2
 800202c:	3308      	adds	r3, #8
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002036:	121b      	asrs	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	8afb      	ldrh	r3, [r7, #22]
 800203c:	1c59      	adds	r1, r3, #1
 800203e:	82f9      	strh	r1, [r7, #22]
 8002040:	4619      	mov	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	440b      	add	r3, r1
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] & 0xFF;
 800204a:	89fa      	ldrh	r2, [r7, #14]
 800204c:	7b3b      	ldrb	r3, [r7, #12]
 800204e:	493a      	ldr	r1, [pc, #232]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 8002050:	208a      	movs	r0, #138	; 0x8a
 8002052:	fb00 f202 	mul.w	r2, r0, r2
 8002056:	4413      	add	r3, r2
 8002058:	3308      	adds	r3, #8
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002062:	8afb      	ldrh	r3, [r7, #22]
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	82f9      	strh	r1, [r7, #22]
 8002068:	4619      	mov	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	440b      	add	r3, r1
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2; j++)
 8002072:	7b3b      	ldrb	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	733b      	strb	r3, [r7, #12]
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	f67f af32 	bls.w	8001ee4 <PDM_Write_Config_Buffer+0x2ac>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	3301      	adds	r3, #1
 8002084:	81fb      	strh	r3, [r7, #14]
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	2b03      	cmp	r3, #3
 800208a:	f67f aeb4 	bls.w	8001df6 <PDM_Write_Config_Buffer+0x1be>
		}
	}

	//Writes PWM 3D maps
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	817b      	strh	r3, [r7, #10]
 8002092:	e048      	b.n	8002126 <PDM_Write_Config_Buffer+0x4ee>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002094:	2300      	movs	r3, #0
 8002096:	727b      	strb	r3, [r7, #9]
 8002098:	e03f      	b.n	800211a <PDM_Write_Config_Buffer+0x4e2>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 800209a:	2300      	movs	r3, #0
 800209c:	723b      	strb	r3, [r7, #8]
 800209e:	e036      	b.n	800210e <PDM_Write_Config_Buffer+0x4d6>
			{
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] >> 8;
 80020a0:	8978      	ldrh	r0, [r7, #10]
 80020a2:	7a7a      	ldrb	r2, [r7, #9]
 80020a4:	7a39      	ldrb	r1, [r7, #8]
 80020a6:	4c24      	ldr	r4, [pc, #144]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	f44f 728a 	mov.w	r2, #276	; 0x114
 80020b2:	fb00 f202 	mul.w	r2, r0, r2
 80020b6:	4413      	add	r3, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	3330      	adds	r3, #48	; 0x30
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4423      	add	r3, r4
 80020c0:	88db      	ldrh	r3, [r3, #6]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	8afb      	ldrh	r3, [r7, #22]
 80020c8:	1c59      	adds	r1, r3, #1
 80020ca:	82f9      	strh	r1, [r7, #22]
 80020cc:	4619      	mov	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	440b      	add	r3, r1
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] & 0xFF;
 80020d6:	8978      	ldrh	r0, [r7, #10]
 80020d8:	7a7a      	ldrb	r2, [r7, #9]
 80020da:	7a39      	ldrb	r1, [r7, #8]
 80020dc:	4c16      	ldr	r4, [pc, #88]	; (8002138 <PDM_Write_Config_Buffer+0x500>)
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	f44f 728a 	mov.w	r2, #276	; 0x114
 80020e8:	fb00 f202 	mul.w	r2, r0, r2
 80020ec:	4413      	add	r3, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	3330      	adds	r3, #48	; 0x30
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4423      	add	r3, r4
 80020f6:	88da      	ldrh	r2, [r3, #6]
 80020f8:	8afb      	ldrh	r3, [r7, #22]
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	82f9      	strh	r1, [r7, #22]
 80020fe:	4619      	mov	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	440b      	add	r3, r1
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8002108:	7a3b      	ldrb	r3, [r7, #8]
 800210a:	3301      	adds	r3, #1
 800210c:	723b      	strb	r3, [r7, #8]
 800210e:	7a3b      	ldrb	r3, [r7, #8]
 8002110:	2b0e      	cmp	r3, #14
 8002112:	d9c5      	bls.n	80020a0 <PDM_Write_Config_Buffer+0x468>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002114:	7a7b      	ldrb	r3, [r7, #9]
 8002116:	3301      	adds	r3, #1
 8002118:	727b      	strb	r3, [r7, #9]
 800211a:	7a7b      	ldrb	r3, [r7, #9]
 800211c:	2b0e      	cmp	r3, #14
 800211e:	d9bc      	bls.n	800209a <PDM_Write_Config_Buffer+0x462>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002120:	897b      	ldrh	r3, [r7, #10]
 8002122:	3301      	adds	r3, #1
 8002124:	817b      	strh	r3, [r7, #10]
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d9b3      	bls.n	8002094 <PDM_Write_Config_Buffer+0x45c>
			}
		}
	}

	return;
 800212c:	e000      	b.n	8002130 <PDM_Write_Config_Buffer+0x4f8>
		return;
 800212e:	bf00      	nop
}
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bc90      	pop	{r4, r7}
 8002136:	4770      	bx	lr
 8002138:	20000688 	.word	0x20000688

0800213c <PDM_USB_Receive_Config>:

//Sets up pins, current limits, pwm controls and pwm 3D maps with received data from USB port
//uint8_t *Data - buffer received via USB port
//uint16_t Size - size of the buffer must be 5 bytes bigger than the information received (1 byte of command and 4 bytes of CRC)
static void PDM_USB_Receive_Config(uint8_t *Data, uint16_t Size)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
	uint32_t crc[2];

	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) &Data[5], (EEPROM_BUFFER_SIZE / sizeof(uint32_t)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3305      	adds	r3, #5
 800214c:	f240 2223 	movw	r2, #547	; 0x223
 8002150:	4619      	mov	r1, r3
 8002152:	481b      	ldr	r0, [pc, #108]	; (80021c0 <PDM_USB_Receive_Config+0x84>)
 8002154:	f003 fdfd 	bl	8005d52 <HAL_CRC_Calculate>
 8002158:	4603      	mov	r3, r0
 800215a:	60bb      	str	r3, [r7, #8]

	crc[1]  = Data[1] << 24;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3301      	adds	r3, #1
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[2] << 16;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	3202      	adds	r2, #2
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[3] << 8;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	3203      	adds	r2, #3
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	0212      	lsls	r2, r2, #8
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[4];
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	3204      	adds	r2, #4
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

	if(crc[0] != crc[1])
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d10f      	bne.n	80021b6 <PDM_USB_Receive_Config+0x7a>
		return;

	PDM_Write_Config_Buffer(&Data[5], EEPROM_BUFFER_SIZE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3305      	adds	r3, #5
 800219a:	f640 018c 	movw	r1, #2188	; 0x88c
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd4a 	bl	8001c38 <PDM_Write_Config_Buffer>

	AT24Cxx_Write_DMA(&hi2c1, 0x0000, &Data[5], EEPROM_BUFFER_SIZE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1d5a      	adds	r2, r3, #5
 80021a8:	f640 038c 	movw	r3, #2188	; 0x88c
 80021ac:	2100      	movs	r1, #0
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <PDM_USB_Receive_Config+0x88>)
 80021b0:	f7fe f9aa 	bl	8000508 <AT24Cxx_Write_DMA>

	return;
 80021b4:	e000      	b.n	80021b8 <PDM_USB_Receive_Config+0x7c>
		return;
 80021b6:	bf00      	nop
}
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200002f4 	.word	0x200002f4
 80021c4:	200002fc 	.word	0x200002fc

080021c8 <PDM_USB_Transmit_Config>:

//Sends pins, current limits, pwm controls and pwm 3D maps via USB port
static void PDM_USB_Transmit_Config()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
	uint8_t *data_buffer = malloc((EEPROM_BUFFER_SIZE + 5) * sizeof(uint8_t));
 80021ce:	f640 0091 	movw	r0, #2193	; 0x891
 80021d2:	f00d f8f1 	bl	800f3b8 <malloc>
 80021d6:	4603      	mov	r3, r0
 80021d8:	607b      	str	r3, [r7, #4]
	uint32_t crc = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]

	PDM_Load_Config_Buffer(&data_buffer[5], EEPROM_BUFFER_SIZE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3305      	adds	r3, #5
 80021e2:	f640 018c 	movw	r1, #2188	; 0x88c
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f9d8 	bl	800159c <PDM_Load_Config_Buffer>

	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[5], (EEPROM_BUFFER_SIZE / sizeof(uint32_t)));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3305      	adds	r3, #5
 80021f0:	f240 2223 	movw	r2, #547	; 0x223
 80021f4:	4619      	mov	r1, r3
 80021f6:	4814      	ldr	r0, [pc, #80]	; (8002248 <PDM_USB_Transmit_Config+0x80>)
 80021f8:	f003 fdab 	bl	8005d52 <HAL_CRC_Calculate>
 80021fc:	6038      	str	r0, [r7, #0]

	data_buffer[1] = crc >> 24;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	0e1a      	lsrs	r2, r3, #24
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3301      	adds	r3, #1
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = crc >> 16;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	0c1a      	lsrs	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3302      	adds	r3, #2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = crc >> 8;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	0a1a      	lsrs	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3303      	adds	r3, #3
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = crc & 0xFF;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]

	CDC_Transmit_FS(data_buffer, (EEPROM_BUFFER_SIZE + 5));
 800222c:	f640 0191 	movw	r1, #2193	; 0x891
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f00c fc0d 	bl	800ea50 <CDC_Transmit_FS>

	free(data_buffer);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f00d f8c6 	bl	800f3c8 <free>
	data_buffer = NULL;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]

	return;
 8002240:	bf00      	nop
}
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200002f4 	.word	0x200002f4

0800224c <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
//	uint8_t data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE];
	uint8_t *data_buffer = malloc(EEPROM_BUFFER_SIZE * sizeof(uint8_t));
 8002256:	f640 008c 	movw	r0, #2188	; 0x88c
 800225a:	f00d f8ad 	bl	800f3b8 <malloc>
 800225e:	4603      	mov	r3, r0
 8002260:	60bb      	str	r3, [r7, #8]
//	AT24Cxx_Read(hi2c, EEPROM_BUFFER_SIZE, &data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);

	//Load maps into global PWM structs
//	PDM_Load_Map_Buffer(&data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);

	free(data_buffer);
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f00d f8b0 	bl	800f3c8 <free>
	data_buffer = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 800226c:	f000 f904 	bl	8002478 <PDM_Hard_Code_Config>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 8002270:	2300      	movs	r3, #0
 8002272:	81fb      	strh	r3, [r7, #14]
 8002274:	e009      	b.n	800228a <PDM_Init+0x3e>
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	89fa      	ldrh	r2, [r7, #14]
 800227a:	0052      	lsls	r2, r2, #1
 800227c:	b291      	uxth	r1, r2
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <PDM_Init+0xa4>)
 8002280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002284:	89fb      	ldrh	r3, [r7, #14]
 8002286:	3301      	adds	r3, #1
 8002288:	81fb      	strh	r3, [r7, #14]
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	2b1d      	cmp	r3, #29
 800228e:	d9f2      	bls.n	8002276 <PDM_Init+0x2a>

	//Initializes each PWM able output
	for(uint8_t i = 0; i < 4; i++)
 8002290:	2300      	movs	r3, #0
 8002292:	737b      	strb	r3, [r7, #13]
 8002294:	e00e      	b.n	80022b4 <PDM_Init+0x68>
		PDM_PWM_Init(hcan, &PWM_Pins[i], i);
 8002296:	7b7b      	ldrb	r3, [r7, #13]
 8002298:	f44f 720a 	mov.w	r2, #552	; 0x228
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <PDM_Init+0xa8>)
 80022a2:	4413      	add	r3, r2
 80022a4:	7b7a      	ldrb	r2, [r7, #13]
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f001 f81f 	bl	80032ec <PDM_PWM_Init>
	for(uint8_t i = 0; i < 4; i++)
 80022ae:	7b7b      	ldrb	r3, [r7, #13]
 80022b0:	3301      	adds	r3, #1
 80022b2:	737b      	strb	r3, [r7, #13]
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d9ed      	bls.n	8002296 <PDM_Init+0x4a>

	//Checks input pin levels
	PDM_Input_Process();
 80022ba:	f000 f973 	bl	80025a4 <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, CAN_Baud_Rate);
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <PDM_Init+0xac>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fe ff45 	bl	8001154 <PDM_CAN_Init>

	//Sets outputs based on input levels
	PDM_Output_Process();
 80022ca:	f000 fa6b 	bl	80027a4 <PDM_Output_Process>

	//Initializates timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_BUFFER[5], 5);
 80022ce:	2205      	movs	r2, #5
 80022d0:	490a      	ldr	r1, [pc, #40]	; (80022fc <PDM_Init+0xb0>)
 80022d2:	480b      	ldr	r0, [pc, #44]	; (8002300 <PDM_Init+0xb4>)
 80022d4:	f002 f8fe 	bl	80044d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_BUFFER[0], 5);
 80022d8:	2205      	movs	r2, #5
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <PDM_Init+0xb8>)
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <PDM_Init+0xbc>)
 80022de:	f002 f8f9 	bl	80044d4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 80022e2:	480a      	ldr	r0, [pc, #40]	; (800230c <PDM_Init+0xc0>)
 80022e4:	f007 fe3a 	bl	8009f5c <HAL_TIM_Base_Start_IT>

	return;
 80022e8:	bf00      	nop
}
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000574 	.word	0x20000574
 80022f4:	20000688 	.word	0x20000688
 80022f8:	200004b8 	.word	0x200004b8
 80022fc:	200005ba 	.word	0x200005ba
 8002300:	2000017c 	.word	0x2000017c
 8002304:	200005b0 	.word	0x200005b0
 8002308:	200001c4 	.word	0x200001c4
 800230c:	20000428 	.word	0x20000428

08002310 <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
	if((Data[0] == USB_COMMAND_READ_CONFIG) && (Size == 1))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d105      	bne.n	8002330 <PDM_USB_Process+0x20>
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d102      	bne.n	8002330 <PDM_USB_Process+0x20>
		PDM_USB_Transmit_Config();
 800232a:	f7ff ff4d 	bl	80021c8 <PDM_USB_Transmit_Config>
 800232e:	e024      	b.n	800237a <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_WRITE_CONFIG) && (Size == (EEPROM_BUFFER_SIZE + 5)))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d10a      	bne.n	800234e <PDM_USB_Process+0x3e>
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	f640 0291 	movw	r2, #2193	; 0x891
 800233e:	4293      	cmp	r3, r2
 8002340:	d105      	bne.n	800234e <PDM_USB_Process+0x3e>
		PDM_USB_Receive_Config(Data, Size);
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fef8 	bl	800213c <PDM_USB_Receive_Config>
 800234c:	e015      	b.n	800237a <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_CONNECT) && (Size == 1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d106      	bne.n	8002364 <PDM_USB_Process+0x54>
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d103      	bne.n	8002364 <PDM_USB_Process+0x54>
		USB_Connected_Flag = 1;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <PDM_USB_Process+0x74>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e00a      	b.n	800237a <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_DISCONNECT) && (Size == 1))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d106      	bne.n	800237a <PDM_USB_Process+0x6a>
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d103      	bne.n	800237a <PDM_USB_Process+0x6a>
		USB_Connected_Flag = 0;
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <PDM_USB_Process+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
}
 8002378:	e7ff      	b.n	800237a <PDM_USB_Process+0x6a>
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000504 	.word	0x20000504

08002388 <PDM_USB_Transmit_Data>:

//Sends data channels via USB
void PDM_USB_Transmit_Data()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
	uint8_t *data_buffer = malloc((NBR_OF_DATA_CHANNELS * 2) * sizeof(uint8_t));
 800238e:	203c      	movs	r0, #60	; 0x3c
 8002390:	f00d f812 	bl	800f3b8 <malloc>
 8002394:	4603      	mov	r3, r0
 8002396:	60bb      	str	r3, [r7, #8]
	uint32_t crc = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]

	//Load data channels inside transmission buffer
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e024      	b.n	80023ec <PDM_USB_Transmit_Data+0x64>
	{
		data_buffer[(i * 2) + 5]  = Data_Buffer[i] >> 8;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	4a32      	ldr	r2, [pc, #200]	; (8002470 <PDM_USB_Transmit_Data+0xe8>)
 80023a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b299      	uxth	r1, r3
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	3305      	adds	r3, #5
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
		data_buffer[(i * 2) + 6] |= Data_Buffer[i] & 0xFF;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	3306      	adds	r3, #6
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	4928      	ldr	r1, [pc, #160]	; (8002470 <PDM_USB_Transmit_Data+0xe8>)
 80023ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b259      	sxtb	r1, r3
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	3306      	adds	r3, #6
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	b2ca      	uxtb	r2, r1
 80023e4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b1d      	cmp	r3, #29
 80023f0:	d9d7      	bls.n	80023a2 <PDM_USB_Transmit_Data+0x1a>
	}

	//Load command into transmission buffer
	data_buffer[0] = USB_COMMAND_READ_DATA & 0xFF;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2205      	movs	r2, #5
 80023f6:	701a      	strb	r2, [r3, #0]

	//Calculate buffer CRC
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[5], (NBR_OF_DATA_CHANNELS / sizeof(uint32_t)));
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3305      	adds	r3, #5
 80023fc:	2207      	movs	r2, #7
 80023fe:	4619      	mov	r1, r3
 8002400:	481c      	ldr	r0, [pc, #112]	; (8002474 <PDM_USB_Transmit_Data+0xec>)
 8002402:	f003 fca6 	bl	8005d52 <HAL_CRC_Calculate>
 8002406:	6078      	str	r0, [r7, #4]

	//Load CRC into transmission buffer
	data_buffer[1]  = crc >> 24;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0e1a      	lsrs	r2, r3, #24
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	3301      	adds	r3, #1
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]
	data_buffer[2] |= crc >> 16;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3302      	adds	r3, #2
 8002418:	7819      	ldrb	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	b2da      	uxtb	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	3302      	adds	r3, #2
 8002424:	430a      	orrs	r2, r1
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
	data_buffer[3] |= crc >> 8;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3303      	adds	r3, #3
 800242e:	7819      	ldrb	r1, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3303      	adds	r3, #3
 800243a:	430a      	orrs	r2, r1
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
	data_buffer[4] |= crc;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3304      	adds	r3, #4
 8002444:	7819      	ldrb	r1, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3304      	adds	r3, #4
 800244e:	430a      	orrs	r2, r1
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]

	//Transmit data buffer via USB
	CDC_Transmit_FS(data_buffer, EEPROM_BUFFER_SIZE + 5);
 8002454:	f640 0191 	movw	r1, #2193	; 0x891
 8002458:	68b8      	ldr	r0, [r7, #8]
 800245a:	f00c faf9 	bl	800ea50 <CDC_Transmit_FS>

	free(data_buffer);
 800245e:	68b8      	ldr	r0, [r7, #8]
 8002460:	f00c ffb2 	bl	800f3c8 <free>
	data_buffer = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]

	return;
 8002468:	bf00      	nop
}
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000538 	.word	0x20000538
 8002474:	200002f4 	.word	0x200002f4

08002478 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config(){}
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <PDM_Output_Set>:

//Sets output pin levels
//uint8_t output_pin - number of output
//uint8_t output_level - level of output
static void PDM_Output_Set(uint8_t output_pin, uint8_t output_level)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	460a      	mov	r2, r1
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	4613      	mov	r3, r2
 8002496:	71bb      	strb	r3, [r7, #6]
	switch(output_pin)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	3b04      	subs	r3, #4
 800249c:	2b0b      	cmp	r3, #11
 800249e:	d878      	bhi.n	8002592 <PDM_Output_Set+0x10a>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <PDM_Output_Set+0x20>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024d9 	.word	0x080024d9
 80024ac:	080024e9 	.word	0x080024e9
 80024b0:	080024f9 	.word	0x080024f9
 80024b4:	08002509 	.word	0x08002509
 80024b8:	08002519 	.word	0x08002519
 80024bc:	08002529 	.word	0x08002529
 80024c0:	08002539 	.word	0x08002539
 80024c4:	08002549 	.word	0x08002549
 80024c8:	08002559 	.word	0x08002559
 80024cc:	08002567 	.word	0x08002567
 80024d0:	08002575 	.word	0x08002575
 80024d4:	08002583 	.word	0x08002583
	{
	case 4:
		HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_level);
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	461a      	mov	r2, r3
 80024dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e0:	482e      	ldr	r0, [pc, #184]	; (800259c <PDM_Output_Set+0x114>)
 80024e2:	f004 faa7 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 80024e6:	e053      	b.n	8002590 <PDM_Output_Set+0x108>

	case 5:
		HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_level);
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f0:	482a      	ldr	r0, [pc, #168]	; (800259c <PDM_Output_Set+0x114>)
 80024f2:	f004 fa9f 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 80024f6:	e04b      	b.n	8002590 <PDM_Output_Set+0x108>

	case 6:
		HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_level);
 80024f8:	79bb      	ldrb	r3, [r7, #6]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002500:	4826      	ldr	r0, [pc, #152]	; (800259c <PDM_Output_Set+0x114>)
 8002502:	f004 fa97 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002506:	e043      	b.n	8002590 <PDM_Output_Set+0x108>

	case 7:
		HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_level);
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	461a      	mov	r2, r3
 800250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002510:	4822      	ldr	r0, [pc, #136]	; (800259c <PDM_Output_Set+0x114>)
 8002512:	f004 fa8f 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002516:	e03b      	b.n	8002590 <PDM_Output_Set+0x108>

#ifndef LQFP64
	case 8:
		HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_level);
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	461a      	mov	r2, r3
 800251c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002520:	481e      	ldr	r0, [pc, #120]	; (800259c <PDM_Output_Set+0x114>)
 8002522:	f004 fa87 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002526:	e033      	b.n	8002590 <PDM_Output_Set+0x108>

	case 9:
		HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_level);
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	461a      	mov	r2, r3
 800252c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002530:	481a      	ldr	r0, [pc, #104]	; (800259c <PDM_Output_Set+0x114>)
 8002532:	f004 fa7f 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002536:	e02b      	b.n	8002590 <PDM_Output_Set+0x108>

	case 10:
		HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_level);
 8002538:	79bb      	ldrb	r3, [r7, #6]
 800253a:	461a      	mov	r2, r3
 800253c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002540:	4816      	ldr	r0, [pc, #88]	; (800259c <PDM_Output_Set+0x114>)
 8002542:	f004 fa77 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002546:	e023      	b.n	8002590 <PDM_Output_Set+0x108>

	case 11:
		HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_level);
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	461a      	mov	r2, r3
 800254c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002550:	4812      	ldr	r0, [pc, #72]	; (800259c <PDM_Output_Set+0x114>)
 8002552:	f004 fa6f 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002556:	e01b      	b.n	8002590 <PDM_Output_Set+0x108>

	case 12:
		HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_level);
 8002558:	79bb      	ldrb	r3, [r7, #6]
 800255a:	461a      	mov	r2, r3
 800255c:	2108      	movs	r1, #8
 800255e:	4810      	ldr	r0, [pc, #64]	; (80025a0 <PDM_Output_Set+0x118>)
 8002560:	f004 fa68 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002564:	e014      	b.n	8002590 <PDM_Output_Set+0x108>

	case 13:
		HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_level);
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	461a      	mov	r2, r3
 800256a:	2104      	movs	r1, #4
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <PDM_Output_Set+0x118>)
 800256e:	f004 fa61 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002572:	e00d      	b.n	8002590 <PDM_Output_Set+0x108>

	case 14:
		HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_level);
 8002574:	79bb      	ldrb	r3, [r7, #6]
 8002576:	461a      	mov	r2, r3
 8002578:	2120      	movs	r1, #32
 800257a:	4809      	ldr	r0, [pc, #36]	; (80025a0 <PDM_Output_Set+0x118>)
 800257c:	f004 fa5a 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8002580:	e006      	b.n	8002590 <PDM_Output_Set+0x108>

	case 15:
		HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_level);
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	461a      	mov	r2, r3
 8002586:	2110      	movs	r1, #16
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <PDM_Output_Set+0x118>)
 800258a:	f004 fa53 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 800258e:	bf00      	nop
#endif
	}

	return;
 8002590:	bf00      	nop
 8002592:	bf00      	nop
}
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021800 	.word	0x40021800

080025a4 <PDM_Input_Process>:

//Process input pin levels
void PDM_Input_Process()
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	Input_Pin_Levels = 0x0000;
 80025a8:	4b7a      	ldr	r3, [pc, #488]	; (8002794 <PDM_Input_Process+0x1f0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels  = HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 80025ae:	2101      	movs	r1, #1
 80025b0:	4879      	ldr	r0, [pc, #484]	; (8002798 <PDM_Input_Process+0x1f4>)
 80025b2:	f004 fa27 	bl	8006a04 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <PDM_Input_Process+0x1f0>)
 80025bc:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 80025be:	2102      	movs	r1, #2
 80025c0:	4875      	ldr	r0, [pc, #468]	; (8002798 <PDM_Input_Process+0x1f4>)
 80025c2:	f004 fa1f 	bl	8006a04 <HAL_GPIO_ReadPin>
 80025c6:	4603      	mov	r3, r0
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	4b71      	ldr	r3, [pc, #452]	; (8002794 <PDM_Input_Process+0x1f0>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b6e      	ldr	r3, [pc, #440]	; (8002794 <PDM_Input_Process+0x1f0>)
 80025da:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 80025dc:	2104      	movs	r1, #4
 80025de:	486e      	ldr	r0, [pc, #440]	; (8002798 <PDM_Input_Process+0x1f4>)
 80025e0:	f004 fa10 	bl	8006a04 <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	b21a      	sxth	r2, r3
 80025ea:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <PDM_Input_Process+0x1f0>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <PDM_Input_Process+0x1f0>)
 80025f8:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 80025fa:	2108      	movs	r1, #8
 80025fc:	4866      	ldr	r0, [pc, #408]	; (8002798 <PDM_Input_Process+0x1f4>)
 80025fe:	f004 fa01 	bl	8006a04 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	b21a      	sxth	r2, r3
 8002608:	4b62      	ldr	r3, [pc, #392]	; (8002794 <PDM_Input_Process+0x1f0>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b21b      	sxth	r3, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	b21b      	sxth	r3, r3
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002616:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8002618:	2110      	movs	r1, #16
 800261a:	4860      	ldr	r0, [pc, #384]	; (800279c <PDM_Input_Process+0x1f8>)
 800261c:	f004 f9f2 	bl	8006a04 <HAL_GPIO_ReadPin>
 8002620:	4603      	mov	r3, r0
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	b21a      	sxth	r2, r3
 8002626:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b21b      	sxth	r3, r3
 800262c:	4313      	orrs	r3, r2
 800262e:	b21b      	sxth	r3, r3
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002634:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 8002636:	2120      	movs	r1, #32
 8002638:	4858      	ldr	r0, [pc, #352]	; (800279c <PDM_Input_Process+0x1f8>)
 800263a:	f004 f9e3 	bl	8006a04 <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	015b      	lsls	r3, r3, #5
 8002642:	b21a      	sxth	r2, r3
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b21b      	sxth	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b21b      	sxth	r3, r3
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002652:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	4852      	ldr	r0, [pc, #328]	; (80027a0 <PDM_Input_Process+0x1fc>)
 8002658:	f004 f9d4 	bl	8006a04 <HAL_GPIO_ReadPin>
 800265c:	4603      	mov	r3, r0
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	b21a      	sxth	r2, r3
 8002662:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b21b      	sxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b21b      	sxth	r3, r3
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b49      	ldr	r3, [pc, #292]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002670:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 8002672:	2180      	movs	r1, #128	; 0x80
 8002674:	484a      	ldr	r0, [pc, #296]	; (80027a0 <PDM_Input_Process+0x1fc>)
 8002676:	f004 f9c5 	bl	8006a04 <HAL_GPIO_ReadPin>
 800267a:	4603      	mov	r3, r0
 800267c:	01db      	lsls	r3, r3, #7
 800267e:	b21a      	sxth	r2, r3
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b21b      	sxth	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	b21b      	sxth	r3, r3
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <PDM_Input_Process+0x1f0>)
 800268e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 8002690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002694:	4842      	ldr	r0, [pc, #264]	; (80027a0 <PDM_Input_Process+0x1fc>)
 8002696:	f004 f9b5 	bl	8006a04 <HAL_GPIO_ReadPin>
 800269a:	4603      	mov	r3, r0
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21a      	sxth	r2, r3
 80026a0:	4b3c      	ldr	r3, [pc, #240]	; (8002794 <PDM_Input_Process+0x1f0>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <PDM_Input_Process+0x1f0>)
 80026ae:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 80026b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b4:	483a      	ldr	r0, [pc, #232]	; (80027a0 <PDM_Input_Process+0x1fc>)
 80026b6:	f004 f9a5 	bl	8006a04 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	025b      	lsls	r3, r3, #9
 80026be:	b21a      	sxth	r2, r3
 80026c0:	4b34      	ldr	r3, [pc, #208]	; (8002794 <PDM_Input_Process+0x1f0>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b31      	ldr	r3, [pc, #196]	; (8002794 <PDM_Input_Process+0x1f0>)
 80026ce:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 80026d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026d4:	4832      	ldr	r0, [pc, #200]	; (80027a0 <PDM_Input_Process+0x1fc>)
 80026d6:	f004 f995 	bl	8006a04 <HAL_GPIO_ReadPin>
 80026da:	4603      	mov	r3, r0
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	b21a      	sxth	r2, r3
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <PDM_Input_Process+0x1f0>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <PDM_Input_Process+0x1f0>)
 80026ee:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 80026f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026f4:	482a      	ldr	r0, [pc, #168]	; (80027a0 <PDM_Input_Process+0x1fc>)
 80026f6:	f004 f985 	bl	8006a04 <HAL_GPIO_ReadPin>
 80026fa:	4603      	mov	r3, r0
 80026fc:	02db      	lsls	r3, r3, #11
 80026fe:	b21a      	sxth	r2, r3
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b21b      	sxth	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b21b      	sxth	r3, r3
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <PDM_Input_Process+0x1f0>)
 800270e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8002710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002714:	4821      	ldr	r0, [pc, #132]	; (800279c <PDM_Input_Process+0x1f8>)
 8002716:	f004 f975 	bl	8006a04 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	031b      	lsls	r3, r3, #12
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	b21b      	sxth	r3, r3
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <PDM_Input_Process+0x1f0>)
 800272e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8002730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002734:	4819      	ldr	r0, [pc, #100]	; (800279c <PDM_Input_Process+0x1f8>)
 8002736:	f004 f965 	bl	8006a04 <HAL_GPIO_ReadPin>
 800273a:	4603      	mov	r3, r0
 800273c:	035b      	lsls	r3, r3, #13
 800273e:	b21a      	sxth	r2, r3
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b21b      	sxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b21b      	sxth	r3, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <PDM_Input_Process+0x1f0>)
 800274e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 8002750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002754:	4811      	ldr	r0, [pc, #68]	; (800279c <PDM_Input_Process+0x1f8>)
 8002756:	f004 f955 	bl	8006a04 <HAL_GPIO_ReadPin>
 800275a:	4603      	mov	r3, r0
 800275c:	039b      	lsls	r3, r3, #14
 800275e:	b21a      	sxth	r2, r3
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b21b      	sxth	r3, r3
 8002766:	4313      	orrs	r3, r2
 8002768:	b21b      	sxth	r3, r3
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <PDM_Input_Process+0x1f0>)
 800276e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <PDM_Input_Process+0x1f8>)
 8002776:	f004 f945 	bl	8006a04 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	03db      	lsls	r3, r3, #15
 800277e:	b21a      	sxth	r2, r3
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <PDM_Input_Process+0x1f0>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b21b      	sxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b21b      	sxth	r3, r3
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b01      	ldr	r3, [pc, #4]	; (8002794 <PDM_Input_Process+0x1f0>)
 800278e:	801a      	strh	r2, [r3, #0]

	return;
 8002790:	bf00      	nop
}
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200005c6 	.word	0x200005c6
 8002798:	40021400 	.word	0x40021400
 800279c:	40020400 	.word	0x40020400
 80027a0:	40020800 	.word	0x40020800

080027a4 <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
#ifndef LQFP64
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 80027aa:	2304      	movs	r3, #4
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	e046      	b.n	800283e <PDM_Output_Process+0x9a>
#else
	for(uint8_t i = 4; i < (NBR_OF_OUTPUTS - 8); i++)
#endif
	{
		//Check if virtual fuse isn't tripped and if the input pins match their enabled states
		if((((Driver_Safety_Flag >> i) & 0x01) == 0)
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <PDM_Output_Process+0xd4>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	fa42 f303 	asr.w	r3, r2, r3
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d134      	bne.n	800282e <PDM_Output_Process+0x8a>
				&& (__PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[0], Output_Pin[i].Input_Levels[0])
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	492d      	ldr	r1, [pc, #180]	; (800287c <PDM_Output_Process+0xd8>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	881a      	ldrh	r2, [r3, #0]
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <PDM_Output_Process+0xdc>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	4013      	ands	r3, r2
 80027da:	b299      	uxth	r1, r3
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	4827      	ldr	r0, [pc, #156]	; (800287c <PDM_Output_Process+0xd8>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4403      	add	r3, r0
 80027ea:	3304      	adds	r3, #4
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	4299      	cmp	r1, r3
 80027f0:	d017      	beq.n	8002822 <PDM_Output_Process+0x7e>
				||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[1], Output_Pin[i].Input_Levels[1])))
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	4921      	ldr	r1, [pc, #132]	; (800287c <PDM_Output_Process+0xd8>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3302      	adds	r3, #2
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <PDM_Output_Process+0xdc>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	4013      	ands	r3, r2
 800280a:	b299      	uxth	r1, r3
 800280c:	79fa      	ldrb	r2, [r7, #7]
 800280e:	481b      	ldr	r0, [pc, #108]	; (800287c <PDM_Output_Process+0xd8>)
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	3306      	adds	r3, #6
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	4299      	cmp	r1, r3
 8002820:	d105      	bne.n	800282e <PDM_Output_Process+0x8a>
		{
			PDM_Output_Set(i, GPIO_PIN_SET);
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fe2e 	bl	8002488 <PDM_Output_Set>
 800282c:	e004      	b.n	8002838 <PDM_Output_Process+0x94>
		}else{
			PDM_Output_Set(i, GPIO_PIN_RESET);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fe28 	bl	8002488 <PDM_Output_Set>
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	3301      	adds	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d9b5      	bls.n	80027b0 <PDM_Output_Process+0xc>
#ifdef LQFP64
	PDM_Output_Expander_Set(&hi2c1);
#endif

	//Checks each PWM able output individually
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	71bb      	strb	r3, [r7, #6]
 8002848:	e00e      	b.n	8002868 <PDM_Output_Process+0xc4>
	{
		PDM_PWM_Output_Process(&PWM_Pins[i], i);
 800284a:	79bb      	ldrb	r3, [r7, #6]
 800284c:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <PDM_Output_Process+0xe0>)
 8002856:	4413      	add	r3, r2
 8002858:	79ba      	ldrb	r2, [r7, #6]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fe37 	bl	80034d0 <PDM_PWM_Output_Process>
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002862:	79bb      	ldrb	r3, [r7, #6]
 8002864:	3301      	adds	r3, #1
 8002866:	71bb      	strb	r3, [r7, #6]
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d9ed      	bls.n	800284a <PDM_Output_Process+0xa6>
	}

	return;
 800286e:	bf00      	nop
}
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000512 	.word	0x20000512
 800287c:	200005c8 	.word	0x200005c8
 8002880:	200005c6 	.word	0x200005c6
 8002884:	20000688 	.word	0x20000688

08002888 <PDM_Output_Fuse>:

//Checks output currents and compares with thresholds and timeouts, if over both, processes outputs
void PDM_Output_Fuse()
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	uint8_t fuse_flag = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	71bb      	strb	r3, [r7, #6]
 8002896:	e066      	b.n	8002966 <PDM_Output_Fuse+0xde>
	{
		if(Output_Pin[i].Current_Thresholds == 0)
 8002898:	79ba      	ldrb	r2, [r7, #6]
 800289a:	493c      	ldr	r1, [pc, #240]	; (800298c <PDM_Output_Fuse+0x104>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3308      	adds	r3, #8
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d057      	beq.n	800295e <PDM_Output_Fuse+0xd6>
			continue;

		if(Data_Buffer[i] > Output_Pin[i].Current_Thresholds)
 80028ae:	79bb      	ldrb	r3, [r7, #6]
 80028b0:	4a37      	ldr	r2, [pc, #220]	; (8002990 <PDM_Output_Fuse+0x108>)
 80028b2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80028b6:	79ba      	ldrb	r2, [r7, #6]
 80028b8:	4834      	ldr	r0, [pc, #208]	; (800298c <PDM_Output_Fuse+0x104>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4403      	add	r3, r0
 80028c4:	3308      	adds	r3, #8
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	4299      	cmp	r1, r3
 80028ca:	d933      	bls.n	8002934 <PDM_Output_Fuse+0xac>
		{
			Accumulator_Output_Fuse[i] += Accumulator_Output_Check;
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	4a31      	ldr	r2, [pc, #196]	; (8002994 <PDM_Output_Fuse+0x10c>)
 80028d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <PDM_Output_Fuse+0x110>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	79bb      	ldrb	r3, [r7, #6]
 80028da:	440a      	add	r2, r1
 80028dc:	492d      	ldr	r1, [pc, #180]	; (8002994 <PDM_Output_Fuse+0x10c>)
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(Accumulator_Output_Fuse[i] >= (Output_Pin[i].Timeout_Output_Fuse * 10))
 80028e2:	79bb      	ldrb	r3, [r7, #6]
 80028e4:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <PDM_Output_Fuse+0x10c>)
 80028e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028ea:	79ba      	ldrb	r2, [r7, #6]
 80028ec:	4827      	ldr	r0, [pc, #156]	; (800298c <PDM_Output_Fuse+0x104>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4403      	add	r3, r0
 80028f8:	330a      	adds	r3, #10
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4299      	cmp	r1, r3
 8002908:	d32a      	bcc.n	8002960 <PDM_Output_Fuse+0xd8>
			{
				Driver_Safety_Flag |= (1 << i);
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	2201      	movs	r2, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <PDM_Output_Fuse+0x114>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b21b      	sxth	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b21b      	sxth	r3, r3
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <PDM_Output_Fuse+0x114>)
 8002922:	801a      	strh	r2, [r3, #0]
				Accumulator_Output_Fuse[i] = 0;
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <PDM_Output_Fuse+0x10c>)
 8002928:	2100      	movs	r1, #0
 800292a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				fuse_flag = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	71fb      	strb	r3, [r7, #7]
 8002932:	e015      	b.n	8002960 <PDM_Output_Fuse+0xd8>
			}

		}else{
			Driver_Overcurrent_Flag &= ~(1 << i);
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	2201      	movs	r2, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	b21b      	sxth	r3, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <PDM_Output_Fuse+0x118>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b21b      	sxth	r3, r3
 8002948:	4013      	ands	r3, r2
 800294a:	b21b      	sxth	r3, r3
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <PDM_Output_Fuse+0x118>)
 8002950:	801a      	strh	r2, [r3, #0]
			Accumulator_Output_Fuse[i] = 0;
 8002952:	79bb      	ldrb	r3, [r7, #6]
 8002954:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <PDM_Output_Fuse+0x10c>)
 8002956:	2100      	movs	r1, #0
 8002958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800295c:	e000      	b.n	8002960 <PDM_Output_Fuse+0xd8>
			continue;
 800295e:	bf00      	nop
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	3301      	adds	r3, #1
 8002964:	71bb      	strb	r3, [r7, #6]
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d995      	bls.n	8002898 <PDM_Output_Fuse+0x10>
		}
	}

	Accumulator_Output_Check -= OUTPUT_FUSE_FREQ;
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <PDM_Output_Fuse+0x110>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3b19      	subs	r3, #25
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <PDM_Output_Fuse+0x110>)
 8002974:	6013      	str	r3, [r2, #0]

	if(fuse_flag == 1)
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d102      	bne.n	8002982 <PDM_Output_Fuse+0xfa>
		PDM_Output_Process();
 800297c:	f7ff ff12 	bl	80027a4 <PDM_Output_Process>

	return;
 8002980:	bf00      	nop
 8002982:	bf00      	nop
}
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200005c8 	.word	0x200005c8
 8002990:	20000538 	.word	0x20000538
 8002994:	20000f50 	.word	0x20000f50
 8002998:	20000f44 	.word	0x20000f44
 800299c:	20000512 	.word	0x20000512
 80029a0:	20000510 	.word	0x20000510

080029a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "pdm.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Message, CAN_Rx_Data) == HAL_OK)
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f002 fd07 	bl	80053c6 <HAL_CAN_GetRxMessage>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 80029be:	f7fe fd25 	bl	800140c <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80029c6:	f004 f84e 	bl	8006a66 <HAL_GPIO_TogglePin>
	}

	return;
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
}
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200004bc 	.word	0x200004bc
 80029d8:	200004d0 	.word	0x200004d0
 80029dc:	40021800 	.word	0x40021800

080029e0 <HAL_TIM_PeriodElapsedCallback>:
//{
//	return;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d132      	bne.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		Accumulator_Msg_10Hz++;
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80029fa:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25Hz++;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a04:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50Hz++;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a0e:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_80Hz++,
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a18:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100Hz++;
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002a22:	6013      	str	r3, [r2, #0]

		Accumulator_Delay++;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a2c:	6013      	str	r3, [r2, #0]
		Accumulator_Output_Check++;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a36:	6013      	str	r3, [r2, #0]
		Accumulator_Temp_Read++;
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002a40:	6013      	str	r3, [r2, #0]
		Accumulator_Volt_Read++;
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a4a:	6013      	str	r3, [r2, #0]

		Accumulator_USB_Data++;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a54:	6013      	str	r3, [r2, #0]
	}

	return;
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
}
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40001400 	.word	0x40001400
 8002a68:	20000f2c 	.word	0x20000f2c
 8002a6c:	20000f30 	.word	0x20000f30
 8002a70:	20000f34 	.word	0x20000f34
 8002a74:	20000f38 	.word	0x20000f38
 8002a78:	20000f3c 	.word	0x20000f3c
 8002a7c:	20000f28 	.word	0x20000f28
 8002a80:	20000f44 	.word	0x20000f44
 8002a84:	20000f48 	.word	0x20000f48
 8002a88:	20000f4c 	.word	0x20000f4c
 8002a8c:	20000f40 	.word	0x20000f40

08002a90 <PWM_Duty_Cycle_Set>:

#include "pdm.h"

//Sets PWM output duty cycle using its command variables
static void PWM_Duty_Cycle_Set(PWM_Control_Struct* pwm_struct)
{
 8002a90:	b4f0      	push	{r4, r5, r6, r7}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	//Checks if both command variables are above the collum and line limits and attributes the map's closest corner value
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dc0d      	bgt.n	8002ac4 <PWM_Duty_Cycle_Set+0x34>
		&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	dc05      	bgt.n	8002ac4 <PWM_Duty_Cycle_Set+0x34>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][0];
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	801a      	strh	r2, [r3, #0]
		return;
 8002ac2:	e34b      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	db11      	blt.n	8002af8 <PWM_Duty_Cycle_Set+0x68>
			 && (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dc09      	bgt.n	8002af8 <PWM_Duty_Cycle_Set+0x68>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][pwm_struct->Map_Lengths[0]];
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7f1b      	ldrb	r3, [r3, #28]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	3330      	adds	r3, #48	; 0x30
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	88da      	ldrh	r2, [r3, #6]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	801a      	strh	r2, [r3, #0]
		return;
 8002af6:	e331      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dc15      	bgt.n	8002b34 <PWM_Duty_Cycle_Set+0xa4>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002b14:	429a      	cmp	r2, r3
 8002b16:	db0d      	blt.n	8002b34 <PWM_Duty_Cycle_Set+0xa4>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][0];
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7f5b      	ldrb	r3, [r3, #29]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a5b      	subs	r3, r3, r1
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	3366      	adds	r3, #102	; 0x66
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	801a      	strh	r2, [r3, #0]
		return;
 8002b32:	e313      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002b40:	429a      	cmp	r2, r3
 8002b42:	db19      	blt.n	8002b78 <PWM_Duty_Cycle_Set+0xe8>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002b50:	429a      	cmp	r2, r3
 8002b52:	db11      	blt.n	8002b78 <PWM_Duty_Cycle_Set+0xe8>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][pwm_struct->Map_Lengths[0]];
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7f5b      	ldrb	r3, [r3, #29]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7f1b      	ldrb	r3, [r3, #28]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a5b      	subs	r3, r3, r1
 8002b68:	4403      	add	r3, r0
 8002b6a:	3330      	adds	r3, #48	; 0x30
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	88da      	ldrh	r2, [r3, #6]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	801a      	strh	r2, [r3, #0]
		return;
 8002b76:	e2f1      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
	}

	//Check if the command variable point is outside the collums (x limits) of the 3D map
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dd08      	ble.n	8002b9a <PWM_Duty_Cycle_Set+0x10a>
		|| (pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1]))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f2c0 80c5 	blt.w	8002d24 <PWM_Duty_Cycle_Set+0x294>
	{
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e0bb      	b.n	8002d18 <PWM_Duty_Cycle_Set+0x288>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	3323      	adds	r3, #35	; 0x23
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f2c0 80ac 	blt.w	8002d12 <PWM_Duty_Cycle_Set+0x282>
				&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	3323      	adds	r3, #35	; 0x23
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	440b      	add	r3, r1
 8002bcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	f300 809e 	bgt.w	8002d12 <PWM_Duty_Cycle_Set+0x282>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dc44      	bgt.n	8002c70 <PWM_Duty_Cycle_Set+0x1e0>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002bec:	4619      	mov	r1, r3
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	3323      	adds	r3, #35	; 0x23
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bfc:	1ac9      	subs	r1, r1, r3
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4403      	add	r3, r0
 8002c0e:	3366      	adds	r3, #102	; 0x66
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461c      	mov	r4, r3
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4403      	add	r3, r0
 8002c22:	3366      	adds	r3, #102	; 0x66
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	1ae3      	subs	r3, r4, r3
 8002c28:	fb03 f201 	mul.w	r2, r3, r1
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	3323      	adds	r3, #35	; 0x23
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	440b      	add	r3, r1
 8002c38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	3323      	adds	r3, #35	; 0x23
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c4c:	1ac3      	subs	r3, r0, r3
 8002c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c52:	b299      	uxth	r1, r3
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4403      	add	r3, r0
 8002c62:	3366      	adds	r3, #102	; 0x66
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	440b      	add	r3, r1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	801a      	strh	r2, [r3, #0]
																  	    pwm_struct->Command_Var_Step[1][y],
																		pwm_struct->Command_Var_Step[1][y + 1],
																		pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
																		pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
				}
				return;
 8002c6e:	e275      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002c76:	4619      	mov	r1, r3
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	3323      	adds	r3, #35	; 0x23
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c86:	1ac9      	subs	r1, r1, r3
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7f1b      	ldrb	r3, [r3, #28]
 8002c90:	461c      	mov	r4, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	4423      	add	r3, r4
 8002c9c:	3330      	adds	r3, #48	; 0x30
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4403      	add	r3, r0
 8002ca2:	88db      	ldrh	r3, [r3, #6]
 8002ca4:	461c      	mov	r4, r3
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7f1b      	ldrb	r3, [r3, #28]
 8002cac:	461d      	mov	r5, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	442b      	add	r3, r5
 8002cb8:	3330      	adds	r3, #48	; 0x30
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4403      	add	r3, r0
 8002cbe:	88db      	ldrh	r3, [r3, #6]
 8002cc0:	1ae3      	subs	r3, r4, r3
 8002cc2:	fb03 f201 	mul.w	r2, r3, r1
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	3323      	adds	r3, #35	; 0x23
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	3323      	adds	r3, #35	; 0x23
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ce6:	1ac3      	subs	r3, r0, r3
 8002ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cec:	b299      	uxth	r1, r3
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7f1b      	ldrb	r3, [r3, #28]
 8002cf4:	461c      	mov	r4, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	4423      	add	r3, r4
 8002d00:	3330      	adds	r3, #48	; 0x30
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4403      	add	r3, r0
 8002d06:	88db      	ldrh	r3, [r3, #6]
 8002d08:	440b      	add	r3, r1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	801a      	strh	r2, [r3, #0]
				return;
 8002d10:	e224      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7f5b      	ldrb	r3, [r3, #29]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	f4ff af3e 	bcc.w	8002ba0 <PWM_Duty_Cycle_Set+0x110>
			}
		}
	}

	//Check if the command variable point is outside the lines (y limits) of the 3D map
	if((pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dd08      	ble.n	8002d46 <PWM_Duty_Cycle_Set+0x2b6>
		|| (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f2c0 80bc 	blt.w	8002ebe <PWM_Duty_Cycle_Set+0x42e>
	{
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	73bb      	strb	r3, [r7, #14]
 8002d4a:	e0b2      	b.n	8002eb2 <PWM_Duty_Cycle_Set+0x422>
		{
			//Checks if the command variable point is inside the x, x + 1 collum
			if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	3314      	adds	r3, #20
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f2c0 80a3 	blt.w	8002eac <PWM_Duty_Cycle_Set+0x41c>
				&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	3314      	adds	r3, #20
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f300 8095 	bgt.w	8002eac <PWM_Duty_Cycle_Set+0x41c>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	dc3b      	bgt.n	8002e0a <PWM_Duty_Cycle_Set+0x37a>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	3314      	adds	r3, #20
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002da8:	1aca      	subs	r2, r1, r3
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	3301      	adds	r3, #1
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	3330      	adds	r3, #48	; 0x30
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	440b      	add	r3, r1
 8002db6:	88db      	ldrh	r3, [r3, #6]
 8002db8:	4618      	mov	r0, r3
 8002dba:	7bbb      	ldrb	r3, [r7, #14]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	3330      	adds	r3, #48	; 0x30
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	440b      	add	r3, r1
 8002dc4:	88db      	ldrh	r3, [r3, #6]
 8002dc6:	1ac3      	subs	r3, r0, r3
 8002dc8:	fb03 f202 	mul.w	r2, r3, r2
 8002dcc:	7bbb      	ldrb	r3, [r7, #14]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	7bbb      	ldrb	r3, [r7, #14]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	3314      	adds	r3, #20
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	440b      	add	r3, r1
 8002de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dec:	1ac3      	subs	r3, r0, r3
 8002dee:	fb92 f3f3 	sdiv	r3, r2, r3
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	3330      	adds	r3, #48	; 0x30
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	88db      	ldrh	r3, [r3, #6]
 8002e00:	4413      	add	r3, r2
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	801a      	strh	r2, [r3, #0]
																  	    pwm_struct->Command_Var_Step[0][x],
																		pwm_struct->Command_Var_Step[0][x + 1],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
				}
				return;
 8002e08:	e1a8      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e10:	4619      	mov	r1, r3
 8002e12:	7bbb      	ldrb	r3, [r7, #14]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	3314      	adds	r3, #20
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e20:	1aca      	subs	r2, r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7f5b      	ldrb	r3, [r3, #29]
 8002e26:	461c      	mov	r4, r3
 8002e28:	7bbb      	ldrb	r3, [r7, #14]
 8002e2a:	1c58      	adds	r0, r3, #1
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4623      	mov	r3, r4
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1b1b      	subs	r3, r3, r4
 8002e34:	4403      	add	r3, r0
 8002e36:	3330      	adds	r3, #48	; 0x30
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	440b      	add	r3, r1
 8002e3c:	88db      	ldrh	r3, [r3, #6]
 8002e3e:	461d      	mov	r5, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7f5b      	ldrb	r3, [r3, #29]
 8002e44:	461c      	mov	r4, r3
 8002e46:	7bb8      	ldrb	r0, [r7, #14]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1b1b      	subs	r3, r3, r4
 8002e50:	4403      	add	r3, r0
 8002e52:	3330      	adds	r3, #48	; 0x30
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	440b      	add	r3, r1
 8002e58:	88db      	ldrh	r3, [r3, #6]
 8002e5a:	1aeb      	subs	r3, r5, r3
 8002e5c:	fb03 f202 	mul.w	r2, r3, r2
 8002e60:	7bbb      	ldrb	r3, [r7, #14]
 8002e62:	3301      	adds	r3, #1
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	3314      	adds	r3, #20
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e70:	4618      	mov	r0, r3
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	3314      	adds	r3, #20
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e80:	1ac3      	subs	r3, r0, r3
 8002e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7f5b      	ldrb	r3, [r3, #29]
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	7bb8      	ldrb	r0, [r7, #14]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4623      	mov	r3, r4
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1b1b      	subs	r3, r3, r4
 8002e98:	4403      	add	r3, r0
 8002e9a:	3330      	adds	r3, #48	; 0x30
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	440b      	add	r3, r1
 8002ea0:	88db      	ldrh	r3, [r3, #6]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	801a      	strh	r2, [r3, #0]
				return;
 8002eaa:	e157      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002eac:	7bbb      	ldrb	r3, [r7, #14]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	73bb      	strb	r3, [r7, #14]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7f1b      	ldrb	r3, [r3, #28]
 8002eb6:	7bba      	ldrb	r2, [r7, #14]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f4ff af47 	bcc.w	8002d4c <PWM_Duty_Cycle_Set+0x2bc>
			}
		}
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	737b      	strb	r3, [r7, #13]
 8002ec2:	e144      	b.n	800314e <PWM_Duty_Cycle_Set+0x6be>
	{
		//Checks if the command variable point is inside the x, x + 1 collum
		if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002eca:	7b7b      	ldrb	r3, [r7, #13]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f2c0 8135 	blt.w	8003148 <PWM_Duty_Cycle_Set+0x6b8>
			&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002ee4:	7b7b      	ldrb	r3, [r7, #13]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	3314      	adds	r3, #20
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	440b      	add	r3, r1
 8002ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f300 8127 	bgt.w	8003148 <PWM_Duty_Cycle_Set+0x6b8>
		{
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	733b      	strb	r3, [r7, #12]
 8002efe:	e11d      	b.n	800313c <PWM_Duty_Cycle_Set+0x6ac>
			{
				//Checks if the command variable point is inside the y, y + 1 line
				if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002f06:	7b3b      	ldrb	r3, [r7, #12]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	3323      	adds	r3, #35	; 0x23
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f2c0 810e 	blt.w	8003136 <PWM_Duty_Cycle_Set+0x6a6>
					&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002f20:	7b3b      	ldrb	r3, [r7, #12]
 8002f22:	3301      	adds	r3, #1
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	3323      	adds	r3, #35	; 0x23
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f300 8100 	bgt.w	8003136 <PWM_Duty_Cycle_Set+0x6a6>
				{
					pwm_struct->Duty_Cycle = __PDM_BILINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	7b3b      	ldrb	r3, [r7, #12]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	3323      	adds	r3, #35	; 0x23
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f4c:	1ac9      	subs	r1, r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002f54:	4618      	mov	r0, r3
 8002f56:	7b7b      	ldrb	r3, [r7, #13]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f64:	1ac0      	subs	r0, r0, r3
 8002f66:	7b3b      	ldrb	r3, [r7, #12]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	7b7b      	ldrb	r3, [r7, #13]
 8002f6c:	1c5d      	adds	r5, r3, #1
 8002f6e:	687c      	ldr	r4, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	442b      	add	r3, r5
 8002f78:	3330      	adds	r3, #48	; 0x30
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4423      	add	r3, r4
 8002f7e:	88db      	ldrh	r3, [r3, #6]
 8002f80:	461e      	mov	r6, r3
 8002f82:	7b3b      	ldrb	r3, [r7, #12]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	7b7d      	ldrb	r5, [r7, #13]
 8002f88:	687c      	ldr	r4, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	442b      	add	r3, r5
 8002f92:	3330      	adds	r3, #48	; 0x30
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4423      	add	r3, r4
 8002f98:	88db      	ldrh	r3, [r3, #6]
 8002f9a:	1af3      	subs	r3, r6, r3
 8002f9c:	fb03 f200 	mul.w	r2, r3, r0
 8002fa0:	7b7b      	ldrb	r3, [r7, #13]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4403      	add	r3, r0
 8002fac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fb0:	461c      	mov	r4, r3
 8002fb2:	7b7b      	ldrb	r3, [r7, #13]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4403      	add	r3, r0
 8002fbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fc0:	1ae3      	subs	r3, r4, r3
 8002fc2:	fb92 f0f3 	sdiv	r0, r2, r3
 8002fc6:	7b3b      	ldrb	r3, [r7, #12]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	7b7d      	ldrb	r5, [r7, #13]
 8002fcc:	687c      	ldr	r4, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	442b      	add	r3, r5
 8002fd6:	3330      	adds	r3, #48	; 0x30
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4423      	add	r3, r4
 8002fdc:	88db      	ldrh	r3, [r3, #6]
 8002fde:	4418      	add	r0, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	7b7b      	ldrb	r3, [r7, #13]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	3314      	adds	r3, #20
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ff6:	1ae4      	subs	r4, r4, r3
 8002ff8:	7b3a      	ldrb	r2, [r7, #12]
 8002ffa:	7b7b      	ldrb	r3, [r7, #13]
 8002ffc:	1c5e      	adds	r6, r3, #1
 8002ffe:	687d      	ldr	r5, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	4433      	add	r3, r6
 8003008:	3330      	adds	r3, #48	; 0x30
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	442b      	add	r3, r5
 800300e:	88db      	ldrh	r3, [r3, #6]
 8003010:	469c      	mov	ip, r3
 8003012:	7b3a      	ldrb	r2, [r7, #12]
 8003014:	7b7e      	ldrb	r6, [r7, #13]
 8003016:	687d      	ldr	r5, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	4433      	add	r3, r6
 8003020:	3330      	adds	r3, #48	; 0x30
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	442b      	add	r3, r5
 8003026:	88db      	ldrh	r3, [r3, #6]
 8003028:	ebac 0303 	sub.w	r3, ip, r3
 800302c:	fb03 f204 	mul.w	r2, r3, r4
 8003030:	7b7b      	ldrb	r3, [r7, #13]
 8003032:	3301      	adds	r3, #1
 8003034:	687c      	ldr	r4, [r7, #4]
 8003036:	3314      	adds	r3, #20
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4423      	add	r3, r4
 800303c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003040:	461d      	mov	r5, r3
 8003042:	7b7b      	ldrb	r3, [r7, #13]
 8003044:	687c      	ldr	r4, [r7, #4]
 8003046:	3314      	adds	r3, #20
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4423      	add	r3, r4
 800304c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003050:	1aeb      	subs	r3, r5, r3
 8003052:	fb92 f4f3 	sdiv	r4, r2, r3
 8003056:	7b3a      	ldrb	r2, [r7, #12]
 8003058:	7b7e      	ldrb	r6, [r7, #13]
 800305a:	687d      	ldr	r5, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	4433      	add	r3, r6
 8003064:	3330      	adds	r3, #48	; 0x30
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	442b      	add	r3, r5
 800306a:	88db      	ldrh	r3, [r3, #6]
 800306c:	4423      	add	r3, r4
 800306e:	1ac3      	subs	r3, r0, r3
 8003070:	fb03 f201 	mul.w	r2, r3, r1
 8003074:	7b3b      	ldrb	r3, [r7, #12]
 8003076:	3301      	adds	r3, #1
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	3323      	adds	r3, #35	; 0x23
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	440b      	add	r3, r1
 8003080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003084:	4618      	mov	r0, r3
 8003086:	7b3b      	ldrb	r3, [r7, #12]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	3323      	adds	r3, #35	; 0x23
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	440b      	add	r3, r1
 8003090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003094:	1ac3      	subs	r3, r0, r3
 8003096:	fb92 f3f3 	sdiv	r3, r2, r3
 800309a:	b299      	uxth	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80030a2:	4618      	mov	r0, r3
 80030a4:	7b7b      	ldrb	r3, [r7, #13]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	3314      	adds	r3, #20
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030b2:	1ac0      	subs	r0, r0, r3
 80030b4:	7b3a      	ldrb	r2, [r7, #12]
 80030b6:	7b7b      	ldrb	r3, [r7, #13]
 80030b8:	1c5d      	adds	r5, r3, #1
 80030ba:	687c      	ldr	r4, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	442b      	add	r3, r5
 80030c4:	3330      	adds	r3, #48	; 0x30
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4423      	add	r3, r4
 80030ca:	88db      	ldrh	r3, [r3, #6]
 80030cc:	461e      	mov	r6, r3
 80030ce:	7b3a      	ldrb	r2, [r7, #12]
 80030d0:	7b7d      	ldrb	r5, [r7, #13]
 80030d2:	687c      	ldr	r4, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	442b      	add	r3, r5
 80030dc:	3330      	adds	r3, #48	; 0x30
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4423      	add	r3, r4
 80030e2:	88db      	ldrh	r3, [r3, #6]
 80030e4:	1af3      	subs	r3, r6, r3
 80030e6:	fb03 f200 	mul.w	r2, r3, r0
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	3301      	adds	r3, #1
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	3314      	adds	r3, #20
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4403      	add	r3, r0
 80030f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030fa:	461c      	mov	r4, r3
 80030fc:	7b7b      	ldrb	r3, [r7, #13]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	3314      	adds	r3, #20
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4403      	add	r3, r0
 8003106:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800310a:	1ae3      	subs	r3, r4, r3
 800310c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003110:	b298      	uxth	r0, r3
 8003112:	7b3a      	ldrb	r2, [r7, #12]
 8003114:	7b7d      	ldrb	r5, [r7, #13]
 8003116:	687c      	ldr	r4, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	442b      	add	r3, r5
 8003120:	3330      	adds	r3, #48	; 0x30
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4423      	add	r3, r4
 8003126:	88db      	ldrh	r3, [r3, #6]
 8003128:	4403      	add	r3, r0
 800312a:	b29b      	uxth	r3, r3
 800312c:	440b      	add	r3, r1
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	801a      	strh	r2, [r3, #0]
																		  pwm_struct->Command_Var_Step[1][y + 1],
																		  pwm_struct->Duty_Cycle_Map[y][x],
																		  pwm_struct->Duty_Cycle_Map[y][x + 1],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x + 1]);
					return;
 8003134:	e012      	b.n	800315c <PWM_Duty_Cycle_Set+0x6cc>
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8003136:	7b3b      	ldrb	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	733b      	strb	r3, [r7, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7f5b      	ldrb	r3, [r3, #29]
 8003140:	7b3a      	ldrb	r2, [r7, #12]
 8003142:	429a      	cmp	r2, r3
 8003144:	f4ff aedc 	bcc.w	8002f00 <PWM_Duty_Cycle_Set+0x470>
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003148:	7b7b      	ldrb	r3, [r7, #13]
 800314a:	3301      	adds	r3, #1
 800314c:	737b      	strb	r3, [r7, #13]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7f1b      	ldrb	r3, [r3, #28]
 8003152:	7b7a      	ldrb	r2, [r7, #13]
 8003154:	429a      	cmp	r2, r3
 8003156:	f4ff aeb5 	bcc.w	8002ec4 <PWM_Duty_Cycle_Set+0x434>
				}
			}
		}
	}
	return;
 800315a:	bf00      	nop
}
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bcf0      	pop	{r4, r5, r6, r7}
 8003162:	4770      	bx	lr

08003164 <PWM_Process_Condition>:

//Sets PWM output duty cycle based on inputs and output mode
static void PWM_Process_Condition(PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
	//Check if virtual fuse isn't tripped
	if(((Driver_Safety_Flag >> pwm_out_number) & 0x0001) == 0)
 8003170:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <PWM_Process_Condition+0x178>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	fa42 f303 	asr.w	r3, r2, r3
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 80a3 	bne.w	80032cc <PWM_Process_Condition+0x168>
	{
		//Check if output is in PWM mode
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003186:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <PWM_Process_Condition+0x17c>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	fa42 f303 	asr.w	r3, r2, r3
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d060      	beq.n	800325c <PWM_Process_Condition+0xf8>
		{
			//Checks if the inputs match the first PWM preset
			if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[0], pwm_struct->Input_DC_Preset[0]))
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f44f 720a 	mov.w	r2, #552	; 0x228
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	889a      	ldrh	r2, [r3, #4]
 80031aa:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <PWM_Process_Condition+0x180>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	891b      	ldrh	r3, [r3, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d104      	bne.n	80031c4 <PWM_Process_Condition+0x60>
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[0];
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	899a      	ldrh	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	801a      	strh	r2, [r3, #0]

	//Turns output off if virtual fuse is tripped
	else
		pwm_struct->Duty_Cycle = 0;

	return;
 80031c2:	e087      	b.n	80032d4 <PWM_Process_Condition+0x170>
			else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[1], pwm_struct->Input_DC_Preset[1]))
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f44f 720a 	mov.w	r2, #552	; 0x228
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	88da      	ldrh	r2, [r3, #6]
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <PWM_Process_Condition+0x180>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	895b      	ldrh	r3, [r3, #10]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d104      	bne.n	80031ee <PWM_Process_Condition+0x8a>
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[1];
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	89da      	ldrh	r2, [r3, #14]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	801a      	strh	r2, [r3, #0]
	return;
 80031ec:	e072      	b.n	80032d4 <PWM_Process_Condition+0x170>
			else if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0])
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	493d      	ldr	r1, [pc, #244]	; (80032e8 <PWM_Process_Condition+0x184>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <PWM_Process_Condition+0x180>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	4013      	ands	r3, r2
 8003204:	b299      	uxth	r1, r3
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4837      	ldr	r0, [pc, #220]	; (80032e8 <PWM_Process_Condition+0x184>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4403      	add	r3, r0
 8003214:	3304      	adds	r3, #4
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	4299      	cmp	r1, r3
 800321a:	d017      	beq.n	800324c <PWM_Process_Condition+0xe8>
				||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1])))
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	4932      	ldr	r1, [pc, #200]	; (80032e8 <PWM_Process_Condition+0x184>)
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3302      	adds	r3, #2
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <PWM_Process_Condition+0x180>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	4013      	ands	r3, r2
 8003234:	b299      	uxth	r1, r3
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	482b      	ldr	r0, [pc, #172]	; (80032e8 <PWM_Process_Condition+0x184>)
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	3306      	adds	r3, #6
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	4299      	cmp	r1, r3
 800324a:	d103      	bne.n	8003254 <PWM_Process_Condition+0xf0>
				PWM_Duty_Cycle_Set(pwm_struct);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fc1f 	bl	8002a90 <PWM_Duty_Cycle_Set>
 8003252:	e03e      	b.n	80032d2 <PWM_Process_Condition+0x16e>
				pwm_struct->Duty_Cycle = 0;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	801a      	strh	r2, [r3, #0]
	return;
 800325a:	e03b      	b.n	80032d4 <PWM_Process_Condition+0x170>
		else if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0])
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	4922      	ldr	r1, [pc, #136]	; (80032e8 <PWM_Process_Condition+0x184>)
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <PWM_Process_Condition+0x180>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	4013      	ands	r3, r2
 8003272:	b299      	uxth	r1, r3
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	481c      	ldr	r0, [pc, #112]	; (80032e8 <PWM_Process_Condition+0x184>)
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4403      	add	r3, r0
 8003282:	3304      	adds	r3, #4
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	4299      	cmp	r1, r3
 8003288:	d017      	beq.n	80032ba <PWM_Process_Condition+0x156>
				||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1])))
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <PWM_Process_Condition+0x184>)
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3302      	adds	r3, #2
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <PWM_Process_Condition+0x180>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	4013      	ands	r3, r2
 80032a2:	b299      	uxth	r1, r3
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	4810      	ldr	r0, [pc, #64]	; (80032e8 <PWM_Process_Condition+0x184>)
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4403      	add	r3, r0
 80032b2:	3306      	adds	r3, #6
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	4299      	cmp	r1, r3
 80032b8:	d104      	bne.n	80032c4 <PWM_Process_Condition+0x160>
			pwm_struct->Duty_Cycle = 1010;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	e006      	b.n	80032d2 <PWM_Process_Condition+0x16e>
			pwm_struct->Duty_Cycle = 0;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]
	return;
 80032ca:	e003      	b.n	80032d4 <PWM_Process_Condition+0x170>
		pwm_struct->Duty_Cycle = 0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	801a      	strh	r2, [r3, #0]
	return;
 80032d2:	bf00      	nop
}
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000512 	.word	0x20000512
 80032e0:	200005c4 	.word	0x200005c4
 80032e4:	200005c6 	.word	0x200005c6
 80032e8:	200005c8 	.word	0x200005c8

080032ec <PDM_PWM_Init>:

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (PWM_Pin_Status >> pwm_out_number) & 0x01;
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	331a      	adds	r3, #26
 80032fe:	4a6d      	ldr	r2, [pc, #436]	; (80034b4 <PDM_PWM_Init+0x1c8>)
 8003300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003304:	b21a      	sxth	r2, r3
 8003306:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <PDM_PWM_Init+0x1cc>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	4619      	mov	r1, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	fa41 f303 	asr.w	r3, r1, r3
 8003312:	b21b      	sxth	r3, r3
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	b21b      	sxth	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	b21a      	sxth	r2, r3
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	331a      	adds	r3, #26
 8003322:	b291      	uxth	r1, r2
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <PDM_PWM_Init+0x1c8>)
 8003326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b03      	cmp	r3, #3
 800332e:	f200 80ba 	bhi.w	80034a6 <PDM_PWM_Init+0x1ba>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <PDM_PWM_Init+0x4c>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	08003349 	.word	0x08003349
 800333c:	08003353 	.word	0x08003353
 8003340:	0800335d 	.word	0x0800335d
 8003344:	08003367 	.word	0x08003367
 8003348:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <PDM_PWM_Init+0x1d0>)
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	230c      	movs	r3, #12
 800334e:	837b      	strh	r3, [r7, #26]
 8003350:	e00d      	b.n	800336e <PDM_PWM_Init+0x82>
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <PDM_PWM_Init+0x1d4>)
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	2304      	movs	r3, #4
 8003358:	837b      	strh	r3, [r7, #26]
 800335a:	e008      	b.n	800336e <PDM_PWM_Init+0x82>
 800335c:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <PDM_PWM_Init+0x1d8>)
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	2308      	movs	r3, #8
 8003362:	837b      	strh	r3, [r7, #26]
 8003364:	e003      	b.n	800336e <PDM_PWM_Init+0x82>
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <PDM_PWM_Init+0x1dc>)
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	230c      	movs	r3, #12
 800336c:	837b      	strh	r3, [r7, #26]
 800336e:	bf00      	nop

	//Sets PWM parameters if PWM is enabled
	if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003370:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <PDM_PWM_Init+0x1cc>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	fa42 f303 	asr.w	r3, r2, r3
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d075      	beq.n	8003470 <PDM_PWM_Init+0x184>
	{
		//Sets the PWM frequency
		__HAL_TIM_SET_AUTORELOAD(htim, pwm_struct->PWM_Frequency);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	885a      	ldrh	r2, [r3, #2]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	885b      	ldrh	r3, [r3, #2]
 8003392:	461a      	mov	r2, r3
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	60da      	str	r2, [r3, #12]

		//Sets CAN filter and duty cycle map steps if PWM CAN is enabled and map lengths are bigger than zero
		if((((PWM_Pin_Status >> pwm_out_number) & 0x10) == OUTPUT_PWM_CAN_ENABLE)
 8003398:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <PDM_PWM_Init+0x1cc>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	fa42 f303 	asr.w	r3, r2, r3
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d061      	beq.n	8003470 <PDM_PWM_Init+0x184>
				&& (pwm_struct->Map_Lengths[0] != 0) && (pwm_struct->Map_Lengths[1] != 0))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	7f1b      	ldrb	r3, [r3, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05d      	beq.n	8003470 <PDM_PWM_Init+0x184>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	7f5b      	ldrb	r3, [r3, #29]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d059      	beq.n	8003470 <PDM_PWM_Init+0x184>
		{
			PDM_PWM_CAN_Filter_Config(hcan, pwm_struct, pwm_out_number);
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	461a      	mov	r2, r3
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7fd ff06 	bl	80011d4 <PDM_PWM_CAN_Filter_Config>

			for(uint16_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	833b      	strh	r3, [r7, #24]
 80033cc:	e020      	b.n	8003410 <PDM_PWM_Init+0x124>
				pwm_struct->Command_Var_Step[0][i] = ((i * (pwm_struct->Command_Var_Lim[0][1] - pwm_struct->Command_Var_Lim[0][0])) / pwm_struct->Map_Lengths[0]) + pwm_struct->Command_Var_Lim[0][0];
 80033ce:	8b3b      	ldrh	r3, [r7, #24]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 80033d6:	4611      	mov	r1, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80033de:	1a8a      	subs	r2, r1, r2
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	7f12      	ldrb	r2, [r2, #28]
 80033e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	8b3b      	ldrh	r3, [r7, #24]
 80033fc:	b211      	sxth	r1, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	3314      	adds	r3, #20
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	460a      	mov	r2, r1
 8003408:	805a      	strh	r2, [r3, #2]
			for(uint16_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 800340a:	8b3b      	ldrh	r3, [r7, #24]
 800340c:	3301      	adds	r3, #1
 800340e:	833b      	strh	r3, [r7, #24]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	7f1b      	ldrb	r3, [r3, #28]
 8003414:	b29b      	uxth	r3, r3
 8003416:	8b3a      	ldrh	r2, [r7, #24]
 8003418:	429a      	cmp	r2, r3
 800341a:	d9d8      	bls.n	80033ce <PDM_PWM_Init+0xe2>

			for(uint16_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 800341c:	2300      	movs	r3, #0
 800341e:	82fb      	strh	r3, [r7, #22]
 8003420:	e020      	b.n	8003464 <PDM_PWM_Init+0x178>
				pwm_struct->Command_Var_Step[1][j] = ((j * (pwm_struct->Command_Var_Lim[1][1] - pwm_struct->Command_Var_Lim[1][0])) / pwm_struct->Map_Lengths[1]) + pwm_struct->Command_Var_Lim[1][0];
 8003422:	8afb      	ldrh	r3, [r7, #22]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 800342a:	4611      	mov	r1, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 8003432:	1a8a      	subs	r2, r1, r2
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	7f52      	ldrb	r2, [r2, #29]
 800343c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003440:	b29a      	uxth	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003448:	b29b      	uxth	r3, r3
 800344a:	4413      	add	r3, r2
 800344c:	b29a      	uxth	r2, r3
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	b211      	sxth	r1, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	3323      	adds	r3, #35	; 0x23
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	460a      	mov	r2, r1
 800345c:	805a      	strh	r2, [r3, #2]
			for(uint16_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 800345e:	8afb      	ldrh	r3, [r7, #22]
 8003460:	3301      	adds	r3, #1
 8003462:	82fb      	strh	r3, [r7, #22]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	7f5b      	ldrb	r3, [r3, #29]
 8003468:	b29b      	uxth	r3, r3
 800346a:	8afa      	ldrh	r2, [r7, #22]
 800346c:	429a      	cmp	r2, r3
 800346e:	d9d8      	bls.n	8003422 <PDM_PWM_Init+0x136>
		}
	}

	//Start the PWM timer if output is enabled
	if((Output_Pin[pwm_out_number].Enabled_Inputs[0] != 0)
 8003470:	79fa      	ldrb	r2, [r7, #7]
 8003472:	4916      	ldr	r1, [pc, #88]	; (80034cc <PDM_PWM_Init+0x1e0>)
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <PDM_PWM_Init+0x1be>
			&& (Output_Pin[pwm_out_number].Enabled_Inputs[1] != 0))
 8003484:	79fa      	ldrb	r2, [r7, #7]
 8003486:	4911      	ldr	r1, [pc, #68]	; (80034cc <PDM_PWM_Init+0x1e0>)
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3302      	adds	r3, #2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <PDM_PWM_Init+0x1be>
		HAL_TIM_PWM_Start(htim, tim_channel);
 800349a:	8b7b      	ldrh	r3, [r7, #26]
 800349c:	4619      	mov	r1, r3
 800349e:	69f8      	ldr	r0, [r7, #28]
 80034a0:	f006 fe4a 	bl	800a138 <HAL_TIM_PWM_Start>

	return;
 80034a4:	e001      	b.n	80034aa <PDM_PWM_Init+0x1be>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <PDM_PWM_Init+0x1c0>
	return;
 80034aa:	bf00      	nop
}
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000574 	.word	0x20000574
 80034b8:	200005c4 	.word	0x200005c4
 80034bc:	200003e0 	.word	0x200003e0
 80034c0:	20000470 	.word	0x20000470
 80034c4:	20000398 	.word	0x20000398
 80034c8:	20000350 	.word	0x20000350
 80034cc:	200005c8 	.word	0x200005c8

080034d0 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d86b      	bhi.n	80035ba <PDM_PWM_Output_Process+0xea>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <PDM_PWM_Output_Process+0x18>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003503 	.word	0x08003503
 80034f0:	0800350d 	.word	0x0800350d
 80034f4:	08003517 	.word	0x08003517
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <PDM_PWM_Output_Process+0xf4>)
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	230c      	movs	r3, #12
 80034fe:	817b      	strh	r3, [r7, #10]
 8003500:	e00d      	b.n	800351e <PDM_PWM_Output_Process+0x4e>
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <PDM_PWM_Output_Process+0xf8>)
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	2304      	movs	r3, #4
 8003508:	817b      	strh	r3, [r7, #10]
 800350a:	e008      	b.n	800351e <PDM_PWM_Output_Process+0x4e>
 800350c:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <PDM_PWM_Output_Process+0xfc>)
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	2308      	movs	r3, #8
 8003512:	817b      	strh	r3, [r7, #10]
 8003514:	e003      	b.n	800351e <PDM_PWM_Output_Process+0x4e>
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <PDM_PWM_Output_Process+0x100>)
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	230c      	movs	r3, #12
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	bf00      	nop
//		}
//	}else
//		pwm_struct->Duty_Cycle = 0;

	//Checks inputs and output mode to set appropriate duty cycle
	PWM_Process_Condition(pwm_struct, pwm_out_number);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fe1d 	bl	8003164 <PWM_Process_Condition>

	__HAL_TIM_SET_COMPARE(htim, tim_channel, (htim->Init.Period * pwm_struct->Duty_Cycle) / 1000);
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10d      	bne.n	800354c <PDM_PWM_Output_Process+0x7c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	8812      	ldrh	r2, [r2, #0]
 8003538:	fb03 f202 	mul.w	r2, r3, r2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4924      	ldr	r1, [pc, #144]	; (80035d4 <PDM_PWM_Output_Process+0x104>)
 8003542:	fba1 1202 	umull	r1, r2, r1, r2
 8003546:	0992      	lsrs	r2, r2, #6
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
 800354a:	e02e      	b.n	80035aa <PDM_PWM_Output_Process+0xda>
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d10d      	bne.n	800356e <PDM_PWM_Output_Process+0x9e>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	8812      	ldrh	r2, [r2, #0]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	491c      	ldr	r1, [pc, #112]	; (80035d4 <PDM_PWM_Output_Process+0x104>)
 8003564:	fba1 1303 	umull	r1, r3, r1, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	6393      	str	r3, [r2, #56]	; 0x38
 800356c:	e01d      	b.n	80035aa <PDM_PWM_Output_Process+0xda>
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d10d      	bne.n	8003590 <PDM_PWM_Output_Process+0xc0>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	4913      	ldr	r1, [pc, #76]	; (80035d4 <PDM_PWM_Output_Process+0x104>)
 8003586:	fba1 1303 	umull	r1, r3, r1, r3
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800358e:	e00c      	b.n	80035aa <PDM_PWM_Output_Process+0xda>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <PDM_PWM_Output_Process+0x104>)
 80035a2:	fba1 1303 	umull	r1, r3, r1, r3
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	Data_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->Duty_Cycle;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	331a      	adds	r3, #26
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	8811      	ldrh	r1, [r2, #0]
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <PDM_PWM_Output_Process+0x108>)
 80035b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 80035b8:	e000      	b.n	80035bc <PDM_PWM_Output_Process+0xec>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80035ba:	bf00      	nop
}
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200003e0 	.word	0x200003e0
 80035c8:	20000470 	.word	0x20000470
 80035cc:	20000398 	.word	0x20000398
 80035d0:	20000350 	.word	0x20000350
 80035d4:	10624dd3 	.word	0x10624dd3
 80035d8:	20000538 	.word	0x20000538

080035dc <PDM_Next_Data_Conversion>:
//uint8_t next_data - next data to be converted:	0: Output current 0
//													1: Output current 1
//													2: Driver temperature
//													3: Driver voltage
static void PDM_Next_Data_Conversion(uint8_t next_data)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
	switch(next_data)
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d84c      	bhi.n	8003686 <PDM_Next_Data_Conversion+0xaa>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <PDM_Next_Data_Conversion+0x18>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003625 	.word	0x08003625
 80035fc:	08003645 	.word	0x08003645
 8003600:	08003665 	.word	0x08003665
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003604:	2201      	movs	r2, #1
 8003606:	2120      	movs	r1, #32
 8003608:	4821      	ldr	r0, [pc, #132]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800360a:	f003 fa13 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 800360e:	2200      	movs	r2, #0
 8003610:	2108      	movs	r1, #8
 8003612:	481f      	ldr	r0, [pc, #124]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 8003614:	f003 fa0e 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003618:	2200      	movs	r2, #0
 800361a:	2104      	movs	r1, #4
 800361c:	481c      	ldr	r0, [pc, #112]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800361e:	f003 fa09 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8003622:	e02f      	b.n	8003684 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003624:	2201      	movs	r2, #1
 8003626:	2120      	movs	r1, #32
 8003628:	4819      	ldr	r0, [pc, #100]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800362a:	f003 fa03 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 800362e:	2200      	movs	r2, #0
 8003630:	2108      	movs	r1, #8
 8003632:	4817      	ldr	r0, [pc, #92]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 8003634:	f003 f9fe 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003638:	2201      	movs	r2, #1
 800363a:	2104      	movs	r1, #4
 800363c:	4814      	ldr	r0, [pc, #80]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800363e:	f003 f9f9 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8003642:	e01f      	b.n	8003684 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003644:	2201      	movs	r2, #1
 8003646:	2120      	movs	r1, #32
 8003648:	4811      	ldr	r0, [pc, #68]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800364a:	f003 f9f3 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 800364e:	2201      	movs	r2, #1
 8003650:	2108      	movs	r1, #8
 8003652:	480f      	ldr	r0, [pc, #60]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 8003654:	f003 f9ee 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003658:	2200      	movs	r2, #0
 800365a:	2104      	movs	r1, #4
 800365c:	480c      	ldr	r0, [pc, #48]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800365e:	f003 f9e9 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8003662:	e00f      	b.n	8003684 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003664:	2201      	movs	r2, #1
 8003666:	2120      	movs	r1, #32
 8003668:	4809      	ldr	r0, [pc, #36]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800366a:	f003 f9e3 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 800366e:	2201      	movs	r2, #1
 8003670:	2108      	movs	r1, #8
 8003672:	4807      	ldr	r0, [pc, #28]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 8003674:	f003 f9de 	bl	8006a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	2104      	movs	r1, #4
 800367c:	4804      	ldr	r0, [pc, #16]	; (8003690 <PDM_Next_Data_Conversion+0xb4>)
 800367e:	f003 f9d9 	bl	8006a34 <HAL_GPIO_WritePin>
		break;
 8003682:	bf00      	nop
	}

	return;
 8003684:	bf00      	nop
 8003686:	bf00      	nop
}
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000

08003694 <PDM_Read_Data>:
//										1: Output current 1
//										2: Driver temperature
//										3: Driver voltage
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Read_Data(uint8_t *data_read)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	//Stop us timer to reduce processing cost
	HAL_TIM_Base_Stop_IT(&htim7);
 800369c:	48a5      	ldr	r0, [pc, #660]	; (8003934 <PDM_Read_Data+0x2a0>)
 800369e:	f006 fccd 	bl	800a03c <HAL_TIM_Base_Stop_IT>

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(*data_read)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	f200 81af 	bhi.w	8003a0a <PDM_Read_Data+0x376>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <PDM_Read_Data+0x20>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	08003791 	.word	0x08003791
 80036bc:	0800388d 	.word	0x0800388d
 80036c0:	08003929 	.word	0x08003929
	{
	case Data_Read_Current0:
		*data_read = Data_Read_Current1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e05b      	b.n	8003788 <PDM_Read_Data+0xf4>
		{
			//Convert ADC into current
			Data_Buffer[i * 2] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	4a99      	ldr	r2, [pc, #612]	; (8003938 <PDM_Read_Data+0x2a4>)
 80036d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d8:	461a      	mov	r2, r3
 80036da:	f241 63f7 	movw	r3, #5879	; 0x16f7
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 80036e6:	33dc      	adds	r3, #220	; 0xdc
 80036e8:	4a94      	ldr	r2, [pc, #592]	; (800393c <PDM_Read_Data+0x2a8>)
 80036ea:	fb82 1203 	smull	r1, r2, r2, r3
 80036ee:	1312      	asrs	r2, r2, #12
 80036f0:	17db      	asrs	r3, r3, #31
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	b291      	uxth	r1, r2
 80036fa:	4a91      	ldr	r2, [pc, #580]	; (8003940 <PDM_Read_Data+0x2ac>)
 80036fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[i * 2] > Output_Pin[i * 2].Current_Thresholds)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4a8e      	ldr	r2, [pc, #568]	; (8003940 <PDM_Read_Data+0x2ac>)
 8003706:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	005a      	lsls	r2, r3, #1
 800370e:	488d      	ldr	r0, [pc, #564]	; (8003944 <PDM_Read_Data+0x2b0>)
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	3308      	adds	r3, #8
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	4299      	cmp	r1, r3
 8003720:	d90d      	bls.n	800373e <PDM_Read_Data+0xaa>
				Driver_Overcurrent_Flag |= (1 << (i * 2));
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	2201      	movs	r2, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	b21a      	sxth	r2, r3
 800372e:	4b86      	ldr	r3, [pc, #536]	; (8003948 <PDM_Read_Data+0x2b4>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b21b      	sxth	r3, r3
 8003734:	4313      	orrs	r3, r2
 8003736:	b21b      	sxth	r3, r3
 8003738:	b29a      	uxth	r2, r3
 800373a:	4b83      	ldr	r3, [pc, #524]	; (8003948 <PDM_Read_Data+0x2b4>)
 800373c:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	4a7d      	ldr	r2, [pc, #500]	; (8003938 <PDM_Read_Data+0x2a4>)
 8003742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003746:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800374a:	d20d      	bcs.n	8003768 <PDM_Read_Data+0xd4>
				Data_ID_Buffer[i * 2] |= 1;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4a7e      	ldr	r2, [pc, #504]	; (800394c <PDM_Read_Data+0x2b8>)
 8003752:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	b291      	uxth	r1, r2
 8003760:	4a7a      	ldr	r2, [pc, #488]	; (800394c <PDM_Read_Data+0x2b8>)
 8003762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003766:	e00c      	b.n	8003782 <PDM_Read_Data+0xee>
			else
				Data_ID_Buffer[i * 2] &= 0xFFFE;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4a77      	ldr	r2, [pc, #476]	; (800394c <PDM_Read_Data+0x2b8>)
 800376e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	b291      	uxth	r1, r2
 800377c:	4a73      	ldr	r2, [pc, #460]	; (800394c <PDM_Read_Data+0x2b8>)
 800377e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	3301      	adds	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b07      	cmp	r3, #7
 800378c:	d9a0      	bls.n	80036d0 <PDM_Read_Data+0x3c>
		}
		break;
 800378e:	e13c      	b.n	8003a0a <PDM_Read_Data+0x376>

	case Data_Read_Current1:
		*data_read = Data_Read_Current0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73bb      	strb	r3, [r7, #14]
 800379a:	e063      	b.n	8003864 <PDM_Read_Data+0x1d0>
		{
			//Convert ADC into current
			Data_Buffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	4a66      	ldr	r2, [pc, #408]	; (8003938 <PDM_Read_Data+0x2a4>)
 80037a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a4:	461a      	mov	r2, r3
 80037a6:	f241 63f7 	movw	r3, #5879	; 0x16f7
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 80037b2:	33dc      	adds	r3, #220	; 0xdc
 80037b4:	4a61      	ldr	r2, [pc, #388]	; (800393c <PDM_Read_Data+0x2a8>)
 80037b6:	fb82 1203 	smull	r1, r2, r2, r3
 80037ba:	1312      	asrs	r2, r2, #12
 80037bc:	17db      	asrs	r3, r3, #31
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	7bbb      	ldrb	r3, [r7, #14]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	3301      	adds	r3, #1
 80037c6:	b291      	uxth	r1, r2
 80037c8:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <PDM_Read_Data+0x2ac>)
 80037ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[(i * 2) + 1] > Output_Pin[(i * 2) + 1].Current_Thresholds)
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a5a      	ldr	r2, [pc, #360]	; (8003940 <PDM_Read_Data+0x2ac>)
 80037d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80037da:	7bbb      	ldrb	r3, [r7, #14]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	4858      	ldr	r0, [pc, #352]	; (8003944 <PDM_Read_Data+0x2b0>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4403      	add	r3, r0
 80037ec:	3308      	adds	r3, #8
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	4299      	cmp	r1, r3
 80037f2:	d90e      	bls.n	8003812 <PDM_Read_Data+0x17e>
				Driver_Overcurrent_Flag |= (1 << ((i * 2) + 1));
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	3301      	adds	r3, #1
 80037fa:	2201      	movs	r2, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	b21a      	sxth	r2, r3
 8003802:	4b51      	ldr	r3, [pc, #324]	; (8003948 <PDM_Read_Data+0x2b4>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b21b      	sxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b21b      	sxth	r3, r3
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b4e      	ldr	r3, [pc, #312]	; (8003948 <PDM_Read_Data+0x2b4>)
 8003810:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	4a48      	ldr	r2, [pc, #288]	; (8003938 <PDM_Read_Data+0x2a4>)
 8003816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800381a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800381e:	d20f      	bcs.n	8003840 <PDM_Read_Data+0x1ac>
				Data_ID_Buffer[(i * 2) + 1] |= 1;
 8003820:	7bbb      	ldrb	r3, [r7, #14]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	3301      	adds	r3, #1
 8003826:	4a49      	ldr	r2, [pc, #292]	; (800394c <PDM_Read_Data+0x2b8>)
 8003828:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800382c:	7bbb      	ldrb	r3, [r7, #14]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	3301      	adds	r3, #1
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	b291      	uxth	r1, r2
 8003838:	4a44      	ldr	r2, [pc, #272]	; (800394c <PDM_Read_Data+0x2b8>)
 800383a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800383e:	e00e      	b.n	800385e <PDM_Read_Data+0x1ca>
			else
				Data_ID_Buffer[(i * 2) + 1] &= 0xFFFE;
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	3301      	adds	r3, #1
 8003846:	4a41      	ldr	r2, [pc, #260]	; (800394c <PDM_Read_Data+0x2b8>)
 8003848:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	3301      	adds	r3, #1
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	b291      	uxth	r1, r2
 8003858:	4a3c      	ldr	r2, [pc, #240]	; (800394c <PDM_Read_Data+0x2b8>)
 800385a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	3301      	adds	r3, #1
 8003862:	73bb      	strb	r3, [r7, #14]
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	2b07      	cmp	r3, #7
 8003868:	d998      	bls.n	800379c <PDM_Read_Data+0x108>
		}

		if(Accumulator_Temp_Read >= READING_DELAY_TEMP)
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <PDM_Read_Data+0x2bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b09      	cmp	r3, #9
 8003870:	d903      	bls.n	800387a <PDM_Read_Data+0x1e6>
			*data_read = Data_Read_Temperature;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]

		else if(Accumulator_Volt_Read >= READING_DELAY_VOLT)
			*data_read = Data_Read_Voltage;

		break;
 8003878:	e0c4      	b.n	8003a04 <PDM_Read_Data+0x370>
		else if(Accumulator_Volt_Read >= READING_DELAY_VOLT)
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <PDM_Read_Data+0x2c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b09      	cmp	r3, #9
 8003880:	f240 80c0 	bls.w	8003a04 <PDM_Read_Data+0x370>
			*data_read = Data_Read_Voltage;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2203      	movs	r2, #3
 8003888:	701a      	strb	r2, [r3, #0]
		break;
 800388a:	e0bb      	b.n	8003a04 <PDM_Read_Data+0x370>

	case Data_Read_Temperature:
		*data_read = Data_Read_Current0;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	737b      	strb	r3, [r7, #13]
 8003896:	e043      	b.n	8003920 <PDM_Read_Data+0x28c>
		{
			//Convert ADC into temperature
			Data_Buffer[16 + i] = __PDM_CONVERT_TEMPERATURE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003898:	7b7b      	ldrb	r3, [r7, #13]
 800389a:	4a27      	ldr	r2, [pc, #156]	; (8003938 <PDM_Read_Data+0x2a4>)
 800389c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b25      	ldr	r3, [pc, #148]	; (8003938 <PDM_Read_Data+0x2a4>)
 80038a4:	8a1b      	ldrh	r3, [r3, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f06f 0215 	mvn.w	r2, #21
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	4a29      	ldr	r2, [pc, #164]	; (8003958 <PDM_Read_Data+0x2c4>)
 80038b4:	fb82 1203 	smull	r1, r2, r2, r3
 80038b8:	1092      	asrs	r2, r2, #2
 80038ba:	17db      	asrs	r3, r3, #31
 80038bc:	1ad2      	subs	r2, r2, r3
 80038be:	7b7b      	ldrb	r3, [r7, #13]
 80038c0:	3310      	adds	r3, #16
 80038c2:	b291      	uxth	r1, r2
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <PDM_Read_Data+0x2ac>)
 80038c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 80038ca:	7b7b      	ldrb	r3, [r7, #13]
 80038cc:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <PDM_Read_Data+0x2a4>)
 80038ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038d2:	2b09      	cmp	r3, #9
 80038d4:	d906      	bls.n	80038e4 <PDM_Read_Data+0x250>
 80038d6:	7b7b      	ldrb	r3, [r7, #13]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <PDM_Read_Data+0x2a4>)
 80038da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038de:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80038e2:	d90d      	bls.n	8003900 <PDM_Read_Data+0x26c>
				Data_ID_Buffer[16 + i] |= 1;
 80038e4:	7b7b      	ldrb	r3, [r7, #13]
 80038e6:	3310      	adds	r3, #16
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <PDM_Read_Data+0x2b8>)
 80038ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80038ee:	7b7b      	ldrb	r3, [r7, #13]
 80038f0:	3310      	adds	r3, #16
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	b291      	uxth	r1, r2
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <PDM_Read_Data+0x2b8>)
 80038fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80038fe:	e00c      	b.n	800391a <PDM_Read_Data+0x286>
			else
				Data_ID_Buffer[16 + i] &= 0xFFFE;
 8003900:	7b7b      	ldrb	r3, [r7, #13]
 8003902:	3310      	adds	r3, #16
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <PDM_Read_Data+0x2b8>)
 8003906:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800390a:	7b7b      	ldrb	r3, [r7, #13]
 800390c:	3310      	adds	r3, #16
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	b291      	uxth	r1, r2
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <PDM_Read_Data+0x2b8>)
 8003916:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800391a:	7b7b      	ldrb	r3, [r7, #13]
 800391c:	3301      	adds	r3, #1
 800391e:	737b      	strb	r3, [r7, #13]
 8003920:	7b7b      	ldrb	r3, [r7, #13]
 8003922:	2b07      	cmp	r3, #7
 8003924:	d9b8      	bls.n	8003898 <PDM_Read_Data+0x204>
		}
		break;
 8003926:	e070      	b.n	8003a0a <PDM_Read_Data+0x376>

	case Data_Read_Voltage:
		*data_read = Data_Read_Current0;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	733b      	strb	r3, [r7, #12]
 8003932:	e048      	b.n	80039c6 <PDM_Read_Data+0x332>
 8003934:	20000428 	.word	0x20000428
 8003938:	200005b0 	.word	0x200005b0
 800393c:	68db8bad 	.word	0x68db8bad
 8003940:	20000538 	.word	0x20000538
 8003944:	200005c8 	.word	0x200005c8
 8003948:	20000510 	.word	0x20000510
 800394c:	20000574 	.word	0x20000574
 8003950:	20000f48 	.word	0x20000f48
 8003954:	20000f4c 	.word	0x20000f4c
 8003958:	66666667 	.word	0x66666667
		{
			//Convert ADC into voltage if the ADC value is valid
			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 800395c:	7b3b      	ldrb	r3, [r7, #12]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <PDM_Read_Data+0x3bc>)
 8003960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003964:	2b09      	cmp	r3, #9
 8003966:	d906      	bls.n	8003976 <PDM_Read_Data+0x2e2>
 8003968:	7b3b      	ldrb	r3, [r7, #12]
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <PDM_Read_Data+0x3bc>)
 800396c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003970:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003974:	d90a      	bls.n	800398c <PDM_Read_Data+0x2f8>
				Data_ID_Buffer[24] &= 0xFFFE;
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <PDM_Read_Data+0x3c0>)
 8003978:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b34      	ldr	r3, [pc, #208]	; (8003a54 <PDM_Read_Data+0x3c0>)
 8003982:	861a      	strh	r2, [r3, #48]	; 0x30
		for(uint8_t i = 0; i < 8; i++)
 8003984:	7b3b      	ldrb	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
 8003988:	733b      	strb	r3, [r7, #12]
 800398a:	e01c      	b.n	80039c6 <PDM_Read_Data+0x332>
			else
			{
				Data_Buffer[24] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[i], ADC_BUFFER[8]);
 800398c:	7b3b      	ldrb	r3, [r7, #12]
 800398e:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <PDM_Read_Data+0x3bc>)
 8003990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003994:	461a      	mov	r2, r3
 8003996:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <PDM_Read_Data+0x3bc>)
 8003998:	8a1b      	ldrh	r3, [r3, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 22c4 	movw	r2, #4804	; 0x12c4
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <PDM_Read_Data+0x3c4>)
 80039a6:	fb82 1203 	smull	r1, r2, r2, r3
 80039aa:	1312      	asrs	r2, r2, #12
 80039ac:	17db      	asrs	r3, r3, #31
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <PDM_Read_Data+0x3c8>)
 80039b4:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_ID_Buffer[24] |= 1;
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <PDM_Read_Data+0x3c0>)
 80039b8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <PDM_Read_Data+0x3c0>)
 80039c2:	861a      	strh	r2, [r3, #48]	; 0x30
				break;
 80039c4:	e002      	b.n	80039cc <PDM_Read_Data+0x338>
		for(uint8_t i = 0; i < 8; i++)
 80039c6:	7b3b      	ldrb	r3, [r7, #12]
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d9c7      	bls.n	800395c <PDM_Read_Data+0x2c8>
			}
		}

		//If no ADC value is valid, calculate voltage with Driver 1 reading
		if((Data_ID_Buffer[24] & 0xFFFE) == 0)
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <PDM_Read_Data+0x3c0>)
 80039ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80039d0:	461a      	mov	r2, r3
 80039d2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d115      	bne.n	8003a08 <PDM_Read_Data+0x374>
			Data_Buffer[0] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[0], ADC_BUFFER[8]);
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <PDM_Read_Data+0x3bc>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <PDM_Read_Data+0x3bc>)
 80039e4:	8a1b      	ldrh	r3, [r3, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 22c4 	movw	r2, #4804	; 0x12c4
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <PDM_Read_Data+0x3c4>)
 80039f2:	fb82 1203 	smull	r1, r2, r2, r3
 80039f6:	1312      	asrs	r2, r2, #12
 80039f8:	17db      	asrs	r3, r3, #31
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <PDM_Read_Data+0x3c8>)
 8003a00:	801a      	strh	r2, [r3, #0]

		break;
 8003a02:	e001      	b.n	8003a08 <PDM_Read_Data+0x374>
		break;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <PDM_Read_Data+0x376>
		break;
 8003a08:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	Data_Buffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(ADC_BUFFER[9]);
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <PDM_Read_Data+0x3bc>)
 8003a0c:	8a5b      	ldrh	r3, [r3, #18]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f647 53ea 	movw	r3, #32234	; 0x7dea
 8003a14:	fb03 f202 	mul.w	r2, r3, r2
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <PDM_Read_Data+0x3cc>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <PDM_Read_Data+0x3d0>)
 8003a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a22:	1192      	asrs	r2, r2, #6
 8003a24:	17db      	asrs	r3, r3, #31
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <PDM_Read_Data+0x3c8>)
 8003a2c:	865a      	strh	r2, [r3, #50]	; 0x32

	//Sets multiplexer for next data conversion
	PDM_Next_Data_Conversion(*data_read);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fdd2 	bl	80035dc <PDM_Next_Data_Conversion>

	Accumulator_Delay = 0;
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <PDM_Read_Data+0x3d4>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

	//Restart us timer
	return HAL_TIM_Base_Start_IT(&htim7);
 8003a3e:	480b      	ldr	r0, [pc, #44]	; (8003a6c <PDM_Read_Data+0x3d8>)
 8003a40:	f006 fa8c 	bl	8009f5c <HAL_TIM_Base_Start_IT>
 8003a44:	4603      	mov	r3, r0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200005b0 	.word	0x200005b0
 8003a54:	20000574 	.word	0x20000574
 8003a58:	68db8bad 	.word	0x68db8bad
 8003a5c:	20000538 	.word	0x20000538
 8003a60:	ffd56d90 	.word	0xffd56d90
 8003a64:	10624dd3 	.word	0x10624dd3
 8003a68:	20000f28 	.word	0x20000f28
 8003a6c:	20000428 	.word	0x20000428

08003a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <HAL_MspInit+0x4c>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <HAL_MspInit+0x4c>)
 8003a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a84:	6453      	str	r3, [r2, #68]	; 0x44
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <HAL_MspInit+0x4c>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_MspInit+0x4c>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_MspInit+0x4c>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_MspInit+0x4c>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6b      	ldr	r2, [pc, #428]	; (8003c8c <HAL_ADC_MspInit+0x1cc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d172      	bne.n	8003bc8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	4b67      	ldr	r3, [pc, #412]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a62      	ldr	r2, [pc, #392]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b60      	ldr	r3, [pc, #384]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a5b      	ldr	r2, [pc, #364]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8003b36:	23e0      	movs	r3, #224	; 0xe0
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 031c 	add.w	r3, r7, #28
 8003b46:	4619      	mov	r1, r3
 8003b48:	4852      	ldr	r0, [pc, #328]	; (8003c94 <HAL_ADC_MspInit+0x1d4>)
 8003b4a:	f002 fcd3 	bl	80064f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8003b4e:	2310      	movs	r3, #16
 8003b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b52:	2303      	movs	r3, #3
 8003b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8003b5a:	f107 031c 	add.w	r3, r7, #28
 8003b5e:	4619      	mov	r1, r3
 8003b60:	484d      	ldr	r0, [pc, #308]	; (8003c98 <HAL_ADC_MspInit+0x1d8>)
 8003b62:	f002 fcc7 	bl	80064f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003b66:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b68:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_ADC_MspInit+0x1e0>)
 8003b6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b72:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b78:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b8e:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba4:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003baa:	483c      	ldr	r0, [pc, #240]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003bac:	f002 f904 	bl	8005db8 <HAL_DMA_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003bb6:	f7fd fac7 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a37      	ldr	r2, [pc, #220]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc0:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <HAL_ADC_MspInit+0x1dc>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003bc6:	e05d      	b.n	8003c84 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a35      	ldr	r2, [pc, #212]	; (8003ca4 <HAL_ADC_MspInit+0x1e4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d158      	bne.n	8003c84 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a2d      	ldr	r2, [pc, #180]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_ADC_MspInit+0x1d0>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c16:	f107 031c 	add.w	r3, r7, #28
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	481d      	ldr	r0, [pc, #116]	; (8003c94 <HAL_ADC_MspInit+0x1d4>)
 8003c1e:	f002 fc69 	bl	80064f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003c22:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_ADC_MspInit+0x1ec>)
 8003c26:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003c28:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c2e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c42:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c4a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c52:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c5a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003c68:	480f      	ldr	r0, [pc, #60]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c6a:	f002 f8a5 	bl	8005db8 <HAL_DMA_Init>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8003c74:	f7fd fa68 	bl	8001148 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <HAL_ADC_MspInit+0x1e8>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c84:	bf00      	nop
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40012000 	.word	0x40012000
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40020800 	.word	0x40020800
 8003c9c:	2000020c 	.word	0x2000020c
 8003ca0:	40026410 	.word	0x40026410
 8003ca4:	40012100 	.word	0x40012100
 8003ca8:	2000026c 	.word	0x2000026c
 8003cac:	40026440 	.word	0x40026440

08003cb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_CAN_MspInit+0x94>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d134      	bne.n	8003d3c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <HAL_CAN_MspInit+0x98>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_CAN_MspInit+0x98>)
 8003cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_CAN_MspInit+0x98>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_CAN_MspInit+0x98>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <HAL_CAN_MspInit+0x98>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_CAN_MspInit+0x98>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	2302      	movs	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d1c:	2309      	movs	r3, #9
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	4619      	mov	r1, r3
 8003d26:	4809      	ldr	r0, [pc, #36]	; (8003d4c <HAL_CAN_MspInit+0x9c>)
 8003d28:	f002 fbe4 	bl	80064f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2102      	movs	r1, #2
 8003d30:	2014      	movs	r0, #20
 8003d32:	f001 ffae 	bl	8005c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003d36:	2014      	movs	r0, #20
 8003d38:	f001 ffc7 	bl	8005cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003d3c:	bf00      	nop
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40006400 	.word	0x40006400
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40020400 	.word	0x40020400

08003d50 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_CAN_MspDeInit+0x38>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10d      	bne.n	8003d7e <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_CAN_MspDeInit+0x3c>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_CAN_MspDeInit+0x3c>)
 8003d68:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003d6e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003d72:	4807      	ldr	r0, [pc, #28]	; (8003d90 <HAL_CAN_MspDeInit+0x40>)
 8003d74:	f002 fd52 	bl	800681c <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8003d78:	2014      	movs	r0, #20
 8003d7a:	f001 ffb4 	bl	8005ce6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40006400 	.word	0x40006400
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020400 	.word	0x40020400

08003d94 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <HAL_CRC_MspInit+0x3c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_CRC_MspInit+0x40>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <HAL_CRC_MspInit+0x40>)
 8003db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <HAL_CRC_MspInit+0x40>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023000 	.word	0x40023000
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <HAL_I2C_MspInit+0x84>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d12b      	bne.n	8003e52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_I2C_MspInit+0x88>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_I2C_MspInit+0x88>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_I2C_MspInit+0x88>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e16:	23c0      	movs	r3, #192	; 0xc0
 8003e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e1a:	2312      	movs	r3, #18
 8003e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e22:	2303      	movs	r3, #3
 8003e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e26:	2304      	movs	r3, #4
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	4619      	mov	r1, r3
 8003e30:	480c      	ldr	r0, [pc, #48]	; (8003e64 <HAL_I2C_MspInit+0x8c>)
 8003e32:	f002 fb5f 	bl	80064f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_I2C_MspInit+0x88>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <HAL_I2C_MspInit+0x88>)
 8003e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_I2C_MspInit+0x88>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40005400 	.word	0x40005400
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40020400 	.word	0x40020400

08003e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_TIM_Base_MspInit+0x70>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_TIM_Base_MspInit+0x74>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_TIM_Base_MspInit+0x74>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_TIM_Base_MspInit+0x74>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e96:	e01a      	b.n	8003ece <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_TIM_Base_MspInit+0x78>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d115      	bne.n	8003ece <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_TIM_Base_MspInit+0x74>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <HAL_TIM_Base_MspInit+0x74>)
 8003eac:	f043 0320 	orr.w	r3, r3, #32
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_TIM_Base_MspInit+0x74>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	2037      	movs	r0, #55	; 0x37
 8003ec4:	f001 fee5 	bl	8005c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ec8:	2037      	movs	r0, #55	; 0x37
 8003eca:	f001 fefe 	bl	8005cca <HAL_NVIC_EnableIRQ>
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40001400 	.word	0x40001400

08003ee4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f12:	e026      	b.n	8003f62 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_TIM_PWM_MspInit+0x90>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]
}
 8003f3a:	e012      	b.n	8003f62 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_TIM_PWM_MspInit+0x94>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10d      	bne.n	8003f62 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	6453      	str	r3, [r2, #68]	; 0x44
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40010400 	.word	0x40010400

08003f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	; 0x30
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 031c 	add.w	r3, r7, #28
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a49      	ldr	r2, [pc, #292]	; (80040c0 <HAL_TIM_MspPostInit+0x144>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d11f      	bne.n	8003fde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a47      	ldr	r2, [pc, #284]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8003fa8:	f043 0310 	orr.w	r3, r3, #16
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b45      	ldr	r3, [pc, #276]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8003fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fc0:	2312      	movs	r3, #18
 8003fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8003fd0:	f107 031c 	add.w	r3, r7, #28
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	483c      	ldr	r0, [pc, #240]	; (80040c8 <HAL_TIM_MspPostInit+0x14c>)
 8003fd8:	f002 fa8c 	bl	80064f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003fdc:	e06b      	b.n	80040b6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d11f      	bne.n	8004028 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff8:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8004004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400a:	2312      	movs	r3, #18
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004012:	2300      	movs	r3, #0
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004016:	2301      	movs	r3, #1
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	4619      	mov	r1, r3
 8004020:	482a      	ldr	r0, [pc, #168]	; (80040cc <HAL_TIM_MspPostInit+0x150>)
 8004022:	f002 fa67 	bl	80064f4 <HAL_GPIO_Init>
}
 8004026:	e046      	b.n	80040b6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <HAL_TIM_MspPostInit+0x154>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d11e      	bne.n	8004070 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 800403c:	f043 0302 	orr.w	r3, r3, #2
 8004040:	6313      	str	r3, [r2, #48]	; 0x30
 8004042:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 800404e:	2302      	movs	r3, #2
 8004050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004052:	2312      	movs	r3, #18
 8004054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405a:	2300      	movs	r3, #0
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800405e:	2302      	movs	r3, #2
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8004062:	f107 031c 	add.w	r3, r7, #28
 8004066:	4619      	mov	r1, r3
 8004068:	4818      	ldr	r0, [pc, #96]	; (80040cc <HAL_TIM_MspPostInit+0x150>)
 800406a:	f002 fa43 	bl	80064f4 <HAL_GPIO_Init>
}
 800406e:	e022      	b.n	80040b6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <HAL_TIM_MspPostInit+0x158>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d11d      	bne.n	80040b6 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a10      	ldr	r2, [pc, #64]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_TIM_MspPostInit+0x148>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8004096:	2301      	movs	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800409a:	2312      	movs	r3, #18
 800409c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80040a6:	2303      	movs	r3, #3
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 80040aa:	f107 031c 	add.w	r3, r7, #28
 80040ae:	4619      	mov	r1, r3
 80040b0:	4806      	ldr	r0, [pc, #24]	; (80040cc <HAL_TIM_MspPostInit+0x150>)
 80040b2:	f002 fa1f 	bl	80064f4 <HAL_GPIO_Init>
}
 80040b6:	bf00      	nop
 80040b8:	3730      	adds	r7, #48	; 0x30
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40010400 	.word	0x40010400

080040d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <NMI_Handler+0x4>

080040de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040e2:	e7fe      	b.n	80040e2 <HardFault_Handler+0x4>

080040e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040e8:	e7fe      	b.n	80040e8 <MemManage_Handler+0x4>

080040ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ee:	e7fe      	b.n	80040ee <BusFault_Handler+0x4>

080040f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040f4:	e7fe      	b.n	80040f4 <UsageFault_Handler+0x4>

080040f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004124:	f000 f94e 	bl	80043c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}

0800412c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 8004130:	2001      	movs	r0, #1
 8004132:	f002 fcb3 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}

0800413a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 800413e:	2002      	movs	r0, #2
 8004140:	f002 fcac 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}

08004148 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 800414c:	2004      	movs	r0, #4
 800414e:	f002 fca5 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}

08004156 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 800415a:	2008      	movs	r0, #8
 800415c:	f002 fc9e 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}

08004164 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 8004168:	2010      	movs	r0, #16
 800416a:	f002 fc97 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <CAN1_RX0_IRQHandler+0x10>)
 800417a:	f001 fa5c 	bl	8005636 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200002cc 	.word	0x200002cc

08004188 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT6_Pin);
 800418c:	2020      	movs	r0, #32
 800418e:	f002 fc85 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT7_Pin);
 8004192:	2040      	movs	r0, #64	; 0x40
 8004194:	f002 fc82 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT8_Pin);
 8004198:	2080      	movs	r0, #128	; 0x80
 800419a:	f002 fc7f 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT9_Pin);
 800419e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041a2:	f002 fc7b 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT10_Pin);
 80041a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041aa:	f002 fc77 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT11_Pin);
 80041b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80041ba:	f002 fc6f 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT12_Pin);
 80041be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041c2:	f002 fc6b 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT13_Pin);
 80041c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041ca:	f002 fc67 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT14_Pin);
 80041ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041d2:	f002 fc63 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT15_Pin);
 80041d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041da:	f002 fc5f 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT16_Pin);
 80041de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041e2:	f002 fc5b 	bl	8006a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <TIM7_IRQHandler+0x10>)
 80041f2:	f006 f869 	bl	800a2c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000428 	.word	0x20000428

08004200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004204:	4802      	ldr	r0, [pc, #8]	; (8004210 <DMA2_Stream0_IRQHandler+0x10>)
 8004206:	f001 feff 	bl	8006008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2000020c 	.word	0x2000020c

08004214 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <DMA2_Stream2_IRQHandler+0x10>)
 800421a:	f001 fef5 	bl	8006008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000026c 	.word	0x2000026c

08004228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800422c:	4802      	ldr	r0, [pc, #8]	; (8004238 <OTG_FS_IRQHandler+0x10>)
 800422e:	f003 fb78 	bl	8007922 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20002478 	.word	0x20002478

0800423c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004244:	4a14      	ldr	r2, [pc, #80]	; (8004298 <_sbrk+0x5c>)
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <_sbrk+0x60>)
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <_sbrk+0x64>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <_sbrk+0x64>)
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <_sbrk+0x68>)
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <_sbrk+0x64>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d207      	bcs.n	800427c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800426c:	f00b f87a 	bl	800f364 <__errno>
 8004270:	4603      	mov	r3, r0
 8004272:	220c      	movs	r2, #12
 8004274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	e009      	b.n	8004290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800427c:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <_sbrk+0x64>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	4a05      	ldr	r2, [pc, #20]	; (80042a0 <_sbrk+0x64>)
 800428c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20020000 	.word	0x20020000
 800429c:	00004000 	.word	0x00004000
 80042a0:	20000f90 	.word	0x20000f90
 80042a4:	20002bb8 	.word	0x20002bb8

080042a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <SystemInit+0x20>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <SystemInit+0x20>)
 80042b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042d0:	480d      	ldr	r0, [pc, #52]	; (8004308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042d2:	490e      	ldr	r1, [pc, #56]	; (800430c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042d4:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042d8:	e002      	b.n	80042e0 <LoopCopyDataInit>

080042da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042de:	3304      	adds	r3, #4

080042e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e4:	d3f9      	bcc.n	80042da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042e6:	4a0b      	ldr	r2, [pc, #44]	; (8004314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042e8:	4c0b      	ldr	r4, [pc, #44]	; (8004318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ec:	e001      	b.n	80042f2 <LoopFillZerobss>

080042ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f0:	3204      	adds	r2, #4

080042f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f4:	d3fb      	bcc.n	80042ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042f6:	f7ff ffd7 	bl	80042a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042fa:	f00b f839 	bl	800f370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042fe:	f7fc f927 	bl	8000550 <main>
  bx  lr    
 8004302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800430c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8004310:	0800f674 	.word	0x0800f674
  ldr r2, =_sbss
 8004314:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8004318:	20002bb4 	.word	0x20002bb4

0800431c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800431c:	e7fe      	b.n	800431c <ADC_IRQHandler>
	...

08004320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_Init+0x40>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <HAL_Init+0x40>)
 800432a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800432e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <HAL_Init+0x40>)
 8004336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_Init+0x40>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004348:	2003      	movs	r0, #3
 800434a:	f001 fc97 	bl	8005c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800434e:	200f      	movs	r0, #15
 8004350:	f000 f808 	bl	8004364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004354:	f7ff fb8c 	bl	8003a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023c00 	.word	0x40023c00

08004364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_InitTick+0x54>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_InitTick+0x58>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4619      	mov	r1, r3
 8004376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800437a:	fbb3 f3f1 	udiv	r3, r3, r1
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fcbd 	bl	8005d02 <HAL_SYSTICK_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e00e      	b.n	80043b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b0f      	cmp	r3, #15
 8004396:	d80a      	bhi.n	80043ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004398:	2200      	movs	r2, #0
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	f001 fc77 	bl	8005c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a4:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <HAL_InitTick+0x5c>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e000      	b.n	80043b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000000 	.word	0x20000000
 80043bc:	20000008 	.word	0x20000008
 80043c0:	20000004 	.word	0x20000004

080043c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_IncTick+0x20>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_IncTick+0x24>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_IncTick+0x24>)
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000008 	.word	0x20000008
 80043e8:	20000f94 	.word	0x20000f94

080043ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return uwTick;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_GetTick+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000f94 	.word	0x20000f94

08004404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800440c:	f7ff ffee 	bl	80043ec <HAL_GetTick>
 8004410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d005      	beq.n	800442a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_Delay+0x44>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800442a:	bf00      	nop
 800442c:	f7ff ffde 	bl	80043ec <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	429a      	cmp	r2, r3
 800443a:	d8f7      	bhi.n	800442c <HAL_Delay+0x28>
  {
  }
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000008 	.word	0x20000008

0800444c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e033      	b.n	80044ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fb28 	bl	8003ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004492:	f023 0302 	bic.w	r3, r3, #2
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa78 	bl	8004994 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
 80044ba:	e001      	b.n	80044c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_Start_DMA+0x1e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0e9      	b.n	80046c6 <HAL_ADC_Start_DMA+0x1f2>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d018      	beq.n	800453a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004518:	4b6d      	ldr	r3, [pc, #436]	; (80046d0 <HAL_ADC_Start_DMA+0x1fc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6d      	ldr	r2, [pc, #436]	; (80046d4 <HAL_ADC_Start_DMA+0x200>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0c9a      	lsrs	r2, r3, #18
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800452c:	e002      	b.n	8004534 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	3b01      	subs	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f9      	bne.n	800452e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d107      	bne.n	800455a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	f040 80a1 	bne.w	80046ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	d106      	bne.n	80045b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f023 0206 	bic.w	r2, r3, #6
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44
 80045b6:	e002      	b.n	80045be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c6:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <HAL_ADC_Start_DMA+0x204>)
 80045c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	4a43      	ldr	r2, [pc, #268]	; (80046dc <HAL_ADC_Start_DMA+0x208>)
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	4a42      	ldr	r2, [pc, #264]	; (80046e0 <HAL_ADC_Start_DMA+0x20c>)
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	4a41      	ldr	r2, [pc, #260]	; (80046e4 <HAL_ADC_Start_DMA+0x210>)
 80045e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	334c      	adds	r3, #76	; 0x4c
 8004616:	4619      	mov	r1, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f001 fc7a 	bl	8005f14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2b00      	cmp	r3, #0
 800462a:	d12a      	bne.n	8004682 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2d      	ldr	r2, [pc, #180]	; (80046e8 <HAL_ADC_Start_DMA+0x214>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d015      	beq.n	8004662 <HAL_ADC_Start_DMA+0x18e>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <HAL_ADC_Start_DMA+0x218>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d105      	bne.n	800464c <HAL_ADC_Start_DMA+0x178>
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_ADC_Start_DMA+0x204>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <HAL_ADC_Start_DMA+0x21c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d136      	bne.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_ADC_Start_DMA+0x204>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d130      	bne.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d129      	bne.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	e020      	b.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_ADC_Start_DMA+0x214>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d11b      	bne.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d114      	bne.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	e00b      	b.n	80046c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0210 	orr.w	r2, r3, #16
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000000 	.word	0x20000000
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	40012300 	.word	0x40012300
 80046dc:	08004b8d 	.word	0x08004b8d
 80046e0:	08004c47 	.word	0x08004c47
 80046e4:	08004c63 	.word	0x08004c63
 80046e8:	40012000 	.word	0x40012000
 80046ec:	40012100 	.word	0x40012100
 80046f0:	40012200 	.word	0x40012200

080046f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_ADC_ConfigChannel+0x1c>
 8004748:	2302      	movs	r3, #2
 800474a:	e113      	b.n	8004974 <HAL_ADC_ConfigChannel+0x244>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b09      	cmp	r3, #9
 800475a:	d925      	bls.n	80047a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	3b1e      	subs	r3, #30
 8004772:	2207      	movs	r2, #7
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43da      	mvns	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	400a      	ands	r2, r1
 8004780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68d9      	ldr	r1, [r3, #12]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	4618      	mov	r0, r3
 8004794:	4603      	mov	r3, r0
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4403      	add	r3, r0
 800479a:	3b1e      	subs	r3, #30
 800479c:	409a      	lsls	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	e022      	b.n	80047ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6919      	ldr	r1, [r3, #16]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	4613      	mov	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	2207      	movs	r2, #7
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43da      	mvns	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	400a      	ands	r2, r1
 80047ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6919      	ldr	r1, [r3, #16]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4618      	mov	r0, r3
 80047de:	4603      	mov	r3, r0
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4403      	add	r3, r0
 80047e4:	409a      	lsls	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d824      	bhi.n	8004840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	3b05      	subs	r3, #5
 8004808:	221f      	movs	r2, #31
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43da      	mvns	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	400a      	ands	r2, r1
 8004816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	4618      	mov	r0, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	3b05      	subs	r3, #5
 8004832:	fa00 f203 	lsl.w	r2, r0, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	635a      	str	r2, [r3, #52]	; 0x34
 800483e:	e04c      	b.n	80048da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b0c      	cmp	r3, #12
 8004846:	d824      	bhi.n	8004892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	3b23      	subs	r3, #35	; 0x23
 800485a:	221f      	movs	r2, #31
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43da      	mvns	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	400a      	ands	r2, r1
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	4618      	mov	r0, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	3b23      	subs	r3, #35	; 0x23
 8004884:	fa00 f203 	lsl.w	r2, r0, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
 8004890:	e023      	b.n	80048da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	3b41      	subs	r3, #65	; 0x41
 80048a4:	221f      	movs	r2, #31
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43da      	mvns	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	400a      	ands	r2, r1
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4618      	mov	r0, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	3b41      	subs	r3, #65	; 0x41
 80048ce:	fa00 f203 	lsl.w	r2, r0, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048da:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_ADC_ConfigChannel+0x250>)
 80048dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a28      	ldr	r2, [pc, #160]	; (8004984 <HAL_ADC_ConfigChannel+0x254>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10f      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x1d8>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b12      	cmp	r3, #18
 80048ee:	d10b      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <HAL_ADC_ConfigChannel+0x254>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d12b      	bne.n	800496a <HAL_ADC_ConfigChannel+0x23a>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <HAL_ADC_ConfigChannel+0x258>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <HAL_ADC_ConfigChannel+0x1f4>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b11      	cmp	r3, #17
 8004922:	d122      	bne.n	800496a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a11      	ldr	r2, [pc, #68]	; (8004988 <HAL_ADC_ConfigChannel+0x258>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_ADC_ConfigChannel+0x25c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a11      	ldr	r2, [pc, #68]	; (8004990 <HAL_ADC_ConfigChannel+0x260>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	0c9a      	lsrs	r2, r3, #18
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800495c:	e002      	b.n	8004964 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3b01      	subs	r3, #1
 8004962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f9      	bne.n	800495e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40012300 	.word	0x40012300
 8004984:	40012000 	.word	0x40012000
 8004988:	10000012 	.word	0x10000012
 800498c:	20000000 	.word	0x20000000
 8004990:	431bde83 	.word	0x431bde83

08004994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800499c:	4b79      	ldr	r3, [pc, #484]	; (8004b84 <ADC_Init+0x1f0>)
 800499e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	021a      	lsls	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6859      	ldr	r1, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <ADC_Init+0x1f4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e00f      	b.n	8004a92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0202 	bic.w	r2, r2, #2
 8004aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7e1b      	ldrb	r3, [r3, #24]
 8004aac:	005a      	lsls	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ace:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	3b01      	subs	r3, #1
 8004aec:	035a      	lsls	r2, r3, #13
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	e007      	b.n	8004b08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	051a      	lsls	r2, r3, #20
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6899      	ldr	r1, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b4a:	025a      	lsls	r2, r3, #9
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6899      	ldr	r1, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	029a      	lsls	r2, r3, #10
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40012300 	.word	0x40012300
 8004b88:	0f000001 	.word	0x0f000001

08004b8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d13c      	bne.n	8004c20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d12b      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d127      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d119      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0220 	bic.w	r2, r2, #32
 8004bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff fd6b 	bl	80046f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c1e:	e00e      	b.n	8004c3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff fd75 	bl	800471c <HAL_ADC_ErrorCallback>
}
 8004c32:	e004      	b.n	8004c3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fd57 	bl	8004708 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2240      	movs	r2, #64	; 0x40
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f043 0204 	orr.w	r2, r3, #4
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff fd4a 	bl	800471c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0ed      	b.n	8004e7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fe fffe 	bl	8003cb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cc4:	f7ff fb92 	bl	80043ec <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cca:	e012      	b.n	8004cf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ccc:	f7ff fb8e 	bl	80043ec <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b0a      	cmp	r3, #10
 8004cd8:	d90b      	bls.n	8004cf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2205      	movs	r2, #5
 8004cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0c5      	b.n	8004e7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0e5      	beq.n	8004ccc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0202 	bic.w	r2, r2, #2
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d10:	f7ff fb6c 	bl	80043ec <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d16:	e012      	b.n	8004d3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d18:	f7ff fb68 	bl	80043ec <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b0a      	cmp	r3, #10
 8004d24:	d90b      	bls.n	8004d3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2205      	movs	r2, #5
 8004d36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e09f      	b.n	8004e7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7e1b      	ldrb	r3, [r3, #24]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d108      	bne.n	8004d66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e007      	b.n	8004d76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7e5b      	ldrb	r3, [r3, #25]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e007      	b.n	8004da0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7e9b      	ldrb	r3, [r3, #26]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d108      	bne.n	8004dba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0220 	orr.w	r2, r2, #32
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e007      	b.n	8004dca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0220 	bic.w	r2, r2, #32
 8004dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7edb      	ldrb	r3, [r3, #27]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d108      	bne.n	8004de4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0210 	bic.w	r2, r2, #16
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e007      	b.n	8004df4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0210 	orr.w	r2, r2, #16
 8004df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7f1b      	ldrb	r3, [r3, #28]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d108      	bne.n	8004e0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e007      	b.n	8004e1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0208 	bic.w	r2, r2, #8
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7f5b      	ldrb	r3, [r3, #29]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d108      	bne.n	8004e38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0204 	orr.w	r2, r2, #4
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e007      	b.n	8004e48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0204 	bic.w	r2, r2, #4
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	ea42 0103 	orr.w	r1, r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e015      	b.n	8004ec4 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f93b 	bl	8005114 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe ff56 	bl	8003d50 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d003      	beq.n	8004ef2 <HAL_CAN_ConfigFilter+0x26>
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	f040 80be 	bne.w	800506e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004ef2:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_CAN_ConfigFilter+0x1bc>)
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	431a      	orrs	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	401a      	ands	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d123      	bne.n	8004f9c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	401a      	ands	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3248      	adds	r2, #72	; 0x48
 8004f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	3348      	adds	r3, #72	; 0x48
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	440b      	add	r3, r1
 8004f9a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d122      	bne.n	8004fea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	3248      	adds	r2, #72	; 0x48
 8004fca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fe0:	6979      	ldr	r1, [r7, #20]
 8004fe2:	3348      	adds	r3, #72	; 0x48
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005004:	e007      	b.n	8005016 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	431a      	orrs	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	43db      	mvns	r3, r3
 8005028:	401a      	ands	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005030:	e007      	b.n	8005042 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	431a      	orrs	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	431a      	orrs	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005060:	f023 0201 	bic.w	r2, r3, #1
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e006      	b.n	800507c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40006400 	.word	0x40006400

0800508c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d12e      	bne.n	80050fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050b8:	f7ff f998 	bl	80043ec <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050be:	e012      	b.n	80050e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050c0:	f7ff f994 	bl	80043ec <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b0a      	cmp	r3, #10
 80050cc:	d90b      	bls.n	80050e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2205      	movs	r2, #5
 80050de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e012      	b.n	800510c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e006      	b.n	800510c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
  }
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d133      	bne.n	8005190 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005138:	f7ff f958 	bl	80043ec <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800513e:	e012      	b.n	8005166 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005140:	f7ff f954 	bl	80043ec <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b0a      	cmp	r3, #10
 800514c:	d90b      	bls.n	8005166 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2205      	movs	r2, #5
 800515e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e01b      	b.n	800519e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0e5      	beq.n	8005140 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0202 	bic.w	r2, r2, #2
 8005182:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e006      	b.n	800519e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b089      	sub	sp, #36	; 0x24
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d003      	beq.n	80051d2 <HAL_CAN_AddTxMessage+0x2c>
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f040 80b8 	bne.w	8005342 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a0 	beq.w	8005332 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	0e1b      	lsrs	r3, r3, #24
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d907      	bls.n	8005212 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e09e      	b.n	8005350 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005212:	2201      	movs	r2, #1
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	409a      	lsls	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10d      	bne.n	8005240 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6809      	ldr	r1, [r1, #0]
 8005232:	431a      	orrs	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3318      	adds	r3, #24
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	440b      	add	r3, r1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e00f      	b.n	8005260 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800524a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005250:	68f9      	ldr	r1, [r7, #12]
 8005252:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005254:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	3318      	adds	r3, #24
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	440b      	add	r3, r1
 800525e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3318      	adds	r3, #24
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	440b      	add	r3, r1
 8005270:	3304      	adds	r3, #4
 8005272:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	7d1b      	ldrb	r3, [r3, #20]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d111      	bne.n	80052a0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3318      	adds	r3, #24
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4413      	add	r3, r2
 8005288:	3304      	adds	r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	6811      	ldr	r1, [r2, #0]
 8005290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3318      	adds	r3, #24
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	440b      	add	r3, r1
 800529c:	3304      	adds	r3, #4
 800529e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3307      	adds	r3, #7
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	061a      	lsls	r2, r3, #24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3306      	adds	r3, #6
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3305      	adds	r3, #5
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	4313      	orrs	r3, r2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	3204      	adds	r2, #4
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	4610      	mov	r0, r2
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	6811      	ldr	r1, [r2, #0]
 80052c8:	ea43 0200 	orr.w	r2, r3, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	440b      	add	r3, r1
 80052d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3303      	adds	r3, #3
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	061a      	lsls	r2, r3, #24
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3302      	adds	r3, #2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3301      	adds	r3, #1
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	4610      	mov	r0, r2
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	6811      	ldr	r1, [r2, #0]
 80052fe:	ea43 0200 	orr.w	r2, r3, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	440b      	add	r3, r1
 8005308:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800530c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	3318      	adds	r3, #24
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4413      	add	r3, r2
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	6811      	ldr	r1, [r2, #0]
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3318      	adds	r3, #24
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	440b      	add	r3, r1
 800532c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e00e      	b.n	8005350 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e006      	b.n	8005350 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3724      	adds	r7, #36	; 0x24
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800536e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d002      	beq.n	800537c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11d      	bne.n	80053b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80053c6:	b480      	push	{r7}
 80053c8:	b087      	sub	sp, #28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d003      	beq.n	80053ea <HAL_CAN_GetRxMessage+0x24>
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	f040 80f3 	bne.w	80055d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10e      	bne.n	800540e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d116      	bne.n	800542c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e0e7      	b.n	80055de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0d8      	b.n	80055de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	331b      	adds	r3, #27
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4413      	add	r3, r2
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0204 	and.w	r2, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	331b      	adds	r3, #27
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	4413      	add	r3, r2
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	0d5b      	lsrs	r3, r3, #21
 800545a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e00b      	b.n	800547c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	331b      	adds	r3, #27
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	4413      	add	r3, r2
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	331b      	adds	r3, #27
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	4413      	add	r3, r2
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0202 	and.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	331b      	adds	r3, #27
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4413      	add	r3, r2
 800549e:	3304      	adds	r3, #4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	331b      	adds	r3, #27
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4413      	add	r3, r2
 80054b6:	3304      	adds	r3, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	331b      	adds	r3, #27
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	4413      	add	r3, r2
 80054ce:	3304      	adds	r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	0a1a      	lsrs	r2, r3, #8
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	4413      	add	r3, r2
 8005514:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	0c1a      	lsrs	r2, r3, #16
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3302      	adds	r3, #2
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	4413      	add	r3, r2
 800552e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0e1a      	lsrs	r2, r3, #24
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	3303      	adds	r3, #3
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	3304      	adds	r3, #4
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4413      	add	r3, r2
 8005560:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	0a1a      	lsrs	r2, r3, #8
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	3305      	adds	r3, #5
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	4413      	add	r3, r2
 800557a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0c1a      	lsrs	r2, r3, #16
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3306      	adds	r3, #6
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4413      	add	r3, r2
 8005594:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	0e1a      	lsrs	r2, r3, #24
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3307      	adds	r3, #7
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0220 	orr.w	r2, r2, #32
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	e007      	b.n	80055cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0220 	orr.w	r2, r2, #32
 80055ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e006      	b.n	80055de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d002      	beq.n	8005608 <HAL_CAN_ActivateNotification+0x1e>
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d109      	bne.n	800561c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6959      	ldr	r1, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e006      	b.n	800562a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b08a      	sub	sp, #40	; 0x28
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d07c      	beq.n	8005776 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d023      	beq.n	80056ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f983 	bl	80059a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800569e:	e016      	b.n	80056ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	e00c      	b.n	80056ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	e002      	b.n	80056ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f989 	bl	80059e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d024      	beq.n	8005722 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f963 	bl	80059b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80056f2:	e016      	b.n	8005722 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e00c      	b.n	8005722 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
 800571a:	e002      	b.n	8005722 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f969 	bl	80059f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d024      	beq.n	8005776 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005734:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f943 	bl	80059cc <HAL_CAN_TxMailbox2CompleteCallback>
 8005746:	e016      	b.n	8005776 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	e00c      	b.n	8005776 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
 800576e:	e002      	b.n	8005776 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f949 	bl	8005a08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2210      	movs	r2, #16
 8005798:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2208      	movs	r2, #8
 80057b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f930 	bl	8005a1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fd f8e5 	bl	80029a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00c      	beq.n	80057fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2210      	movs	r2, #16
 80057fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d006      	beq.n	8005820 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2208      	movs	r2, #8
 8005818:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f912 	bl	8005a44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f8f9 	bl	8005a30 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d006      	beq.n	8005860 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2210      	movs	r2, #16
 8005858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8fc 	bl	8005a58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d006      	beq.n	8005882 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2208      	movs	r2, #8
 800587a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8f5 	bl	8005a6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d07b      	beq.n	8005984 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d072      	beq.n	800597c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	f043 0302 	orr.w	r3, r3, #2
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d043      	beq.n	800597c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03e      	beq.n	800597c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005904:	2b60      	cmp	r3, #96	; 0x60
 8005906:	d02b      	beq.n	8005960 <HAL_CAN_IRQHandler+0x32a>
 8005908:	2b60      	cmp	r3, #96	; 0x60
 800590a:	d82e      	bhi.n	800596a <HAL_CAN_IRQHandler+0x334>
 800590c:	2b50      	cmp	r3, #80	; 0x50
 800590e:	d022      	beq.n	8005956 <HAL_CAN_IRQHandler+0x320>
 8005910:	2b50      	cmp	r3, #80	; 0x50
 8005912:	d82a      	bhi.n	800596a <HAL_CAN_IRQHandler+0x334>
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d019      	beq.n	800594c <HAL_CAN_IRQHandler+0x316>
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d826      	bhi.n	800596a <HAL_CAN_IRQHandler+0x334>
 800591c:	2b30      	cmp	r3, #48	; 0x30
 800591e:	d010      	beq.n	8005942 <HAL_CAN_IRQHandler+0x30c>
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	d822      	bhi.n	800596a <HAL_CAN_IRQHandler+0x334>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d002      	beq.n	800592e <HAL_CAN_IRQHandler+0x2f8>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d005      	beq.n	8005938 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800592c:	e01d      	b.n	800596a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005936:	e019      	b.n	800596c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	f043 0310 	orr.w	r3, r3, #16
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005940:	e014      	b.n	800596c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800594a:	e00f      	b.n	800596c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005954:	e00a      	b.n	800596c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800595e:	e005      	b.n	800596c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005968:	e000      	b.n	800596c <HAL_CAN_IRQHandler+0x336>
            break;
 800596a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800597a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2204      	movs	r2, #4
 8005982:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f872 	bl	8005a80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800599c:	bf00      	nop
 800599e:	3728      	adds	r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ac6:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	60d3      	str	r3, [r2, #12]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	f003 0307 	and.w	r3, r3, #7
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db0b      	blt.n	8005b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	4907      	ldr	r1, [pc, #28]	; (8005b30 <__NVIC_EnableIRQ+0x38>)
 8005b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	2001      	movs	r0, #1
 8005b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000e100 	.word	0xe000e100

08005b34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	db12      	blt.n	8005b6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	f003 021f 	and.w	r2, r3, #31
 8005b4c:	490a      	ldr	r1, [pc, #40]	; (8005b78 <__NVIC_DisableIRQ+0x44>)
 8005b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	2001      	movs	r0, #1
 8005b56:	fa00 f202 	lsl.w	r2, r0, r2
 8005b5a:	3320      	adds	r3, #32
 8005b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b60:	f3bf 8f4f 	dsb	sy
}
 8005b64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b66:	f3bf 8f6f 	isb	sy
}
 8005b6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	e000e100 	.word	0xe000e100

08005b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	6039      	str	r1, [r7, #0]
 8005b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	db0a      	blt.n	8005ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	490c      	ldr	r1, [pc, #48]	; (8005bc8 <__NVIC_SetPriority+0x4c>)
 8005b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ba4:	e00a      	b.n	8005bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4908      	ldr	r1, [pc, #32]	; (8005bcc <__NVIC_SetPriority+0x50>)
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	3b04      	subs	r3, #4
 8005bb4:	0112      	lsls	r2, r2, #4
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	440b      	add	r3, r1
 8005bba:	761a      	strb	r2, [r3, #24]
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	e000e100 	.word	0xe000e100
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f1c3 0307 	rsb	r3, r3, #7
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf28      	it	cs
 8005bee:	2304      	movcs	r3, #4
 8005bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2b06      	cmp	r3, #6
 8005bf8:	d902      	bls.n	8005c00 <NVIC_EncodePriority+0x30>
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3b03      	subs	r3, #3
 8005bfe:	e000      	b.n	8005c02 <NVIC_EncodePriority+0x32>
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43da      	mvns	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	401a      	ands	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c18:	f04f 31ff 	mov.w	r1, #4294967295
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	43d9      	mvns	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	4313      	orrs	r3, r2
         );
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3724      	adds	r7, #36	; 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c48:	d301      	bcc.n	8005c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e00f      	b.n	8005c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <SysTick_Config+0x40>)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c56:	210f      	movs	r1, #15
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	f7ff ff8e 	bl	8005b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <SysTick_Config+0x40>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c66:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <SysTick_Config+0x40>)
 8005c68:	2207      	movs	r2, #7
 8005c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	e000e010 	.word	0xe000e010

08005c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ff05 	bl	8005a94 <__NVIC_SetPriorityGrouping>
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	4603      	mov	r3, r0
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ca4:	f7ff ff1a 	bl	8005adc <__NVIC_GetPriorityGrouping>
 8005ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	6978      	ldr	r0, [r7, #20]
 8005cb0:	f7ff ff8e 	bl	8005bd0 <NVIC_EncodePriority>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ff5d 	bl	8005b7c <__NVIC_SetPriority>
}
 8005cc2:	bf00      	nop
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff ff0d 	bl	8005af8 <__NVIC_EnableIRQ>
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4603      	mov	r3, r0
 8005cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff1d 	bl	8005b34 <__NVIC_DisableIRQ>
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff ff94 	bl	8005c38 <SysTick_Config>
 8005d10:	4603      	mov	r3, r0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e00e      	b.n	8005d4a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	795b      	ldrb	r3, [r3, #5]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d105      	bne.n	8005d42 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fe f829 	bl	8003d94 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2202      	movs	r2, #2
 8005d66:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e00a      	b.n	8005d94 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	441a      	add	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	3301      	adds	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d3f0      	bcc.n	8005d7e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8005daa:	693b      	ldr	r3, [r7, #16]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005dc4:	f7fe fb12 	bl	80043ec <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e099      	b.n	8005f08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005df4:	e00f      	b.n	8005e16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005df6:	f7fe faf9 	bl	80043ec <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	d908      	bls.n	8005e16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e078      	b.n	8005f08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e8      	bne.n	8005df6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4b38      	ldr	r3, [pc, #224]	; (8005f10 <HAL_DMA_Init+0x158>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d107      	bne.n	8005e80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0307 	bic.w	r3, r3, #7
 8005e96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d117      	bne.n	8005eda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00e      	beq.n	8005eda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa9d 	bl	80063fc <DMA_CheckFifoParam>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2240      	movs	r2, #64	; 0x40
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e016      	b.n	8005f08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa54 	bl	8006390 <DMA_CalcBaseAndBitshift>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef0:	223f      	movs	r2, #63	; 0x3f
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	f010803f 	.word	0xf010803f

08005f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_DMA_Start_IT+0x26>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e040      	b.n	8005fbc <HAL_DMA_Start_IT+0xa8>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d12f      	bne.n	8005fae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2202      	movs	r2, #2
 8005f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f9e6 	bl	8006334 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	223f      	movs	r2, #63	; 0x3f
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0216 	orr.w	r2, r2, #22
 8005f82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e005      	b.n	8005fba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2280      	movs	r2, #128	; 0x80
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e00c      	b.n	8005ffc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2205      	movs	r2, #5
 8005fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006014:	4b8e      	ldr	r3, [pc, #568]	; (8006250 <HAL_DMA_IRQHandler+0x248>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a8e      	ldr	r2, [pc, #568]	; (8006254 <HAL_DMA_IRQHandler+0x24c>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	0a9b      	lsrs	r3, r3, #10
 8006020:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006026:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	2208      	movs	r2, #8
 8006034:	409a      	lsls	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01a      	beq.n	8006074 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d013      	beq.n	8006074 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0204 	bic.w	r2, r2, #4
 800605a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	2208      	movs	r2, #8
 8006062:	409a      	lsls	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	f043 0201 	orr.w	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d012      	beq.n	80060aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006096:	2201      	movs	r2, #1
 8006098:	409a      	lsls	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a2:	f043 0202 	orr.w	r2, r3, #2
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ae:	2204      	movs	r2, #4
 80060b0:	409a      	lsls	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d012      	beq.n	80060e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	2204      	movs	r2, #4
 80060ce:	409a      	lsls	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	f043 0204 	orr.w	r2, r3, #4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e4:	2210      	movs	r2, #16
 80060e6:	409a      	lsls	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d043      	beq.n	8006178 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d03c      	beq.n	8006178 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	2210      	movs	r2, #16
 8006104:	409a      	lsls	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d018      	beq.n	800614a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d108      	bne.n	8006138 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d024      	beq.n	8006178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
 8006136:	e01f      	b.n	8006178 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01b      	beq.n	8006178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
 8006148:	e016      	b.n	8006178 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0208 	bic.w	r2, r2, #8
 8006166:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617c:	2220      	movs	r2, #32
 800617e:	409a      	lsls	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 808f 	beq.w	80062a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8087 	beq.w	80062a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619e:	2220      	movs	r2, #32
 80061a0:	409a      	lsls	r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b05      	cmp	r3, #5
 80061b0:	d136      	bne.n	8006220 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0216 	bic.w	r2, r2, #22
 80061c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <HAL_DMA_IRQHandler+0x1da>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0208 	bic.w	r2, r2, #8
 80061f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	223f      	movs	r2, #63	; 0x3f
 80061f8:	409a      	lsls	r2, r3
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	d07e      	beq.n	8006314 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
        }
        return;
 800621e:	e079      	b.n	8006314 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01d      	beq.n	800626a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10d      	bne.n	8006258 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	2b00      	cmp	r3, #0
 8006242:	d031      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
 800624c:	e02c      	b.n	80062a8 <HAL_DMA_IRQHandler+0x2a0>
 800624e:	bf00      	nop
 8006250:	20000000 	.word	0x20000000
 8006254:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d023      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
 8006268:	e01e      	b.n	80062a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0210 	bic.w	r2, r2, #16
 8006286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d032      	beq.n	8006316 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2205      	movs	r2, #5
 80062c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d307      	bcc.n	80062f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f2      	bne.n	80062d4 <HAL_DMA_IRQHandler+0x2cc>
 80062ee:	e000      	b.n	80062f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	e000      	b.n	8006316 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006314:	bf00      	nop
    }
  }
}
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006350:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d108      	bne.n	8006374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006372:	e007      	b.n	8006384 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	3b10      	subs	r3, #16
 80063a0:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <DMA_CalcBaseAndBitshift+0x64>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	091b      	lsrs	r3, r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063aa:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <DMA_CalcBaseAndBitshift+0x68>)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d909      	bls.n	80063d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	659a      	str	r2, [r3, #88]	; 0x58
 80063d0:	e007      	b.n	80063e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	aaaaaaab 	.word	0xaaaaaaab
 80063f8:	0800f65c 	.word	0x0800f65c

080063fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11f      	bne.n	8006456 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d856      	bhi.n	80064ca <DMA_CheckFifoParam+0xce>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <DMA_CheckFifoParam+0x28>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006435 	.word	0x08006435
 8006428:	08006447 	.word	0x08006447
 800642c:	08006435 	.word	0x08006435
 8006430:	080064cb 	.word	0x080064cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d046      	beq.n	80064ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006444:	e043      	b.n	80064ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800644e:	d140      	bne.n	80064d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006454:	e03d      	b.n	80064d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645e:	d121      	bne.n	80064a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d837      	bhi.n	80064d6 <DMA_CheckFifoParam+0xda>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <DMA_CheckFifoParam+0x70>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	0800647d 	.word	0x0800647d
 8006470:	08006483 	.word	0x08006483
 8006474:	0800647d 	.word	0x0800647d
 8006478:	08006495 	.word	0x08006495
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      break;
 8006480:	e030      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d025      	beq.n	80064da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006492:	e022      	b.n	80064da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800649c:	d11f      	bne.n	80064de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064a2:	e01c      	b.n	80064de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d903      	bls.n	80064b2 <DMA_CheckFifoParam+0xb6>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d003      	beq.n	80064b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064b0:	e018      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
      break;
 80064b6:	e015      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
      break;
 80064c8:	e00b      	b.n	80064e2 <DMA_CheckFifoParam+0xe6>
      break;
 80064ca:	bf00      	nop
 80064cc:	e00a      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064ce:	bf00      	nop
 80064d0:	e008      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064d2:	bf00      	nop
 80064d4:	e006      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064e2:	bf00      	nop
    }
  } 
  
  return status; 
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop

080064f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	e165      	b.n	80067dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006510:	2201      	movs	r2, #1
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4013      	ands	r3, r2
 8006522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	f040 8154 	bne.w	80067d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d005      	beq.n	8006546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006542:	2b02      	cmp	r3, #2
 8006544:	d130      	bne.n	80065a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	2203      	movs	r2, #3
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800657c:	2201      	movs	r2, #1
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4013      	ands	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 0201 	and.w	r2, r3, #1
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d017      	beq.n	80065e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	2203      	movs	r2, #3
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d123      	bne.n	8006638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	08da      	lsrs	r2, r3, #3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3208      	adds	r2, #8
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	220f      	movs	r2, #15
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	43db      	mvns	r3, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	08da      	lsrs	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3208      	adds	r2, #8
 8006632:	69b9      	ldr	r1, [r7, #24]
 8006634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	2203      	movs	r2, #3
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	43db      	mvns	r3, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4013      	ands	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0203 	and.w	r2, r3, #3
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4313      	orrs	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80ae 	beq.w	80067d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	4b5d      	ldr	r3, [pc, #372]	; (80067f4 <HAL_GPIO_Init+0x300>)
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	4a5c      	ldr	r2, [pc, #368]	; (80067f4 <HAL_GPIO_Init+0x300>)
 8006684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006688:	6453      	str	r3, [r2, #68]	; 0x44
 800668a:	4b5a      	ldr	r3, [pc, #360]	; (80067f4 <HAL_GPIO_Init+0x300>)
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006696:	4a58      	ldr	r2, [pc, #352]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	3302      	adds	r3, #2
 800669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	220f      	movs	r2, #15
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43db      	mvns	r3, r3
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	4013      	ands	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4f      	ldr	r2, [pc, #316]	; (80067fc <HAL_GPIO_Init+0x308>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d025      	beq.n	800670e <HAL_GPIO_Init+0x21a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a4e      	ldr	r2, [pc, #312]	; (8006800 <HAL_GPIO_Init+0x30c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01f      	beq.n	800670a <HAL_GPIO_Init+0x216>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a4d      	ldr	r2, [pc, #308]	; (8006804 <HAL_GPIO_Init+0x310>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d019      	beq.n	8006706 <HAL_GPIO_Init+0x212>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a4c      	ldr	r2, [pc, #304]	; (8006808 <HAL_GPIO_Init+0x314>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_GPIO_Init+0x20e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a4b      	ldr	r2, [pc, #300]	; (800680c <HAL_GPIO_Init+0x318>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00d      	beq.n	80066fe <HAL_GPIO_Init+0x20a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a4a      	ldr	r2, [pc, #296]	; (8006810 <HAL_GPIO_Init+0x31c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <HAL_GPIO_Init+0x206>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a49      	ldr	r2, [pc, #292]	; (8006814 <HAL_GPIO_Init+0x320>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_GPIO_Init+0x202>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e00c      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 80066f6:	2307      	movs	r3, #7
 80066f8:	e00a      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 80066fa:	2305      	movs	r3, #5
 80066fc:	e008      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 80066fe:	2304      	movs	r3, #4
 8006700:	e006      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 8006702:	2303      	movs	r3, #3
 8006704:	e004      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 8006706:	2302      	movs	r3, #2
 8006708:	e002      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_GPIO_Init+0x21c>
 800670e:	2300      	movs	r3, #0
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	f002 0203 	and.w	r2, r2, #3
 8006716:	0092      	lsls	r2, r2, #2
 8006718:	4093      	lsls	r3, r2
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006720:	4935      	ldr	r1, [pc, #212]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	089b      	lsrs	r3, r3, #2
 8006726:	3302      	adds	r3, #2
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800672e:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <HAL_GPIO_Init+0x324>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006752:	4a31      	ldr	r2, [pc, #196]	; (8006818 <HAL_GPIO_Init+0x324>)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006758:	4b2f      	ldr	r3, [pc, #188]	; (8006818 <HAL_GPIO_Init+0x324>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800677c:	4a26      	ldr	r2, [pc, #152]	; (8006818 <HAL_GPIO_Init+0x324>)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006782:	4b25      	ldr	r3, [pc, #148]	; (8006818 <HAL_GPIO_Init+0x324>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	43db      	mvns	r3, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4013      	ands	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_GPIO_Init+0x324>)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067ac:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <HAL_GPIO_Init+0x324>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	43db      	mvns	r3, r3
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	4013      	ands	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067d0:	4a11      	ldr	r2, [pc, #68]	; (8006818 <HAL_GPIO_Init+0x324>)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3301      	adds	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	f67f ae96 	bls.w	8006510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	3724      	adds	r7, #36	; 0x24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40013800 	.word	0x40013800
 80067fc:	40020000 	.word	0x40020000
 8006800:	40020400 	.word	0x40020400
 8006804:	40020800 	.word	0x40020800
 8006808:	40020c00 	.word	0x40020c00
 800680c:	40021000 	.word	0x40021000
 8006810:	40021400 	.word	0x40021400
 8006814:	40021800 	.word	0x40021800
 8006818:	40013c00 	.word	0x40013c00

0800681c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	e0c7      	b.n	80069c8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006838:	2201      	movs	r2, #1
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4013      	ands	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	429a      	cmp	r2, r3
 8006850:	f040 80b7 	bne.w	80069c2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006854:	4a62      	ldr	r2, [pc, #392]	; (80069e0 <HAL_GPIO_DeInit+0x1c4>)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	3302      	adds	r3, #2
 800685c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006860:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	220f      	movs	r2, #15
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a5a      	ldr	r2, [pc, #360]	; (80069e4 <HAL_GPIO_DeInit+0x1c8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d025      	beq.n	80068ca <HAL_GPIO_DeInit+0xae>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a59      	ldr	r2, [pc, #356]	; (80069e8 <HAL_GPIO_DeInit+0x1cc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01f      	beq.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a58      	ldr	r2, [pc, #352]	; (80069ec <HAL_GPIO_DeInit+0x1d0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d019      	beq.n	80068c2 <HAL_GPIO_DeInit+0xa6>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a57      	ldr	r2, [pc, #348]	; (80069f0 <HAL_GPIO_DeInit+0x1d4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d013      	beq.n	80068be <HAL_GPIO_DeInit+0xa2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <HAL_GPIO_DeInit+0x1d8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00d      	beq.n	80068ba <HAL_GPIO_DeInit+0x9e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a55      	ldr	r2, [pc, #340]	; (80069f8 <HAL_GPIO_DeInit+0x1dc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <HAL_GPIO_DeInit+0x9a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a54      	ldr	r2, [pc, #336]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <HAL_GPIO_DeInit+0x96>
 80068ae:	2306      	movs	r3, #6
 80068b0:	e00c      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068b2:	2307      	movs	r3, #7
 80068b4:	e00a      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068b6:	2305      	movs	r3, #5
 80068b8:	e008      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068ba:	2304      	movs	r3, #4
 80068bc:	e006      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068be:	2303      	movs	r3, #3
 80068c0:	e004      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e002      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <HAL_GPIO_DeInit+0xb0>
 80068ca:	2300      	movs	r3, #0
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	f002 0203 	and.w	r2, r2, #3
 80068d2:	0092      	lsls	r2, r2, #2
 80068d4:	4093      	lsls	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d132      	bne.n	8006942 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80068dc:	4b48      	ldr	r3, [pc, #288]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	43db      	mvns	r3, r3
 80068e4:	4946      	ldr	r1, [pc, #280]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80068ea:	4b45      	ldr	r3, [pc, #276]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	4943      	ldr	r1, [pc, #268]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80068f8:	4b41      	ldr	r3, [pc, #260]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	43db      	mvns	r3, r3
 8006900:	493f      	ldr	r1, [pc, #252]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 8006902:	4013      	ands	r3, r2
 8006904:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006906:	4b3e      	ldr	r3, [pc, #248]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	43db      	mvns	r3, r3
 800690e:	493c      	ldr	r1, [pc, #240]	; (8006a00 <HAL_GPIO_DeInit+0x1e4>)
 8006910:	4013      	ands	r3, r2
 8006912:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	220f      	movs	r2, #15
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006924:	4a2e      	ldr	r2, [pc, #184]	; (80069e0 <HAL_GPIO_DeInit+0x1c4>)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	089b      	lsrs	r3, r3, #2
 800692a:	3302      	adds	r3, #2
 800692c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	43da      	mvns	r2, r3
 8006934:	482a      	ldr	r0, [pc, #168]	; (80069e0 <HAL_GPIO_DeInit+0x1c4>)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	089b      	lsrs	r3, r3, #2
 800693a:	400a      	ands	r2, r1
 800693c:	3302      	adds	r3, #2
 800693e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	2103      	movs	r1, #3
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	43db      	mvns	r3, r3
 8006952:	401a      	ands	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	08da      	lsrs	r2, r3, #3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3208      	adds	r2, #8
 8006960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	220f      	movs	r2, #15
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43db      	mvns	r3, r3
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	08d2      	lsrs	r2, r2, #3
 8006978:	4019      	ands	r1, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3208      	adds	r2, #8
 800697e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	2103      	movs	r1, #3
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	2101      	movs	r1, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	2103      	movs	r1, #3
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	43db      	mvns	r3, r3
 80069bc:	401a      	ands	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	3301      	adds	r3, #1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	f67f af34 	bls.w	8006838 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40013800 	.word	0x40013800
 80069e4:	40020000 	.word	0x40020000
 80069e8:	40020400 	.word	0x40020400
 80069ec:	40020800 	.word	0x40020800
 80069f0:	40020c00 	.word	0x40020c00
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40021400 	.word	0x40021400
 80069fc:	40021800 	.word	0x40021800
 8006a00:	40013c00 	.word	0x40013c00

08006a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	887b      	ldrh	r3, [r7, #2]
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
 8006a20:	e001      	b.n	8006a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	807b      	strh	r3, [r7, #2]
 8006a40:	4613      	mov	r3, r2
 8006a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a44:	787b      	ldrb	r3, [r7, #1]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a4a:	887a      	ldrh	r2, [r7, #2]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a50:	e003      	b.n	8006a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a52:	887b      	ldrh	r3, [r7, #2]
 8006a54:	041a      	lsls	r2, r3, #16
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	619a      	str	r2, [r3, #24]
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a78:	887a      	ldrh	r2, [r7, #2]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	041a      	lsls	r2, r3, #16
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	43d9      	mvns	r1, r3
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	400b      	ands	r3, r1
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	619a      	str	r2, [r3, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006aa6:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006aa8:	695a      	ldr	r2, [r3, #20]
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d006      	beq.n	8006ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ab2:	4a05      	ldr	r2, [pc, #20]	; (8006ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 f806 	bl	8006acc <HAL_GPIO_EXTI_Callback>
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40013c00 	.word	0x40013c00

08006acc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e12b      	b.n	8006d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fd f964 	bl	8003dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2224      	movs	r2, #36	; 0x24
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0201 	bic.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b48:	f002 f9ac 	bl	8008ea4 <HAL_RCC_GetPCLK1Freq>
 8006b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4a81      	ldr	r2, [pc, #516]	; (8006d58 <HAL_I2C_Init+0x274>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d807      	bhi.n	8006b68 <HAL_I2C_Init+0x84>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4a80      	ldr	r2, [pc, #512]	; (8006d5c <HAL_I2C_Init+0x278>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	bf94      	ite	ls
 8006b60:	2301      	movls	r3, #1
 8006b62:	2300      	movhi	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	e006      	b.n	8006b76 <HAL_I2C_Init+0x92>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a7d      	ldr	r2, [pc, #500]	; (8006d60 <HAL_I2C_Init+0x27c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	bf94      	ite	ls
 8006b70:	2301      	movls	r3, #1
 8006b72:	2300      	movhi	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e0e7      	b.n	8006d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a78      	ldr	r2, [pc, #480]	; (8006d64 <HAL_I2C_Init+0x280>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	0c9b      	lsrs	r3, r3, #18
 8006b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	4a6a      	ldr	r2, [pc, #424]	; (8006d58 <HAL_I2C_Init+0x274>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d802      	bhi.n	8006bb8 <HAL_I2C_Init+0xd4>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	e009      	b.n	8006bcc <HAL_I2C_Init+0xe8>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	4a69      	ldr	r2, [pc, #420]	; (8006d68 <HAL_I2C_Init+0x284>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	099b      	lsrs	r3, r3, #6
 8006bca:	3301      	adds	r3, #1
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	495c      	ldr	r1, [pc, #368]	; (8006d58 <HAL_I2C_Init+0x274>)
 8006be8:	428b      	cmp	r3, r1
 8006bea:	d819      	bhi.n	8006c20 <HAL_I2C_Init+0x13c>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1e59      	subs	r1, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c00:	400b      	ands	r3, r1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_I2C_Init+0x138>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1e59      	subs	r1, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c14:	3301      	adds	r3, #1
 8006c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c1a:	e051      	b.n	8006cc0 <HAL_I2C_Init+0x1dc>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	e04f      	b.n	8006cc0 <HAL_I2C_Init+0x1dc>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d111      	bne.n	8006c4c <HAL_I2C_Init+0x168>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1e58      	subs	r0, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	440b      	add	r3, r1
 8006c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	e012      	b.n	8006c72 <HAL_I2C_Init+0x18e>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	1e58      	subs	r0, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6859      	ldr	r1, [r3, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	0099      	lsls	r1, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c62:	3301      	adds	r3, #1
 8006c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bf0c      	ite	eq
 8006c6c:	2301      	moveq	r3, #1
 8006c6e:	2300      	movne	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_I2C_Init+0x196>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e022      	b.n	8006cc0 <HAL_I2C_Init+0x1dc>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10e      	bne.n	8006ca0 <HAL_I2C_Init+0x1bc>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1e58      	subs	r0, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6859      	ldr	r1, [r3, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	440b      	add	r3, r1
 8006c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c94:	3301      	adds	r3, #1
 8006c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	e00f      	b.n	8006cc0 <HAL_I2C_Init+0x1dc>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	1e58      	subs	r0, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6859      	ldr	r1, [r3, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	0099      	lsls	r1, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	6809      	ldr	r1, [r1, #0]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69da      	ldr	r2, [r3, #28]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6911      	ldr	r1, [r2, #16]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	68d2      	ldr	r2, [r2, #12]
 8006cfa:	4311      	orrs	r1, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	000186a0 	.word	0x000186a0
 8006d5c:	001e847f 	.word	0x001e847f
 8006d60:	003d08ff 	.word	0x003d08ff
 8006d64:	431bde83 	.word	0x431bde83
 8006d68:	10624dd3 	.word	0x10624dd3

08006d6c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	813b      	strh	r3, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d8a:	f7fd fb2f 	bl	80043ec <HAL_GetTick>
 8006d8e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	f040 8145 	bne.w	8007028 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d9e:	4b9d      	ldr	r3, [pc, #628]	; (8007014 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	4a9c      	ldr	r2, [pc, #624]	; (8007018 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	0a1a      	lsrs	r2, r3, #8
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009a      	lsls	r2, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d116      	bne.n	8006df2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f043 0220 	orr.w	r2, r3, #32
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e11b      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d0db      	beq.n	8006db8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_I2C_Mem_Write_DMA+0xa2>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e10d      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d007      	beq.n	8006e34 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2221      	movs	r2, #33	; 0x21
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2240      	movs	r2, #64	; 0x40
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a6a      	ldr	r2, [pc, #424]	; (800701c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8006e74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006e76:	897a      	ldrh	r2, [r7, #10]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006e7c:	893a      	ldrh	r2, [r7, #8]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80a9 	beq.w	8006fea <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02a      	beq.n	8006ef6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	4a5e      	ldr	r2, [pc, #376]	; (8007020 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8006ea6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	4a5d      	ldr	r2, [pc, #372]	; (8007024 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8006eae:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ecc:	2200      	movs	r2, #0
 8006ece:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	4619      	mov	r1, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3310      	adds	r3, #16
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee6:	f7ff f815 	bl	8005f14 <HAL_DMA_Start_IT>
 8006eea:	4603      	mov	r3, r0
 8006eec:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006eee:	7efb      	ldrb	r3, [r7, #27]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d166      	bne.n	8006fc2 <HAL_I2C_Mem_Write_DMA+0x256>
 8006ef4:	e013      	b.n	8006f1e <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e085      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006f1e:	88f8      	ldrh	r0, [r7, #6]
 8006f20:	893a      	ldrh	r2, [r7, #8]
 8006f22:	8979      	ldrh	r1, [r7, #10]
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	2323      	movs	r3, #35	; 0x23
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f8b2 	bl	8007098 <I2C_RequestMemoryWrite>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d022      	beq.n	8006f80 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff f840 	bl	8005fc4 <HAL_DMA_Abort_IT>
 8006f44:	4603      	mov	r3, r0
 8006f46:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0201 	bic.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e054      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fbc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e033      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f043 0210 	orr.w	r2, r3, #16
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e01f      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e00b      	b.n	800702a <HAL_I2C_Mem_Write_DMA+0x2be>
 8007012:	bf00      	nop
 8007014:	20000000 	.word	0x20000000
 8007018:	14f8b589 	.word	0x14f8b589
 800701c:	ffff0000 	.word	0xffff0000
 8007020:	080071c5 	.word	0x080071c5
 8007024:	0800736f 	.word	0x0800736f
    }
  }
  else
  {
    return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
  }
}
 800702a:	4618      	mov	r0, r3
 800702c:	3720      	adds	r7, #32
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop

08007034 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	461a      	mov	r2, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	817b      	strh	r3, [r7, #10]
 80070aa:	460b      	mov	r3, r1
 80070ac:	813b      	strh	r3, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f98a 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e8:	d103      	bne.n	80070f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e05f      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070f6:	897b      	ldrh	r3, [r7, #10]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	6a3a      	ldr	r2, [r7, #32]
 800710a:	492d      	ldr	r1, [pc, #180]	; (80071c0 <I2C_RequestMemoryWrite+0x128>)
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f9c2 	bl	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e04c      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007134:	6a39      	ldr	r1, [r7, #32]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fa2c 	bl	8007594 <I2C_WaitOnTXEFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	2b04      	cmp	r3, #4
 8007148:	d107      	bne.n	800715a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e02b      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d105      	bne.n	8007170 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007164:	893b      	ldrh	r3, [r7, #8]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	611a      	str	r2, [r3, #16]
 800716e:	e021      	b.n	80071b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007170:	893b      	ldrh	r3, [r7, #8]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	b2da      	uxtb	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800717e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007180:	6a39      	ldr	r1, [r7, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fa06 	bl	8007594 <I2C_WaitOnTXEFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	2b04      	cmp	r3, #4
 8007194:	d107      	bne.n	80071a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e005      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071aa:	893b      	ldrh	r3, [r7, #8]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	00010002 	.word	0x00010002

080071c4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80071f6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	2200      	movs	r2, #0
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	2200      	movs	r2, #0
 8007216:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007218:	7cfb      	ldrb	r3, [r7, #19]
 800721a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800721e:	2b21      	cmp	r3, #33	; 0x21
 8007220:	d007      	beq.n	8007232 <I2C_DMAXferCplt+0x6e>
 8007222:	7cfb      	ldrb	r3, [r7, #19]
 8007224:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8007228:	2b22      	cmp	r3, #34	; 0x22
 800722a:	d131      	bne.n	8007290 <I2C_DMAXferCplt+0xcc>
 800722c:	7cbb      	ldrb	r3, [r7, #18]
 800722e:	2b20      	cmp	r3, #32
 8007230:	d12e      	bne.n	8007290 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007240:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007248:	7cfb      	ldrb	r3, [r7, #19]
 800724a:	2b29      	cmp	r3, #41	; 0x29
 800724c:	d10a      	bne.n	8007264 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2221      	movs	r2, #33	; 0x21
 8007252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2228      	movs	r2, #40	; 0x28
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800725c:	6978      	ldr	r0, [r7, #20]
 800725e:	f7ff fef3 	bl	8007048 <HAL_I2C_SlaveTxCpltCallback>
 8007262:	e00c      	b.n	800727e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b2a      	cmp	r3, #42	; 0x2a
 8007268:	d109      	bne.n	800727e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2222      	movs	r2, #34	; 0x22
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2228      	movs	r2, #40	; 0x28
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007278:	6978      	ldr	r0, [r7, #20]
 800727a:	f7ff feef 	bl	800705c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800728c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800728e:	e06a      	b.n	8007366 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d064      	beq.n	8007366 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d107      	bne.n	80072b6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80072c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072cc:	d009      	beq.n	80072e2 <I2C_DMAXferCplt+0x11e>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d006      	beq.n	80072e2 <I2C_DMAXferCplt+0x11e>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80072da:	d002      	beq.n	80072e2 <I2C_DMAXferCplt+0x11e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d107      	bne.n	80072f2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007300:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007310:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	f7ff feaf 	bl	8007084 <HAL_I2C_ErrorCallback>
}
 8007326:	e01e      	b.n	8007366 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b40      	cmp	r3, #64	; 0x40
 800733a:	d10a      	bne.n	8007352 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7ff fe90 	bl	8007070 <HAL_I2C_MemRxCpltCallback>
}
 8007350:	e009      	b.n	8007366 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2212      	movs	r2, #18
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f7ff fe67 	bl	8007034 <HAL_I2C_MasterRxCpltCallback>
}
 8007366:	bf00      	nop
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007388:	2200      	movs	r2, #0
 800738a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	2200      	movs	r2, #0
 800739a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fe ffbd 	bl	800631c <HAL_DMA_GetError>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d01b      	beq.n	80073e0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f043 0210 	orr.w	r2, r3, #16
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fe52 	bl	8007084 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f8:	e025      	b.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d021      	beq.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007402:	f7fc fff3 	bl	80043ec <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d302      	bcc.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d116      	bne.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f043 0220 	orr.w	r2, r3, #32
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e023      	b.n	800748e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d10d      	bne.n	800746c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	43da      	mvns	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4013      	ands	r3, r2
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf0c      	ite	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	2300      	movne	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	e00c      	b.n	8007486 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	43da      	mvns	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4013      	ands	r3, r2
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	bf0c      	ite	eq
 800747e:	2301      	moveq	r3, #1
 8007480:	2300      	movne	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	429a      	cmp	r2, r3
 800748a:	d0b6      	beq.n	80073fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074a4:	e051      	b.n	800754a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b4:	d123      	bne.n	80074fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f043 0204 	orr.w	r2, r3, #4
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e046      	b.n	800758c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d021      	beq.n	800754a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7fc ff71 	bl	80043ec <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d116      	bne.n	800754a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f043 0220 	orr.w	r2, r3, #32
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e020      	b.n	800758c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	d10c      	bne.n	800756e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	43da      	mvns	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4013      	ands	r3, r2
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	e00b      	b.n	8007586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	43da      	mvns	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4013      	ands	r3, r2
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	bf14      	ite	ne
 8007580:	2301      	movne	r3, #1
 8007582:	2300      	moveq	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d18d      	bne.n	80074a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075a0:	e02d      	b.n	80075fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f837 	bl	8007616 <I2C_IsAcknowledgeFailed>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e02d      	b.n	800760e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d021      	beq.n	80075fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ba:	f7fc ff17 	bl	80043ec <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d302      	bcc.n	80075d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d116      	bne.n	80075fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	f043 0220 	orr.w	r2, r3, #32
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e007      	b.n	800760e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007608:	2b80      	cmp	r3, #128	; 0x80
 800760a:	d1ca      	bne.n	80075a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762c:	d11b      	bne.n	8007666 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007636:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0204 	orr.w	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007676:	b08f      	sub	sp, #60	; 0x3c
 8007678:	af0a      	add	r7, sp, #40	; 0x28
 800767a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e116      	b.n	80078b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f007 fb1d 	bl	800ece0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d102      	bne.n	80076c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f003 fdc0 	bl	800b24a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	687e      	ldr	r6, [r7, #4]
 80076d2:	466d      	mov	r5, sp
 80076d4:	f106 0410 	add.w	r4, r6, #16
 80076d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80076e8:	1d33      	adds	r3, r6, #4
 80076ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ec:	6838      	ldr	r0, [r7, #0]
 80076ee:	f003 fc97 	bl	800b020 <USB_CoreInit>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e0d7      	b.n	80078b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f003 fdae 	bl	800b26c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e04a      	b.n	80077ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007716:	7bfa      	ldrb	r2, [r7, #15]
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	333d      	adds	r3, #61	; 0x3d
 8007726:	2201      	movs	r2, #1
 8007728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800772a:	7bfa      	ldrb	r2, [r7, #15]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	333c      	adds	r3, #60	; 0x3c
 800773a:	7bfa      	ldrb	r2, [r7, #15]
 800773c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800773e:	7bfa      	ldrb	r2, [r7, #15]
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	b298      	uxth	r0, r3
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	3344      	adds	r3, #68	; 0x44
 8007752:	4602      	mov	r2, r0
 8007754:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007756:	7bfa      	ldrb	r2, [r7, #15]
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3340      	adds	r3, #64	; 0x40
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800776a:	7bfa      	ldrb	r2, [r7, #15]
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	3348      	adds	r3, #72	; 0x48
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800777e:	7bfa      	ldrb	r2, [r7, #15]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	334c      	adds	r3, #76	; 0x4c
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007792:	7bfa      	ldrb	r2, [r7, #15]
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	3354      	adds	r3, #84	; 0x54
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	3301      	adds	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	7bfa      	ldrb	r2, [r7, #15]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d3af      	bcc.n	8007716 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
 80077ba:	e044      	b.n	8007846 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80077bc:	7bfa      	ldrb	r2, [r7, #15]
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80077d2:	7bfa      	ldrb	r2, [r7, #15]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80077e4:	7bfa      	ldrb	r2, [r7, #15]
 80077e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007814:	7bfa      	ldrb	r2, [r7, #15]
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	4613      	mov	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	440b      	add	r3, r1
 8007822:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800782a:	7bfa      	ldrb	r2, [r7, #15]
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	3301      	adds	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]
 8007846:	7bfa      	ldrb	r2, [r7, #15]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d3b5      	bcc.n	80077bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	687e      	ldr	r6, [r7, #4]
 8007858:	466d      	mov	r5, sp
 800785a:	f106 0410 	add.w	r4, r6, #16
 800785e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007866:	e894 0003 	ldmia.w	r4, {r0, r1}
 800786a:	e885 0003 	stmia.w	r5, {r0, r1}
 800786e:	1d33      	adds	r3, r6, #4
 8007870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007872:	6838      	ldr	r0, [r7, #0]
 8007874:	f003 fd46 	bl	800b304 <USB_DevInit>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e014      	b.n	80078b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d102      	bne.n	80078a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 f98c 	bl	8008bc0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f004 fe88 	bl	800c5c2 <USB_DevDisconnect>

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_PCD_Start+0x1c>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e020      	b.n	800791a <HAL_PCD_Start+0x5e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d109      	bne.n	80078fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d005      	beq.n	80078fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f003 fc91 	bl	800b228 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f004 fe38 	bl	800c580 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007922:	b590      	push	{r4, r7, lr}
 8007924:	b08d      	sub	sp, #52	; 0x34
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f004 fef6 	bl	800c72a <USB_GetMode>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 84b7 	bne.w	80082b4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f004 fe5a 	bl	800c604 <USB_ReadInterrupts>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 84ad 	beq.w	80082b2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f004 fe47 	bl	800c604 <USB_ReadInterrupts>
 8007976:	4603      	mov	r3, r0
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d107      	bne.n	8007990 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f002 0202 	and.w	r2, r2, #2
 800798e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f004 fe35 	bl	800c604 <USB_ReadInterrupts>
 800799a:	4603      	mov	r3, r0
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b10      	cmp	r3, #16
 80079a2:	d161      	bne.n	8007a68 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0210 	bic.w	r2, r2, #16
 80079b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f003 020f 	and.w	r2, r3, #15
 80079c0:	4613      	mov	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	3304      	adds	r3, #4
 80079d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	0c5b      	lsrs	r3, r3, #17
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d124      	bne.n	8007a2a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80079e6:	4013      	ands	r3, r2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d035      	beq.n	8007a58 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	6a38      	ldr	r0, [r7, #32]
 8007a00:	f004 fc6c 	bl	800c2dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a10:	441a      	add	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	091b      	lsrs	r3, r3, #4
 8007a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a22:	441a      	add	r2, r3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	621a      	str	r2, [r3, #32]
 8007a28:	e016      	b.n	8007a58 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	0c5b      	lsrs	r3, r3, #17
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	2b06      	cmp	r3, #6
 8007a34:	d110      	bne.n	8007a58 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6a38      	ldr	r0, [r7, #32]
 8007a42:	f004 fc4b 	bl	800c2dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	091b      	lsrs	r3, r3, #4
 8007a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a52:	441a      	add	r2, r3
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0210 	orr.w	r2, r2, #16
 8007a66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f004 fdc9 	bl	800c604 <USB_ReadInterrupts>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a7c:	f040 80a7 	bne.w	8007bce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f004 fdce 	bl	800c62a <USB_ReadDevAllOutEpInterrupt>
 8007a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007a90:	e099      	b.n	8007bc6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 808e 	beq.w	8007bba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f004 fdf2 	bl	800c692 <USB_ReadDevOutEPInterrupt>
 8007aae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00c      	beq.n	8007ad4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2301      	movs	r3, #1
 8007aca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fef0 	bl	80088b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	461a      	mov	r2, r3
 8007aec:	2308      	movs	r3, #8
 8007aee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ffc6 	bl	8008a84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	2310      	movs	r3, #16
 8007b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d030      	beq.n	8007b80 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d109      	bne.n	8007b3e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b3c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b40:	4613      	mov	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	78db      	ldrb	r3, [r3, #3]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d108      	bne.n	8007b6e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f007 f9ed 	bl	800ef48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	461a      	mov	r2, r3
 8007b98:	2320      	movs	r3, #32
 8007b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bb8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f47f af62 	bne.w	8007a92 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f004 fd16 	bl	800c604 <USB_ReadInterrupts>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be2:	f040 80db 	bne.w	8007d9c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f004 fd37 	bl	800c65e <USB_ReadDevAllInEpInterrupt>
 8007bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007bf6:	e0cd      	b.n	8007d94 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80c2 	beq.w	8007d88 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f004 fd5d 	bl	800c6ce <USB_ReadDevInEPInterrupt>
 8007c14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d057      	beq.n	8007cd0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	2201      	movs	r2, #1
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69f9      	ldr	r1, [r7, #28]
 8007c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c40:	4013      	ands	r3, r2
 8007c42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	461a      	mov	r2, r3
 8007c52:	2301      	movs	r3, #1
 8007c54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d132      	bne.n	8007cc4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	4613      	mov	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	334c      	adds	r3, #76	; 0x4c
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c74:	4613      	mov	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4403      	add	r3, r0
 8007c7e:	3348      	adds	r3, #72	; 0x48
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4419      	add	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4403      	add	r3, r0
 8007c92:	334c      	adds	r3, #76	; 0x4c
 8007c94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d113      	bne.n	8007cc4 <HAL_PCD_IRQHandler+0x3a2>
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	3354      	adds	r3, #84	; 0x54
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d108      	bne.n	8007cc4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	f004 fd64 	bl	800c78c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f007 f8b7 	bl	800ee3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2308      	movs	r3, #8
 8007cea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d008      	beq.n	8007d08 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d02:	461a      	mov	r2, r3
 8007d04:	2310      	movs	r3, #16
 8007d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	461a      	mov	r2, r3
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d023      	beq.n	8007d76 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d30:	6a38      	ldr	r0, [r7, #32]
 8007d32:	f003 fc45 	bl	800b5c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	3338      	adds	r3, #56	; 0x38
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4413      	add	r3, r2
 8007d46:	3304      	adds	r3, #4
 8007d48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	78db      	ldrb	r3, [r3, #3]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d108      	bne.n	8007d64 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2200      	movs	r2, #0
 8007d56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f007 f904 	bl	800ef6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	461a      	mov	r2, r3
 8007d72:	2302      	movs	r3, #2
 8007d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fd08 	bl	8008798 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f47f af2e 	bne.w	8007bf8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f004 fc2f 	bl	800c604 <USB_ReadInterrupts>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db0:	d122      	bne.n	8007df8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d108      	bne.n	8007de2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007dd8:	2100      	movs	r1, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 ff14 	bl	8008c08 <HAL_PCDEx_LPM_Callback>
 8007de0:	e002      	b.n	8007de8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f007 f8a2 	bl	800ef2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f004 fc01 	bl	800c604 <USB_ReadInterrupts>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e0c:	d112      	bne.n	8007e34 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d102      	bne.n	8007e24 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f007 f85e 	bl	800eee0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e32:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f004 fbe3 	bl	800c604 <USB_ReadInterrupts>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e48:	d121      	bne.n	8007e8e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695a      	ldr	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007e58:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d111      	bne.n	8007e88 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	089b      	lsrs	r3, r3, #2
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e7e:	2101      	movs	r1, #1
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fec1 	bl	8008c08 <HAL_PCDEx_LPM_Callback>
 8007e86:	e002      	b.n	8007e8e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f007 f829 	bl	800eee0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f004 fbb6 	bl	800c604 <USB_ReadInterrupts>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea2:	f040 80b7 	bne.w	8008014 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2110      	movs	r1, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f003 fb7d 	bl	800b5c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eca:	e046      	b.n	8007f5a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ede:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007efe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	3301      	adds	r3, #1
 8007f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3b3      	bcc.n	8007ecc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f72:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d016      	beq.n	8007fae <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f90:	f043 030b 	orr.w	r3, r3, #11
 8007f94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa6:	f043 030b 	orr.w	r3, r3, #11
 8007faa:	6453      	str	r3, [r2, #68]	; 0x44
 8007fac:	e015      	b.n	8007fda <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fc0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007fc4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fd4:	f043 030b 	orr.w	r3, r3, #11
 8007fd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ffe:	461a      	mov	r2, r3
 8008000:	f004 fbc4 	bl	800c78c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695a      	ldr	r2, [r3, #20]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f004 faf3 	bl	800c604 <USB_ReadInterrupts>
 800801e:	4603      	mov	r3, r0
 8008020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008028:	d124      	bne.n	8008074 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f004 fb89 	bl	800c746 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4618      	mov	r0, r3
 800803a:	f003 fb3e 	bl	800b6ba <USB_GetDevSpeed>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681c      	ldr	r4, [r3, #0]
 800804a:	f000 ff1f 	bl	8008e8c <HAL_RCC_GetHCLKFreq>
 800804e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008054:	b2db      	uxtb	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	4620      	mov	r0, r4
 800805a:	f003 f843 	bl	800b0e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f006 ff15 	bl	800ee8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695a      	ldr	r2, [r3, #20]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008072:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f004 fac3 	bl	800c604 <USB_ReadInterrupts>
 800807e:	4603      	mov	r3, r0
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b08      	cmp	r3, #8
 8008086:	d10a      	bne.n	800809e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f006 fef2 	bl	800ee72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695a      	ldr	r2, [r3, #20]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f002 0208 	and.w	r2, r2, #8
 800809c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f004 faae 	bl	800c604 <USB_ReadInterrupts>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ae:	2b80      	cmp	r3, #128	; 0x80
 80080b0:	d122      	bne.n	80080f8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080be:	2301      	movs	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
 80080c2:	e014      	b.n	80080ee <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c8:	4613      	mov	r3, r2
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	440b      	add	r3, r1
 80080d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d105      	bne.n	80080e8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fb27 	bl	8008736 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	3301      	adds	r3, #1
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d3e5      	bcc.n	80080c4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f004 fa81 	bl	800c604 <USB_ReadInterrupts>
 8008102:	4603      	mov	r3, r0
 8008104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800810c:	d13b      	bne.n	8008186 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800810e:	2301      	movs	r3, #1
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	e02b      	b.n	800816c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	3340      	adds	r3, #64	; 0x40
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d115      	bne.n	8008166 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800813a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800813c:	2b00      	cmp	r3, #0
 800813e:	da12      	bge.n	8008166 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	333f      	adds	r3, #63	; 0x3f
 8008150:	2201      	movs	r2, #1
 8008152:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800815c:	b2db      	uxtb	r3, r3
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fae8 	bl	8008736 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	3301      	adds	r3, #1
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	429a      	cmp	r2, r3
 8008174:	d3ce      	bcc.n	8008114 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695a      	ldr	r2, [r3, #20]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f004 fa3a 	bl	800c604 <USB_ReadInterrupts>
 8008190:	4603      	mov	r3, r0
 8008192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800819a:	d155      	bne.n	8008248 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800819c:	2301      	movs	r3, #1
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
 80081a0:	e045      	b.n	800822e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d12e      	bne.n	8008228 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da2b      	bge.n	8008228 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80081dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d121      	bne.n	8008228 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008224:	6053      	str	r3, [r2, #4]
            break;
 8008226:	e007      	b.n	8008238 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	3301      	adds	r3, #1
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008234:	429a      	cmp	r2, r3
 8008236:	d3b4      	bcc.n	80081a2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f004 f9d9 	bl	800c604 <USB_ReadInterrupts>
 8008252:	4603      	mov	r3, r0
 8008254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d10a      	bne.n	8008274 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f006 fe96 	bl	800ef90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695a      	ldr	r2, [r3, #20]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f004 f9c3 	bl	800c604 <USB_ReadInterrupts>
 800827e:	4603      	mov	r3, r0
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b04      	cmp	r3, #4
 8008286:	d115      	bne.n	80082b4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f006 fe86 	bl	800efac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6859      	ldr	r1, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
 80082b0:	e000      	b.n	80082b4 <HAL_PCD_IRQHandler+0x992>
      return;
 80082b2:	bf00      	nop
    }
  }
}
 80082b4:	3734      	adds	r7, #52	; 0x34
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd90      	pop	{r4, r7, pc}

080082ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_PCD_SetAddress+0x1a>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e013      	b.n	80082fc <HAL_PCD_SetAddress+0x42>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	4611      	mov	r1, r2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f004 f921 	bl	800c534 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	461a      	mov	r2, r3
 8008312:	4603      	mov	r3, r0
 8008314:	70fb      	strb	r3, [r7, #3]
 8008316:	460b      	mov	r3, r1
 8008318:	803b      	strh	r3, [r7, #0]
 800831a:	4613      	mov	r3, r2
 800831c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008326:	2b00      	cmp	r3, #0
 8008328:	da0f      	bge.n	800834a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	f003 020f 	and.w	r2, r3, #15
 8008330:	4613      	mov	r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	3338      	adds	r3, #56	; 0x38
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	3304      	adds	r3, #4
 8008340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2201      	movs	r2, #1
 8008346:	705a      	strb	r2, [r3, #1]
 8008348:	e00f      	b.n	800836a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	f003 020f 	and.w	r2, r3, #15
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	b2da      	uxtb	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008376:	883a      	ldrh	r2, [r7, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	78ba      	ldrb	r2, [r7, #2]
 8008380:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008394:	78bb      	ldrb	r3, [r7, #2]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d102      	bne.n	80083a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_PCD_EP_Open+0xaa>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e00e      	b.n	80083cc <HAL_PCD_EP_Open+0xc8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	4618      	mov	r0, r3
 80083be:	f003 f9a1 	bl	800b704 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80083ca:	7afb      	ldrb	r3, [r7, #11]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da0f      	bge.n	8008408 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	4613      	mov	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	3338      	adds	r3, #56	; 0x38
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	3304      	adds	r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	705a      	strb	r2, [r3, #1]
 8008406:	e00f      	b.n	8008428 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	f003 020f 	and.w	r2, r3, #15
 800840e:	4613      	mov	r3, r2
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	3304      	adds	r3, #4
 8008420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	b2da      	uxtb	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_PCD_EP_Close+0x6e>
 800843e:	2302      	movs	r3, #2
 8008440:	e00e      	b.n	8008460 <HAL_PCD_EP_Close+0x8c>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	4618      	mov	r0, r3
 8008452:	f003 f9df 	bl	800b814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	460b      	mov	r3, r1
 8008476:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	f003 020f 	and.w	r2, r3, #15
 800847e:	4613      	mov	r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	3304      	adds	r3, #4
 8008490:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2200      	movs	r2, #0
 80084a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d102      	bne.n	80084c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	6979      	ldr	r1, [r7, #20]
 80084dc:	f003 fcbe 	bl	800be5c <USB_EP0StartXfer>
 80084e0:	e008      	b.n	80084f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	6979      	ldr	r1, [r7, #20]
 80084f0:	f003 fa6c 	bl	800b9cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	f003 020f 	and.w	r2, r3, #15
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	00db      	lsls	r3, r3, #3
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008520:	681b      	ldr	r3, [r3, #0]
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
 800853a:	460b      	mov	r3, r1
 800853c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	f003 020f 	and.w	r2, r3, #15
 8008544:	4613      	mov	r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	3338      	adds	r3, #56	; 0x38
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	3304      	adds	r3, #4
 8008554:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2200      	movs	r2, #0
 8008566:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2201      	movs	r2, #1
 800856c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	b2da      	uxtb	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d102      	bne.n	8008588 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6979      	ldr	r1, [r7, #20]
 80085a0:	f003 fc5c 	bl	800be5c <USB_EP0StartXfer>
 80085a4:	e008      	b.n	80085b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	6979      	ldr	r1, [r7, #20]
 80085b4:	f003 fa0a 	bl	800b9cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d901      	bls.n	80085e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e050      	b.n	8008682 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80085e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	da0f      	bge.n	8008608 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 020f 	and.w	r2, r3, #15
 80085ee:	4613      	mov	r3, r2
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	3338      	adds	r3, #56	; 0x38
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	4413      	add	r3, r2
 80085fc:	3304      	adds	r3, #4
 80085fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	705a      	strb	r2, [r3, #1]
 8008606:	e00d      	b.n	8008624 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	4613      	mov	r3, r2
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	3304      	adds	r3, #4
 800861c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	b2da      	uxtb	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_PCD_EP_SetStall+0x82>
 8008640:	2302      	movs	r3, #2
 8008642:	e01e      	b.n	8008682 <HAL_PCD_EP_SetStall+0xc0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	4618      	mov	r0, r3
 8008654:	f003 fe9a 	bl	800c38c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	b2d9      	uxtb	r1, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008672:	461a      	mov	r2, r3
 8008674:	f004 f88a 	bl	800c78c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	f003 020f 	and.w	r2, r3, #15
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d901      	bls.n	80086a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e042      	b.n	800872e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da0f      	bge.n	80086d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	f003 020f 	and.w	r2, r3, #15
 80086b6:	4613      	mov	r3, r2
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	3338      	adds	r3, #56	; 0x38
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	4413      	add	r3, r2
 80086c4:	3304      	adds	r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	705a      	strb	r2, [r3, #1]
 80086ce:	e00f      	b.n	80086f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	f003 020f 	and.w	r2, r3, #15
 80086d6:	4613      	mov	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	3304      	adds	r3, #4
 80086e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_PCD_EP_ClrStall+0x86>
 800870c:	2302      	movs	r3, #2
 800870e:	e00e      	b.n	800872e <HAL_PCD_EP_ClrStall+0xa4>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68f9      	ldr	r1, [r7, #12]
 800871e:	4618      	mov	r0, r3
 8008720:	f003 fea2 	bl	800c468 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008746:	2b00      	cmp	r3, #0
 8008748:	da0c      	bge.n	8008764 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	4613      	mov	r3, r2
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	3338      	adds	r3, #56	; 0x38
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	3304      	adds	r3, #4
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e00c      	b.n	800877e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	f003 020f 	and.w	r2, r3, #15
 800876a:	4613      	mov	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68f9      	ldr	r1, [r7, #12]
 8008784:	4618      	mov	r0, r3
 8008786:	f003 fcc1 	bl	800c10c <USB_EPStopXfer>
 800878a:	4603      	mov	r3, r0
 800878c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800878e:	7afb      	ldrb	r3, [r7, #11]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af02      	add	r7, sp, #8
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	4613      	mov	r3, r2
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	3338      	adds	r3, #56	; 0x38
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4413      	add	r3, r2
 80087bc:	3304      	adds	r3, #4
 80087be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a1a      	ldr	r2, [r3, #32]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d901      	bls.n	80087d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e06c      	b.n	80088aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	699a      	ldr	r2, [r3, #24]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d902      	bls.n	80087ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3303      	adds	r3, #3
 80087f0:	089b      	lsrs	r3, r3, #2
 80087f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087f4:	e02b      	b.n	800884e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699a      	ldr	r2, [r3, #24]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	429a      	cmp	r2, r3
 800880a:	d902      	bls.n	8008812 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	3303      	adds	r3, #3
 8008816:	089b      	lsrs	r3, r3, #2
 8008818:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6919      	ldr	r1, [r3, #16]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800882a:	b2db      	uxtb	r3, r3
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	4603      	mov	r3, r0
 8008830:	6978      	ldr	r0, [r7, #20]
 8008832:	f003 fd15 	bl	800c260 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	691a      	ldr	r2, [r3, #16]
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	441a      	add	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	441a      	add	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	b29b      	uxth	r3, r3
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	429a      	cmp	r2, r3
 8008862:	d809      	bhi.n	8008878 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1a      	ldr	r2, [r3, #32]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800886c:	429a      	cmp	r2, r3
 800886e:	d203      	bcs.n	8008878 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1be      	bne.n	80087f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	699a      	ldr	r2, [r3, #24]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	429a      	cmp	r2, r3
 8008882:	d811      	bhi.n	80088a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	2201      	movs	r2, #1
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	43db      	mvns	r3, r3
 800889e:	6939      	ldr	r1, [r7, #16]
 80088a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088a4:	4013      	ands	r3, r2
 80088a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	333c      	adds	r3, #60	; 0x3c
 80088cc:	3304      	adds	r3, #4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d17b      	bne.n	80089e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d015      	beq.n	8008920 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	4a61      	ldr	r2, [pc, #388]	; (8008a7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	f240 80b9 	bls.w	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80b3 	beq.w	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	461a      	mov	r2, r3
 8008918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800891c:	6093      	str	r3, [r2, #8]
 800891e:	e0a7      	b.n	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008936:	461a      	mov	r2, r3
 8008938:	2320      	movs	r3, #32
 800893a:	6093      	str	r3, [r2, #8]
 800893c:	e098      	b.n	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 8093 	bne.w	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	4a4b      	ldr	r2, [pc, #300]	; (8008a7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d90f      	bls.n	8008972 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	461a      	mov	r2, r3
 800896a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800896e:	6093      	str	r3, [r2, #8]
 8008970:	e07e      	b.n	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4613      	mov	r3, r2
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	3304      	adds	r3, #4
 8008986:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	0159      	lsls	r1, r3, #5
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	440b      	add	r3, r1
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800899e:	1ad2      	subs	r2, r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d114      	bne.n	80089d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089bc:	461a      	mov	r2, r3
 80089be:	2101      	movs	r1, #1
 80089c0:	f003 fee4 	bl	800c78c <USB_EP0_OutStart>
 80089c4:	e006      	b.n	80089d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	441a      	add	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f006 fa14 	bl	800ee08 <HAL_PCD_DataOutStageCallback>
 80089e0:	e046      	b.n	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d124      	bne.n	8008a34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00a      	beq.n	8008a0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a00:	461a      	mov	r2, r3
 8008a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a06:	6093      	str	r3, [r2, #8]
 8008a08:	e032      	b.n	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	461a      	mov	r2, r3
 8008a22:	2320      	movs	r3, #32
 8008a24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f006 f9eb 	bl	800ee08 <HAL_PCD_DataOutStageCallback>
 8008a32:	e01d      	b.n	8008a70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d114      	bne.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d108      	bne.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f003 fe94 	bl	800c78c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f006 f9cc 	bl	800ee08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3720      	adds	r7, #32
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	4f54300a 	.word	0x4f54300a
 8008a80:	4f54310a 	.word	0x4f54310a

08008a84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	333c      	adds	r3, #60	; 0x3c
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <PCD_EP_OutSetupPacket_int+0x88>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d90e      	bls.n	8008ad8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f006 f983 	bl	800ede4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	; (8008b0c <PCD_EP_OutSetupPacket_int+0x88>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d90c      	bls.n	8008b00 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d108      	bne.n	8008b00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6818      	ldr	r0, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008af8:	461a      	mov	r2, r3
 8008afa:	2101      	movs	r1, #1
 8008afc:	f003 fe46 	bl	800c78c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	4f54300a 	.word	0x4f54300a

08008b10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d107      	bne.n	8008b3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b2e:	883b      	ldrh	r3, [r7, #0]
 8008b30:	0419      	lsls	r1, r3, #16
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b3c:	e028      	b.n	8008b90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	0c1b      	lsrs	r3, r3, #16
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	4413      	add	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
 8008b50:	e00d      	b.n	8008b6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	3340      	adds	r3, #64	; 0x40
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
 8008b6e:	7bfa      	ldrb	r2, [r7, #15]
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d3ec      	bcc.n	8008b52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b78:	883b      	ldrh	r3, [r7, #0]
 8008b7a:	0418      	lsls	r0, r3, #16
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4302      	orrs	r2, r0
 8008b88:	3340      	adds	r3, #64	; 0x40
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf2:	f043 0303 	orr.w	r3, r3, #3
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	4b20      	ldr	r3, [pc, #128]	; (8008cb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6413      	str	r3, [r2, #64]	; 0x40
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008c46:	4b1b      	ldr	r3, [pc, #108]	; (8008cb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c4c:	f7fb fbce 	bl	80043ec <HAL_GetTick>
 8008c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c52:	e009      	b.n	8008c68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c54:	f7fb fbca 	bl	80043ec <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c62:	d901      	bls.n	8008c68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e01f      	b.n	8008ca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c74:	d1ee      	bne.n	8008c54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008c76:	4b11      	ldr	r3, [pc, #68]	; (8008cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c7c:	f7fb fbb6 	bl	80043ec <HAL_GetTick>
 8008c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008c82:	e009      	b.n	8008c98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c84:	f7fb fbb2 	bl	80043ec <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c92:	d901      	bls.n	8008c98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e007      	b.n	8008ca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008c98:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ca4:	d1ee      	bne.n	8008c84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	420e0040 	.word	0x420e0040
 8008cb8:	40007000 	.word	0x40007000
 8008cbc:	420e0044 	.word	0x420e0044

08008cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e0cc      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cd4:	4b68      	ldr	r3, [pc, #416]	; (8008e78 <HAL_RCC_ClockConfig+0x1b8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d90c      	bls.n	8008cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ce2:	4b65      	ldr	r3, [pc, #404]	; (8008e78 <HAL_RCC_ClockConfig+0x1b8>)
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cea:	4b63      	ldr	r3, [pc, #396]	; (8008e78 <HAL_RCC_ClockConfig+0x1b8>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 030f 	and.w	r3, r3, #15
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d001      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e0b8      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d020      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d14:	4b59      	ldr	r3, [pc, #356]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4a58      	ldr	r2, [pc, #352]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0308 	and.w	r3, r3, #8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d2c:	4b53      	ldr	r3, [pc, #332]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	4a52      	ldr	r2, [pc, #328]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d38:	4b50      	ldr	r3, [pc, #320]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	494d      	ldr	r1, [pc, #308]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d044      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d107      	bne.n	8008d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d5e:	4b47      	ldr	r3, [pc, #284]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d119      	bne.n	8008d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e07f      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d003      	beq.n	8008d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d107      	bne.n	8008d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d7e:	4b3f      	ldr	r3, [pc, #252]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e06f      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8e:	4b3b      	ldr	r3, [pc, #236]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e067      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d9e:	4b37      	ldr	r3, [pc, #220]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f023 0203 	bic.w	r2, r3, #3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4934      	ldr	r1, [pc, #208]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008db0:	f7fb fb1c 	bl	80043ec <HAL_GetTick>
 8008db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db6:	e00a      	b.n	8008dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008db8:	f7fb fb18 	bl	80043ec <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e04f      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dce:	4b2b      	ldr	r3, [pc, #172]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f003 020c 	and.w	r2, r3, #12
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d1eb      	bne.n	8008db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008de0:	4b25      	ldr	r3, [pc, #148]	; (8008e78 <HAL_RCC_ClockConfig+0x1b8>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d20c      	bcs.n	8008e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dee:	4b22      	ldr	r3, [pc, #136]	; (8008e78 <HAL_RCC_ClockConfig+0x1b8>)
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df6:	4b20      	ldr	r3, [pc, #128]	; (8008e78 <HAL_RCC_ClockConfig+0x1b8>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d001      	beq.n	8008e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e032      	b.n	8008e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d008      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e14:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	4916      	ldr	r1, [pc, #88]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	490e      	ldr	r1, [pc, #56]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e46:	f000 fb6b 	bl	8009520 <HAL_RCC_GetSysClockFreq>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <HAL_RCC_ClockConfig+0x1bc>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	091b      	lsrs	r3, r3, #4
 8008e52:	f003 030f 	and.w	r3, r3, #15
 8008e56:	490a      	ldr	r1, [pc, #40]	; (8008e80 <HAL_RCC_ClockConfig+0x1c0>)
 8008e58:	5ccb      	ldrb	r3, [r1, r3]
 8008e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5e:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <HAL_RCC_ClockConfig+0x1c4>)
 8008e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <HAL_RCC_ClockConfig+0x1c8>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fb fa7c 	bl	8004364 <HAL_InitTick>

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	40023c00 	.word	0x40023c00
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	0800f644 	.word	0x0800f644
 8008e84:	20000000 	.word	0x20000000
 8008e88:	20000004 	.word	0x20000004

08008e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e90:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e92:	681b      	ldr	r3, [r3, #0]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20000000 	.word	0x20000000

08008ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ea8:	f7ff fff0 	bl	8008e8c <HAL_RCC_GetHCLKFreq>
 8008eac:	4602      	mov	r2, r0
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	0a9b      	lsrs	r3, r3, #10
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	4903      	ldr	r1, [pc, #12]	; (8008ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eba:	5ccb      	ldrb	r3, [r1, r3]
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40023800 	.word	0x40023800
 8008ec8:	0800f654 	.word	0x0800f654

08008ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08c      	sub	sp, #48	; 0x30
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d010      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008f04:	4b6f      	ldr	r3, [pc, #444]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f0a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	496c      	ldr	r1, [pc, #432]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008f22:	2301      	movs	r3, #1
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d010      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008f32:	4b64      	ldr	r3, [pc, #400]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f38:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f40:	4960      	ldr	r1, [pc, #384]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008f50:	2301      	movs	r3, #1
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d017      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f60:	4b58      	ldr	r3, [pc, #352]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	4955      	ldr	r1, [pc, #340]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f7e:	d101      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008f80:	2301      	movs	r3, #1
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d017      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f9c:	4b49      	ldr	r3, [pc, #292]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	4946      	ldr	r1, [pc, #280]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fba:	d101      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 808a 	beq.w	80090ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60bb      	str	r3, [r7, #8]
 8008fde:	4b39      	ldr	r3, [pc, #228]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	4a38      	ldr	r2, [pc, #224]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8008fea:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ff2:	60bb      	str	r3, [r7, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ff6:	4b34      	ldr	r3, [pc, #208]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a33      	ldr	r2, [pc, #204]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009000:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009002:	f7fb f9f3 	bl	80043ec <HAL_GetTick>
 8009006:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009008:	e008      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800900a:	f7fb f9ef 	bl	80043ec <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e278      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800901c:	4b2a      	ldr	r3, [pc, #168]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0f0      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009028:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800902a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009030:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02f      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009040:	6a3a      	ldr	r2, [r7, #32]
 8009042:	429a      	cmp	r2, r3
 8009044:	d028      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009046:	4b1f      	ldr	r3, [pc, #124]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009050:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009052:	2201      	movs	r2, #1
 8009054:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009056:	4b1d      	ldr	r3, [pc, #116]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800905c:	4a19      	ldr	r2, [pc, #100]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009062:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b01      	cmp	r3, #1
 800906c:	d114      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800906e:	f7fb f9bd 	bl	80043ec <HAL_GetTick>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009074:	e00a      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009076:	f7fb f9b9 	bl	80043ec <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	f241 3288 	movw	r2, #5000	; 0x1388
 8009084:	4293      	cmp	r3, r2
 8009086:	d901      	bls.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e240      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800908c:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800908e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0ee      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090a4:	d114      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80090a6:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80090b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ba:	4902      	ldr	r1, [pc, #8]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	608b      	str	r3, [r1, #8]
 80090c0:	e00c      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80090c2:	bf00      	nop
 80090c4:	40023800 	.word	0x40023800
 80090c8:	40007000 	.word	0x40007000
 80090cc:	42470e40 	.word	0x42470e40
 80090d0:	4b4a      	ldr	r3, [pc, #296]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a49      	ldr	r2, [pc, #292]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80090da:	6093      	str	r3, [r2, #8]
 80090dc:	4b47      	ldr	r3, [pc, #284]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090e8:	4944      	ldr	r1, [pc, #272]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009100:	4b3f      	ldr	r3, [pc, #252]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009102:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009110:	4b3a      	ldr	r3, [pc, #232]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911e:	4937      	ldr	r1, [pc, #220]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009120:	4313      	orrs	r3, r2
 8009122:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009132:	4b32      	ldr	r3, [pc, #200]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009138:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009140:	492e      	ldr	r1, [pc, #184]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009142:	4313      	orrs	r3, r2
 8009144:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d011      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009154:	4b29      	ldr	r3, [pc, #164]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800915a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009162:	4926      	ldr	r1, [pc, #152]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009164:	4313      	orrs	r3, r2
 8009166:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009172:	d101      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009174:	2301      	movs	r3, #1
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009184:	4b1d      	ldr	r3, [pc, #116]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800918a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009192:	491a      	ldr	r1, [pc, #104]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009194:	4313      	orrs	r3, r2
 8009196:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d011      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80091a6:	4b15      	ldr	r3, [pc, #84]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b4:	4911      	ldr	r1, [pc, #68]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c4:	d101      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80091c6:	2301      	movs	r3, #1
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d005      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091d8:	f040 80ff 	bne.w	80093da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091e2:	f7fb f903 	bl	80043ec <HAL_GetTick>
 80091e6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091e8:	e00e      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80091ea:	f7fb f8ff 	bl	80043ec <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d907      	bls.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e188      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80091fc:	40023800 	.word	0x40023800
 8009200:	424711e0 	.word	0x424711e0
 8009204:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009208:	4b7e      	ldr	r3, [pc, #504]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1ea      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009230:	2b00      	cmp	r3, #0
 8009232:	d028      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d124      	bne.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800923c:	4b71      	ldr	r3, [pc, #452]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800923e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	3301      	adds	r3, #1
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800924e:	4b6d      	ldr	r3, [pc, #436]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009254:	0e1b      	lsrs	r3, r3, #24
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	019b      	lsls	r3, r3, #6
 8009266:	431a      	orrs	r2, r3
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	3b01      	subs	r3, #1
 800926e:	041b      	lsls	r3, r3, #16
 8009270:	431a      	orrs	r2, r3
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	061b      	lsls	r3, r3, #24
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	071b      	lsls	r3, r3, #28
 800927e:	4961      	ldr	r1, [pc, #388]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009280:	4313      	orrs	r3, r2
 8009282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	d00a      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d035      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092b0:	d130      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80092b2:	4b54      	ldr	r3, [pc, #336]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b8:	0c1b      	lsrs	r3, r3, #16
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	3301      	adds	r3, #1
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092c4:	4b4f      	ldr	r3, [pc, #316]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ca:	0f1b      	lsrs	r3, r3, #28
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	019b      	lsls	r3, r3, #6
 80092dc:	431a      	orrs	r2, r3
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	085b      	lsrs	r3, r3, #1
 80092e2:	3b01      	subs	r3, #1
 80092e4:	041b      	lsls	r3, r3, #16
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	061b      	lsls	r3, r3, #24
 80092ee:	431a      	orrs	r2, r3
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	071b      	lsls	r3, r3, #28
 80092f4:	4943      	ldr	r1, [pc, #268]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80092fc:	4b41      	ldr	r3, [pc, #260]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009302:	f023 021f 	bic.w	r2, r3, #31
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	3b01      	subs	r3, #1
 800930c:	493d      	ldr	r1, [pc, #244]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800930e:	4313      	orrs	r3, r2
 8009310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931c:	2b00      	cmp	r3, #0
 800931e:	d029      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009328:	d124      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800932a:	4b36      	ldr	r3, [pc, #216]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800932c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009330:	0c1b      	lsrs	r3, r3, #16
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	3301      	adds	r3, #1
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800933c:	4b31      	ldr	r3, [pc, #196]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800933e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009342:	0f1b      	lsrs	r3, r3, #28
 8009344:	f003 0307 	and.w	r3, r3, #7
 8009348:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	019b      	lsls	r3, r3, #6
 8009354:	431a      	orrs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	3b01      	subs	r3, #1
 800935e:	041b      	lsls	r3, r3, #16
 8009360:	431a      	orrs	r2, r3
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	061b      	lsls	r3, r3, #24
 8009366:	431a      	orrs	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	071b      	lsls	r3, r3, #28
 800936c:	4925      	ldr	r1, [pc, #148]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800936e:	4313      	orrs	r3, r2
 8009370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800937c:	2b00      	cmp	r3, #0
 800937e:	d016      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	019b      	lsls	r3, r3, #6
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	3b01      	subs	r3, #1
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	431a      	orrs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	061b      	lsls	r3, r3, #24
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	071b      	lsls	r3, r3, #28
 80093a6:	4917      	ldr	r1, [pc, #92]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80093ae:	4b16      	ldr	r3, [pc, #88]	; (8009408 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093b4:	f7fb f81a 	bl	80043ec <HAL_GetTick>
 80093b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093ba:	e008      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093bc:	f7fb f816 	bl	80043ec <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d901      	bls.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e09f      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093ce:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f0      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	2b01      	cmp	r3, #1
 80093de:	f040 8095 	bne.w	800950c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80093e2:	4b0a      	ldr	r3, [pc, #40]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093e8:	f7fb f800 	bl	80043ec <HAL_GetTick>
 80093ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093ee:	e00f      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80093f0:	f7fa fffc 	bl	80043ec <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d908      	bls.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e085      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009402:	bf00      	nop
 8009404:	40023800 	.word	0x40023800
 8009408:	42470068 	.word	0x42470068
 800940c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009410:	4b41      	ldr	r3, [pc, #260]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800941c:	d0e8      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0304 	and.w	r3, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800943a:	2b00      	cmp	r3, #0
 800943c:	d02b      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009442:	2b00      	cmp	r3, #0
 8009444:	d127      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009446:	4b34      	ldr	r3, [pc, #208]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944c:	0c1b      	lsrs	r3, r3, #16
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	3301      	adds	r3, #1
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699a      	ldr	r2, [r3, #24]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	019b      	lsls	r3, r3, #6
 8009462:	431a      	orrs	r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	085b      	lsrs	r3, r3, #1
 8009468:	3b01      	subs	r3, #1
 800946a:	041b      	lsls	r3, r3, #16
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	061b      	lsls	r3, r3, #24
 8009474:	4928      	ldr	r1, [pc, #160]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009476:	4313      	orrs	r3, r2
 8009478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800947c:	4b26      	ldr	r3, [pc, #152]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800947e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009482:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	3b01      	subs	r3, #1
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	4922      	ldr	r1, [pc, #136]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009490:	4313      	orrs	r3, r2
 8009492:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01d      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x612>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094aa:	d118      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b2:	0e1b      	lsrs	r3, r3, #24
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	019b      	lsls	r3, r3, #6
 80094c4:	431a      	orrs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	3b01      	subs	r3, #1
 80094ce:	041b      	lsls	r3, r3, #16
 80094d0:	431a      	orrs	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	061b      	lsls	r3, r3, #24
 80094d6:	4910      	ldr	r1, [pc, #64]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094e4:	f7fa ff82 	bl	80043ec <HAL_GetTick>
 80094e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094ea:	e008      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80094ec:	f7fa ff7e 	bl	80043ec <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e007      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094fe:	4b06      	ldr	r3, [pc, #24]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800950a:	d1ef      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3730      	adds	r7, #48	; 0x30
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	40023800 	.word	0x40023800
 800951c:	42470070 	.word	0x42470070

08009520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009524:	b0ae      	sub	sp, #184	; 0xb8
 8009526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009546:	4bcb      	ldr	r3, [pc, #812]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f003 030c 	and.w	r3, r3, #12
 800954e:	2b0c      	cmp	r3, #12
 8009550:	f200 8206 	bhi.w	8009960 <HAL_RCC_GetSysClockFreq+0x440>
 8009554:	a201      	add	r2, pc, #4	; (adr r2, 800955c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009591 	.word	0x08009591
 8009560:	08009961 	.word	0x08009961
 8009564:	08009961 	.word	0x08009961
 8009568:	08009961 	.word	0x08009961
 800956c:	08009599 	.word	0x08009599
 8009570:	08009961 	.word	0x08009961
 8009574:	08009961 	.word	0x08009961
 8009578:	08009961 	.word	0x08009961
 800957c:	080095a1 	.word	0x080095a1
 8009580:	08009961 	.word	0x08009961
 8009584:	08009961 	.word	0x08009961
 8009588:	08009961 	.word	0x08009961
 800958c:	08009791 	.word	0x08009791
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009590:	4bb9      	ldr	r3, [pc, #740]	; (8009878 <HAL_RCC_GetSysClockFreq+0x358>)
 8009592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009596:	e1e7      	b.n	8009968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009598:	4bb8      	ldr	r3, [pc, #736]	; (800987c <HAL_RCC_GetSysClockFreq+0x35c>)
 800959a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800959e:	e1e3      	b.n	8009968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095a0:	4bb4      	ldr	r3, [pc, #720]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095ac:	4bb1      	ldr	r3, [pc, #708]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d071      	beq.n	800969c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095b8:	4bae      	ldr	r3, [pc, #696]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	099b      	lsrs	r3, r3, #6
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80095c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095d4:	2300      	movs	r3, #0
 80095d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	f04f 0000 	mov.w	r0, #0
 80095e6:	f04f 0100 	mov.w	r1, #0
 80095ea:	0159      	lsls	r1, r3, #5
 80095ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095f0:	0150      	lsls	r0, r2, #5
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4621      	mov	r1, r4
 80095f8:	1a51      	subs	r1, r2, r1
 80095fa:	6439      	str	r1, [r7, #64]	; 0x40
 80095fc:	4629      	mov	r1, r5
 80095fe:	eb63 0301 	sbc.w	r3, r3, r1
 8009602:	647b      	str	r3, [r7, #68]	; 0x44
 8009604:	f04f 0200 	mov.w	r2, #0
 8009608:	f04f 0300 	mov.w	r3, #0
 800960c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009610:	4649      	mov	r1, r9
 8009612:	018b      	lsls	r3, r1, #6
 8009614:	4641      	mov	r1, r8
 8009616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800961a:	4641      	mov	r1, r8
 800961c:	018a      	lsls	r2, r1, #6
 800961e:	4641      	mov	r1, r8
 8009620:	1a51      	subs	r1, r2, r1
 8009622:	63b9      	str	r1, [r7, #56]	; 0x38
 8009624:	4649      	mov	r1, r9
 8009626:	eb63 0301 	sbc.w	r3, r3, r1
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	f04f 0300 	mov.w	r3, #0
 8009634:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009638:	4649      	mov	r1, r9
 800963a:	00cb      	lsls	r3, r1, #3
 800963c:	4641      	mov	r1, r8
 800963e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009642:	4641      	mov	r1, r8
 8009644:	00ca      	lsls	r2, r1, #3
 8009646:	4610      	mov	r0, r2
 8009648:	4619      	mov	r1, r3
 800964a:	4603      	mov	r3, r0
 800964c:	4622      	mov	r2, r4
 800964e:	189b      	adds	r3, r3, r2
 8009650:	633b      	str	r3, [r7, #48]	; 0x30
 8009652:	462b      	mov	r3, r5
 8009654:	460a      	mov	r2, r1
 8009656:	eb42 0303 	adc.w	r3, r2, r3
 800965a:	637b      	str	r3, [r7, #52]	; 0x34
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009668:	4629      	mov	r1, r5
 800966a:	024b      	lsls	r3, r1, #9
 800966c:	4621      	mov	r1, r4
 800966e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009672:	4621      	mov	r1, r4
 8009674:	024a      	lsls	r2, r1, #9
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800967e:	2200      	movs	r2, #0
 8009680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009688:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800968c:	f7f6 fdba 	bl	8000204 <__aeabi_uldivmod>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4613      	mov	r3, r2
 8009696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800969a:	e067      	b.n	800976c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800969c:	4b75      	ldr	r3, [pc, #468]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	099b      	lsrs	r3, r3, #6
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80096ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80096b6:	2300      	movs	r3, #0
 80096b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80096be:	4622      	mov	r2, r4
 80096c0:	462b      	mov	r3, r5
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f04f 0100 	mov.w	r1, #0
 80096ca:	0159      	lsls	r1, r3, #5
 80096cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096d0:	0150      	lsls	r0, r2, #5
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4621      	mov	r1, r4
 80096d8:	1a51      	subs	r1, r2, r1
 80096da:	62b9      	str	r1, [r7, #40]	; 0x28
 80096dc:	4629      	mov	r1, r5
 80096de:	eb63 0301 	sbc.w	r3, r3, r1
 80096e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80096f0:	4649      	mov	r1, r9
 80096f2:	018b      	lsls	r3, r1, #6
 80096f4:	4641      	mov	r1, r8
 80096f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80096fa:	4641      	mov	r1, r8
 80096fc:	018a      	lsls	r2, r1, #6
 80096fe:	4641      	mov	r1, r8
 8009700:	ebb2 0a01 	subs.w	sl, r2, r1
 8009704:	4649      	mov	r1, r9
 8009706:	eb63 0b01 	sbc.w	fp, r3, r1
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009716:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800971a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800971e:	4692      	mov	sl, r2
 8009720:	469b      	mov	fp, r3
 8009722:	4623      	mov	r3, r4
 8009724:	eb1a 0303 	adds.w	r3, sl, r3
 8009728:	623b      	str	r3, [r7, #32]
 800972a:	462b      	mov	r3, r5
 800972c:	eb4b 0303 	adc.w	r3, fp, r3
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800973e:	4629      	mov	r1, r5
 8009740:	028b      	lsls	r3, r1, #10
 8009742:	4621      	mov	r1, r4
 8009744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009748:	4621      	mov	r1, r4
 800974a:	028a      	lsls	r2, r1, #10
 800974c:	4610      	mov	r0, r2
 800974e:	4619      	mov	r1, r3
 8009750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009754:	2200      	movs	r2, #0
 8009756:	673b      	str	r3, [r7, #112]	; 0x70
 8009758:	677a      	str	r2, [r7, #116]	; 0x74
 800975a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800975e:	f7f6 fd51 	bl	8000204 <__aeabi_uldivmod>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4613      	mov	r3, r2
 8009768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800976c:	4b41      	ldr	r3, [pc, #260]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	0c1b      	lsrs	r3, r3, #16
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	3301      	adds	r3, #1
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800977e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009786:	fbb2 f3f3 	udiv	r3, r2, r3
 800978a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800978e:	e0eb      	b.n	8009968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009790:	4b38      	ldr	r3, [pc, #224]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800979c:	4b35      	ldr	r3, [pc, #212]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d06b      	beq.n	8009880 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097a8:	4b32      	ldr	r3, [pc, #200]	; (8009874 <HAL_RCC_GetSysClockFreq+0x354>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	099b      	lsrs	r3, r3, #6
 80097ae:	2200      	movs	r2, #0
 80097b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80097b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ba:	663b      	str	r3, [r7, #96]	; 0x60
 80097bc:	2300      	movs	r3, #0
 80097be:	667b      	str	r3, [r7, #100]	; 0x64
 80097c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80097c4:	4622      	mov	r2, r4
 80097c6:	462b      	mov	r3, r5
 80097c8:	f04f 0000 	mov.w	r0, #0
 80097cc:	f04f 0100 	mov.w	r1, #0
 80097d0:	0159      	lsls	r1, r3, #5
 80097d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097d6:	0150      	lsls	r0, r2, #5
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4621      	mov	r1, r4
 80097de:	1a51      	subs	r1, r2, r1
 80097e0:	61b9      	str	r1, [r7, #24]
 80097e2:	4629      	mov	r1, r5
 80097e4:	eb63 0301 	sbc.w	r3, r3, r1
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80097f6:	4659      	mov	r1, fp
 80097f8:	018b      	lsls	r3, r1, #6
 80097fa:	4651      	mov	r1, sl
 80097fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009800:	4651      	mov	r1, sl
 8009802:	018a      	lsls	r2, r1, #6
 8009804:	4651      	mov	r1, sl
 8009806:	ebb2 0801 	subs.w	r8, r2, r1
 800980a:	4659      	mov	r1, fp
 800980c:	eb63 0901 	sbc.w	r9, r3, r1
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800981c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009820:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009824:	4690      	mov	r8, r2
 8009826:	4699      	mov	r9, r3
 8009828:	4623      	mov	r3, r4
 800982a:	eb18 0303 	adds.w	r3, r8, r3
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	462b      	mov	r3, r5
 8009832:	eb49 0303 	adc.w	r3, r9, r3
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	f04f 0200 	mov.w	r2, #0
 800983c:	f04f 0300 	mov.w	r3, #0
 8009840:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009844:	4629      	mov	r1, r5
 8009846:	024b      	lsls	r3, r1, #9
 8009848:	4621      	mov	r1, r4
 800984a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800984e:	4621      	mov	r1, r4
 8009850:	024a      	lsls	r2, r1, #9
 8009852:	4610      	mov	r0, r2
 8009854:	4619      	mov	r1, r3
 8009856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800985a:	2200      	movs	r2, #0
 800985c:	65bb      	str	r3, [r7, #88]	; 0x58
 800985e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009860:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009864:	f7f6 fcce 	bl	8000204 <__aeabi_uldivmod>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4613      	mov	r3, r2
 800986e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009872:	e065      	b.n	8009940 <HAL_RCC_GetSysClockFreq+0x420>
 8009874:	40023800 	.word	0x40023800
 8009878:	00f42400 	.word	0x00f42400
 800987c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009880:	4b3d      	ldr	r3, [pc, #244]	; (8009978 <HAL_RCC_GetSysClockFreq+0x458>)
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	099b      	lsrs	r3, r3, #6
 8009886:	2200      	movs	r2, #0
 8009888:	4618      	mov	r0, r3
 800988a:	4611      	mov	r1, r2
 800988c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009890:	653b      	str	r3, [r7, #80]	; 0x50
 8009892:	2300      	movs	r3, #0
 8009894:	657b      	str	r3, [r7, #84]	; 0x54
 8009896:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800989a:	4642      	mov	r2, r8
 800989c:	464b      	mov	r3, r9
 800989e:	f04f 0000 	mov.w	r0, #0
 80098a2:	f04f 0100 	mov.w	r1, #0
 80098a6:	0159      	lsls	r1, r3, #5
 80098a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098ac:	0150      	lsls	r0, r2, #5
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4641      	mov	r1, r8
 80098b4:	1a51      	subs	r1, r2, r1
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	4649      	mov	r1, r9
 80098ba:	eb63 0301 	sbc.w	r3, r3, r1
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80098cc:	4659      	mov	r1, fp
 80098ce:	018b      	lsls	r3, r1, #6
 80098d0:	4651      	mov	r1, sl
 80098d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098d6:	4651      	mov	r1, sl
 80098d8:	018a      	lsls	r2, r1, #6
 80098da:	4651      	mov	r1, sl
 80098dc:	1a54      	subs	r4, r2, r1
 80098de:	4659      	mov	r1, fp
 80098e0:	eb63 0501 	sbc.w	r5, r3, r1
 80098e4:	f04f 0200 	mov.w	r2, #0
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	00eb      	lsls	r3, r5, #3
 80098ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098f2:	00e2      	lsls	r2, r4, #3
 80098f4:	4614      	mov	r4, r2
 80098f6:	461d      	mov	r5, r3
 80098f8:	4643      	mov	r3, r8
 80098fa:	18e3      	adds	r3, r4, r3
 80098fc:	603b      	str	r3, [r7, #0]
 80098fe:	464b      	mov	r3, r9
 8009900:	eb45 0303 	adc.w	r3, r5, r3
 8009904:	607b      	str	r3, [r7, #4]
 8009906:	f04f 0200 	mov.w	r2, #0
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009912:	4629      	mov	r1, r5
 8009914:	028b      	lsls	r3, r1, #10
 8009916:	4621      	mov	r1, r4
 8009918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800991c:	4621      	mov	r1, r4
 800991e:	028a      	lsls	r2, r1, #10
 8009920:	4610      	mov	r0, r2
 8009922:	4619      	mov	r1, r3
 8009924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009928:	2200      	movs	r2, #0
 800992a:	64bb      	str	r3, [r7, #72]	; 0x48
 800992c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800992e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009932:	f7f6 fc67 	bl	8000204 <__aeabi_uldivmod>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4613      	mov	r3, r2
 800993c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009940:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <HAL_RCC_GetSysClockFreq+0x458>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	0f1b      	lsrs	r3, r3, #28
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800994e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009956:	fbb2 f3f3 	udiv	r3, r2, r3
 800995a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800995e:	e003      	b.n	8009968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009960:	4b06      	ldr	r3, [pc, #24]	; (800997c <HAL_RCC_GetSysClockFreq+0x45c>)
 8009962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800996c:	4618      	mov	r0, r3
 800996e:	37b8      	adds	r7, #184	; 0xb8
 8009970:	46bd      	mov	sp, r7
 8009972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009976:	bf00      	nop
 8009978:	40023800 	.word	0x40023800
 800997c:	00f42400 	.word	0x00f42400

08009980 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e28d      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 8083 	beq.w	8009aa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80099a0:	4b94      	ldr	r3, [pc, #592]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f003 030c 	and.w	r3, r3, #12
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d019      	beq.n	80099e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80099ac:	4b91      	ldr	r3, [pc, #580]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d106      	bne.n	80099c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80099b8:	4b8e      	ldr	r3, [pc, #568]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099c4:	d00c      	beq.n	80099e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099c6:	4b8b      	ldr	r3, [pc, #556]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80099ce:	2b0c      	cmp	r3, #12
 80099d0:	d112      	bne.n	80099f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099d2:	4b88      	ldr	r3, [pc, #544]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099de:	d10b      	bne.n	80099f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099e0:	4b84      	ldr	r3, [pc, #528]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d05b      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x124>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d157      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e25a      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a00:	d106      	bne.n	8009a10 <HAL_RCC_OscConfig+0x90>
 8009a02:	4b7c      	ldr	r3, [pc, #496]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a7b      	ldr	r2, [pc, #492]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	e01d      	b.n	8009a4c <HAL_RCC_OscConfig+0xcc>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a18:	d10c      	bne.n	8009a34 <HAL_RCC_OscConfig+0xb4>
 8009a1a:	4b76      	ldr	r3, [pc, #472]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a75      	ldr	r2, [pc, #468]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	4b73      	ldr	r3, [pc, #460]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a72      	ldr	r2, [pc, #456]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	e00b      	b.n	8009a4c <HAL_RCC_OscConfig+0xcc>
 8009a34:	4b6f      	ldr	r3, [pc, #444]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a6e      	ldr	r2, [pc, #440]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	4b6c      	ldr	r3, [pc, #432]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a6b      	ldr	r2, [pc, #428]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d013      	beq.n	8009a7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a54:	f7fa fcca 	bl	80043ec <HAL_GetTick>
 8009a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a5a:	e008      	b.n	8009a6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a5c:	f7fa fcc6 	bl	80043ec <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b64      	cmp	r3, #100	; 0x64
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e21f      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a6e:	4b61      	ldr	r3, [pc, #388]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0f0      	beq.n	8009a5c <HAL_RCC_OscConfig+0xdc>
 8009a7a:	e014      	b.n	8009aa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a7c:	f7fa fcb6 	bl	80043ec <HAL_GetTick>
 8009a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a82:	e008      	b.n	8009a96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a84:	f7fa fcb2 	bl	80043ec <HAL_GetTick>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	2b64      	cmp	r3, #100	; 0x64
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e20b      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a96:	4b57      	ldr	r3, [pc, #348]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f0      	bne.n	8009a84 <HAL_RCC_OscConfig+0x104>
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d06f      	beq.n	8009b92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009ab2:	4b50      	ldr	r3, [pc, #320]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 030c 	and.w	r3, r3, #12
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d017      	beq.n	8009aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009abe:	4b4d      	ldr	r3, [pc, #308]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d105      	bne.n	8009ad6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009aca:	4b4a      	ldr	r3, [pc, #296]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ad6:	4b47      	ldr	r3, [pc, #284]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009ade:	2b0c      	cmp	r3, #12
 8009ae0:	d11c      	bne.n	8009b1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ae2:	4b44      	ldr	r3, [pc, #272]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d116      	bne.n	8009b1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009aee:	4b41      	ldr	r3, [pc, #260]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <HAL_RCC_OscConfig+0x186>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d001      	beq.n	8009b06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e1d3      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b06:	4b3b      	ldr	r3, [pc, #236]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	4937      	ldr	r1, [pc, #220]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b1a:	e03a      	b.n	8009b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d020      	beq.n	8009b66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b24:	4b34      	ldr	r3, [pc, #208]	; (8009bf8 <HAL_RCC_OscConfig+0x278>)
 8009b26:	2201      	movs	r2, #1
 8009b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2a:	f7fa fc5f 	bl	80043ec <HAL_GetTick>
 8009b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b30:	e008      	b.n	8009b44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b32:	f7fa fc5b 	bl	80043ec <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d901      	bls.n	8009b44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e1b4      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b44:	4b2b      	ldr	r3, [pc, #172]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0302 	and.w	r3, r3, #2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f0      	beq.n	8009b32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	4925      	ldr	r1, [pc, #148]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	600b      	str	r3, [r1, #0]
 8009b64:	e015      	b.n	8009b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b66:	4b24      	ldr	r3, [pc, #144]	; (8009bf8 <HAL_RCC_OscConfig+0x278>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b6c:	f7fa fc3e 	bl	80043ec <HAL_GetTick>
 8009b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b72:	e008      	b.n	8009b86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b74:	f7fa fc3a 	bl	80043ec <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d901      	bls.n	8009b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e193      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b86:	4b1b      	ldr	r3, [pc, #108]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f0      	bne.n	8009b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0308 	and.w	r3, r3, #8
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d036      	beq.n	8009c0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d016      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ba6:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <HAL_RCC_OscConfig+0x27c>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bac:	f7fa fc1e 	bl	80043ec <HAL_GetTick>
 8009bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bb4:	f7fa fc1a 	bl	80043ec <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e173      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bc6:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <HAL_RCC_OscConfig+0x274>)
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f0      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x234>
 8009bd2:	e01b      	b.n	8009c0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bd4:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <HAL_RCC_OscConfig+0x27c>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bda:	f7fa fc07 	bl	80043ec <HAL_GetTick>
 8009bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009be0:	e00e      	b.n	8009c00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009be2:	f7fa fc03 	bl	80043ec <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d907      	bls.n	8009c00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e15c      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	42470000 	.word	0x42470000
 8009bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c00:	4b8a      	ldr	r3, [pc, #552]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1ea      	bne.n	8009be2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 8097 	beq.w	8009d48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c1e:	4b83      	ldr	r3, [pc, #524]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10f      	bne.n	8009c4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60bb      	str	r3, [r7, #8]
 8009c2e:	4b7f      	ldr	r3, [pc, #508]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	4a7e      	ldr	r2, [pc, #504]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c38:	6413      	str	r3, [r2, #64]	; 0x40
 8009c3a:	4b7c      	ldr	r3, [pc, #496]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c42:	60bb      	str	r3, [r7, #8]
 8009c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c46:	2301      	movs	r3, #1
 8009c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c4a:	4b79      	ldr	r3, [pc, #484]	; (8009e30 <HAL_RCC_OscConfig+0x4b0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d118      	bne.n	8009c88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c56:	4b76      	ldr	r3, [pc, #472]	; (8009e30 <HAL_RCC_OscConfig+0x4b0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a75      	ldr	r2, [pc, #468]	; (8009e30 <HAL_RCC_OscConfig+0x4b0>)
 8009c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c62:	f7fa fbc3 	bl	80043ec <HAL_GetTick>
 8009c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c68:	e008      	b.n	8009c7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c6a:	f7fa fbbf 	bl	80043ec <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e118      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c7c:	4b6c      	ldr	r3, [pc, #432]	; (8009e30 <HAL_RCC_OscConfig+0x4b0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d106      	bne.n	8009c9e <HAL_RCC_OscConfig+0x31e>
 8009c90:	4b66      	ldr	r3, [pc, #408]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c94:	4a65      	ldr	r2, [pc, #404]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c9c:	e01c      	b.n	8009cd8 <HAL_RCC_OscConfig+0x358>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	2b05      	cmp	r3, #5
 8009ca4:	d10c      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x340>
 8009ca6:	4b61      	ldr	r3, [pc, #388]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009caa:	4a60      	ldr	r2, [pc, #384]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cac:	f043 0304 	orr.w	r3, r3, #4
 8009cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cb2:	4b5e      	ldr	r3, [pc, #376]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	4a5d      	ldr	r2, [pc, #372]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cb8:	f043 0301 	orr.w	r3, r3, #1
 8009cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8009cbe:	e00b      	b.n	8009cd8 <HAL_RCC_OscConfig+0x358>
 8009cc0:	4b5a      	ldr	r3, [pc, #360]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc4:	4a59      	ldr	r2, [pc, #356]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	6713      	str	r3, [r2, #112]	; 0x70
 8009ccc:	4b57      	ldr	r3, [pc, #348]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd0:	4a56      	ldr	r2, [pc, #344]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009cd2:	f023 0304 	bic.w	r3, r3, #4
 8009cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d015      	beq.n	8009d0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce0:	f7fa fb84 	bl	80043ec <HAL_GetTick>
 8009ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ce6:	e00a      	b.n	8009cfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ce8:	f7fa fb80 	bl	80043ec <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e0d7      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cfe:	4b4b      	ldr	r3, [pc, #300]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d02:	f003 0302 	and.w	r3, r3, #2
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0ee      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x368>
 8009d0a:	e014      	b.n	8009d36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d0c:	f7fa fb6e 	bl	80043ec <HAL_GetTick>
 8009d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d12:	e00a      	b.n	8009d2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d14:	f7fa fb6a 	bl	80043ec <HAL_GetTick>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e0c1      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d2a:	4b40      	ldr	r3, [pc, #256]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1ee      	bne.n	8009d14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d105      	bne.n	8009d48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d3c:	4b3b      	ldr	r3, [pc, #236]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	4a3a      	ldr	r2, [pc, #232]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80ad 	beq.w	8009eac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d52:	4b36      	ldr	r3, [pc, #216]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 030c 	and.w	r3, r3, #12
 8009d5a:	2b08      	cmp	r3, #8
 8009d5c:	d060      	beq.n	8009e20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d145      	bne.n	8009df2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d66:	4b33      	ldr	r3, [pc, #204]	; (8009e34 <HAL_RCC_OscConfig+0x4b4>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d6c:	f7fa fb3e 	bl	80043ec <HAL_GetTick>
 8009d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d72:	e008      	b.n	8009d86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d74:	f7fa fb3a 	bl	80043ec <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d901      	bls.n	8009d86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e093      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d86:	4b29      	ldr	r3, [pc, #164]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f0      	bne.n	8009d74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	69da      	ldr	r2, [r3, #28]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	019b      	lsls	r3, r3, #6
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	3b01      	subs	r3, #1
 8009dac:	041b      	lsls	r3, r3, #16
 8009dae:	431a      	orrs	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	061b      	lsls	r3, r3, #24
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	071b      	lsls	r3, r3, #28
 8009dbe:	491b      	ldr	r1, [pc, #108]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dc4:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <HAL_RCC_OscConfig+0x4b4>)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dca:	f7fa fb0f 	bl	80043ec <HAL_GetTick>
 8009dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dd0:	e008      	b.n	8009de4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dd2:	f7fa fb0b 	bl	80043ec <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d901      	bls.n	8009de4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e064      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009de4:	4b11      	ldr	r3, [pc, #68]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0f0      	beq.n	8009dd2 <HAL_RCC_OscConfig+0x452>
 8009df0:	e05c      	b.n	8009eac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009df2:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <HAL_RCC_OscConfig+0x4b4>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df8:	f7fa faf8 	bl	80043ec <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e00:	f7fa faf4 	bl	80043ec <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e04d      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e12:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <HAL_RCC_OscConfig+0x4ac>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1f0      	bne.n	8009e00 <HAL_RCC_OscConfig+0x480>
 8009e1e:	e045      	b.n	8009eac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d107      	bne.n	8009e38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e040      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
 8009e2c:	40023800 	.word	0x40023800
 8009e30:	40007000 	.word	0x40007000
 8009e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e38:	4b1f      	ldr	r3, [pc, #124]	; (8009eb8 <HAL_RCC_OscConfig+0x538>)
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d030      	beq.n	8009ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d129      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d122      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009e68:	4013      	ands	r3, r2
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d119      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	085b      	lsrs	r3, r3, #1
 8009e80:	3b01      	subs	r3, #1
 8009e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d10f      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d107      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d001      	beq.n	8009eac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e000      	b.n	8009eae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	40023800 	.word	0x40023800

08009ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e041      	b.n	8009f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7f9 ffc0 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4610      	mov	r0, r2
 8009efc:	f000 fc9e 	bl	800a83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d001      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e04e      	b.n	800a012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0201 	orr.w	r2, r2, #1
 8009f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a23      	ldr	r2, [pc, #140]	; (800a020 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d022      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9e:	d01d      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1f      	ldr	r2, [pc, #124]	; (800a024 <HAL_TIM_Base_Start_IT+0xc8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d018      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a1e      	ldr	r2, [pc, #120]	; (800a028 <HAL_TIM_Base_Start_IT+0xcc>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <HAL_TIM_Base_Start_IT+0xd0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00e      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a1b      	ldr	r2, [pc, #108]	; (800a030 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d009      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a19      	ldr	r2, [pc, #100]	; (800a034 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_TIM_Base_Start_IT+0x80>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a18      	ldr	r2, [pc, #96]	; (800a038 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d111      	bne.n	800a000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b06      	cmp	r3, #6
 8009fec:	d010      	beq.n	800a010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0201 	orr.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ffe:	e007      	b.n	800a010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0201 	orr.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	40010000 	.word	0x40010000
 800a024:	40000400 	.word	0x40000400
 800a028:	40000800 	.word	0x40000800
 800a02c:	40000c00 	.word	0x40000c00
 800a030:	40010400 	.word	0x40010400
 800a034:	40014000 	.word	0x40014000
 800a038:	40001800 	.word	0x40001800

0800a03c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0201 	bic.w	r2, r2, #1
 800a052:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6a1a      	ldr	r2, [r3, #32]
 800a05a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a05e:	4013      	ands	r3, r2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10f      	bne.n	800a084 <HAL_TIM_Base_Stop_IT+0x48>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6a1a      	ldr	r2, [r3, #32]
 800a06a:	f240 4344 	movw	r3, #1092	; 0x444
 800a06e:	4013      	ands	r3, r2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d107      	bne.n	800a084 <HAL_TIM_Base_Stop_IT+0x48>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0201 	bic.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e041      	b.n	800a130 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7f9 ff0f 	bl	8003ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f000 fbaf 	bl	800a83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_TIM_PWM_Start+0x24>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e022      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x6a>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d109      	bne.n	800a176 <HAL_TIM_PWM_Start+0x3e>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf14      	ite	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	2300      	moveq	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	e015      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x6a>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d109      	bne.n	800a190 <HAL_TIM_PWM_Start+0x58>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e008      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x6a>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	bf14      	ite	ne
 800a19c:	2301      	movne	r3, #1
 800a19e:	2300      	moveq	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e07c      	b.n	800a2a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <HAL_TIM_PWM_Start+0x82>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b8:	e013      	b.n	800a1e2 <HAL_TIM_PWM_Start+0xaa>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d104      	bne.n	800a1ca <HAL_TIM_PWM_Start+0x92>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c8:	e00b      	b.n	800a1e2 <HAL_TIM_PWM_Start+0xaa>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d104      	bne.n	800a1da <HAL_TIM_PWM_Start+0xa2>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d8:	e003      	b.n	800a1e2 <HAL_TIM_PWM_Start+0xaa>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fe10 	bl	800ae10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a2d      	ldr	r2, [pc, #180]	; (800a2ac <HAL_TIM_PWM_Start+0x174>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIM_PWM_Start+0xcc>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a2c      	ldr	r2, [pc, #176]	; (800a2b0 <HAL_TIM_PWM_Start+0x178>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d101      	bne.n	800a208 <HAL_TIM_PWM_Start+0xd0>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <HAL_TIM_PWM_Start+0xd2>
 800a208:	2300      	movs	r3, #0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a21c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a22      	ldr	r2, [pc, #136]	; (800a2ac <HAL_TIM_PWM_Start+0x174>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d022      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a230:	d01d      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1f      	ldr	r2, [pc, #124]	; (800a2b4 <HAL_TIM_PWM_Start+0x17c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d018      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1d      	ldr	r2, [pc, #116]	; (800a2b8 <HAL_TIM_PWM_Start+0x180>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d013      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a1c      	ldr	r2, [pc, #112]	; (800a2bc <HAL_TIM_PWM_Start+0x184>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d00e      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a16      	ldr	r2, [pc, #88]	; (800a2b0 <HAL_TIM_PWM_Start+0x178>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d009      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <HAL_TIM_PWM_Start+0x188>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d004      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <HAL_TIM_PWM_Start+0x18c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d111      	bne.n	800a292 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f003 0307 	and.w	r3, r3, #7
 800a278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b06      	cmp	r3, #6
 800a27e:	d010      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f042 0201 	orr.w	r2, r2, #1
 800a28e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a290:	e007      	b.n	800a2a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0201 	orr.w	r2, r2, #1
 800a2a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	40010000 	.word	0x40010000
 800a2b0:	40010400 	.word	0x40010400
 800a2b4:	40000400 	.word	0x40000400
 800a2b8:	40000800 	.word	0x40000800
 800a2bc:	40000c00 	.word	0x40000c00
 800a2c0:	40014000 	.word	0x40014000
 800a2c4:	40001800 	.word	0x40001800

0800a2c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d122      	bne.n	800a324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d11b      	bne.n	800a324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0202 	mvn.w	r2, #2
 800a2f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa77 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a310:	e005      	b.n	800a31e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa69 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa7a 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d122      	bne.n	800a378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d11b      	bne.n	800a378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f06f 0204 	mvn.w	r2, #4
 800a348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2202      	movs	r2, #2
 800a34e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa4d 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a364:	e005      	b.n	800a372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa3f 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa50 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b08      	cmp	r3, #8
 800a384:	d122      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b08      	cmp	r3, #8
 800a392:	d11b      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f06f 0208 	mvn.w	r2, #8
 800a39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa23 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a3b8:	e005      	b.n	800a3c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa15 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fa26 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0310 	and.w	r3, r3, #16
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d122      	bne.n	800a420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	2b10      	cmp	r3, #16
 800a3e6:	d11b      	bne.n	800a420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0210 	mvn.w	r2, #16
 800a3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2208      	movs	r2, #8
 800a3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f9f9 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a40c:	e005      	b.n	800a41a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f9eb 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f9fc 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d10e      	bne.n	800a44c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d107      	bne.n	800a44c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f06f 0201 	mvn.w	r2, #1
 800a444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7f8 faca 	bl	80029e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a456:	2b80      	cmp	r3, #128	; 0x80
 800a458:	d10e      	bne.n	800a478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a464:	2b80      	cmp	r3, #128	; 0x80
 800a466:	d107      	bne.n	800a478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fdca 	bl	800b00c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	d10e      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d107      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a49c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9c1 	bl	800a826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d10e      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d107      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0220 	mvn.w	r2, #32
 800a4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd94 	bl	800aff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	e0ae      	b.n	800a654 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b0c      	cmp	r3, #12
 800a502:	f200 809f 	bhi.w	800a644 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a541 	.word	0x0800a541
 800a510:	0800a645 	.word	0x0800a645
 800a514:	0800a645 	.word	0x0800a645
 800a518:	0800a645 	.word	0x0800a645
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a645 	.word	0x0800a645
 800a524:	0800a645 	.word	0x0800a645
 800a528:	0800a645 	.word	0x0800a645
 800a52c:	0800a5c3 	.word	0x0800a5c3
 800a530:	0800a645 	.word	0x0800a645
 800a534:	0800a645 	.word	0x0800a645
 800a538:	0800a645 	.word	0x0800a645
 800a53c:	0800a603 	.word	0x0800a603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fa18 	bl	800a97c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699a      	ldr	r2, [r3, #24]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0208 	orr.w	r2, r2, #8
 800a55a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699a      	ldr	r2, [r3, #24]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0204 	bic.w	r2, r2, #4
 800a56a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6999      	ldr	r1, [r3, #24]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	619a      	str	r2, [r3, #24]
      break;
 800a57e:	e064      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fa68 	bl	800aa5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6999      	ldr	r1, [r3, #24]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	021a      	lsls	r2, r3, #8
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	619a      	str	r2, [r3, #24]
      break;
 800a5c0:	e043      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68b9      	ldr	r1, [r7, #8]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fabd 	bl	800ab48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69da      	ldr	r2, [r3, #28]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0208 	orr.w	r2, r2, #8
 800a5dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69da      	ldr	r2, [r3, #28]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0204 	bic.w	r2, r2, #4
 800a5ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69d9      	ldr	r1, [r3, #28]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	61da      	str	r2, [r3, #28]
      break;
 800a600:	e023      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fb11 	bl	800ac30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a61c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69da      	ldr	r2, [r3, #28]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a62c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69d9      	ldr	r1, [r3, #28]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	021a      	lsls	r2, r3, #8
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	61da      	str	r2, [r3, #28]
      break;
 800a642:	e002      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	75fb      	strb	r3, [r7, #23]
      break;
 800a648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a652:	7dfb      	ldrb	r3, [r7, #23]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d101      	bne.n	800a678 <HAL_TIM_ConfigClockSource+0x1c>
 800a674:	2302      	movs	r3, #2
 800a676:	e0b4      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x186>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a69e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b0:	d03e      	beq.n	800a730 <HAL_TIM_ConfigClockSource+0xd4>
 800a6b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b6:	f200 8087 	bhi.w	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6be:	f000 8086 	beq.w	800a7ce <HAL_TIM_ConfigClockSource+0x172>
 800a6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c6:	d87f      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c8:	2b70      	cmp	r3, #112	; 0x70
 800a6ca:	d01a      	beq.n	800a702 <HAL_TIM_ConfigClockSource+0xa6>
 800a6cc:	2b70      	cmp	r3, #112	; 0x70
 800a6ce:	d87b      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d0:	2b60      	cmp	r3, #96	; 0x60
 800a6d2:	d050      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x11a>
 800a6d4:	2b60      	cmp	r3, #96	; 0x60
 800a6d6:	d877      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d8:	2b50      	cmp	r3, #80	; 0x50
 800a6da:	d03c      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0xfa>
 800a6dc:	2b50      	cmp	r3, #80	; 0x50
 800a6de:	d873      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d058      	beq.n	800a796 <HAL_TIM_ConfigClockSource+0x13a>
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	d86f      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e8:	2b30      	cmp	r3, #48	; 0x30
 800a6ea:	d064      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6ec:	2b30      	cmp	r3, #48	; 0x30
 800a6ee:	d86b      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f0:	2b20      	cmp	r3, #32
 800a6f2:	d060      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6f4:	2b20      	cmp	r3, #32
 800a6f6:	d867      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d05c      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d05a      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a700:	e062      	b.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	6899      	ldr	r1, [r3, #8]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f000 fb5d 	bl	800add0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	609a      	str	r2, [r3, #8]
      break;
 800a72e:	e04f      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6899      	ldr	r1, [r3, #8]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f000 fb46 	bl	800add0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689a      	ldr	r2, [r3, #8]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a752:	609a      	str	r2, [r3, #8]
      break;
 800a754:	e03c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6859      	ldr	r1, [r3, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	f000 faba 	bl	800acdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2150      	movs	r1, #80	; 0x50
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fb13 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a774:	e02c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6859      	ldr	r1, [r3, #4]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	461a      	mov	r2, r3
 800a784:	f000 fad9 	bl	800ad3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2160      	movs	r1, #96	; 0x60
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fb03 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a794:	e01c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	6859      	ldr	r1, [r3, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f000 fa9a 	bl	800acdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2140      	movs	r1, #64	; 0x40
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 faf3 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a7b4:	e00c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f000 faea 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a7c6:	e003      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a7cc:	e000      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
	...

0800a83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a40      	ldr	r2, [pc, #256]	; (800a950 <TIM_Base_SetConfig+0x114>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d013      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a85a:	d00f      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a3d      	ldr	r2, [pc, #244]	; (800a954 <TIM_Base_SetConfig+0x118>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d00b      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a3c      	ldr	r2, [pc, #240]	; (800a958 <TIM_Base_SetConfig+0x11c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d007      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a3b      	ldr	r2, [pc, #236]	; (800a95c <TIM_Base_SetConfig+0x120>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d003      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a3a      	ldr	r2, [pc, #232]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d108      	bne.n	800a88e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a2f      	ldr	r2, [pc, #188]	; (800a950 <TIM_Base_SetConfig+0x114>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d02b      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89c:	d027      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a2c      	ldr	r2, [pc, #176]	; (800a954 <TIM_Base_SetConfig+0x118>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d023      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a2b      	ldr	r2, [pc, #172]	; (800a958 <TIM_Base_SetConfig+0x11c>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d01f      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a2a      	ldr	r2, [pc, #168]	; (800a95c <TIM_Base_SetConfig+0x120>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d01b      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a29      	ldr	r2, [pc, #164]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d017      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a28      	ldr	r2, [pc, #160]	; (800a964 <TIM_Base_SetConfig+0x128>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d013      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a27      	ldr	r2, [pc, #156]	; (800a968 <TIM_Base_SetConfig+0x12c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00f      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a26      	ldr	r2, [pc, #152]	; (800a96c <TIM_Base_SetConfig+0x130>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d00b      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a25      	ldr	r2, [pc, #148]	; (800a970 <TIM_Base_SetConfig+0x134>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d007      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a24      	ldr	r2, [pc, #144]	; (800a974 <TIM_Base_SetConfig+0x138>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d003      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a23      	ldr	r2, [pc, #140]	; (800a978 <TIM_Base_SetConfig+0x13c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d108      	bne.n	800a900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <TIM_Base_SetConfig+0x114>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_Base_SetConfig+0xf8>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a0c      	ldr	r2, [pc, #48]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d103      	bne.n	800a93c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	691a      	ldr	r2, [r3, #16]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	615a      	str	r2, [r3, #20]
}
 800a942:	bf00      	nop
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	40010000 	.word	0x40010000
 800a954:	40000400 	.word	0x40000400
 800a958:	40000800 	.word	0x40000800
 800a95c:	40000c00 	.word	0x40000c00
 800a960:	40010400 	.word	0x40010400
 800a964:	40014000 	.word	0x40014000
 800a968:	40014400 	.word	0x40014400
 800a96c:	40014800 	.word	0x40014800
 800a970:	40001800 	.word	0x40001800
 800a974:	40001c00 	.word	0x40001c00
 800a978:	40002000 	.word	0x40002000

0800a97c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0303 	bic.w	r3, r3, #3
 800a9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f023 0302 	bic.w	r3, r3, #2
 800a9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a20      	ldr	r2, [pc, #128]	; (800aa54 <TIM_OC1_SetConfig+0xd8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d003      	beq.n	800a9e0 <TIM_OC1_SetConfig+0x64>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a1f      	ldr	r2, [pc, #124]	; (800aa58 <TIM_OC1_SetConfig+0xdc>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d10c      	bne.n	800a9fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f023 0308 	bic.w	r3, r3, #8
 800a9e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f023 0304 	bic.w	r3, r3, #4
 800a9f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <TIM_OC1_SetConfig+0xd8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d003      	beq.n	800aa0a <TIM_OC1_SetConfig+0x8e>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a14      	ldr	r2, [pc, #80]	; (800aa58 <TIM_OC1_SetConfig+0xdc>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d111      	bne.n	800aa2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	621a      	str	r2, [r3, #32]
}
 800aa48:	bf00      	nop
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40010000 	.word	0x40010000
 800aa58:	40010400 	.word	0x40010400

0800aa5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	f023 0210 	bic.w	r2, r3, #16
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	021b      	lsls	r3, r3, #8
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f023 0320 	bic.w	r3, r3, #32
 800aaa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a22      	ldr	r2, [pc, #136]	; (800ab40 <TIM_OC2_SetConfig+0xe4>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d003      	beq.n	800aac4 <TIM_OC2_SetConfig+0x68>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a21      	ldr	r2, [pc, #132]	; (800ab44 <TIM_OC2_SetConfig+0xe8>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d10d      	bne.n	800aae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a17      	ldr	r2, [pc, #92]	; (800ab40 <TIM_OC2_SetConfig+0xe4>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d003      	beq.n	800aaf0 <TIM_OC2_SetConfig+0x94>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a16      	ldr	r2, [pc, #88]	; (800ab44 <TIM_OC2_SetConfig+0xe8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d113      	bne.n	800ab18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aafe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	621a      	str	r2, [r3, #32]
}
 800ab32:	bf00      	nop
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40010000 	.word	0x40010000
 800ab44:	40010400 	.word	0x40010400

0800ab48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0303 	bic.w	r3, r3, #3
 800ab7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	021b      	lsls	r3, r3, #8
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a21      	ldr	r2, [pc, #132]	; (800ac28 <TIM_OC3_SetConfig+0xe0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d003      	beq.n	800abae <TIM_OC3_SetConfig+0x66>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a20      	ldr	r2, [pc, #128]	; (800ac2c <TIM_OC3_SetConfig+0xe4>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d10d      	bne.n	800abca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	021b      	lsls	r3, r3, #8
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <TIM_OC3_SetConfig+0xe0>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_OC3_SetConfig+0x92>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <TIM_OC3_SetConfig+0xe4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d113      	bne.n	800ac02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	621a      	str	r2, [r3, #32]
}
 800ac1c:	bf00      	nop
 800ac1e:	371c      	adds	r7, #28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	40010000 	.word	0x40010000
 800ac2c:	40010400 	.word	0x40010400

0800ac30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	031b      	lsls	r3, r3, #12
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a12      	ldr	r2, [pc, #72]	; (800acd4 <TIM_OC4_SetConfig+0xa4>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_OC4_SetConfig+0x68>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a11      	ldr	r2, [pc, #68]	; (800acd8 <TIM_OC4_SetConfig+0xa8>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d109      	bne.n	800acac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	019b      	lsls	r3, r3, #6
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	621a      	str	r2, [r3, #32]
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40010400 	.word	0x40010400

0800acdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f023 0201 	bic.w	r2, r3, #1
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f023 030a 	bic.w	r3, r3, #10
 800ad18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	621a      	str	r2, [r3, #32]
}
 800ad2e:	bf00      	nop
 800ad30:	371c      	adds	r7, #28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b087      	sub	sp, #28
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	031b      	lsls	r3, r3, #12
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	621a      	str	r2, [r3, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b085      	sub	sp, #20
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	f043 0307 	orr.w	r3, r3, #7
 800adbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	609a      	str	r2, [r3, #8]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	021a      	lsls	r2, r3, #8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	431a      	orrs	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	609a      	str	r2, [r3, #8]
}
 800ae04:	bf00      	nop
 800ae06:	371c      	adds	r7, #28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	2201      	movs	r2, #1
 800ae24:	fa02 f303 	lsl.w	r3, r2, r3
 800ae28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a1a      	ldr	r2, [r3, #32]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	43db      	mvns	r3, r3
 800ae32:	401a      	ands	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a1a      	ldr	r2, [r3, #32]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f003 031f 	and.w	r3, r3, #31
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	fa01 f303 	lsl.w	r3, r1, r3
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
	...

0800ae5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e05a      	b.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a21      	ldr	r2, [pc, #132]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d022      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec0:	d01d      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a1d      	ldr	r2, [pc, #116]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d018      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1b      	ldr	r2, [pc, #108]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d013      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00e      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a18      	ldr	r2, [pc, #96]	; (800af48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d009      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a17      	ldr	r2, [pc, #92]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d004      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a15      	ldr	r2, [pc, #84]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d10c      	bne.n	800af18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	40010000 	.word	0x40010000
 800af3c:	40000400 	.word	0x40000400
 800af40:	40000800 	.word	0x40000800
 800af44:	40000c00 	.word	0x40000c00
 800af48:	40010400 	.word	0x40010400
 800af4c:	40014000 	.word	0x40014000
 800af50:	40001800 	.word	0x40001800

0800af54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e03d      	b.n	800afec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b020:	b084      	sub	sp, #16
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	f107 001c 	add.w	r0, r7, #28
 800b02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	2b01      	cmp	r3, #1
 800b036:	d122      	bne.n	800b07e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b04c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d105      	bne.n	800b072 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f001 fbe8 	bl	800c848 <USB_CoreReset>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
 800b07c:	e01a      	b.n	800b0b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 fbdc 	bl	800c848 <USB_CoreReset>
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b0a6:	e005      	b.n	800b0b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d10b      	bne.n	800b0d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f043 0206 	orr.w	r2, r3, #6
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f043 0220 	orr.w	r2, r3, #32
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0de:	b004      	add	sp, #16
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d165      	bne.n	800b1c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	4a41      	ldr	r2, [pc, #260]	; (800b200 <USB_SetTurnaroundTime+0x11c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d906      	bls.n	800b10e <USB_SetTurnaroundTime+0x2a>
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	4a40      	ldr	r2, [pc, #256]	; (800b204 <USB_SetTurnaroundTime+0x120>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d202      	bcs.n	800b10e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b108:	230f      	movs	r3, #15
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e062      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	4a3c      	ldr	r2, [pc, #240]	; (800b204 <USB_SetTurnaroundTime+0x120>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d306      	bcc.n	800b124 <USB_SetTurnaroundTime+0x40>
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	4a3b      	ldr	r2, [pc, #236]	; (800b208 <USB_SetTurnaroundTime+0x124>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d202      	bcs.n	800b124 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b11e:	230e      	movs	r3, #14
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	e057      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	4a38      	ldr	r2, [pc, #224]	; (800b208 <USB_SetTurnaroundTime+0x124>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d306      	bcc.n	800b13a <USB_SetTurnaroundTime+0x56>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4a37      	ldr	r2, [pc, #220]	; (800b20c <USB_SetTurnaroundTime+0x128>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d202      	bcs.n	800b13a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b134:	230d      	movs	r3, #13
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e04c      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	4a33      	ldr	r2, [pc, #204]	; (800b20c <USB_SetTurnaroundTime+0x128>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d306      	bcc.n	800b150 <USB_SetTurnaroundTime+0x6c>
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4a32      	ldr	r2, [pc, #200]	; (800b210 <USB_SetTurnaroundTime+0x12c>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d802      	bhi.n	800b150 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b14a:	230c      	movs	r3, #12
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	e041      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	4a2f      	ldr	r2, [pc, #188]	; (800b210 <USB_SetTurnaroundTime+0x12c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d906      	bls.n	800b166 <USB_SetTurnaroundTime+0x82>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	4a2e      	ldr	r2, [pc, #184]	; (800b214 <USB_SetTurnaroundTime+0x130>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d802      	bhi.n	800b166 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b160:	230b      	movs	r3, #11
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e036      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	4a2a      	ldr	r2, [pc, #168]	; (800b214 <USB_SetTurnaroundTime+0x130>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d906      	bls.n	800b17c <USB_SetTurnaroundTime+0x98>
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	4a29      	ldr	r2, [pc, #164]	; (800b218 <USB_SetTurnaroundTime+0x134>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d802      	bhi.n	800b17c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b176:	230a      	movs	r3, #10
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	e02b      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	4a26      	ldr	r2, [pc, #152]	; (800b218 <USB_SetTurnaroundTime+0x134>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d906      	bls.n	800b192 <USB_SetTurnaroundTime+0xae>
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	4a25      	ldr	r2, [pc, #148]	; (800b21c <USB_SetTurnaroundTime+0x138>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d202      	bcs.n	800b192 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b18c:	2309      	movs	r3, #9
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	e020      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	4a21      	ldr	r2, [pc, #132]	; (800b21c <USB_SetTurnaroundTime+0x138>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d306      	bcc.n	800b1a8 <USB_SetTurnaroundTime+0xc4>
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4a20      	ldr	r2, [pc, #128]	; (800b220 <USB_SetTurnaroundTime+0x13c>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d802      	bhi.n	800b1a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b1a2:	2308      	movs	r3, #8
 800b1a4:	617b      	str	r3, [r7, #20]
 800b1a6:	e015      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <USB_SetTurnaroundTime+0x13c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d906      	bls.n	800b1be <USB_SetTurnaroundTime+0xda>
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	4a1c      	ldr	r2, [pc, #112]	; (800b224 <USB_SetTurnaroundTime+0x140>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d202      	bcs.n	800b1be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b1b8:	2307      	movs	r3, #7
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	e00a      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b1be:	2306      	movs	r3, #6
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e007      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b1ca:	2309      	movs	r3, #9
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	e001      	b.n	800b1d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b1d0:	2309      	movs	r3, #9
 800b1d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	68da      	ldr	r2, [r3, #12]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	029b      	lsls	r3, r3, #10
 800b1e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	00d8acbf 	.word	0x00d8acbf
 800b204:	00e4e1c0 	.word	0x00e4e1c0
 800b208:	00f42400 	.word	0x00f42400
 800b20c:	01067380 	.word	0x01067380
 800b210:	011a499f 	.word	0x011a499f
 800b214:	01312cff 	.word	0x01312cff
 800b218:	014ca43f 	.word	0x014ca43f
 800b21c:	016e3600 	.word	0x016e3600
 800b220:	01a6ab1f 	.word	0x01a6ab1f
 800b224:	01e84800 	.word	0x01e84800

0800b228 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f043 0201 	orr.w	r2, r3, #1
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f023 0201 	bic.w	r2, r3, #1
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d115      	bne.n	800b2ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b29a:	2001      	movs	r0, #1
 800b29c:	f7f9 f8b2 	bl	8004404 <HAL_Delay>
      ms++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 fa3f 	bl	800c72a <USB_GetMode>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d01e      	beq.n	800b2f0 <USB_SetCurrentMode+0x84>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2b31      	cmp	r3, #49	; 0x31
 800b2b6:	d9f0      	bls.n	800b29a <USB_SetCurrentMode+0x2e>
 800b2b8:	e01a      	b.n	800b2f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d115      	bne.n	800b2ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f7f9 f899 	bl	8004404 <HAL_Delay>
      ms++;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 fa26 	bl	800c72a <USB_GetMode>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d005      	beq.n	800b2f0 <USB_SetCurrentMode+0x84>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b31      	cmp	r3, #49	; 0x31
 800b2e8:	d9f0      	bls.n	800b2cc <USB_SetCurrentMode+0x60>
 800b2ea:	e001      	b.n	800b2f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e005      	b.n	800b2fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b32      	cmp	r3, #50	; 0x32
 800b2f4:	d101      	bne.n	800b2fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e000      	b.n	800b2fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b304:	b084      	sub	sp, #16
 800b306:	b580      	push	{r7, lr}
 800b308:	b086      	sub	sp, #24
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b31e:	2300      	movs	r3, #0
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	e009      	b.n	800b338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	3340      	adds	r3, #64	; 0x40
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	2200      	movs	r2, #0
 800b330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	3301      	adds	r3, #1
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b0e      	cmp	r3, #14
 800b33c:	d9f2      	bls.n	800b324 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b340:	2b00      	cmp	r3, #0
 800b342:	d11c      	bne.n	800b37e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b352:	f043 0302 	orr.w	r3, r3, #2
 800b356:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	e005      	b.n	800b38a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b390:	461a      	mov	r2, r3
 800b392:	2300      	movs	r3, #0
 800b394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39c:	4619      	mov	r1, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	680b      	ldr	r3, [r1, #0]
 800b3a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d10c      	bne.n	800b3ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d104      	bne.n	800b3c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f965 	bl	800b688 <USB_SetDevSpeed>
 800b3be:	e008      	b.n	800b3d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f960 	bl	800b688 <USB_SetDevSpeed>
 800b3c8:	e003      	b.n	800b3d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b3ca:	2103      	movs	r1, #3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f95b 	bl	800b688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b3d2:	2110      	movs	r1, #16
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f8f3 	bl	800b5c0 <USB_FlushTxFifo>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f91f 	bl	800b628 <USB_FlushRxFifo>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b406:	461a      	mov	r2, r3
 800b408:	2300      	movs	r3, #0
 800b40a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b412:	461a      	mov	r2, r3
 800b414:	2300      	movs	r3, #0
 800b416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b418:	2300      	movs	r3, #0
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	e043      	b.n	800b4a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b434:	d118      	bne.n	800b468 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10a      	bne.n	800b452 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b448:	461a      	mov	r2, r3
 800b44a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	e013      	b.n	800b47a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	015a      	lsls	r2, r3, #5
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	4413      	add	r3, r2
 800b45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45e:	461a      	mov	r2, r3
 800b460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	e008      	b.n	800b47a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	461a      	mov	r2, r3
 800b476:	2300      	movs	r3, #0
 800b478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b486:	461a      	mov	r2, r3
 800b488:	2300      	movs	r3, #0
 800b48a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	461a      	mov	r2, r3
 800b49a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b49e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d3b7      	bcc.n	800b41e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	e043      	b.n	800b53c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ca:	d118      	bne.n	800b4fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	015a      	lsls	r2, r3, #5
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4413      	add	r3, r2
 800b4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4e4:	6013      	str	r3, [r2, #0]
 800b4e6:	e013      	b.n	800b510 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	e008      	b.n	800b510 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4413      	add	r3, r2
 800b506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b50a:	461a      	mov	r2, r3
 800b50c:	2300      	movs	r3, #0
 800b50e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51c:	461a      	mov	r2, r3
 800b51e:	2300      	movs	r3, #0
 800b520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	461a      	mov	r2, r3
 800b530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	3301      	adds	r3, #1
 800b53a:	613b      	str	r3, [r7, #16]
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	429a      	cmp	r2, r3
 800b542:	d3b7      	bcc.n	800b4b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d105      	bne.n	800b578 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	f043 0210 	orr.w	r2, r3, #16
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	699a      	ldr	r2, [r3, #24]
 800b57c:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <USB_DevInit+0x2b8>)
 800b57e:	4313      	orrs	r3, r2
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d005      	beq.n	800b596 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	f043 0208 	orr.w	r2, r3, #8
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d107      	bne.n	800b5ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5a4:	f043 0304 	orr.w	r3, r3, #4
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5b8:	b004      	add	sp, #16
 800b5ba:	4770      	bx	lr
 800b5bc:	803c3800 	.word	0x803c3800

0800b5c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4a13      	ldr	r2, [pc, #76]	; (800b624 <USB_FlushTxFifo+0x64>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d901      	bls.n	800b5e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e01b      	b.n	800b618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	daf2      	bge.n	800b5ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	019b      	lsls	r3, r3, #6
 800b5f0:	f043 0220 	orr.w	r2, r3, #32
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	4a08      	ldr	r2, [pc, #32]	; (800b624 <USB_FlushTxFifo+0x64>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d901      	bls.n	800b60a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e006      	b.n	800b618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	f003 0320 	and.w	r3, r3, #32
 800b612:	2b20      	cmp	r3, #32
 800b614:	d0f0      	beq.n	800b5f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	00030d40 	.word	0x00030d40

0800b628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b630:	2300      	movs	r3, #0
 800b632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3301      	adds	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	4a11      	ldr	r2, [pc, #68]	; (800b684 <USB_FlushRxFifo+0x5c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d901      	bls.n	800b646 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e018      	b.n	800b678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	daf2      	bge.n	800b634 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b64e:	2300      	movs	r3, #0
 800b650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2210      	movs	r2, #16
 800b656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	3301      	adds	r3, #1
 800b65c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4a08      	ldr	r2, [pc, #32]	; (800b684 <USB_FlushRxFifo+0x5c>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d901      	bls.n	800b66a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b666:	2303      	movs	r3, #3
 800b668:	e006      	b.n	800b678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	f003 0310 	and.w	r3, r3, #16
 800b672:	2b10      	cmp	r3, #16
 800b674:	d0f0      	beq.n	800b658 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	00030d40 	.word	0x00030d40

0800b688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	68f9      	ldr	r1, [r7, #12]
 800b6a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b087      	sub	sp, #28
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f003 0306 	and.w	r3, r3, #6
 800b6d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	75fb      	strb	r3, [r7, #23]
 800b6de:	e00a      	b.n	800b6f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d002      	beq.n	800b6ec <USB_GetDevSpeed+0x32>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b06      	cmp	r3, #6
 800b6ea:	d102      	bne.n	800b6f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	75fb      	strb	r3, [r7, #23]
 800b6f0:	e001      	b.n	800b6f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b6f2:	230f      	movs	r3, #15
 800b6f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	371c      	adds	r7, #28
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	785b      	ldrb	r3, [r3, #1]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d13a      	bne.n	800b796 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b726:	69da      	ldr	r2, [r3, #28]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	f003 030f 	and.w	r3, r3, #15
 800b730:	2101      	movs	r1, #1
 800b732:	fa01 f303 	lsl.w	r3, r1, r3
 800b736:	b29b      	uxth	r3, r3
 800b738:	68f9      	ldr	r1, [r7, #12]
 800b73a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b73e:	4313      	orrs	r3, r2
 800b740:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d155      	bne.n	800b804 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	791b      	ldrb	r3, [r3, #4]
 800b772:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b774:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	059b      	lsls	r3, r3, #22
 800b77a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b77c:	4313      	orrs	r3, r2
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b78a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b78e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	e036      	b.n	800b804 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79c:	69da      	ldr	r2, [r3, #28]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	f003 030f 	and.w	r3, r3, #15
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ac:	041b      	lsls	r3, r3, #16
 800b7ae:	68f9      	ldr	r1, [r7, #12]
 800b7b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d11a      	bne.n	800b804 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	791b      	ldrb	r3, [r3, #4]
 800b7e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7ea:	430b      	orrs	r3, r1
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	0151      	lsls	r1, r2, #5
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b802:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
	...

0800b814 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	785b      	ldrb	r3, [r3, #1]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d161      	bne.n	800b8f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b846:	d11f      	bne.n	800b888 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	015a      	lsls	r2, r3, #5
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4413      	add	r3, r2
 800b850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	0151      	lsls	r1, r2, #5
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	440a      	add	r2, r1
 800b85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b866:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	0151      	lsls	r1, r2, #5
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	440a      	add	r2, r1
 800b87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b88e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	2101      	movs	r1, #1
 800b89a:	fa01 f303 	lsl.w	r3, r1, r3
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	43db      	mvns	r3, r3
 800b8a2:	68f9      	ldr	r1, [r7, #12]
 800b8a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b2:	69da      	ldr	r2, [r3, #28]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	f003 030f 	and.w	r3, r3, #15
 800b8bc:	2101      	movs	r1, #1
 800b8be:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	43db      	mvns	r3, r3
 800b8c6:	68f9      	ldr	r1, [r7, #12]
 800b8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	0159      	lsls	r1, r3, #5
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	440b      	add	r3, r1
 800b8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	4b35      	ldr	r3, [pc, #212]	; (800b9c4 <USB_DeactivateEndpoint+0x1b0>)
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	600b      	str	r3, [r1, #0]
 800b8f2:	e060      	b.n	800b9b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b90a:	d11f      	bne.n	800b94c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	0151      	lsls	r1, r2, #5
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	440a      	add	r2, r1
 800b922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b92a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	440a      	add	r2, r1
 800b942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b94a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	f003 030f 	and.w	r3, r3, #15
 800b95c:	2101      	movs	r1, #1
 800b95e:	fa01 f303 	lsl.w	r3, r1, r3
 800b962:	041b      	lsls	r3, r3, #16
 800b964:	43db      	mvns	r3, r3
 800b966:	68f9      	ldr	r1, [r7, #12]
 800b968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b96c:	4013      	ands	r3, r2
 800b96e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b976:	69da      	ldr	r2, [r3, #28]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	f003 030f 	and.w	r3, r3, #15
 800b980:	2101      	movs	r1, #1
 800b982:	fa01 f303 	lsl.w	r3, r1, r3
 800b986:	041b      	lsls	r3, r3, #16
 800b988:	43db      	mvns	r3, r3
 800b98a:	68f9      	ldr	r1, [r7, #12]
 800b98c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b990:	4013      	ands	r3, r2
 800b992:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	015a      	lsls	r2, r3, #5
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	4413      	add	r3, r2
 800b99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	0159      	lsls	r1, r3, #5
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	440b      	add	r3, r1
 800b9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <USB_DeactivateEndpoint+0x1b4>)
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	ec337800 	.word	0xec337800
 800b9c8:	eff37800 	.word	0xeff37800

0800b9cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b08a      	sub	sp, #40	; 0x28
 800b9d0:	af02      	add	r7, sp, #8
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	785b      	ldrb	r3, [r3, #1]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	f040 815c 	bne.w	800bca6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d132      	bne.n	800ba5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	015a      	lsls	r2, r3, #5
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	0151      	lsls	r1, r2, #5
 800ba08:	69fa      	ldr	r2, [r7, #28]
 800ba0a:	440a      	add	r2, r1
 800ba0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	69ba      	ldr	r2, [r7, #24]
 800ba2a:	0151      	lsls	r1, r2, #5
 800ba2c:	69fa      	ldr	r2, [r7, #28]
 800ba2e:	440a      	add	r2, r1
 800ba30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	69ba      	ldr	r2, [r7, #24]
 800ba4a:	0151      	lsls	r1, r2, #5
 800ba4c:	69fa      	ldr	r2, [r7, #28]
 800ba4e:	440a      	add	r2, r1
 800ba50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba54:	0cdb      	lsrs	r3, r3, #19
 800ba56:	04db      	lsls	r3, r3, #19
 800ba58:	6113      	str	r3, [r2, #16]
 800ba5a:	e074      	b.n	800bb46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	69ba      	ldr	r2, [r7, #24]
 800ba6c:	0151      	lsls	r1, r2, #5
 800ba6e:	69fa      	ldr	r2, [r7, #28]
 800ba70:	440a      	add	r2, r1
 800ba72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba76:	0cdb      	lsrs	r3, r3, #19
 800ba78:	04db      	lsls	r3, r3, #19
 800ba7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	69ba      	ldr	r2, [r7, #24]
 800ba8c:	0151      	lsls	r1, r2, #5
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	440a      	add	r2, r1
 800ba92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	6999      	ldr	r1, [r3, #24]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	440b      	add	r3, r1
 800bab8:	1e59      	subs	r1, r3, #1
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	fbb1 f3f3 	udiv	r3, r1, r3
 800bac2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bac4:	4b9d      	ldr	r3, [pc, #628]	; (800bd3c <USB_EPStartXfer+0x370>)
 800bac6:	400b      	ands	r3, r1
 800bac8:	69b9      	ldr	r1, [r7, #24]
 800baca:	0148      	lsls	r0, r1, #5
 800bacc:	69f9      	ldr	r1, [r7, #28]
 800bace:	4401      	add	r1, r0
 800bad0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bad4:	4313      	orrs	r3, r2
 800bad6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae4:	691a      	ldr	r2, [r3, #16]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baee:	69b9      	ldr	r1, [r7, #24]
 800baf0:	0148      	lsls	r0, r1, #5
 800baf2:	69f9      	ldr	r1, [r7, #28]
 800baf4:	4401      	add	r1, r0
 800baf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bafa:	4313      	orrs	r3, r2
 800bafc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	791b      	ldrb	r3, [r3, #4]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d11f      	bne.n	800bb46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	015a      	lsls	r2, r3, #5
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	0151      	lsls	r1, r2, #5
 800bb18:	69fa      	ldr	r2, [r7, #28]
 800bb1a:	440a      	add	r2, r1
 800bb1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bb24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	0151      	lsls	r1, r2, #5
 800bb38:	69fa      	ldr	r2, [r7, #28]
 800bb3a:	440a      	add	r2, r1
 800bb3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d14b      	bne.n	800bbe4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d009      	beq.n	800bb68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	015a      	lsls	r2, r3, #5
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb60:	461a      	mov	r2, r3
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	791b      	ldrb	r3, [r3, #4]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d128      	bne.n	800bbc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d110      	bne.n	800bba2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69ba      	ldr	r2, [r7, #24]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	e00f      	b.n	800bbc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	0151      	lsls	r1, r2, #5
 800bbb4:	69fa      	ldr	r2, [r7, #28]
 800bbb6:	440a      	add	r2, r1
 800bbb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	69ba      	ldr	r2, [r7, #24]
 800bbd2:	0151      	lsls	r1, r2, #5
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	440a      	add	r2, r1
 800bbd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	e133      	b.n	800be4c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	0151      	lsls	r1, r2, #5
 800bbf6:	69fa      	ldr	r2, [r7, #28]
 800bbf8:	440a      	add	r2, r1
 800bbfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	791b      	ldrb	r3, [r3, #4]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d015      	beq.n	800bc38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 811b 	beq.w	800be4c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	2101      	movs	r1, #1
 800bc28:	fa01 f303 	lsl.w	r3, r1, r3
 800bc2c:	69f9      	ldr	r1, [r7, #28]
 800bc2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc32:	4313      	orrs	r3, r2
 800bc34:	634b      	str	r3, [r1, #52]	; 0x34
 800bc36:	e109      	b.n	800be4c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d110      	bne.n	800bc6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	0151      	lsls	r1, r2, #5
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	440a      	add	r2, r1
 800bc5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	e00f      	b.n	800bc8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	69ba      	ldr	r2, [r7, #24]
 800bc7a:	0151      	lsls	r1, r2, #5
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	440a      	add	r2, r1
 800bc80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6919      	ldr	r1, [r3, #16]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	781a      	ldrb	r2, [r3, #0]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	b298      	uxth	r0, r3
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f000 fade 	bl	800c260 <USB_WritePacket>
 800bca4:	e0d2      	b.n	800be4c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	015a      	lsls	r2, r3, #5
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	0151      	lsls	r1, r2, #5
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	440a      	add	r2, r1
 800bcbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcc0:	0cdb      	lsrs	r3, r3, #19
 800bcc2:	04db      	lsls	r3, r3, #19
 800bcc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	69ba      	ldr	r2, [r7, #24]
 800bcd6:	0151      	lsls	r1, r2, #5
 800bcd8:	69fa      	ldr	r2, [r7, #28]
 800bcda:	440a      	add	r2, r1
 800bcdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bce8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d126      	bne.n	800bd40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfe:	691a      	ldr	r2, [r3, #16]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd08:	69b9      	ldr	r1, [r7, #24]
 800bd0a:	0148      	lsls	r0, r1, #5
 800bd0c:	69f9      	ldr	r1, [r7, #28]
 800bd0e:	4401      	add	r1, r0
 800bd10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd14:	4313      	orrs	r3, r2
 800bd16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	0151      	lsls	r1, r2, #5
 800bd2a:	69fa      	ldr	r2, [r7, #28]
 800bd2c:	440a      	add	r2, r1
 800bd2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd36:	6113      	str	r3, [r2, #16]
 800bd38:	e03a      	b.n	800bdb0 <USB_EPStartXfer+0x3e4>
 800bd3a:	bf00      	nop
 800bd3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	4413      	add	r3, r2
 800bd4a:	1e5a      	subs	r2, r3, #1
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	8afa      	ldrh	r2, [r7, #22]
 800bd5c:	fb03 f202 	mul.w	r2, r3, r2
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	691a      	ldr	r2, [r3, #16]
 800bd72:	8afb      	ldrh	r3, [r7, #22]
 800bd74:	04d9      	lsls	r1, r3, #19
 800bd76:	4b38      	ldr	r3, [pc, #224]	; (800be58 <USB_EPStartXfer+0x48c>)
 800bd78:	400b      	ands	r3, r1
 800bd7a:	69b9      	ldr	r1, [r7, #24]
 800bd7c:	0148      	lsls	r0, r1, #5
 800bd7e:	69f9      	ldr	r1, [r7, #28]
 800bd80:	4401      	add	r1, r0
 800bd82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd86:	4313      	orrs	r3, r2
 800bd88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd96:	691a      	ldr	r2, [r3, #16]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bda0:	69b9      	ldr	r1, [r7, #24]
 800bda2:	0148      	lsls	r0, r1, #5
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	4401      	add	r1, r0
 800bda8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdac:	4313      	orrs	r3, r2
 800bdae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d10d      	bne.n	800bdd2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d009      	beq.n	800bdd2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6919      	ldr	r1, [r3, #16]
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	015a      	lsls	r2, r3, #5
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdce:	460a      	mov	r2, r1
 800bdd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	791b      	ldrb	r3, [r3, #4]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d128      	bne.n	800be2c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d110      	bne.n	800be0c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	015a      	lsls	r2, r3, #5
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	69ba      	ldr	r2, [r7, #24]
 800bdfa:	0151      	lsls	r1, r2, #5
 800bdfc:	69fa      	ldr	r2, [r7, #28]
 800bdfe:	440a      	add	r2, r1
 800be00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e00f      	b.n	800be2c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	69ba      	ldr	r2, [r7, #24]
 800be1c:	0151      	lsls	r1, r2, #5
 800be1e:	69fa      	ldr	r2, [r7, #28]
 800be20:	440a      	add	r2, r1
 800be22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	69ba      	ldr	r2, [r7, #24]
 800be3c:	0151      	lsls	r1, r2, #5
 800be3e:	69fa      	ldr	r2, [r7, #28]
 800be40:	440a      	add	r2, r1
 800be42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3720      	adds	r7, #32
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	1ff80000 	.word	0x1ff80000

0800be5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	785b      	ldrb	r3, [r3, #1]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	f040 80ce 	bne.w	800c01a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d132      	bne.n	800beec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	015a      	lsls	r2, r3, #5
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	4413      	add	r3, r2
 800be8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	0151      	lsls	r1, r2, #5
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	440a      	add	r2, r1
 800be9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bea4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	0151      	lsls	r1, r2, #5
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	440a      	add	r2, r1
 800bec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	015a      	lsls	r2, r3, #5
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	4413      	add	r3, r2
 800bed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	0151      	lsls	r1, r2, #5
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	440a      	add	r2, r1
 800bee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bee4:	0cdb      	lsrs	r3, r3, #19
 800bee6:	04db      	lsls	r3, r3, #19
 800bee8:	6113      	str	r3, [r2, #16]
 800beea:	e04e      	b.n	800bf8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	0151      	lsls	r1, r2, #5
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	440a      	add	r2, r1
 800bf02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf06:	0cdb      	lsrs	r3, r3, #19
 800bf08:	04db      	lsls	r3, r3, #19
 800bf0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	0151      	lsls	r1, r2, #5
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	440a      	add	r2, r1
 800bf22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	699a      	ldr	r2, [r3, #24]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d903      	bls.n	800bf44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	68da      	ldr	r2, [r3, #12]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	015a      	lsls	r2, r3, #5
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	0151      	lsls	r1, r2, #5
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	440a      	add	r2, r1
 800bf5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf70:	691a      	ldr	r2, [r3, #16]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf7a:	6939      	ldr	r1, [r7, #16]
 800bf7c:	0148      	lsls	r0, r1, #5
 800bf7e:	6979      	ldr	r1, [r7, #20]
 800bf80:	4401      	add	r1, r0
 800bf82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf86:	4313      	orrs	r3, r2
 800bf88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d11e      	bne.n	800bfce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d009      	beq.n	800bfac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	015a      	lsls	r2, r3, #5
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	0151      	lsls	r1, r2, #5
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	440a      	add	r2, r1
 800bfc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	e097      	b.n	800c0fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	015a      	lsls	r2, r3, #5
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	0151      	lsls	r1, r2, #5
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	440a      	add	r2, r1
 800bfe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 8083 	beq.w	800c0fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	f003 030f 	and.w	r3, r3, #15
 800c008:	2101      	movs	r1, #1
 800c00a:	fa01 f303 	lsl.w	r3, r1, r3
 800c00e:	6979      	ldr	r1, [r7, #20]
 800c010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c014:	4313      	orrs	r3, r2
 800c016:	634b      	str	r3, [r1, #52]	; 0x34
 800c018:	e071      	b.n	800c0fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	015a      	lsls	r2, r3, #5
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	4413      	add	r3, r2
 800c022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	0151      	lsls	r1, r2, #5
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	440a      	add	r2, r1
 800c030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c034:	0cdb      	lsrs	r3, r3, #19
 800c036:	04db      	lsls	r3, r3, #19
 800c038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	015a      	lsls	r2, r3, #5
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	4413      	add	r3, r2
 800c042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	0151      	lsls	r1, r2, #5
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	440a      	add	r2, r1
 800c050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c05c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	68da      	ldr	r2, [r3, #12]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	015a      	lsls	r2, r3, #5
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	4413      	add	r3, r2
 800c07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	0151      	lsls	r1, r2, #5
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	440a      	add	r2, r1
 800c08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	015a      	lsls	r2, r3, #5
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	4413      	add	r3, r2
 800c09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a2:	691a      	ldr	r2, [r3, #16]
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0ac:	6939      	ldr	r1, [r7, #16]
 800c0ae:	0148      	lsls	r0, r1, #5
 800c0b0:	6979      	ldr	r1, [r7, #20]
 800c0b2:	4401      	add	r1, r0
 800c0b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d10d      	bne.n	800c0de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d009      	beq.n	800c0de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	6919      	ldr	r1, [r3, #16]
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	015a      	lsls	r2, r3, #5
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0da:	460a      	mov	r2, r1
 800c0dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	015a      	lsls	r2, r3, #5
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	0151      	lsls	r1, r2, #5
 800c0f0:	697a      	ldr	r2, [r7, #20]
 800c0f2:	440a      	add	r2, r1
 800c0f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	371c      	adds	r7, #28
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b087      	sub	sp, #28
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	785b      	ldrb	r3, [r3, #1]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d14a      	bne.n	800c1c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c13e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c142:	f040 8086 	bne.w	800c252 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	7812      	ldrb	r2, [r2, #0]
 800c15a:	0151      	lsls	r1, r2, #5
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	440a      	add	r2, r1
 800c160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c168:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	7812      	ldrb	r2, [r2, #0]
 800c17e:	0151      	lsls	r1, r2, #5
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	440a      	add	r2, r1
 800c184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c18c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3301      	adds	r3, #1
 800c192:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f242 7210 	movw	r2, #10000	; 0x2710
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d902      	bls.n	800c1a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	75fb      	strb	r3, [r7, #23]
          break;
 800c1a2:	e056      	b.n	800c252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1bc:	d0e7      	beq.n	800c18e <USB_EPStopXfer+0x82>
 800c1be:	e048      	b.n	800c252 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1d8:	d13b      	bne.n	800c252 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	7812      	ldrb	r2, [r2, #0]
 800c1ee:	0151      	lsls	r1, r2, #5
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	7812      	ldrb	r2, [r2, #0]
 800c212:	0151      	lsls	r1, r2, #5
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	440a      	add	r2, r1
 800c218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c21c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3301      	adds	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c22e:	4293      	cmp	r3, r2
 800c230:	d902      	bls.n	800c238 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	75fb      	strb	r3, [r7, #23]
          break;
 800c236:	e00c      	b.n	800c252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	015a      	lsls	r2, r3, #5
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	4413      	add	r3, r2
 800c242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c24c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c250:	d0e7      	beq.n	800c222 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c252:	7dfb      	ldrb	r3, [r7, #23]
}
 800c254:	4618      	mov	r0, r3
 800c256:	371c      	adds	r7, #28
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c260:	b480      	push	{r7}
 800c262:	b089      	sub	sp, #36	; 0x24
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	4611      	mov	r1, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	460b      	mov	r3, r1
 800c270:	71fb      	strb	r3, [r7, #7]
 800c272:	4613      	mov	r3, r2
 800c274:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c27e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c282:	2b00      	cmp	r3, #0
 800c284:	d123      	bne.n	800c2ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c286:	88bb      	ldrh	r3, [r7, #4]
 800c288:	3303      	adds	r3, #3
 800c28a:	089b      	lsrs	r3, r3, #2
 800c28c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c28e:	2300      	movs	r3, #0
 800c290:	61bb      	str	r3, [r7, #24]
 800c292:	e018      	b.n	800c2c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	031a      	lsls	r2, r3, #12
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	61bb      	str	r3, [r7, #24]
 800c2c6:	69ba      	ldr	r2, [r7, #24]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d3e2      	bcc.n	800c294 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3724      	adds	r7, #36	; 0x24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b08b      	sub	sp, #44	; 0x2c
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c2f2:	88fb      	ldrh	r3, [r7, #6]
 800c2f4:	089b      	lsrs	r3, r3, #2
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	f003 0303 	and.w	r3, r3, #3
 800c300:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c302:	2300      	movs	r3, #0
 800c304:	623b      	str	r3, [r7, #32]
 800c306:	e014      	b.n	800c332 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	601a      	str	r2, [r3, #0]
    pDest++;
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	3301      	adds	r3, #1
 800c318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	3301      	adds	r3, #1
 800c31e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	3301      	adds	r3, #1
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	3301      	adds	r3, #1
 800c32a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c32c:	6a3b      	ldr	r3, [r7, #32]
 800c32e:	3301      	adds	r3, #1
 800c330:	623b      	str	r3, [r7, #32]
 800c332:	6a3a      	ldr	r2, [r7, #32]
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	429a      	cmp	r2, r3
 800c338:	d3e6      	bcc.n	800c308 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c33a:	8bfb      	ldrh	r3, [r7, #30]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d01e      	beq.n	800c37e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c34a:	461a      	mov	r2, r3
 800c34c:	f107 0310 	add.w	r3, r7, #16
 800c350:	6812      	ldr	r2, [r2, #0]
 800c352:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	fa22 f303 	lsr.w	r3, r2, r3
 800c360:	b2da      	uxtb	r2, r3
 800c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c364:	701a      	strb	r2, [r3, #0]
      i++;
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	3301      	adds	r3, #1
 800c36a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	3301      	adds	r3, #1
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c372:	8bfb      	ldrh	r3, [r7, #30]
 800c374:	3b01      	subs	r3, #1
 800c376:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c378:	8bfb      	ldrh	r3, [r7, #30]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1ea      	bne.n	800c354 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c380:	4618      	mov	r0, r3
 800c382:	372c      	adds	r7, #44	; 0x2c
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	785b      	ldrb	r3, [r3, #1]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d12c      	bne.n	800c402 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	db12      	blt.n	800c3e0 <USB_EPSetStall+0x54>
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00f      	beq.n	800c3e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	0151      	lsls	r1, r2, #5
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	0151      	lsls	r1, r2, #5
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	440a      	add	r2, r1
 800c3f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	e02b      	b.n	800c45a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	015a      	lsls	r2, r3, #5
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	4413      	add	r3, r2
 800c40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	db12      	blt.n	800c43a <USB_EPSetStall+0xae>
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00f      	beq.n	800c43a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	0151      	lsls	r1, r2, #5
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	440a      	add	r2, r1
 800c430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c438:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	0151      	lsls	r1, r2, #5
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	440a      	add	r2, r1
 800c450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c458:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d128      	bne.n	800c4d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	0151      	lsls	r1, r2, #5
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	440a      	add	r2, r1
 800c49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c49e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	791b      	ldrb	r3, [r3, #4]
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d003      	beq.n	800c4b4 <USB_EPClearStall+0x4c>
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	791b      	ldrb	r3, [r3, #4]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d138      	bne.n	800c526 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	0151      	lsls	r1, r2, #5
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	440a      	add	r2, r1
 800c4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	e027      	b.n	800c526 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	015a      	lsls	r2, r3, #5
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	4413      	add	r3, r2
 800c4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	0151      	lsls	r1, r2, #5
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	440a      	add	r2, r1
 800c4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	791b      	ldrb	r3, [r3, #4]
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d003      	beq.n	800c506 <USB_EPClearStall+0x9e>
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	791b      	ldrb	r3, [r3, #4]
 800c502:	2b02      	cmp	r3, #2
 800c504:	d10f      	bne.n	800c526 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	0151      	lsls	r1, r2, #5
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	440a      	add	r2, r1
 800c51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c524:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c552:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c556:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	011b      	lsls	r3, r3, #4
 800c564:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c568:	68f9      	ldr	r1, [r7, #12]
 800c56a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c56e:	4313      	orrs	r3, r2
 800c570:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c59a:	f023 0303 	bic.w	r3, r3, #3
 800c59e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5ae:	f023 0302 	bic.w	r3, r3, #2
 800c5b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr

0800c5c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b085      	sub	sp, #20
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5dc:	f023 0303 	bic.w	r3, r3, #3
 800c5e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5f0:	f043 0302 	orr.w	r3, r3, #2
 800c5f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	4013      	ands	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c61c:	68fb      	ldr	r3, [r7, #12]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b085      	sub	sp, #20
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c646:	69db      	ldr	r3, [r3, #28]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	4013      	ands	r3, r2
 800c64c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	0c1b      	lsrs	r3, r3, #16
}
 800c652:	4618      	mov	r0, r3
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr

0800c65e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c65e:	b480      	push	{r7}
 800c660:	b085      	sub	sp, #20
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67a:	69db      	ldr	r3, [r3, #28]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	4013      	ands	r3, r2
 800c680:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	b29b      	uxth	r3, r3
}
 800c686:	4618      	mov	r0, r3
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	460b      	mov	r3, r1
 800c69c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	015a      	lsls	r2, r3, #5
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	4013      	ands	r3, r2
 800c6be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b087      	sub	sp, #28
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c6f2:	78fb      	ldrb	r3, [r7, #3]
 800c6f4:	f003 030f 	and.w	r3, r3, #15
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c6fe:	01db      	lsls	r3, r3, #7
 800c700:	b2db      	uxtb	r3, r3
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c708:	78fb      	ldrb	r3, [r7, #3]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4013      	ands	r3, r2
 800c71a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c71c:	68bb      	ldr	r3, [r7, #8]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	f003 0301 	and.w	r3, r3, #1
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c746:	b480      	push	{r7}
 800c748:	b085      	sub	sp, #20
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c760:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c764:	f023 0307 	bic.w	r3, r3, #7
 800c768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c77c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b087      	sub	sp, #28
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	460b      	mov	r3, r1
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	333c      	adds	r3, #60	; 0x3c
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	4a26      	ldr	r2, [pc, #152]	; (800c844 <USB_EP0_OutStart+0xb8>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d90a      	bls.n	800c7c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7c0:	d101      	bne.n	800c7c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e037      	b.n	800c836 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f4:	f043 0318 	orr.w	r3, r3, #24
 800c7f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c808:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c80c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c80e:	7afb      	ldrb	r3, [r7, #11]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d10f      	bne.n	800c834 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81a:	461a      	mov	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c82e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	4f54300a 	.word	0x4f54300a

0800c848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c850:	2300      	movs	r3, #0
 800c852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3301      	adds	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	4a13      	ldr	r2, [pc, #76]	; (800c8ac <USB_CoreReset+0x64>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d901      	bls.n	800c866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c862:	2303      	movs	r3, #3
 800c864:	e01b      	b.n	800c89e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	daf2      	bge.n	800c854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	f043 0201 	orr.w	r2, r3, #1
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3301      	adds	r3, #1
 800c882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	4a09      	ldr	r2, [pc, #36]	; (800c8ac <USB_CoreReset+0x64>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d901      	bls.n	800c890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e006      	b.n	800c89e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d0f0      	beq.n	800c87e <USB_CoreReset+0x36>

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	00030d40 	.word	0x00030d40

0800c8b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c8bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c8c0:	f002 fd0c 	bl	800f2dc <USBD_static_malloc>
 800c8c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d109      	bne.n	800c8e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	32b0      	adds	r2, #176	; 0xb0
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c8dc:	2302      	movs	r3, #2
 800c8de:	e0d4      	b.n	800ca8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c8e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f002 fd76 	bl	800f3d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	32b0      	adds	r2, #176	; 0xb0
 800c8f6:	68f9      	ldr	r1, [r7, #12]
 800c8f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	32b0      	adds	r2, #176	; 0xb0
 800c906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	7c1b      	ldrb	r3, [r3, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d138      	bne.n	800c98a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c918:	4b5e      	ldr	r3, [pc, #376]	; (800ca94 <USBD_CDC_Init+0x1e4>)
 800c91a:	7819      	ldrb	r1, [r3, #0]
 800c91c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c920:	2202      	movs	r2, #2
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f002 fbb7 	bl	800f096 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c928:	4b5a      	ldr	r3, [pc, #360]	; (800ca94 <USBD_CDC_Init+0x1e4>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	f003 020f 	and.w	r2, r3, #15
 800c930:	6879      	ldr	r1, [r7, #4]
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	440b      	add	r3, r1
 800c93c:	3324      	adds	r3, #36	; 0x24
 800c93e:	2201      	movs	r2, #1
 800c940:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c942:	4b55      	ldr	r3, [pc, #340]	; (800ca98 <USBD_CDC_Init+0x1e8>)
 800c944:	7819      	ldrb	r1, [r3, #0]
 800c946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c94a:	2202      	movs	r2, #2
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f002 fba2 	bl	800f096 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c952:	4b51      	ldr	r3, [pc, #324]	; (800ca98 <USBD_CDC_Init+0x1e8>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	f003 020f 	and.w	r2, r3, #15
 800c95a:	6879      	ldr	r1, [r7, #4]
 800c95c:	4613      	mov	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	440b      	add	r3, r1
 800c966:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c96a:	2201      	movs	r2, #1
 800c96c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c96e:	4b4b      	ldr	r3, [pc, #300]	; (800ca9c <USBD_CDC_Init+0x1ec>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	f003 020f 	and.w	r2, r3, #15
 800c976:	6879      	ldr	r1, [r7, #4]
 800c978:	4613      	mov	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	440b      	add	r3, r1
 800c982:	3326      	adds	r3, #38	; 0x26
 800c984:	2210      	movs	r2, #16
 800c986:	801a      	strh	r2, [r3, #0]
 800c988:	e035      	b.n	800c9f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c98a:	4b42      	ldr	r3, [pc, #264]	; (800ca94 <USBD_CDC_Init+0x1e4>)
 800c98c:	7819      	ldrb	r1, [r3, #0]
 800c98e:	2340      	movs	r3, #64	; 0x40
 800c990:	2202      	movs	r2, #2
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f002 fb7f 	bl	800f096 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c998:	4b3e      	ldr	r3, [pc, #248]	; (800ca94 <USBD_CDC_Init+0x1e4>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	f003 020f 	and.w	r2, r3, #15
 800c9a0:	6879      	ldr	r1, [r7, #4]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4413      	add	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	440b      	add	r3, r1
 800c9ac:	3324      	adds	r3, #36	; 0x24
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c9b2:	4b39      	ldr	r3, [pc, #228]	; (800ca98 <USBD_CDC_Init+0x1e8>)
 800c9b4:	7819      	ldrb	r1, [r3, #0]
 800c9b6:	2340      	movs	r3, #64	; 0x40
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f002 fb6b 	bl	800f096 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c9c0:	4b35      	ldr	r3, [pc, #212]	; (800ca98 <USBD_CDC_Init+0x1e8>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	f003 020f 	and.w	r2, r3, #15
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	440b      	add	r3, r1
 800c9d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c9d8:	2201      	movs	r2, #1
 800c9da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c9dc:	4b2f      	ldr	r3, [pc, #188]	; (800ca9c <USBD_CDC_Init+0x1ec>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 020f 	and.w	r2, r3, #15
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3326      	adds	r3, #38	; 0x26
 800c9f2:	2210      	movs	r2, #16
 800c9f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c9f6:	4b29      	ldr	r3, [pc, #164]	; (800ca9c <USBD_CDC_Init+0x1ec>)
 800c9f8:	7819      	ldrb	r1, [r3, #0]
 800c9fa:	2308      	movs	r3, #8
 800c9fc:	2203      	movs	r2, #3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f002 fb49 	bl	800f096 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ca04:	4b25      	ldr	r3, [pc, #148]	; (800ca9c <USBD_CDC_Init+0x1ec>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	f003 020f 	and.w	r2, r3, #15
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	3324      	adds	r3, #36	; 0x24
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	33b0      	adds	r3, #176	; 0xb0
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ca54:	2302      	movs	r3, #2
 800ca56:	e018      	b.n	800ca8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	7c1b      	ldrb	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca60:	4b0d      	ldr	r3, [pc, #52]	; (800ca98 <USBD_CDC_Init+0x1e8>)
 800ca62:	7819      	ldrb	r1, [r3, #0]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f002 fc00 	bl	800f274 <USBD_LL_PrepareReceive>
 800ca74:	e008      	b.n	800ca88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca76:	4b08      	ldr	r3, [pc, #32]	; (800ca98 <USBD_CDC_Init+0x1e8>)
 800ca78:	7819      	ldrb	r1, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca80:	2340      	movs	r3, #64	; 0x40
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f002 fbf6 	bl	800f274 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20000093 	.word	0x20000093
 800ca98:	20000094 	.word	0x20000094
 800ca9c:	20000095 	.word	0x20000095

0800caa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	460b      	mov	r3, r1
 800caaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800caac:	4b3a      	ldr	r3, [pc, #232]	; (800cb98 <USBD_CDC_DeInit+0xf8>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f002 fb15 	bl	800f0e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cab8:	4b37      	ldr	r3, [pc, #220]	; (800cb98 <USBD_CDC_DeInit+0xf8>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 020f 	and.w	r2, r3, #15
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	3324      	adds	r3, #36	; 0x24
 800cace:	2200      	movs	r2, #0
 800cad0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cad2:	4b32      	ldr	r3, [pc, #200]	; (800cb9c <USBD_CDC_DeInit+0xfc>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f002 fb02 	bl	800f0e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cade:	4b2f      	ldr	r3, [pc, #188]	; (800cb9c <USBD_CDC_DeInit+0xfc>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	f003 020f 	and.w	r2, r3, #15
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800caf6:	2200      	movs	r2, #0
 800caf8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cafa:	4b29      	ldr	r3, [pc, #164]	; (800cba0 <USBD_CDC_DeInit+0x100>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f002 faee 	bl	800f0e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cb06:	4b26      	ldr	r3, [pc, #152]	; (800cba0 <USBD_CDC_DeInit+0x100>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	f003 020f 	and.w	r2, r3, #15
 800cb0e:	6879      	ldr	r1, [r7, #4]
 800cb10:	4613      	mov	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	440b      	add	r3, r1
 800cb1a:	3324      	adds	r3, #36	; 0x24
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cb20:	4b1f      	ldr	r3, [pc, #124]	; (800cba0 <USBD_CDC_DeInit+0x100>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f003 020f 	and.w	r2, r3, #15
 800cb28:	6879      	ldr	r1, [r7, #4]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	440b      	add	r3, r1
 800cb34:	3326      	adds	r3, #38	; 0x26
 800cb36:	2200      	movs	r2, #0
 800cb38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	32b0      	adds	r2, #176	; 0xb0
 800cb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d01f      	beq.n	800cb8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	33b0      	adds	r3, #176	; 0xb0
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	32b0      	adds	r2, #176	; 0xb0
 800cb6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f002 fbc2 	bl	800f2f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	32b0      	adds	r2, #176	; 0xb0
 800cb7e:	2100      	movs	r1, #0
 800cb80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20000093 	.word	0x20000093
 800cb9c:	20000094 	.word	0x20000094
 800cba0:	20000095 	.word	0x20000095

0800cba4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	32b0      	adds	r2, #176	; 0xb0
 800cbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e0bf      	b.n	800cd54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d050      	beq.n	800cc82 <USBD_CDC_Setup+0xde>
 800cbe0:	2b20      	cmp	r3, #32
 800cbe2:	f040 80af 	bne.w	800cd44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	88db      	ldrh	r3, [r3, #6]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d03a      	beq.n	800cc64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b25b      	sxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	da1b      	bge.n	800cc30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	33b0      	adds	r3, #176	; 0xb0
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cc0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	88d2      	ldrh	r2, [r2, #6]
 800cc14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	88db      	ldrh	r3, [r3, #6]
 800cc1a:	2b07      	cmp	r3, #7
 800cc1c:	bf28      	it	cs
 800cc1e:	2307      	movcs	r3, #7
 800cc20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	89fa      	ldrh	r2, [r7, #14]
 800cc26:	4619      	mov	r1, r3
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f001 fd89 	bl	800e740 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cc2e:	e090      	b.n	800cd52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	785a      	ldrb	r2, [r3, #1]
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	88db      	ldrh	r3, [r3, #6]
 800cc3e:	2b3f      	cmp	r3, #63	; 0x3f
 800cc40:	d803      	bhi.n	800cc4a <USBD_CDC_Setup+0xa6>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	88db      	ldrh	r3, [r3, #6]
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	e000      	b.n	800cc4c <USBD_CDC_Setup+0xa8>
 800cc4a:	2240      	movs	r2, #64	; 0x40
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cc52:	6939      	ldr	r1, [r7, #16]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f001 fd9b 	bl	800e798 <USBD_CtlPrepareRx>
      break;
 800cc62:	e076      	b.n	800cd52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	33b0      	adds	r3, #176	; 0xb0
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	7850      	ldrb	r0, [r2, #1]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	4798      	blx	r3
      break;
 800cc80:	e067      	b.n	800cd52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	785b      	ldrb	r3, [r3, #1]
 800cc86:	2b0b      	cmp	r3, #11
 800cc88:	d851      	bhi.n	800cd2e <USBD_CDC_Setup+0x18a>
 800cc8a:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <USBD_CDC_Setup+0xec>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800ccc1 	.word	0x0800ccc1
 800cc94:	0800cd3d 	.word	0x0800cd3d
 800cc98:	0800cd2f 	.word	0x0800cd2f
 800cc9c:	0800cd2f 	.word	0x0800cd2f
 800cca0:	0800cd2f 	.word	0x0800cd2f
 800cca4:	0800cd2f 	.word	0x0800cd2f
 800cca8:	0800cd2f 	.word	0x0800cd2f
 800ccac:	0800cd2f 	.word	0x0800cd2f
 800ccb0:	0800cd2f 	.word	0x0800cd2f
 800ccb4:	0800cd2f 	.word	0x0800cd2f
 800ccb8:	0800cceb 	.word	0x0800cceb
 800ccbc:	0800cd15 	.word	0x0800cd15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d107      	bne.n	800ccdc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cccc:	f107 030a 	add.w	r3, r7, #10
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f001 fd33 	bl	800e740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccda:	e032      	b.n	800cd42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 fcbd 	bl	800e65e <USBD_CtlError>
            ret = USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
 800cce6:	75fb      	strb	r3, [r7, #23]
          break;
 800cce8:	e02b      	b.n	800cd42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d107      	bne.n	800cd06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ccf6:	f107 030d 	add.w	r3, r7, #13
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f001 fd1e 	bl	800e740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd04:	e01d      	b.n	800cd42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 fca8 	bl	800e65e <USBD_CtlError>
            ret = USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	75fb      	strb	r3, [r7, #23]
          break;
 800cd12:	e016      	b.n	800cd42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d00f      	beq.n	800cd40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f001 fc9b 	bl	800e65e <USBD_CtlError>
            ret = USBD_FAIL;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd2c:	e008      	b.n	800cd40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f001 fc94 	bl	800e65e <USBD_CtlError>
          ret = USBD_FAIL;
 800cd36:	2303      	movs	r3, #3
 800cd38:	75fb      	strb	r3, [r7, #23]
          break;
 800cd3a:	e002      	b.n	800cd42 <USBD_CDC_Setup+0x19e>
          break;
 800cd3c:	bf00      	nop
 800cd3e:	e008      	b.n	800cd52 <USBD_CDC_Setup+0x1ae>
          break;
 800cd40:	bf00      	nop
      }
      break;
 800cd42:	e006      	b.n	800cd52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cd44:	6839      	ldr	r1, [r7, #0]
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f001 fc89 	bl	800e65e <USBD_CtlError>
      ret = USBD_FAIL;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	75fb      	strb	r3, [r7, #23]
      break;
 800cd50:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	32b0      	adds	r2, #176	; 0xb0
 800cd7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e065      	b.n	800ce52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	32b0      	adds	r2, #176	; 0xb0
 800cd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd96:	78fb      	ldrb	r3, [r7, #3]
 800cd98:	f003 020f 	and.w	r2, r3, #15
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	3318      	adds	r3, #24
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d02f      	beq.n	800ce10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	f003 020f 	and.w	r2, r3, #15
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	440b      	add	r3, r1
 800cdc2:	3318      	adds	r3, #24
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	78fb      	ldrb	r3, [r7, #3]
 800cdc8:	f003 010f 	and.w	r1, r3, #15
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	00db      	lsls	r3, r3, #3
 800cdd2:	440b      	add	r3, r1
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4403      	add	r3, r0
 800cdd8:	3348      	adds	r3, #72	; 0x48
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	fbb2 f1f3 	udiv	r1, r2, r3
 800cde0:	fb01 f303 	mul.w	r3, r1, r3
 800cde4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d112      	bne.n	800ce10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cdea:	78fb      	ldrb	r3, [r7, #3]
 800cdec:	f003 020f 	and.w	r2, r3, #15
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4413      	add	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	440b      	add	r3, r1
 800cdfc:	3318      	adds	r3, #24
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ce02:	78f9      	ldrb	r1, [r7, #3]
 800ce04:	2300      	movs	r3, #0
 800ce06:	2200      	movs	r2, #0
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f002 fa12 	bl	800f232 <USBD_LL_Transmit>
 800ce0e:	e01f      	b.n	800ce50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	33b0      	adds	r3, #176	; 0xb0
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d010      	beq.n	800ce50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	33b0      	adds	r3, #176	; 0xb0
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ce4c:	78fa      	ldrb	r2, [r7, #3]
 800ce4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	32b0      	adds	r2, #176	; 0xb0
 800ce70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	32b0      	adds	r2, #176	; 0xb0
 800ce80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d101      	bne.n	800ce8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e01a      	b.n	800cec2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce8c:	78fb      	ldrb	r3, [r7, #3]
 800ce8e:	4619      	mov	r1, r3
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f002 fa10 	bl	800f2b6 <USBD_LL_GetRxDataSize>
 800ce96:	4602      	mov	r2, r0
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	33b0      	adds	r3, #176	; 0xb0
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cebc:	4611      	mov	r1, r2
 800cebe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b084      	sub	sp, #16
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	32b0      	adds	r2, #176	; 0xb0
 800cedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cee8:	2303      	movs	r3, #3
 800ceea:	e025      	b.n	800cf38 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	33b0      	adds	r3, #176	; 0xb0
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d01a      	beq.n	800cf36 <USBD_CDC_EP0_RxReady+0x6c>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cf06:	2bff      	cmp	r3, #255	; 0xff
 800cf08:	d015      	beq.n	800cf36 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	33b0      	adds	r3, #176	; 0xb0
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4413      	add	r3, r2
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cf22:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cf2a:	b292      	uxth	r2, r2
 800cf2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	22ff      	movs	r2, #255	; 0xff
 800cf32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf48:	2182      	movs	r1, #130	; 0x82
 800cf4a:	4818      	ldr	r0, [pc, #96]	; (800cfac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf4c:	f000 fd4f 	bl	800d9ee <USBD_GetEpDesc>
 800cf50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf52:	2101      	movs	r1, #1
 800cf54:	4815      	ldr	r0, [pc, #84]	; (800cfac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf56:	f000 fd4a 	bl	800d9ee <USBD_GetEpDesc>
 800cf5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf5c:	2181      	movs	r1, #129	; 0x81
 800cf5e:	4813      	ldr	r0, [pc, #76]	; (800cfac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf60:	f000 fd45 	bl	800d9ee <USBD_GetEpDesc>
 800cf64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	2210      	movs	r2, #16
 800cf70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d006      	beq.n	800cf86 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf80:	711a      	strb	r2, [r3, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d006      	beq.n	800cf9a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf94:	711a      	strb	r2, [r3, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2243      	movs	r2, #67	; 0x43
 800cf9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cfa0:	4b02      	ldr	r3, [pc, #8]	; (800cfac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000050 	.word	0x20000050

0800cfb0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cfb8:	2182      	movs	r1, #130	; 0x82
 800cfba:	4818      	ldr	r0, [pc, #96]	; (800d01c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfbc:	f000 fd17 	bl	800d9ee <USBD_GetEpDesc>
 800cfc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	4815      	ldr	r0, [pc, #84]	; (800d01c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfc6:	f000 fd12 	bl	800d9ee <USBD_GetEpDesc>
 800cfca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cfcc:	2181      	movs	r1, #129	; 0x81
 800cfce:	4813      	ldr	r0, [pc, #76]	; (800d01c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfd0:	f000 fd0d 	bl	800d9ee <USBD_GetEpDesc>
 800cfd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2210      	movs	r2, #16
 800cfe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d006      	beq.n	800cff6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	2200      	movs	r2, #0
 800cfec:	711a      	strb	r2, [r3, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f042 0202 	orr.w	r2, r2, #2
 800cff4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d006      	beq.n	800d00a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	711a      	strb	r2, [r3, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f042 0202 	orr.w	r2, r2, #2
 800d008:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2243      	movs	r2, #67	; 0x43
 800d00e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d010:	4b02      	ldr	r3, [pc, #8]	; (800d01c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d012:	4618      	mov	r0, r3
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20000050 	.word	0x20000050

0800d020 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d028:	2182      	movs	r1, #130	; 0x82
 800d02a:	4818      	ldr	r0, [pc, #96]	; (800d08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d02c:	f000 fcdf 	bl	800d9ee <USBD_GetEpDesc>
 800d030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d032:	2101      	movs	r1, #1
 800d034:	4815      	ldr	r0, [pc, #84]	; (800d08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d036:	f000 fcda 	bl	800d9ee <USBD_GetEpDesc>
 800d03a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d03c:	2181      	movs	r1, #129	; 0x81
 800d03e:	4813      	ldr	r0, [pc, #76]	; (800d08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d040:	f000 fcd5 	bl	800d9ee <USBD_GetEpDesc>
 800d044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2210      	movs	r2, #16
 800d050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d006      	beq.n	800d066 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d060:	711a      	strb	r2, [r3, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d006      	beq.n	800d07a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d074:	711a      	strb	r2, [r3, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2243      	movs	r2, #67	; 0x43
 800d07e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d080:	4b02      	ldr	r3, [pc, #8]	; (800d08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000050 	.word	0x20000050

0800d090 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	220a      	movs	r2, #10
 800d09c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d09e:	4b03      	ldr	r3, [pc, #12]	; (800d0ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	2000000c 	.word	0x2000000c

0800d0b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e009      	b.n	800d0d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	33b0      	adds	r3, #176	; 0xb0
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	32b0      	adds	r2, #176	; 0xb0
 800d0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d106:	2303      	movs	r3, #3
 800d108:	e008      	b.n	800d11c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	371c      	adds	r7, #28
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	32b0      	adds	r2, #176	; 0xb0
 800d13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d140:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d148:	2303      	movs	r3, #3
 800d14a:	e004      	b.n	800d156 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	32b0      	adds	r2, #176	; 0xb0
 800d176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d17c:	2301      	movs	r3, #1
 800d17e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	32b0      	adds	r2, #176	; 0xb0
 800d18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d192:	2303      	movs	r3, #3
 800d194:	e025      	b.n	800d1e2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d11f      	bne.n	800d1e0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d1a8:	4b10      	ldr	r3, [pc, #64]	; (800d1ec <USBD_CDC_TransmitPacket+0x88>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	f003 020f 	and.w	r2, r3, #15
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4403      	add	r3, r0
 800d1c2:	3318      	adds	r3, #24
 800d1c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d1c6:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <USBD_CDC_TransmitPacket+0x88>)
 800d1c8:	7819      	ldrb	r1, [r3, #0]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f002 f82b 	bl	800f232 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20000093 	.word	0x20000093

0800d1f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	32b0      	adds	r2, #176	; 0xb0
 800d202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d206:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	32b0      	adds	r2, #176	; 0xb0
 800d212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e018      	b.n	800d250 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7c1b      	ldrb	r3, [r3, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10a      	bne.n	800d23c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d226:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <USBD_CDC_ReceivePacket+0x68>)
 800d228:	7819      	ldrb	r1, [r3, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d230:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f002 f81d 	bl	800f274 <USBD_LL_PrepareReceive>
 800d23a:	e008      	b.n	800d24e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d23c:	4b06      	ldr	r3, [pc, #24]	; (800d258 <USBD_CDC_ReceivePacket+0x68>)
 800d23e:	7819      	ldrb	r1, [r3, #0]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d246:	2340      	movs	r3, #64	; 0x40
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f002 f813 	bl	800f274 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	20000094 	.word	0x20000094

0800d25c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	4613      	mov	r3, r2
 800d268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d270:	2303      	movs	r3, #3
 800d272:	e01f      	b.n	800d2b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	79fa      	ldrb	r2, [r7, #7]
 800d2a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f001 fe8d 	bl	800efc8 <USBD_LL_Init>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3718      	adds	r7, #24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e025      	b.n	800d320 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	32ae      	adds	r2, #174	; 0xae
 800d2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00f      	beq.n	800d310 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	32ae      	adds	r2, #174	; 0xae
 800d2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	f107 020e 	add.w	r2, r7, #14
 800d304:	4610      	mov	r0, r2
 800d306:	4798      	blx	r3
 800d308:	4602      	mov	r2, r0
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f001 fe95 	bl	800f060 <USBD_LL_Start>
 800d336:	4603      	mov	r3, r0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d348:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d009      	beq.n	800d384 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	78fa      	ldrb	r2, [r7, #3]
 800d37a:	4611      	mov	r1, r2
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	4798      	blx	r3
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	460b      	mov	r3, r1
 800d398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	78fa      	ldrb	r2, [r7, #3]
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	4798      	blx	r3
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3d2:	6839      	ldr	r1, [r7, #0]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f001 f908 	bl	800e5ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d3f6:	f003 031f 	and.w	r3, r3, #31
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	d01a      	beq.n	800d434 <USBD_LL_SetupStage+0x72>
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d822      	bhi.n	800d448 <USBD_LL_SetupStage+0x86>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <USBD_LL_SetupStage+0x4a>
 800d406:	2b01      	cmp	r3, #1
 800d408:	d00a      	beq.n	800d420 <USBD_LL_SetupStage+0x5e>
 800d40a:	e01d      	b.n	800d448 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 fb5f 	bl	800dad8 <USBD_StdDevReq>
 800d41a:	4603      	mov	r3, r0
 800d41c:	73fb      	strb	r3, [r7, #15]
      break;
 800d41e:	e020      	b.n	800d462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d426:	4619      	mov	r1, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fbc7 	bl	800dbbc <USBD_StdItfReq>
 800d42e:	4603      	mov	r3, r0
 800d430:	73fb      	strb	r3, [r7, #15]
      break;
 800d432:	e016      	b.n	800d462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fc29 	bl	800dc94 <USBD_StdEPReq>
 800d442:	4603      	mov	r3, r0
 800d444:	73fb      	strb	r3, [r7, #15]
      break;
 800d446:	e00c      	b.n	800d462 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d44e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d452:	b2db      	uxtb	r3, r3
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f001 fe62 	bl	800f120 <USBD_LL_StallEP>
 800d45c:	4603      	mov	r3, r0
 800d45e:	73fb      	strb	r3, [r7, #15]
      break;
 800d460:	bf00      	nop
  }

  return ret;
 800d462:	7bfb      	ldrb	r3, [r7, #15]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3710      	adds	r7, #16
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	460b      	mov	r3, r1
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d47e:	7afb      	ldrb	r3, [r7, #11]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d16e      	bne.n	800d562 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d48a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d492:	2b03      	cmp	r3, #3
 800d494:	f040 8098 	bne.w	800d5c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d913      	bls.n	800d4cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	689a      	ldr	r2, [r3, #8]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	1ad2      	subs	r2, r2, r3
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	68da      	ldr	r2, [r3, #12]
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	bf28      	it	cs
 800d4be:	4613      	movcs	r3, r2
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f001 f984 	bl	800e7d2 <USBD_CtlContinueRx>
 800d4ca:	e07d      	b.n	800d5c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d4d2:	f003 031f 	and.w	r3, r3, #31
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d014      	beq.n	800d504 <USBD_LL_DataOutStage+0x98>
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d81d      	bhi.n	800d51a <USBD_LL_DataOutStage+0xae>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d002      	beq.n	800d4e8 <USBD_LL_DataOutStage+0x7c>
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d003      	beq.n	800d4ee <USBD_LL_DataOutStage+0x82>
 800d4e6:	e018      	b.n	800d51a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	75bb      	strb	r3, [r7, #22]
            break;
 800d4ec:	e018      	b.n	800d520 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 fa5e 	bl	800d9ba <USBD_CoreFindIF>
 800d4fe:	4603      	mov	r3, r0
 800d500:	75bb      	strb	r3, [r7, #22]
            break;
 800d502:	e00d      	b.n	800d520 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	4619      	mov	r1, r3
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f000 fa60 	bl	800d9d4 <USBD_CoreFindEP>
 800d514:	4603      	mov	r3, r0
 800d516:	75bb      	strb	r3, [r7, #22]
            break;
 800d518:	e002      	b.n	800d520 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	75bb      	strb	r3, [r7, #22]
            break;
 800d51e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d520:	7dbb      	ldrb	r3, [r7, #22]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d119      	bne.n	800d55a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d113      	bne.n	800d55a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d532:	7dba      	ldrb	r2, [r7, #22]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	32ae      	adds	r2, #174	; 0xae
 800d538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d542:	7dba      	ldrb	r2, [r7, #22]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d54a:	7dba      	ldrb	r2, [r7, #22]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	32ae      	adds	r2, #174	; 0xae
 800d550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f001 f94a 	bl	800e7f4 <USBD_CtlSendStatus>
 800d560:	e032      	b.n	800d5c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d562:	7afb      	ldrb	r3, [r7, #11]
 800d564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	4619      	mov	r1, r3
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f000 fa31 	bl	800d9d4 <USBD_CoreFindEP>
 800d572:	4603      	mov	r3, r0
 800d574:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d576:	7dbb      	ldrb	r3, [r7, #22]
 800d578:	2bff      	cmp	r3, #255	; 0xff
 800d57a:	d025      	beq.n	800d5c8 <USBD_LL_DataOutStage+0x15c>
 800d57c:	7dbb      	ldrb	r3, [r7, #22]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d122      	bne.n	800d5c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d117      	bne.n	800d5be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d58e:	7dba      	ldrb	r2, [r7, #22]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	32ae      	adds	r2, #174	; 0xae
 800d594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00f      	beq.n	800d5be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d59e:	7dba      	ldrb	r2, [r7, #22]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d5a6:	7dba      	ldrb	r2, [r7, #22]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	32ae      	adds	r2, #174	; 0xae
 800d5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	7afa      	ldrb	r2, [r7, #11]
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	4798      	blx	r3
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d5c4:	7dfb      	ldrb	r3, [r7, #23]
 800d5c6:	e000      	b.n	800d5ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b086      	sub	sp, #24
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	607a      	str	r2, [r7, #4]
 800d5de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d5e0:	7afb      	ldrb	r3, [r7, #11]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d16f      	bne.n	800d6c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	3314      	adds	r3, #20
 800d5ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	d15a      	bne.n	800d6ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	689a      	ldr	r2, [r3, #8]
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d914      	bls.n	800d62c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	689a      	ldr	r2, [r3, #8]
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	1ad2      	subs	r2, r2, r3
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	461a      	mov	r2, r3
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f001 f8ac 	bl	800e776 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d61e:	2300      	movs	r3, #0
 800d620:	2200      	movs	r2, #0
 800d622:	2100      	movs	r1, #0
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f001 fe25 	bl	800f274 <USBD_LL_PrepareReceive>
 800d62a:	e03f      	b.n	800d6ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	68da      	ldr	r2, [r3, #12]
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	429a      	cmp	r2, r3
 800d636:	d11c      	bne.n	800d672 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d640:	429a      	cmp	r2, r3
 800d642:	d316      	bcc.n	800d672 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d64e:	429a      	cmp	r2, r3
 800d650:	d20f      	bcs.n	800d672 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d652:	2200      	movs	r2, #0
 800d654:	2100      	movs	r1, #0
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f001 f88d 	bl	800e776 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2200      	movs	r2, #0
 800d660:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d664:	2300      	movs	r3, #0
 800d666:	2200      	movs	r2, #0
 800d668:	2100      	movs	r1, #0
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f001 fe02 	bl	800f274 <USBD_LL_PrepareReceive>
 800d670:	e01c      	b.n	800d6ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d10f      	bne.n	800d69e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d69e:	2180      	movs	r1, #128	; 0x80
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f001 fd3d 	bl	800f120 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f001 f8b7 	bl	800e81a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d03a      	beq.n	800d72c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f7ff fe42 	bl	800d340 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d6c4:	e032      	b.n	800d72c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d6c6:	7afb      	ldrb	r3, [r7, #11]
 800d6c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f000 f97f 	bl	800d9d4 <USBD_CoreFindEP>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	2bff      	cmp	r3, #255	; 0xff
 800d6de:	d025      	beq.n	800d72c <USBD_LL_DataInStage+0x15a>
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d122      	bne.n	800d72c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d11c      	bne.n	800d72c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d6f2:	7dfa      	ldrb	r2, [r7, #23]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	32ae      	adds	r2, #174	; 0xae
 800d6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d014      	beq.n	800d72c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d702:	7dfa      	ldrb	r2, [r7, #23]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d70a:	7dfa      	ldrb	r2, [r7, #23]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	32ae      	adds	r2, #174	; 0xae
 800d710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	7afa      	ldrb	r2, [r7, #11]
 800d718:	4611      	mov	r1, r2
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	4798      	blx	r3
 800d71e:	4603      	mov	r3, r0
 800d720:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d722:	7dbb      	ldrb	r3, [r7, #22]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d728:	7dbb      	ldrb	r3, [r7, #22]
 800d72a:	e000      	b.n	800d72e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d72c:	2300      	movs	r3, #0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d014      	beq.n	800d79c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00e      	beq.n	800d79c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	6852      	ldr	r2, [r2, #4]
 800d78a:	b2d2      	uxtb	r2, r2
 800d78c:	4611      	mov	r1, r2
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	4798      	blx	r3
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d79c:	2340      	movs	r3, #64	; 0x40
 800d79e:	2200      	movs	r2, #0
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f001 fc77 	bl	800f096 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2240      	movs	r2, #64	; 0x40
 800d7b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7b8:	2340      	movs	r3, #64	; 0x40
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2180      	movs	r1, #128	; 0x80
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f001 fc69 	bl	800f096 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2240      	movs	r2, #64	; 0x40
 800d7ce:	621a      	str	r2, [r3, #32]

  return ret;
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b083      	sub	sp, #12
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	78fa      	ldrb	r2, [r7, #3]
 800d7ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2204      	movs	r2, #4
 800d814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b04      	cmp	r3, #4
 800d838:	d106      	bne.n	800d848 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d840:	b2da      	uxtb	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr

0800d856 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b082      	sub	sp, #8
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b03      	cmp	r3, #3
 800d868:	d110      	bne.n	800d88c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00b      	beq.n	800d88c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d87a:	69db      	ldr	r3, [r3, #28]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d005      	beq.n	800d88c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d886:	69db      	ldr	r3, [r3, #28]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b082      	sub	sp, #8
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	32ae      	adds	r2, #174	; 0xae
 800d8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e01c      	b.n	800d8f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d115      	bne.n	800d8f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	32ae      	adds	r2, #174	; 0xae
 800d8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	32ae      	adds	r2, #174	; 0xae
 800d8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	78fa      	ldrb	r2, [r7, #3]
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	460b      	mov	r3, r1
 800d904:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	32ae      	adds	r2, #174	; 0xae
 800d910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d918:	2303      	movs	r3, #3
 800d91a:	e01c      	b.n	800d956 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b03      	cmp	r3, #3
 800d926:	d115      	bne.n	800d954 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	32ae      	adds	r2, #174	; 0xae
 800d932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00b      	beq.n	800d954 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	32ae      	adds	r2, #174	; 0xae
 800d946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94c:	78fa      	ldrb	r2, [r7, #3]
 800d94e:	4611      	mov	r1, r2
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00e      	beq.n	800d9b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	6852      	ldr	r2, [r2, #4]
 800d99e:	b2d2      	uxtb	r2, r2
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	4798      	blx	r3
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b083      	sub	sp, #12
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d9c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d9e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b086      	sub	sp, #24
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	885b      	ldrh	r3, [r3, #2]
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	b29b      	uxth	r3, r3
 800da12:	429a      	cmp	r2, r3
 800da14:	d920      	bls.n	800da58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800da1e:	e013      	b.n	800da48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800da20:	f107 030a 	add.w	r3, r7, #10
 800da24:	4619      	mov	r1, r3
 800da26:	6978      	ldr	r0, [r7, #20]
 800da28:	f000 f81b 	bl	800da62 <USBD_GetNextDesc>
 800da2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	785b      	ldrb	r3, [r3, #1]
 800da32:	2b05      	cmp	r3, #5
 800da34:	d108      	bne.n	800da48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	789b      	ldrb	r3, [r3, #2]
 800da3e:	78fa      	ldrb	r2, [r7, #3]
 800da40:	429a      	cmp	r2, r3
 800da42:	d008      	beq.n	800da56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800da44:	2300      	movs	r3, #0
 800da46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	885b      	ldrh	r3, [r3, #2]
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	897b      	ldrh	r3, [r7, #10]
 800da50:	429a      	cmp	r2, r3
 800da52:	d8e5      	bhi.n	800da20 <USBD_GetEpDesc+0x32>
 800da54:	e000      	b.n	800da58 <USBD_GetEpDesc+0x6a>
          break;
 800da56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800da58:	693b      	ldr	r3, [r7, #16]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3718      	adds	r7, #24
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800da62:	b480      	push	{r7}
 800da64:	b085      	sub	sp, #20
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
 800da6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	881a      	ldrh	r2, [r3, #0]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4413      	add	r3, r2
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4413      	add	r3, r2
 800da8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800da8e:	68fb      	ldr	r3, [r7, #12]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b087      	sub	sp, #28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	3301      	adds	r3, #1
 800dab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800daba:	8a3b      	ldrh	r3, [r7, #16]
 800dabc:	021b      	lsls	r3, r3, #8
 800dabe:	b21a      	sxth	r2, r3
 800dac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	b21b      	sxth	r3, r3
 800dac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800daca:	89fb      	ldrh	r3, [r7, #14]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	371c      	adds	r7, #28
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800daee:	2b40      	cmp	r3, #64	; 0x40
 800daf0:	d005      	beq.n	800dafe <USBD_StdDevReq+0x26>
 800daf2:	2b40      	cmp	r3, #64	; 0x40
 800daf4:	d857      	bhi.n	800dba6 <USBD_StdDevReq+0xce>
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00f      	beq.n	800db1a <USBD_StdDevReq+0x42>
 800dafa:	2b20      	cmp	r3, #32
 800dafc:	d153      	bne.n	800dba6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	32ae      	adds	r2, #174	; 0xae
 800db08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	6839      	ldr	r1, [r7, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	4798      	blx	r3
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]
      break;
 800db18:	e04a      	b.n	800dbb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	785b      	ldrb	r3, [r3, #1]
 800db1e:	2b09      	cmp	r3, #9
 800db20:	d83b      	bhi.n	800db9a <USBD_StdDevReq+0xc2>
 800db22:	a201      	add	r2, pc, #4	; (adr r2, 800db28 <USBD_StdDevReq+0x50>)
 800db24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db28:	0800db7d 	.word	0x0800db7d
 800db2c:	0800db91 	.word	0x0800db91
 800db30:	0800db9b 	.word	0x0800db9b
 800db34:	0800db87 	.word	0x0800db87
 800db38:	0800db9b 	.word	0x0800db9b
 800db3c:	0800db5b 	.word	0x0800db5b
 800db40:	0800db51 	.word	0x0800db51
 800db44:	0800db9b 	.word	0x0800db9b
 800db48:	0800db73 	.word	0x0800db73
 800db4c:	0800db65 	.word	0x0800db65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fa3c 	bl	800dfd0 <USBD_GetDescriptor>
          break;
 800db58:	e024      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fba1 	bl	800e2a4 <USBD_SetAddress>
          break;
 800db62:	e01f      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fbe0 	bl	800e32c <USBD_SetConfig>
 800db6c:	4603      	mov	r3, r0
 800db6e:	73fb      	strb	r3, [r7, #15]
          break;
 800db70:	e018      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fc83 	bl	800e480 <USBD_GetConfig>
          break;
 800db7a:	e013      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fcb4 	bl	800e4ec <USBD_GetStatus>
          break;
 800db84:	e00e      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fce3 	bl	800e554 <USBD_SetFeature>
          break;
 800db8e:	e009      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fd07 	bl	800e5a6 <USBD_ClrFeature>
          break;
 800db98:	e004      	b.n	800dba4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fd5e 	bl	800e65e <USBD_CtlError>
          break;
 800dba2:	bf00      	nop
      }
      break;
 800dba4:	e004      	b.n	800dbb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dba6:	6839      	ldr	r1, [r7, #0]
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fd58 	bl	800e65e <USBD_CtlError>
      break;
 800dbae:	bf00      	nop
  }

  return ret;
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop

0800dbbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbd2:	2b40      	cmp	r3, #64	; 0x40
 800dbd4:	d005      	beq.n	800dbe2 <USBD_StdItfReq+0x26>
 800dbd6:	2b40      	cmp	r3, #64	; 0x40
 800dbd8:	d852      	bhi.n	800dc80 <USBD_StdItfReq+0xc4>
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <USBD_StdItfReq+0x26>
 800dbde:	2b20      	cmp	r3, #32
 800dbe0:	d14e      	bne.n	800dc80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d840      	bhi.n	800dc72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	889b      	ldrh	r3, [r3, #4]
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d836      	bhi.n	800dc68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	889b      	ldrh	r3, [r3, #4]
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff fed9 	bl	800d9ba <USBD_CoreFindIF>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc0c:	7bbb      	ldrb	r3, [r7, #14]
 800dc0e:	2bff      	cmp	r3, #255	; 0xff
 800dc10:	d01d      	beq.n	800dc4e <USBD_StdItfReq+0x92>
 800dc12:	7bbb      	ldrb	r3, [r7, #14]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d11a      	bne.n	800dc4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dc18:	7bba      	ldrb	r2, [r7, #14]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	32ae      	adds	r2, #174	; 0xae
 800dc1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00f      	beq.n	800dc48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dc28:	7bba      	ldrb	r2, [r7, #14]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc30:	7bba      	ldrb	r2, [r7, #14]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	32ae      	adds	r2, #174	; 0xae
 800dc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	4798      	blx	r3
 800dc42:	4603      	mov	r3, r0
 800dc44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc46:	e004      	b.n	800dc52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc4c:	e001      	b.n	800dc52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	88db      	ldrh	r3, [r3, #6]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d110      	bne.n	800dc7c <USBD_StdItfReq+0xc0>
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10d      	bne.n	800dc7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fdc7 	bl	800e7f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc66:	e009      	b.n	800dc7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fcf7 	bl	800e65e <USBD_CtlError>
          break;
 800dc70:	e004      	b.n	800dc7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dc72:	6839      	ldr	r1, [r7, #0]
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fcf2 	bl	800e65e <USBD_CtlError>
          break;
 800dc7a:	e000      	b.n	800dc7e <USBD_StdItfReq+0xc2>
          break;
 800dc7c:	bf00      	nop
      }
      break;
 800dc7e:	e004      	b.n	800dc8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fceb 	bl	800e65e <USBD_CtlError>
      break;
 800dc88:	bf00      	nop
  }

  return ret;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	889b      	ldrh	r3, [r3, #4]
 800dca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcb0:	2b40      	cmp	r3, #64	; 0x40
 800dcb2:	d007      	beq.n	800dcc4 <USBD_StdEPReq+0x30>
 800dcb4:	2b40      	cmp	r3, #64	; 0x40
 800dcb6:	f200 817f 	bhi.w	800dfb8 <USBD_StdEPReq+0x324>
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d02a      	beq.n	800dd14 <USBD_StdEPReq+0x80>
 800dcbe:	2b20      	cmp	r3, #32
 800dcc0:	f040 817a 	bne.w	800dfb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dcc4:	7bbb      	ldrb	r3, [r7, #14]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff fe83 	bl	800d9d4 <USBD_CoreFindEP>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcd2:	7b7b      	ldrb	r3, [r7, #13]
 800dcd4:	2bff      	cmp	r3, #255	; 0xff
 800dcd6:	f000 8174 	beq.w	800dfc2 <USBD_StdEPReq+0x32e>
 800dcda:	7b7b      	ldrb	r3, [r7, #13]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f040 8170 	bne.w	800dfc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dce2:	7b7a      	ldrb	r2, [r7, #13]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dcea:	7b7a      	ldrb	r2, [r7, #13]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	32ae      	adds	r2, #174	; 0xae
 800dcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f000 8163 	beq.w	800dfc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dcfc:	7b7a      	ldrb	r2, [r7, #13]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	32ae      	adds	r2, #174	; 0xae
 800dd02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	4798      	blx	r3
 800dd0e:	4603      	mov	r3, r0
 800dd10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dd12:	e156      	b.n	800dfc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	785b      	ldrb	r3, [r3, #1]
 800dd18:	2b03      	cmp	r3, #3
 800dd1a:	d008      	beq.n	800dd2e <USBD_StdEPReq+0x9a>
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	f300 8145 	bgt.w	800dfac <USBD_StdEPReq+0x318>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 809b 	beq.w	800de5e <USBD_StdEPReq+0x1ca>
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d03c      	beq.n	800dda6 <USBD_StdEPReq+0x112>
 800dd2c:	e13e      	b.n	800dfac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	d002      	beq.n	800dd40 <USBD_StdEPReq+0xac>
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d016      	beq.n	800dd6c <USBD_StdEPReq+0xd8>
 800dd3e:	e02c      	b.n	800dd9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd40:	7bbb      	ldrb	r3, [r7, #14]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00d      	beq.n	800dd62 <USBD_StdEPReq+0xce>
 800dd46:	7bbb      	ldrb	r3, [r7, #14]
 800dd48:	2b80      	cmp	r3, #128	; 0x80
 800dd4a:	d00a      	beq.n	800dd62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f001 f9e5 	bl	800f120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd56:	2180      	movs	r1, #128	; 0x80
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f001 f9e1 	bl	800f120 <USBD_LL_StallEP>
 800dd5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd60:	e020      	b.n	800dda4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dd62:	6839      	ldr	r1, [r7, #0]
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 fc7a 	bl	800e65e <USBD_CtlError>
              break;
 800dd6a:	e01b      	b.n	800dda4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	885b      	ldrh	r3, [r3, #2]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10e      	bne.n	800dd92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd74:	7bbb      	ldrb	r3, [r7, #14]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00b      	beq.n	800dd92 <USBD_StdEPReq+0xfe>
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
 800dd7c:	2b80      	cmp	r3, #128	; 0x80
 800dd7e:	d008      	beq.n	800dd92 <USBD_StdEPReq+0xfe>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	88db      	ldrh	r3, [r3, #6]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d104      	bne.n	800dd92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd88:	7bbb      	ldrb	r3, [r7, #14]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f001 f9c7 	bl	800f120 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fd2e 	bl	800e7f4 <USBD_CtlSendStatus>

              break;
 800dd98:	e004      	b.n	800dda4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 fc5e 	bl	800e65e <USBD_CtlError>
              break;
 800dda2:	bf00      	nop
          }
          break;
 800dda4:	e107      	b.n	800dfb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d002      	beq.n	800ddb8 <USBD_StdEPReq+0x124>
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d016      	beq.n	800dde4 <USBD_StdEPReq+0x150>
 800ddb6:	e04b      	b.n	800de50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00d      	beq.n	800ddda <USBD_StdEPReq+0x146>
 800ddbe:	7bbb      	ldrb	r3, [r7, #14]
 800ddc0:	2b80      	cmp	r3, #128	; 0x80
 800ddc2:	d00a      	beq.n	800ddda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddc4:	7bbb      	ldrb	r3, [r7, #14]
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f001 f9a9 	bl	800f120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddce:	2180      	movs	r1, #128	; 0x80
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f001 f9a5 	bl	800f120 <USBD_LL_StallEP>
 800ddd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ddd8:	e040      	b.n	800de5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fc3e 	bl	800e65e <USBD_CtlError>
              break;
 800dde2:	e03b      	b.n	800de5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	885b      	ldrh	r3, [r3, #2]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d136      	bne.n	800de5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d004      	beq.n	800de00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 f9af 	bl	800f15e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fcf7 	bl	800e7f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800de06:	7bbb      	ldrb	r3, [r7, #14]
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff fde2 	bl	800d9d4 <USBD_CoreFindEP>
 800de10:	4603      	mov	r3, r0
 800de12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de14:	7b7b      	ldrb	r3, [r7, #13]
 800de16:	2bff      	cmp	r3, #255	; 0xff
 800de18:	d01f      	beq.n	800de5a <USBD_StdEPReq+0x1c6>
 800de1a:	7b7b      	ldrb	r3, [r7, #13]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d11c      	bne.n	800de5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800de20:	7b7a      	ldrb	r2, [r7, #13]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800de28:	7b7a      	ldrb	r2, [r7, #13]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	32ae      	adds	r2, #174	; 0xae
 800de2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d010      	beq.n	800de5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de38:	7b7a      	ldrb	r2, [r7, #13]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	32ae      	adds	r2, #174	; 0xae
 800de3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	4798      	blx	r3
 800de4a:	4603      	mov	r3, r0
 800de4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800de4e:	e004      	b.n	800de5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fc03 	bl	800e65e <USBD_CtlError>
              break;
 800de58:	e000      	b.n	800de5c <USBD_StdEPReq+0x1c8>
              break;
 800de5a:	bf00      	nop
          }
          break;
 800de5c:	e0ab      	b.n	800dfb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b02      	cmp	r3, #2
 800de68:	d002      	beq.n	800de70 <USBD_StdEPReq+0x1dc>
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d032      	beq.n	800ded4 <USBD_StdEPReq+0x240>
 800de6e:	e097      	b.n	800dfa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de70:	7bbb      	ldrb	r3, [r7, #14]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d007      	beq.n	800de86 <USBD_StdEPReq+0x1f2>
 800de76:	7bbb      	ldrb	r3, [r7, #14]
 800de78:	2b80      	cmp	r3, #128	; 0x80
 800de7a:	d004      	beq.n	800de86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800de7c:	6839      	ldr	r1, [r7, #0]
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fbed 	bl	800e65e <USBD_CtlError>
                break;
 800de84:	e091      	b.n	800dfaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	da0b      	bge.n	800dea6 <USBD_StdEPReq+0x212>
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	3310      	adds	r3, #16
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	4413      	add	r3, r2
 800dea2:	3304      	adds	r3, #4
 800dea4:	e00b      	b.n	800debe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dea6:	7bbb      	ldrb	r3, [r7, #14]
 800dea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	4413      	add	r3, r2
 800debc:	3304      	adds	r3, #4
 800debe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2200      	movs	r2, #0
 800dec4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	2202      	movs	r2, #2
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fc37 	bl	800e740 <USBD_CtlSendData>
              break;
 800ded2:	e06a      	b.n	800dfaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ded4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	da11      	bge.n	800df00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dedc:	7bbb      	ldrb	r3, [r7, #14]
 800dede:	f003 020f 	and.w	r2, r3, #15
 800dee2:	6879      	ldr	r1, [r7, #4]
 800dee4:	4613      	mov	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	440b      	add	r3, r1
 800deee:	3324      	adds	r3, #36	; 0x24
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d117      	bne.n	800df26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fbb0 	bl	800e65e <USBD_CtlError>
                  break;
 800defe:	e054      	b.n	800dfaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df00:	7bbb      	ldrb	r3, [r7, #14]
 800df02:	f003 020f 	and.w	r2, r3, #15
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	4613      	mov	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	440b      	add	r3, r1
 800df12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d104      	bne.n	800df26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800df1c:	6839      	ldr	r1, [r7, #0]
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 fb9d 	bl	800e65e <USBD_CtlError>
                  break;
 800df24:	e041      	b.n	800dfaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	da0b      	bge.n	800df46 <USBD_StdEPReq+0x2b2>
 800df2e:	7bbb      	ldrb	r3, [r7, #14]
 800df30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df34:	4613      	mov	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	3310      	adds	r3, #16
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	4413      	add	r3, r2
 800df42:	3304      	adds	r3, #4
 800df44:	e00b      	b.n	800df5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df4c:	4613      	mov	r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	4413      	add	r3, r2
 800df5c:	3304      	adds	r3, #4
 800df5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <USBD_StdEPReq+0x2d8>
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	2b80      	cmp	r3, #128	; 0x80
 800df6a:	d103      	bne.n	800df74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	e00e      	b.n	800df92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df74:	7bbb      	ldrb	r3, [r7, #14]
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f001 f90f 	bl	800f19c <USBD_LL_IsStallEP>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2201      	movs	r2, #1
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	e002      	b.n	800df92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	2202      	movs	r2, #2
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fbd1 	bl	800e740 <USBD_CtlSendData>
              break;
 800df9e:	e004      	b.n	800dfaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fb5b 	bl	800e65e <USBD_CtlError>
              break;
 800dfa8:	bf00      	nop
          }
          break;
 800dfaa:	e004      	b.n	800dfb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fb55 	bl	800e65e <USBD_CtlError>
          break;
 800dfb4:	bf00      	nop
      }
      break;
 800dfb6:	e005      	b.n	800dfc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dfb8:	6839      	ldr	r1, [r7, #0]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fb4f 	bl	800e65e <USBD_CtlError>
      break;
 800dfc0:	e000      	b.n	800dfc4 <USBD_StdEPReq+0x330>
      break;
 800dfc2:	bf00      	nop
  }

  return ret;
 800dfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	885b      	ldrh	r3, [r3, #2]
 800dfea:	0a1b      	lsrs	r3, r3, #8
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	3b01      	subs	r3, #1
 800dff0:	2b06      	cmp	r3, #6
 800dff2:	f200 8128 	bhi.w	800e246 <USBD_GetDescriptor+0x276>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <USBD_GetDescriptor+0x2c>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e019 	.word	0x0800e019
 800e000:	0800e031 	.word	0x0800e031
 800e004:	0800e071 	.word	0x0800e071
 800e008:	0800e247 	.word	0x0800e247
 800e00c:	0800e247 	.word	0x0800e247
 800e010:	0800e1e7 	.word	0x0800e1e7
 800e014:	0800e213 	.word	0x0800e213
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	7c12      	ldrb	r2, [r2, #16]
 800e024:	f107 0108 	add.w	r1, r7, #8
 800e028:	4610      	mov	r0, r2
 800e02a:	4798      	blx	r3
 800e02c:	60f8      	str	r0, [r7, #12]
      break;
 800e02e:	e112      	b.n	800e256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	7c1b      	ldrb	r3, [r3, #16]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10d      	bne.n	800e054 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e040:	f107 0208 	add.w	r2, r7, #8
 800e044:	4610      	mov	r0, r2
 800e046:	4798      	blx	r3
 800e048:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3301      	adds	r3, #1
 800e04e:	2202      	movs	r2, #2
 800e050:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e052:	e100      	b.n	800e256 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	f107 0208 	add.w	r2, r7, #8
 800e060:	4610      	mov	r0, r2
 800e062:	4798      	blx	r3
 800e064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3301      	adds	r3, #1
 800e06a:	2202      	movs	r2, #2
 800e06c:	701a      	strb	r2, [r3, #0]
      break;
 800e06e:	e0f2      	b.n	800e256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	885b      	ldrh	r3, [r3, #2]
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b05      	cmp	r3, #5
 800e078:	f200 80ac 	bhi.w	800e1d4 <USBD_GetDescriptor+0x204>
 800e07c:	a201      	add	r2, pc, #4	; (adr r2, 800e084 <USBD_GetDescriptor+0xb4>)
 800e07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e082:	bf00      	nop
 800e084:	0800e09d 	.word	0x0800e09d
 800e088:	0800e0d1 	.word	0x0800e0d1
 800e08c:	0800e105 	.word	0x0800e105
 800e090:	0800e139 	.word	0x0800e139
 800e094:	0800e16d 	.word	0x0800e16d
 800e098:	0800e1a1 	.word	0x0800e1a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00b      	beq.n	800e0c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	7c12      	ldrb	r2, [r2, #16]
 800e0b4:	f107 0108 	add.w	r1, r7, #8
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
 800e0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0be:	e091      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 facb 	bl	800e65e <USBD_CtlError>
            err++;
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ce:	e089      	b.n	800e1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00b      	beq.n	800e0f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	7c12      	ldrb	r2, [r2, #16]
 800e0e8:	f107 0108 	add.w	r1, r7, #8
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
 800e0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0f2:	e077      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fab1 	bl	800e65e <USBD_CtlError>
            err++;
 800e0fc:	7afb      	ldrb	r3, [r7, #11]
 800e0fe:	3301      	adds	r3, #1
 800e100:	72fb      	strb	r3, [r7, #11]
          break;
 800e102:	e06f      	b.n	800e1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	7c12      	ldrb	r2, [r2, #16]
 800e11c:	f107 0108 	add.w	r1, r7, #8
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
 800e124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e126:	e05d      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 fa97 	bl	800e65e <USBD_CtlError>
            err++;
 800e130:	7afb      	ldrb	r3, [r7, #11]
 800e132:	3301      	adds	r3, #1
 800e134:	72fb      	strb	r3, [r7, #11]
          break;
 800e136:	e055      	b.n	800e1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e13e:	691b      	ldr	r3, [r3, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00b      	beq.n	800e15c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	7c12      	ldrb	r2, [r2, #16]
 800e150:	f107 0108 	add.w	r1, r7, #8
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
 800e158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e15a:	e043      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fa7d 	bl	800e65e <USBD_CtlError>
            err++;
 800e164:	7afb      	ldrb	r3, [r7, #11]
 800e166:	3301      	adds	r3, #1
 800e168:	72fb      	strb	r3, [r7, #11]
          break;
 800e16a:	e03b      	b.n	800e1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e172:	695b      	ldr	r3, [r3, #20]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00b      	beq.n	800e190 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	7c12      	ldrb	r2, [r2, #16]
 800e184:	f107 0108 	add.w	r1, r7, #8
 800e188:	4610      	mov	r0, r2
 800e18a:	4798      	blx	r3
 800e18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e18e:	e029      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fa63 	bl	800e65e <USBD_CtlError>
            err++;
 800e198:	7afb      	ldrb	r3, [r7, #11]
 800e19a:	3301      	adds	r3, #1
 800e19c:	72fb      	strb	r3, [r7, #11]
          break;
 800e19e:	e021      	b.n	800e1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00b      	beq.n	800e1c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1b2:	699b      	ldr	r3, [r3, #24]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	7c12      	ldrb	r2, [r2, #16]
 800e1b8:	f107 0108 	add.w	r1, r7, #8
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4798      	blx	r3
 800e1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1c2:	e00f      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 fa49 	bl	800e65e <USBD_CtlError>
            err++;
 800e1cc:	7afb      	ldrb	r3, [r7, #11]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1d2:	e007      	b.n	800e1e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fa41 	bl	800e65e <USBD_CtlError>
          err++;
 800e1dc:	7afb      	ldrb	r3, [r7, #11]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e1e2:	bf00      	nop
      }
      break;
 800e1e4:	e037      	b.n	800e256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	7c1b      	ldrb	r3, [r3, #16]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d109      	bne.n	800e202 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f6:	f107 0208 	add.w	r2, r7, #8
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4798      	blx	r3
 800e1fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e200:	e029      	b.n	800e256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e202:	6839      	ldr	r1, [r7, #0]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 fa2a 	bl	800e65e <USBD_CtlError>
        err++;
 800e20a:	7afb      	ldrb	r3, [r7, #11]
 800e20c:	3301      	adds	r3, #1
 800e20e:	72fb      	strb	r3, [r7, #11]
      break;
 800e210:	e021      	b.n	800e256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7c1b      	ldrb	r3, [r3, #16]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10d      	bne.n	800e236 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e222:	f107 0208 	add.w	r2, r7, #8
 800e226:	4610      	mov	r0, r2
 800e228:	4798      	blx	r3
 800e22a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	3301      	adds	r3, #1
 800e230:	2207      	movs	r2, #7
 800e232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e234:	e00f      	b.n	800e256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 fa10 	bl	800e65e <USBD_CtlError>
        err++;
 800e23e:	7afb      	ldrb	r3, [r7, #11]
 800e240:	3301      	adds	r3, #1
 800e242:	72fb      	strb	r3, [r7, #11]
      break;
 800e244:	e007      	b.n	800e256 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fa08 	bl	800e65e <USBD_CtlError>
      err++;
 800e24e:	7afb      	ldrb	r3, [r7, #11]
 800e250:	3301      	adds	r3, #1
 800e252:	72fb      	strb	r3, [r7, #11]
      break;
 800e254:	bf00      	nop
  }

  if (err != 0U)
 800e256:	7afb      	ldrb	r3, [r7, #11]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d11e      	bne.n	800e29a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	88db      	ldrh	r3, [r3, #6]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d016      	beq.n	800e292 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e264:	893b      	ldrh	r3, [r7, #8]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00e      	beq.n	800e288 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	88da      	ldrh	r2, [r3, #6]
 800e26e:	893b      	ldrh	r3, [r7, #8]
 800e270:	4293      	cmp	r3, r2
 800e272:	bf28      	it	cs
 800e274:	4613      	movcs	r3, r2
 800e276:	b29b      	uxth	r3, r3
 800e278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e27a:	893b      	ldrh	r3, [r7, #8]
 800e27c:	461a      	mov	r2, r3
 800e27e:	68f9      	ldr	r1, [r7, #12]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fa5d 	bl	800e740 <USBD_CtlSendData>
 800e286:	e009      	b.n	800e29c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e288:	6839      	ldr	r1, [r7, #0]
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 f9e7 	bl	800e65e <USBD_CtlError>
 800e290:	e004      	b.n	800e29c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 faae 	bl	800e7f4 <USBD_CtlSendStatus>
 800e298:	e000      	b.n	800e29c <USBD_GetDescriptor+0x2cc>
    return;
 800e29a:	bf00      	nop
  }
}
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop

0800e2a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	889b      	ldrh	r3, [r3, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d131      	bne.n	800e31a <USBD_SetAddress+0x76>
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	88db      	ldrh	r3, [r3, #6]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d12d      	bne.n	800e31a <USBD_SetAddress+0x76>
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	885b      	ldrh	r3, [r3, #2]
 800e2c2:	2b7f      	cmp	r3, #127	; 0x7f
 800e2c4:	d829      	bhi.n	800e31a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	885b      	ldrh	r3, [r3, #2]
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	2b03      	cmp	r3, #3
 800e2dc:	d104      	bne.n	800e2e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f9bc 	bl	800e65e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2e6:	e01d      	b.n	800e324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7bfa      	ldrb	r2, [r7, #15]
 800e2ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 ff7d 	bl	800f1f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fa7a 	bl	800e7f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d004      	beq.n	800e310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2202      	movs	r2, #2
 800e30a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e30e:	e009      	b.n	800e324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e318:	e004      	b.n	800e324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 f99e 	bl	800e65e <USBD_CtlError>
  }
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	885b      	ldrh	r3, [r3, #2]
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	4b4e      	ldr	r3, [pc, #312]	; (800e47c <USBD_SetConfig+0x150>)
 800e342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e344:	4b4d      	ldr	r3, [pc, #308]	; (800e47c <USBD_SetConfig+0x150>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d905      	bls.n	800e358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f985 	bl	800e65e <USBD_CtlError>
    return USBD_FAIL;
 800e354:	2303      	movs	r3, #3
 800e356:	e08c      	b.n	800e472 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	2b02      	cmp	r3, #2
 800e362:	d002      	beq.n	800e36a <USBD_SetConfig+0x3e>
 800e364:	2b03      	cmp	r3, #3
 800e366:	d029      	beq.n	800e3bc <USBD_SetConfig+0x90>
 800e368:	e075      	b.n	800e456 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e36a:	4b44      	ldr	r3, [pc, #272]	; (800e47c <USBD_SetConfig+0x150>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d020      	beq.n	800e3b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e372:	4b42      	ldr	r3, [pc, #264]	; (800e47c <USBD_SetConfig+0x150>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e37c:	4b3f      	ldr	r3, [pc, #252]	; (800e47c <USBD_SetConfig+0x150>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7fe ffe7 	bl	800d356 <USBD_SetClassConfig>
 800e388:	4603      	mov	r3, r0
 800e38a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d008      	beq.n	800e3a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f962 	bl	800e65e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2202      	movs	r2, #2
 800e39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3a2:	e065      	b.n	800e470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 fa25 	bl	800e7f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2203      	movs	r2, #3
 800e3ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3b2:	e05d      	b.n	800e470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fa1d 	bl	800e7f4 <USBD_CtlSendStatus>
      break;
 800e3ba:	e059      	b.n	800e470 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e3bc:	4b2f      	ldr	r3, [pc, #188]	; (800e47c <USBD_SetConfig+0x150>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d112      	bne.n	800e3ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e3cc:	4b2b      	ldr	r3, [pc, #172]	; (800e47c <USBD_SetConfig+0x150>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3d6:	4b29      	ldr	r3, [pc, #164]	; (800e47c <USBD_SetConfig+0x150>)
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7fe ffd6 	bl	800d38e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fa06 	bl	800e7f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3e8:	e042      	b.n	800e470 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e3ea:	4b24      	ldr	r3, [pc, #144]	; (800e47c <USBD_SetConfig+0x150>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d02a      	beq.n	800e44e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7fe ffc4 	bl	800d38e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e406:	4b1d      	ldr	r3, [pc, #116]	; (800e47c <USBD_SetConfig+0x150>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e410:	4b1a      	ldr	r3, [pc, #104]	; (800e47c <USBD_SetConfig+0x150>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7fe ff9d 	bl	800d356 <USBD_SetClassConfig>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00f      	beq.n	800e446 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f918 	bl	800e65e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	b2db      	uxtb	r3, r3
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7fe ffa9 	bl	800d38e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2202      	movs	r2, #2
 800e440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e444:	e014      	b.n	800e470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f9d4 	bl	800e7f4 <USBD_CtlSendStatus>
      break;
 800e44c:	e010      	b.n	800e470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f9d0 	bl	800e7f4 <USBD_CtlSendStatus>
      break;
 800e454:	e00c      	b.n	800e470 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f900 	bl	800e65e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e45e:	4b07      	ldr	r3, [pc, #28]	; (800e47c <USBD_SetConfig+0x150>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7fe ff92 	bl	800d38e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e46a:	2303      	movs	r3, #3
 800e46c:	73fb      	strb	r3, [r7, #15]
      break;
 800e46e:	bf00      	nop
  }

  return ret;
 800e470:	7bfb      	ldrb	r3, [r7, #15]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	20000f98 	.word	0x20000f98

0800e480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	88db      	ldrh	r3, [r3, #6]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d004      	beq.n	800e49c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f8e2 	bl	800e65e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e49a:	e023      	b.n	800e4e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	dc02      	bgt.n	800e4ae <USBD_GetConfig+0x2e>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dc03      	bgt.n	800e4b4 <USBD_GetConfig+0x34>
 800e4ac:	e015      	b.n	800e4da <USBD_GetConfig+0x5a>
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	d00b      	beq.n	800e4ca <USBD_GetConfig+0x4a>
 800e4b2:	e012      	b.n	800e4da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	3308      	adds	r3, #8
 800e4be:	2201      	movs	r2, #1
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f93c 	bl	800e740 <USBD_CtlSendData>
        break;
 800e4c8:	e00c      	b.n	800e4e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f934 	bl	800e740 <USBD_CtlSendData>
        break;
 800e4d8:	e004      	b.n	800e4e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f8be 	bl	800e65e <USBD_CtlError>
        break;
 800e4e2:	bf00      	nop
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	3b01      	subs	r3, #1
 800e500:	2b02      	cmp	r3, #2
 800e502:	d81e      	bhi.n	800e542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	88db      	ldrh	r3, [r3, #6]
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d004      	beq.n	800e516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f8a5 	bl	800e65e <USBD_CtlError>
        break;
 800e514:	e01a      	b.n	800e54c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2201      	movs	r2, #1
 800e51a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d005      	beq.n	800e532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	f043 0202 	orr.w	r2, r3, #2
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	330c      	adds	r3, #12
 800e536:	2202      	movs	r2, #2
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f900 	bl	800e740 <USBD_CtlSendData>
      break;
 800e540:	e004      	b.n	800e54c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f88a 	bl	800e65e <USBD_CtlError>
      break;
 800e54a:	bf00      	nop
  }
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	885b      	ldrh	r3, [r3, #2]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d107      	bne.n	800e576 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2201      	movs	r2, #1
 800e56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f940 	bl	800e7f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e574:	e013      	b.n	800e59e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	885b      	ldrh	r3, [r3, #2]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d10b      	bne.n	800e596 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	889b      	ldrh	r3, [r3, #4]
 800e582:	0a1b      	lsrs	r3, r3, #8
 800e584:	b29b      	uxth	r3, r3
 800e586:	b2da      	uxtb	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f930 	bl	800e7f4 <USBD_CtlSendStatus>
}
 800e594:	e003      	b.n	800e59e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f860 	bl	800e65e <USBD_CtlError>
}
 800e59e:	bf00      	nop
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
 800e5ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d80b      	bhi.n	800e5d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	885b      	ldrh	r3, [r3, #2]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d10c      	bne.n	800e5e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f910 	bl	800e7f4 <USBD_CtlSendStatus>
      }
      break;
 800e5d4:	e004      	b.n	800e5e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 f840 	bl	800e65e <USBD_CtlError>
      break;
 800e5de:	e000      	b.n	800e5e2 <USBD_ClrFeature+0x3c>
      break;
 800e5e0:	bf00      	nop
  }
}
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b084      	sub	sp, #16
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	781a      	ldrb	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	781a      	ldrb	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3301      	adds	r3, #1
 800e612:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f7ff fa41 	bl	800da9c <SWAPBYTE>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461a      	mov	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3301      	adds	r3, #1
 800e626:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	3301      	adds	r3, #1
 800e62c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f7ff fa34 	bl	800da9c <SWAPBYTE>
 800e634:	4603      	mov	r3, r0
 800e636:	461a      	mov	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3301      	adds	r3, #1
 800e640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3301      	adds	r3, #1
 800e646:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7ff fa27 	bl	800da9c <SWAPBYTE>
 800e64e:	4603      	mov	r3, r0
 800e650:	461a      	mov	r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	80da      	strh	r2, [r3, #6]
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b082      	sub	sp, #8
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e668:	2180      	movs	r1, #128	; 0x80
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fd58 	bl	800f120 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e670:	2100      	movs	r1, #0
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fd54 	bl	800f120 <USBD_LL_StallEP>
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e68c:	2300      	movs	r3, #0
 800e68e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d036      	beq.n	800e704 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e69a:	6938      	ldr	r0, [r7, #16]
 800e69c:	f000 f836 	bl	800e70c <USBD_GetLen>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	005b      	lsls	r3, r3, #1
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e6ae:	7dfb      	ldrb	r3, [r7, #23]
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	7812      	ldrb	r2, [r2, #0]
 800e6b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6ba:	7dfb      	ldrb	r3, [r7, #23]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	2203      	movs	r2, #3
 800e6c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6d0:	e013      	b.n	800e6fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e6d2:	7dfb      	ldrb	r3, [r7, #23]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	7812      	ldrb	r2, [r2, #0]
 800e6dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	613b      	str	r3, [r7, #16]
    idx++;
 800e6e4:	7dfb      	ldrb	r3, [r7, #23]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e6ea:	7dfb      	ldrb	r3, [r7, #23]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800e6f4:	7dfb      	ldrb	r3, [r7, #23]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e7      	bne.n	800e6d2 <USBD_GetString+0x52>
 800e702:	e000      	b.n	800e706 <USBD_GetString+0x86>
    return;
 800e704:	bf00      	nop
  }
}
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e714:	2300      	movs	r3, #0
 800e716:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e71c:	e005      	b.n	800e72a <USBD_GetLen+0x1e>
  {
    len++;
 800e71e:	7bfb      	ldrb	r3, [r7, #15]
 800e720:	3301      	adds	r3, #1
 800e722:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	3301      	adds	r3, #1
 800e728:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1f5      	bne.n	800e71e <USBD_GetLen+0x12>
  }

  return len;
 800e732:	7bfb      	ldrb	r3, [r7, #15]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2202      	movs	r2, #2
 800e750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	2100      	movs	r1, #0
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f000 fd63 	bl	800f232 <USBD_LL_Transmit>

  return USBD_OK;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b084      	sub	sp, #16
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	2100      	movs	r1, #0
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 fd52 	bl	800f232 <USBD_LL_Transmit>

  return USBD_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2203      	movs	r2, #3
 800e7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f000 fd56 	bl	800f274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b084      	sub	sp, #16
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	60f8      	str	r0, [r7, #12]
 800e7da:	60b9      	str	r1, [r7, #8]
 800e7dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f000 fd45 	bl	800f274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2204      	movs	r2, #4
 800e800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e804:	2300      	movs	r3, #0
 800e806:	2200      	movs	r2, #0
 800e808:	2100      	movs	r1, #0
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fd11 	bl	800f232 <USBD_LL_Transmit>

  return USBD_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2205      	movs	r2, #5
 800e826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e82a:	2300      	movs	r3, #0
 800e82c:	2200      	movs	r2, #0
 800e82e:	2100      	movs	r1, #0
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fd1f 	bl	800f274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e844:	2200      	movs	r2, #0
 800e846:	4912      	ldr	r1, [pc, #72]	; (800e890 <MX_USB_DEVICE_Init+0x50>)
 800e848:	4812      	ldr	r0, [pc, #72]	; (800e894 <MX_USB_DEVICE_Init+0x54>)
 800e84a:	f7fe fd07 	bl	800d25c <USBD_Init>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e854:	f7f2 fc78 	bl	8001148 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e858:	490f      	ldr	r1, [pc, #60]	; (800e898 <MX_USB_DEVICE_Init+0x58>)
 800e85a:	480e      	ldr	r0, [pc, #56]	; (800e894 <MX_USB_DEVICE_Init+0x54>)
 800e85c:	f7fe fd2e 	bl	800d2bc <USBD_RegisterClass>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e866:	f7f2 fc6f 	bl	8001148 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e86a:	490c      	ldr	r1, [pc, #48]	; (800e89c <MX_USB_DEVICE_Init+0x5c>)
 800e86c:	4809      	ldr	r0, [pc, #36]	; (800e894 <MX_USB_DEVICE_Init+0x54>)
 800e86e:	f7fe fc1f 	bl	800d0b0 <USBD_CDC_RegisterInterface>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d001      	beq.n	800e87c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e878:	f7f2 fc66 	bl	8001148 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e87c:	4805      	ldr	r0, [pc, #20]	; (800e894 <MX_USB_DEVICE_Init+0x54>)
 800e87e:	f7fe fd53 	bl	800d328 <USBD_Start>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d001      	beq.n	800e88c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e888:	f7f2 fc5e 	bl	8001148 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e88c:	bf00      	nop
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	200000ac 	.word	0x200000ac
 800e894:	20000f9c 	.word	0x20000f9c
 800e898:	20000018 	.word	0x20000018
 800e89c:	20000098 	.word	0x20000098

0800e8a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	4905      	ldr	r1, [pc, #20]	; (800e8bc <CDC_Init_FS+0x1c>)
 800e8a8:	4805      	ldr	r0, [pc, #20]	; (800e8c0 <CDC_Init_FS+0x20>)
 800e8aa:	f7fe fc1b 	bl	800d0e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e8ae:	4905      	ldr	r1, [pc, #20]	; (800e8c4 <CDC_Init_FS+0x24>)
 800e8b0:	4803      	ldr	r0, [pc, #12]	; (800e8c0 <CDC_Init_FS+0x20>)
 800e8b2:	f7fe fc39 	bl	800d128 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e8b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	20001a78 	.word	0x20001a78
 800e8c0:	20000f9c 	.word	0x20000f9c
 800e8c4:	20001278 	.word	0x20001278

0800e8c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e8cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	6039      	str	r1, [r7, #0]
 800e8e2:	71fb      	strb	r3, [r7, #7]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	2b23      	cmp	r3, #35	; 0x23
 800e8ec:	f200 808c 	bhi.w	800ea08 <CDC_Control_FS+0x130>
 800e8f0:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <CDC_Control_FS+0x20>)
 800e8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f6:	bf00      	nop
 800e8f8:	0800ea09 	.word	0x0800ea09
 800e8fc:	0800ea09 	.word	0x0800ea09
 800e900:	0800ea09 	.word	0x0800ea09
 800e904:	0800ea09 	.word	0x0800ea09
 800e908:	0800ea09 	.word	0x0800ea09
 800e90c:	0800ea09 	.word	0x0800ea09
 800e910:	0800ea09 	.word	0x0800ea09
 800e914:	0800ea09 	.word	0x0800ea09
 800e918:	0800ea09 	.word	0x0800ea09
 800e91c:	0800ea09 	.word	0x0800ea09
 800e920:	0800ea09 	.word	0x0800ea09
 800e924:	0800ea09 	.word	0x0800ea09
 800e928:	0800ea09 	.word	0x0800ea09
 800e92c:	0800ea09 	.word	0x0800ea09
 800e930:	0800ea09 	.word	0x0800ea09
 800e934:	0800ea09 	.word	0x0800ea09
 800e938:	0800ea09 	.word	0x0800ea09
 800e93c:	0800ea09 	.word	0x0800ea09
 800e940:	0800ea09 	.word	0x0800ea09
 800e944:	0800ea09 	.word	0x0800ea09
 800e948:	0800ea09 	.word	0x0800ea09
 800e94c:	0800ea09 	.word	0x0800ea09
 800e950:	0800ea09 	.word	0x0800ea09
 800e954:	0800ea09 	.word	0x0800ea09
 800e958:	0800ea09 	.word	0x0800ea09
 800e95c:	0800ea09 	.word	0x0800ea09
 800e960:	0800ea09 	.word	0x0800ea09
 800e964:	0800ea09 	.word	0x0800ea09
 800e968:	0800ea09 	.word	0x0800ea09
 800e96c:	0800ea09 	.word	0x0800ea09
 800e970:	0800ea09 	.word	0x0800ea09
 800e974:	0800ea09 	.word	0x0800ea09
 800e978:	0800e989 	.word	0x0800e989
 800e97c:	0800e9c3 	.word	0x0800e9c3
 800e980:	0800ea09 	.word	0x0800ea09
 800e984:	0800ea09 	.word	0x0800ea09
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	USB_VCP_Parameters[0] = pbuf[0];
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	781a      	ldrb	r2, [r3, #0]
 800e98c:	4b22      	ldr	r3, [pc, #136]	; (800ea18 <CDC_Control_FS+0x140>)
 800e98e:	701a      	strb	r2, [r3, #0]
    	USB_VCP_Parameters[1] = pbuf[1];
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	785a      	ldrb	r2, [r3, #1]
 800e994:	4b20      	ldr	r3, [pc, #128]	; (800ea18 <CDC_Control_FS+0x140>)
 800e996:	705a      	strb	r2, [r3, #1]
    	USB_VCP_Parameters[2] = pbuf[2];
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	789a      	ldrb	r2, [r3, #2]
 800e99c:	4b1e      	ldr	r3, [pc, #120]	; (800ea18 <CDC_Control_FS+0x140>)
 800e99e:	709a      	strb	r2, [r3, #2]
    	USB_VCP_Parameters[3] = pbuf[3];
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	78da      	ldrb	r2, [r3, #3]
 800e9a4:	4b1c      	ldr	r3, [pc, #112]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9a6:	70da      	strb	r2, [r3, #3]
    	USB_VCP_Parameters[4] = pbuf[4];
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	791a      	ldrb	r2, [r3, #4]
 800e9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9ae:	711a      	strb	r2, [r3, #4]
    	USB_VCP_Parameters[5] = pbuf[5];
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	795a      	ldrb	r2, [r3, #5]
 800e9b4:	4b18      	ldr	r3, [pc, #96]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9b6:	715a      	strb	r2, [r3, #5]
    	USB_VCP_Parameters[6] = pbuf[6];
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	799a      	ldrb	r2, [r3, #6]
 800e9bc:	4b16      	ldr	r3, [pc, #88]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9be:	719a      	strb	r2, [r3, #6]

    break;
 800e9c0:	e023      	b.n	800ea0a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = USB_VCP_Parameters[0];
 800e9c2:	4b15      	ldr	r3, [pc, #84]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9c4:	781a      	ldrb	r2, [r3, #0]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = USB_VCP_Parameters[1];
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	4a12      	ldr	r2, [pc, #72]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9d0:	7852      	ldrb	r2, [r2, #1]
 800e9d2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = USB_VCP_Parameters[2];
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	3302      	adds	r3, #2
 800e9d8:	4a0f      	ldr	r2, [pc, #60]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9da:	7892      	ldrb	r2, [r2, #2]
 800e9dc:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = USB_VCP_Parameters[3];
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	3303      	adds	r3, #3
 800e9e2:	4a0d      	ldr	r2, [pc, #52]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9e4:	78d2      	ldrb	r2, [r2, #3]
 800e9e6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = USB_VCP_Parameters[4];
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	4a0a      	ldr	r2, [pc, #40]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9ee:	7912      	ldrb	r2, [r2, #4]
 800e9f0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = USB_VCP_Parameters[5];
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	3305      	adds	r3, #5
 800e9f6:	4a08      	ldr	r2, [pc, #32]	; (800ea18 <CDC_Control_FS+0x140>)
 800e9f8:	7952      	ldrb	r2, [r2, #5]
 800e9fa:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = USB_VCP_Parameters[6];
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	3306      	adds	r3, #6
 800ea00:	4a05      	ldr	r2, [pc, #20]	; (800ea18 <CDC_Control_FS+0x140>)
 800ea02:	7992      	ldrb	r2, [r2, #6]
 800ea04:	701a      	strb	r2, [r3, #0]

    break;
 800ea06:	e000      	b.n	800ea0a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea08:	bf00      	nop
  }

  return (USBD_OK);
 800ea0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	20000508 	.word	0x20000508

0800ea1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea26:	6879      	ldr	r1, [r7, #4]
 800ea28:	4808      	ldr	r0, [pc, #32]	; (800ea4c <CDC_Receive_FS+0x30>)
 800ea2a:	f7fe fb7d 	bl	800d128 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea2e:	4807      	ldr	r0, [pc, #28]	; (800ea4c <CDC_Receive_FS+0x30>)
 800ea30:	f7fe fbde 	bl	800d1f0 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f7f3 fc67 	bl	8002310 <PDM_USB_Process>

  return (USBD_OK);
 800ea42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20000f9c 	.word	0x20000f9c

0800ea50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea60:	4b0d      	ldr	r3, [pc, #52]	; (800ea98 <CDC_Transmit_FS+0x48>)
 800ea62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea72:	2301      	movs	r3, #1
 800ea74:	e00b      	b.n	800ea8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea76:	887b      	ldrh	r3, [r7, #2]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6879      	ldr	r1, [r7, #4]
 800ea7c:	4806      	ldr	r0, [pc, #24]	; (800ea98 <CDC_Transmit_FS+0x48>)
 800ea7e:	f7fe fb31 	bl	800d0e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea82:	4805      	ldr	r0, [pc, #20]	; (800ea98 <CDC_Transmit_FS+0x48>)
 800ea84:	f7fe fb6e 	bl	800d164 <USBD_CDC_TransmitPacket>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	20000f9c 	.word	0x20000f9c

0800ea9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b087      	sub	sp, #28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eaae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	371c      	adds	r7, #28
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
	...

0800eac0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	4603      	mov	r3, r0
 800eac8:	6039      	str	r1, [r7, #0]
 800eaca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2212      	movs	r2, #18
 800ead0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ead2:	4b03      	ldr	r3, [pc, #12]	; (800eae0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	200000c8 	.word	0x200000c8

0800eae4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	6039      	str	r1, [r7, #0]
 800eaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eaf6:	4b03      	ldr	r3, [pc, #12]	; (800eb04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	200000dc 	.word	0x200000dc

0800eb08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	6039      	str	r1, [r7, #0]
 800eb12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d105      	bne.n	800eb26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	4907      	ldr	r1, [pc, #28]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x34>)
 800eb1e:	4808      	ldr	r0, [pc, #32]	; (800eb40 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb20:	f7ff fdae 	bl	800e680 <USBD_GetString>
 800eb24:	e004      	b.n	800eb30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	4904      	ldr	r1, [pc, #16]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x34>)
 800eb2a:	4805      	ldr	r0, [pc, #20]	; (800eb40 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb2c:	f7ff fda8 	bl	800e680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb30:	4b02      	ldr	r3, [pc, #8]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20002278 	.word	0x20002278
 800eb40:	0800f5fc 	.word	0x0800f5fc

0800eb44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	6039      	str	r1, [r7, #0]
 800eb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	4904      	ldr	r1, [pc, #16]	; (800eb64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb54:	4804      	ldr	r0, [pc, #16]	; (800eb68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb56:	f7ff fd93 	bl	800e680 <USBD_GetString>
  return USBD_StrDesc;
 800eb5a:	4b02      	ldr	r3, [pc, #8]	; (800eb64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	20002278 	.word	0x20002278
 800eb68:	0800f614 	.word	0x0800f614

0800eb6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	6039      	str	r1, [r7, #0]
 800eb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	221a      	movs	r2, #26
 800eb7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb7e:	f000 f843 	bl	800ec08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb82:	4b02      	ldr	r3, [pc, #8]	; (800eb8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	200000e0 	.word	0x200000e0

0800eb90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	6039      	str	r1, [r7, #0]
 800eb9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d105      	bne.n	800ebae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	4907      	ldr	r1, [pc, #28]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eba6:	4808      	ldr	r0, [pc, #32]	; (800ebc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eba8:	f7ff fd6a 	bl	800e680 <USBD_GetString>
 800ebac:	e004      	b.n	800ebb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	4904      	ldr	r1, [pc, #16]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebb2:	4805      	ldr	r0, [pc, #20]	; (800ebc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebb4:	f7ff fd64 	bl	800e680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebb8:	4b02      	ldr	r3, [pc, #8]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20002278 	.word	0x20002278
 800ebc8:	0800f628 	.word	0x0800f628

0800ebcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	6039      	str	r1, [r7, #0]
 800ebd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d105      	bne.n	800ebea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	4907      	ldr	r1, [pc, #28]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebe2:	4808      	ldr	r0, [pc, #32]	; (800ec04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebe4:	f7ff fd4c 	bl	800e680 <USBD_GetString>
 800ebe8:	e004      	b.n	800ebf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	4904      	ldr	r1, [pc, #16]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebee:	4805      	ldr	r0, [pc, #20]	; (800ec04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebf0:	f7ff fd46 	bl	800e680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20002278 	.word	0x20002278
 800ec04:	0800f634 	.word	0x0800f634

0800ec08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec0e:	4b0f      	ldr	r3, [pc, #60]	; (800ec4c <Get_SerialNum+0x44>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec14:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <Get_SerialNum+0x48>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec1a:	4b0e      	ldr	r3, [pc, #56]	; (800ec54 <Get_SerialNum+0x4c>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4413      	add	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d009      	beq.n	800ec42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec2e:	2208      	movs	r2, #8
 800ec30:	4909      	ldr	r1, [pc, #36]	; (800ec58 <Get_SerialNum+0x50>)
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f000 f814 	bl	800ec60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec38:	2204      	movs	r2, #4
 800ec3a:	4908      	ldr	r1, [pc, #32]	; (800ec5c <Get_SerialNum+0x54>)
 800ec3c:	68b8      	ldr	r0, [r7, #8]
 800ec3e:	f000 f80f 	bl	800ec60 <IntToUnicode>
  }
}
 800ec42:	bf00      	nop
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	1fff7a10 	.word	0x1fff7a10
 800ec50:	1fff7a14 	.word	0x1fff7a14
 800ec54:	1fff7a18 	.word	0x1fff7a18
 800ec58:	200000e2 	.word	0x200000e2
 800ec5c:	200000f2 	.word	0x200000f2

0800ec60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b087      	sub	sp, #28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec72:	2300      	movs	r3, #0
 800ec74:	75fb      	strb	r3, [r7, #23]
 800ec76:	e027      	b.n	800ecc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	0f1b      	lsrs	r3, r3, #28
 800ec7c:	2b09      	cmp	r3, #9
 800ec7e:	d80b      	bhi.n	800ec98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	0f1b      	lsrs	r3, r3, #28
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	440b      	add	r3, r1
 800ec90:	3230      	adds	r2, #48	; 0x30
 800ec92:	b2d2      	uxtb	r2, r2
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	e00a      	b.n	800ecae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	0f1b      	lsrs	r3, r3, #28
 800ec9c:	b2da      	uxtb	r2, r3
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	4619      	mov	r1, r3
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	440b      	add	r3, r1
 800eca8:	3237      	adds	r2, #55	; 0x37
 800ecaa:	b2d2      	uxtb	r2, r2
 800ecac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	011b      	lsls	r3, r3, #4
 800ecb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	3301      	adds	r3, #1
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	75fb      	strb	r3, [r7, #23]
 800ecc8:	7dfa      	ldrb	r2, [r7, #23]
 800ecca:	79fb      	ldrb	r3, [r7, #7]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d3d3      	bcc.n	800ec78 <IntToUnicode+0x18>
  }
}
 800ecd0:	bf00      	nop
 800ecd2:	bf00      	nop
 800ecd4:	371c      	adds	r7, #28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
	...

0800ece0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b0a0      	sub	sp, #128	; 0x80
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ece8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]
 800ecf0:	605a      	str	r2, [r3, #4]
 800ecf2:	609a      	str	r2, [r3, #8]
 800ecf4:	60da      	str	r2, [r3, #12]
 800ecf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ecf8:	f107 0310 	add.w	r3, r7, #16
 800ecfc:	225c      	movs	r2, #92	; 0x5c
 800ecfe:	2100      	movs	r1, #0
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 fb69 	bl	800f3d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed0e:	d161      	bne.n	800edd4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ed10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800ed16:	2308      	movs	r3, #8
 800ed18:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800ed1a:	23c0      	movs	r3, #192	; 0xc0
 800ed1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800ed1e:	2302      	movs	r3, #2
 800ed20:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800ed22:	2304      	movs	r3, #4
 800ed24:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800ed26:	2301      	movs	r3, #1
 800ed28:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800ed2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed2e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ed30:	f107 0310 	add.w	r3, r7, #16
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fa f8c9 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800ed40:	f7f2 fa02 	bl	8001148 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed44:	2300      	movs	r3, #0
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	4b24      	ldr	r3, [pc, #144]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800ed4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4c:	4a23      	ldr	r2, [pc, #140]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800ed4e:	f043 0301 	orr.w	r3, r3, #1
 800ed52:	6313      	str	r3, [r2, #48]	; 0x30
 800ed54:	4b21      	ldr	r3, [pc, #132]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800ed56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed58:	f003 0301 	and.w	r3, r3, #1
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ed60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed64:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ed66:	2300      	movs	r3, #0
 800ed68:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ed72:	4619      	mov	r1, r3
 800ed74:	481a      	ldr	r0, [pc, #104]	; (800ede0 <HAL_PCD_MspInit+0x100>)
 800ed76:	f7f7 fbbd 	bl	80064f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed80:	2302      	movs	r3, #2
 800ed82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed84:	2300      	movs	r3, #0
 800ed86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed88:	2303      	movs	r3, #3
 800ed8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed8c:	230a      	movs	r3, #10
 800ed8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ed94:	4619      	mov	r1, r3
 800ed96:	4812      	ldr	r0, [pc, #72]	; (800ede0 <HAL_PCD_MspInit+0x100>)
 800ed98:	f7f7 fbac 	bl	80064f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed9c:	4b0f      	ldr	r3, [pc, #60]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800ed9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda0:	4a0e      	ldr	r2, [pc, #56]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800eda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eda6:	6353      	str	r3, [r2, #52]	; 0x34
 800eda8:	2300      	movs	r3, #0
 800edaa:	60bb      	str	r3, [r7, #8]
 800edac:	4b0b      	ldr	r3, [pc, #44]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800edae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb0:	4a0a      	ldr	r2, [pc, #40]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800edb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edb6:	6453      	str	r3, [r2, #68]	; 0x44
 800edb8:	4b08      	ldr	r3, [pc, #32]	; (800eddc <HAL_PCD_MspInit+0xfc>)
 800edba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edc0:	60bb      	str	r3, [r7, #8]
 800edc2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800edc4:	2200      	movs	r2, #0
 800edc6:	2100      	movs	r1, #0
 800edc8:	2043      	movs	r0, #67	; 0x43
 800edca:	f7f6 ff62 	bl	8005c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edce:	2043      	movs	r0, #67	; 0x43
 800edd0:	f7f6 ff7b 	bl	8005cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800edd4:	bf00      	nop
 800edd6:	3780      	adds	r7, #128	; 0x80
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	40023800 	.word	0x40023800
 800ede0:	40020000 	.word	0x40020000

0800ede4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7fe fae1 	bl	800d3c2 <USBD_LL_SetupStage>
}
 800ee00:	bf00      	nop
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	460b      	mov	r3, r1
 800ee12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee1a:	78fa      	ldrb	r2, [r7, #3]
 800ee1c:	6879      	ldr	r1, [r7, #4]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	4413      	add	r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	440b      	add	r3, r1
 800ee28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	4619      	mov	r1, r3
 800ee32:	f7fe fb1b 	bl	800d46c <USBD_LL_DataOutStage>
}
 800ee36:	bf00      	nop
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	460b      	mov	r3, r1
 800ee48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee50:	78fa      	ldrb	r2, [r7, #3]
 800ee52:	6879      	ldr	r1, [r7, #4]
 800ee54:	4613      	mov	r3, r2
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	4413      	add	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	440b      	add	r3, r1
 800ee5e:	334c      	adds	r3, #76	; 0x4c
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	78fb      	ldrb	r3, [r7, #3]
 800ee64:	4619      	mov	r1, r3
 800ee66:	f7fe fbb4 	bl	800d5d2 <USBD_LL_DataInStage>
}
 800ee6a:	bf00      	nop
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b082      	sub	sp, #8
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fe fce8 	bl	800d856 <USBD_LL_SOF>
}
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b084      	sub	sp, #16
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee96:	2301      	movs	r3, #1
 800ee98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d102      	bne.n	800eea8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eea2:	2300      	movs	r3, #0
 800eea4:	73fb      	strb	r3, [r7, #15]
 800eea6:	e008      	b.n	800eeba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d102      	bne.n	800eeb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	73fb      	strb	r3, [r7, #15]
 800eeb4:	e001      	b.n	800eeba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eeb6:	f7f2 f947 	bl	8001148 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eec0:	7bfa      	ldrb	r2, [r7, #15]
 800eec2:	4611      	mov	r1, r2
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fe fc88 	bl	800d7da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fc30 	bl	800d736 <USBD_LL_Reset>
}
 800eed6:	bf00      	nop
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fc83 	bl	800d7fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	6812      	ldr	r2, [r2, #0]
 800ef02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef06:	f043 0301 	orr.w	r3, r3, #1
 800ef0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6a1b      	ldr	r3, [r3, #32]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d005      	beq.n	800ef20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef14:	4b04      	ldr	r3, [pc, #16]	; (800ef28 <HAL_PCD_SuspendCallback+0x48>)
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	4a03      	ldr	r2, [pc, #12]	; (800ef28 <HAL_PCD_SuspendCallback+0x48>)
 800ef1a:	f043 0306 	orr.w	r3, r3, #6
 800ef1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	e000ed00 	.word	0xe000ed00

0800ef2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fe fc73 	bl	800d826 <USBD_LL_Resume>
}
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	460b      	mov	r3, r1
 800ef52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef5a:	78fa      	ldrb	r2, [r7, #3]
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe fccb 	bl	800d8fa <USBD_LL_IsoOUTIncomplete>
}
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	460b      	mov	r3, r1
 800ef76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef7e:	78fa      	ldrb	r2, [r7, #3]
 800ef80:	4611      	mov	r1, r2
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fc87 	bl	800d896 <USBD_LL_IsoINIncomplete>
}
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe fcdd 	bl	800d95e <USBD_LL_DevConnected>
}
 800efa4:	bf00      	nop
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe fcda 	bl	800d974 <USBD_LL_DevDisconnected>
}
 800efc0:	bf00      	nop
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d13c      	bne.n	800f052 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800efd8:	4a20      	ldr	r2, [pc, #128]	; (800f05c <USBD_LL_Init+0x94>)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a1e      	ldr	r2, [pc, #120]	; (800f05c <USBD_LL_Init+0x94>)
 800efe4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efe8:	4b1c      	ldr	r3, [pc, #112]	; (800f05c <USBD_LL_Init+0x94>)
 800efea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800efee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800eff0:	4b1a      	ldr	r3, [pc, #104]	; (800f05c <USBD_LL_Init+0x94>)
 800eff2:	2206      	movs	r2, #6
 800eff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eff6:	4b19      	ldr	r3, [pc, #100]	; (800f05c <USBD_LL_Init+0x94>)
 800eff8:	2202      	movs	r2, #2
 800effa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800effc:	4b17      	ldr	r3, [pc, #92]	; (800f05c <USBD_LL_Init+0x94>)
 800effe:	2200      	movs	r2, #0
 800f000:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f002:	4b16      	ldr	r3, [pc, #88]	; (800f05c <USBD_LL_Init+0x94>)
 800f004:	2202      	movs	r2, #2
 800f006:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f008:	4b14      	ldr	r3, [pc, #80]	; (800f05c <USBD_LL_Init+0x94>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f00e:	4b13      	ldr	r3, [pc, #76]	; (800f05c <USBD_LL_Init+0x94>)
 800f010:	2200      	movs	r2, #0
 800f012:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f014:	4b11      	ldr	r3, [pc, #68]	; (800f05c <USBD_LL_Init+0x94>)
 800f016:	2200      	movs	r2, #0
 800f018:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f01a:	4b10      	ldr	r3, [pc, #64]	; (800f05c <USBD_LL_Init+0x94>)
 800f01c:	2201      	movs	r2, #1
 800f01e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f020:	4b0e      	ldr	r3, [pc, #56]	; (800f05c <USBD_LL_Init+0x94>)
 800f022:	2200      	movs	r2, #0
 800f024:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f026:	480d      	ldr	r0, [pc, #52]	; (800f05c <USBD_LL_Init+0x94>)
 800f028:	f7f8 fb24 	bl	8007674 <HAL_PCD_Init>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f032:	f7f2 f889 	bl	8001148 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f036:	2180      	movs	r1, #128	; 0x80
 800f038:	4808      	ldr	r0, [pc, #32]	; (800f05c <USBD_LL_Init+0x94>)
 800f03a:	f7f9 fdb0 	bl	8008b9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f03e:	2240      	movs	r2, #64	; 0x40
 800f040:	2100      	movs	r1, #0
 800f042:	4806      	ldr	r0, [pc, #24]	; (800f05c <USBD_LL_Init+0x94>)
 800f044:	f7f9 fd64 	bl	8008b10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f048:	2280      	movs	r2, #128	; 0x80
 800f04a:	2101      	movs	r1, #1
 800f04c:	4803      	ldr	r0, [pc, #12]	; (800f05c <USBD_LL_Init+0x94>)
 800f04e:	f7f9 fd5f 	bl	8008b10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20002478 	.word	0x20002478

0800f060 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f068:	2300      	movs	r3, #0
 800f06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f076:	4618      	mov	r0, r3
 800f078:	f7f8 fc20 	bl	80078bc <HAL_PCD_Start>
 800f07c:	4603      	mov	r3, r0
 800f07e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f080:	7bfb      	ldrb	r3, [r7, #15]
 800f082:	4618      	mov	r0, r3
 800f084:	f000 f942 	bl	800f30c <USBD_Get_USB_Status>
 800f088:	4603      	mov	r3, r0
 800f08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b084      	sub	sp, #16
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	70fb      	strb	r3, [r7, #3]
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	70bb      	strb	r3, [r7, #2]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f0be:	78bb      	ldrb	r3, [r7, #2]
 800f0c0:	883a      	ldrh	r2, [r7, #0]
 800f0c2:	78f9      	ldrb	r1, [r7, #3]
 800f0c4:	f7f9 f91e 	bl	8008304 <HAL_PCD_EP_Open>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 f91c 	bl	800f30c <USBD_Get_USB_Status>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0fc:	78fa      	ldrb	r2, [r7, #3]
 800f0fe:	4611      	mov	r1, r2
 800f100:	4618      	mov	r0, r3
 800f102:	f7f9 f967 	bl	80083d4 <HAL_PCD_EP_Close>
 800f106:	4603      	mov	r3, r0
 800f108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 f8fd 	bl	800f30c <USBD_Get_USB_Status>
 800f112:	4603      	mov	r3, r0
 800f114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f116:	7bbb      	ldrb	r3, [r7, #14]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	460b      	mov	r3, r1
 800f12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f13a:	78fa      	ldrb	r2, [r7, #3]
 800f13c:	4611      	mov	r1, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f9 fa3f 	bl	80085c2 <HAL_PCD_EP_SetStall>
 800f144:	4603      	mov	r3, r0
 800f146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f000 f8de 	bl	800f30c <USBD_Get_USB_Status>
 800f150:	4603      	mov	r3, r0
 800f152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f154:	7bbb      	ldrb	r3, [r7, #14]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b084      	sub	sp, #16
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	460b      	mov	r3, r1
 800f168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f178:	78fa      	ldrb	r2, [r7, #3]
 800f17a:	4611      	mov	r1, r2
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7f9 fa84 	bl	800868a <HAL_PCD_EP_ClrStall>
 800f182:	4603      	mov	r3, r0
 800f184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f186:	7bfb      	ldrb	r3, [r7, #15]
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 f8bf 	bl	800f30c <USBD_Get_USB_Status>
 800f18e:	4603      	mov	r3, r0
 800f190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f192:	7bbb      	ldrb	r3, [r7, #14]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b085      	sub	sp, #20
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	da0b      	bge.n	800f1d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1b8:	78fb      	ldrb	r3, [r7, #3]
 800f1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1be:	68f9      	ldr	r1, [r7, #12]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	00db      	lsls	r3, r3, #3
 800f1c4:	4413      	add	r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	440b      	add	r3, r1
 800f1ca:	333e      	adds	r3, #62	; 0x3e
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	e00b      	b.n	800f1e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1d0:	78fb      	ldrb	r3, [r7, #3]
 800f1d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1d6:	68f9      	ldr	r1, [r7, #12]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	00db      	lsls	r3, r3, #3
 800f1dc:	4413      	add	r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	440b      	add	r3, r1
 800f1e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f1e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f200:	2300      	movs	r3, #0
 800f202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f20e:	78fa      	ldrb	r2, [r7, #3]
 800f210:	4611      	mov	r1, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f7f9 f851 	bl	80082ba <HAL_PCD_SetAddress>
 800f218:	4603      	mov	r3, r0
 800f21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 f874 	bl	800f30c <USBD_Get_USB_Status>
 800f224:	4603      	mov	r3, r0
 800f226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f228:	7bbb      	ldrb	r3, [r7, #14]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b086      	sub	sp, #24
 800f236:	af00      	add	r7, sp, #0
 800f238:	60f8      	str	r0, [r7, #12]
 800f23a:	607a      	str	r2, [r7, #4]
 800f23c:	603b      	str	r3, [r7, #0]
 800f23e:	460b      	mov	r3, r1
 800f240:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f242:	2300      	movs	r3, #0
 800f244:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f250:	7af9      	ldrb	r1, [r7, #11]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	f7f9 f96a 	bl	800852e <HAL_PCD_EP_Transmit>
 800f25a:	4603      	mov	r3, r0
 800f25c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f25e:	7dfb      	ldrb	r3, [r7, #23]
 800f260:	4618      	mov	r0, r3
 800f262:	f000 f853 	bl	800f30c <USBD_Get_USB_Status>
 800f266:	4603      	mov	r3, r0
 800f268:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f26a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	607a      	str	r2, [r7, #4]
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	460b      	mov	r3, r1
 800f282:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f284:	2300      	movs	r3, #0
 800f286:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f292:	7af9      	ldrb	r1, [r7, #11]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	f7f9 f8e6 	bl	8008468 <HAL_PCD_EP_Receive>
 800f29c:	4603      	mov	r3, r0
 800f29e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 f832 	bl	800f30c <USBD_Get_USB_Status>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b082      	sub	sp, #8
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
 800f2be:	460b      	mov	r3, r1
 800f2c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2c8:	78fa      	ldrb	r2, [r7, #3]
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f9 f916 	bl	80084fe <HAL_PCD_EP_GetRxCount>
 800f2d2:	4603      	mov	r3, r0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2e4:	4b03      	ldr	r3, [pc, #12]	; (800f2f4 <USBD_static_malloc+0x18>)
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	370c      	adds	r7, #12
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	20002984 	.word	0x20002984

0800f2f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]

}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f316:	2300      	movs	r3, #0
 800f318:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	2b03      	cmp	r3, #3
 800f31e:	d817      	bhi.n	800f350 <USBD_Get_USB_Status+0x44>
 800f320:	a201      	add	r2, pc, #4	; (adr r2, 800f328 <USBD_Get_USB_Status+0x1c>)
 800f322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f326:	bf00      	nop
 800f328:	0800f339 	.word	0x0800f339
 800f32c:	0800f33f 	.word	0x0800f33f
 800f330:	0800f345 	.word	0x0800f345
 800f334:	0800f34b 	.word	0x0800f34b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	73fb      	strb	r3, [r7, #15]
    break;
 800f33c:	e00b      	b.n	800f356 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f33e:	2303      	movs	r3, #3
 800f340:	73fb      	strb	r3, [r7, #15]
    break;
 800f342:	e008      	b.n	800f356 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f344:	2301      	movs	r3, #1
 800f346:	73fb      	strb	r3, [r7, #15]
    break;
 800f348:	e005      	b.n	800f356 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f34a:	2303      	movs	r3, #3
 800f34c:	73fb      	strb	r3, [r7, #15]
    break;
 800f34e:	e002      	b.n	800f356 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f350:	2303      	movs	r3, #3
 800f352:	73fb      	strb	r3, [r7, #15]
    break;
 800f354:	bf00      	nop
  }
  return usb_status;
 800f356:	7bfb      	ldrb	r3, [r7, #15]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3714      	adds	r7, #20
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <__errno>:
 800f364:	4b01      	ldr	r3, [pc, #4]	; (800f36c <__errno+0x8>)
 800f366:	6818      	ldr	r0, [r3, #0]
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	200000fc 	.word	0x200000fc

0800f370 <__libc_init_array>:
 800f370:	b570      	push	{r4, r5, r6, lr}
 800f372:	4d0d      	ldr	r5, [pc, #52]	; (800f3a8 <__libc_init_array+0x38>)
 800f374:	4c0d      	ldr	r4, [pc, #52]	; (800f3ac <__libc_init_array+0x3c>)
 800f376:	1b64      	subs	r4, r4, r5
 800f378:	10a4      	asrs	r4, r4, #2
 800f37a:	2600      	movs	r6, #0
 800f37c:	42a6      	cmp	r6, r4
 800f37e:	d109      	bne.n	800f394 <__libc_init_array+0x24>
 800f380:	4d0b      	ldr	r5, [pc, #44]	; (800f3b0 <__libc_init_array+0x40>)
 800f382:	4c0c      	ldr	r4, [pc, #48]	; (800f3b4 <__libc_init_array+0x44>)
 800f384:	f000 f92e 	bl	800f5e4 <_init>
 800f388:	1b64      	subs	r4, r4, r5
 800f38a:	10a4      	asrs	r4, r4, #2
 800f38c:	2600      	movs	r6, #0
 800f38e:	42a6      	cmp	r6, r4
 800f390:	d105      	bne.n	800f39e <__libc_init_array+0x2e>
 800f392:	bd70      	pop	{r4, r5, r6, pc}
 800f394:	f855 3b04 	ldr.w	r3, [r5], #4
 800f398:	4798      	blx	r3
 800f39a:	3601      	adds	r6, #1
 800f39c:	e7ee      	b.n	800f37c <__libc_init_array+0xc>
 800f39e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3a2:	4798      	blx	r3
 800f3a4:	3601      	adds	r6, #1
 800f3a6:	e7f2      	b.n	800f38e <__libc_init_array+0x1e>
 800f3a8:	0800f66c 	.word	0x0800f66c
 800f3ac:	0800f66c 	.word	0x0800f66c
 800f3b0:	0800f66c 	.word	0x0800f66c
 800f3b4:	0800f670 	.word	0x0800f670

0800f3b8 <malloc>:
 800f3b8:	4b02      	ldr	r3, [pc, #8]	; (800f3c4 <malloc+0xc>)
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	f000 b87f 	b.w	800f4c0 <_malloc_r>
 800f3c2:	bf00      	nop
 800f3c4:	200000fc 	.word	0x200000fc

0800f3c8 <free>:
 800f3c8:	4b02      	ldr	r3, [pc, #8]	; (800f3d4 <free+0xc>)
 800f3ca:	4601      	mov	r1, r0
 800f3cc:	6818      	ldr	r0, [r3, #0]
 800f3ce:	f000 b80b 	b.w	800f3e8 <_free_r>
 800f3d2:	bf00      	nop
 800f3d4:	200000fc 	.word	0x200000fc

0800f3d8 <memset>:
 800f3d8:	4402      	add	r2, r0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d100      	bne.n	800f3e2 <memset+0xa>
 800f3e0:	4770      	bx	lr
 800f3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f3e6:	e7f9      	b.n	800f3dc <memset+0x4>

0800f3e8 <_free_r>:
 800f3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ea:	2900      	cmp	r1, #0
 800f3ec:	d044      	beq.n	800f478 <_free_r+0x90>
 800f3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3f2:	9001      	str	r0, [sp, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f3fa:	bfb8      	it	lt
 800f3fc:	18e4      	addlt	r4, r4, r3
 800f3fe:	f000 f8e3 	bl	800f5c8 <__malloc_lock>
 800f402:	4a1e      	ldr	r2, [pc, #120]	; (800f47c <_free_r+0x94>)
 800f404:	9801      	ldr	r0, [sp, #4]
 800f406:	6813      	ldr	r3, [r2, #0]
 800f408:	b933      	cbnz	r3, 800f418 <_free_r+0x30>
 800f40a:	6063      	str	r3, [r4, #4]
 800f40c:	6014      	str	r4, [r2, #0]
 800f40e:	b003      	add	sp, #12
 800f410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f414:	f000 b8de 	b.w	800f5d4 <__malloc_unlock>
 800f418:	42a3      	cmp	r3, r4
 800f41a:	d908      	bls.n	800f42e <_free_r+0x46>
 800f41c:	6825      	ldr	r5, [r4, #0]
 800f41e:	1961      	adds	r1, r4, r5
 800f420:	428b      	cmp	r3, r1
 800f422:	bf01      	itttt	eq
 800f424:	6819      	ldreq	r1, [r3, #0]
 800f426:	685b      	ldreq	r3, [r3, #4]
 800f428:	1949      	addeq	r1, r1, r5
 800f42a:	6021      	streq	r1, [r4, #0]
 800f42c:	e7ed      	b.n	800f40a <_free_r+0x22>
 800f42e:	461a      	mov	r2, r3
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	b10b      	cbz	r3, 800f438 <_free_r+0x50>
 800f434:	42a3      	cmp	r3, r4
 800f436:	d9fa      	bls.n	800f42e <_free_r+0x46>
 800f438:	6811      	ldr	r1, [r2, #0]
 800f43a:	1855      	adds	r5, r2, r1
 800f43c:	42a5      	cmp	r5, r4
 800f43e:	d10b      	bne.n	800f458 <_free_r+0x70>
 800f440:	6824      	ldr	r4, [r4, #0]
 800f442:	4421      	add	r1, r4
 800f444:	1854      	adds	r4, r2, r1
 800f446:	42a3      	cmp	r3, r4
 800f448:	6011      	str	r1, [r2, #0]
 800f44a:	d1e0      	bne.n	800f40e <_free_r+0x26>
 800f44c:	681c      	ldr	r4, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	6053      	str	r3, [r2, #4]
 800f452:	4421      	add	r1, r4
 800f454:	6011      	str	r1, [r2, #0]
 800f456:	e7da      	b.n	800f40e <_free_r+0x26>
 800f458:	d902      	bls.n	800f460 <_free_r+0x78>
 800f45a:	230c      	movs	r3, #12
 800f45c:	6003      	str	r3, [r0, #0]
 800f45e:	e7d6      	b.n	800f40e <_free_r+0x26>
 800f460:	6825      	ldr	r5, [r4, #0]
 800f462:	1961      	adds	r1, r4, r5
 800f464:	428b      	cmp	r3, r1
 800f466:	bf04      	itt	eq
 800f468:	6819      	ldreq	r1, [r3, #0]
 800f46a:	685b      	ldreq	r3, [r3, #4]
 800f46c:	6063      	str	r3, [r4, #4]
 800f46e:	bf04      	itt	eq
 800f470:	1949      	addeq	r1, r1, r5
 800f472:	6021      	streq	r1, [r4, #0]
 800f474:	6054      	str	r4, [r2, #4]
 800f476:	e7ca      	b.n	800f40e <_free_r+0x26>
 800f478:	b003      	add	sp, #12
 800f47a:	bd30      	pop	{r4, r5, pc}
 800f47c:	20002ba4 	.word	0x20002ba4

0800f480 <sbrk_aligned>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	4e0e      	ldr	r6, [pc, #56]	; (800f4bc <sbrk_aligned+0x3c>)
 800f484:	460c      	mov	r4, r1
 800f486:	6831      	ldr	r1, [r6, #0]
 800f488:	4605      	mov	r5, r0
 800f48a:	b911      	cbnz	r1, 800f492 <sbrk_aligned+0x12>
 800f48c:	f000 f88c 	bl	800f5a8 <_sbrk_r>
 800f490:	6030      	str	r0, [r6, #0]
 800f492:	4621      	mov	r1, r4
 800f494:	4628      	mov	r0, r5
 800f496:	f000 f887 	bl	800f5a8 <_sbrk_r>
 800f49a:	1c43      	adds	r3, r0, #1
 800f49c:	d00a      	beq.n	800f4b4 <sbrk_aligned+0x34>
 800f49e:	1cc4      	adds	r4, r0, #3
 800f4a0:	f024 0403 	bic.w	r4, r4, #3
 800f4a4:	42a0      	cmp	r0, r4
 800f4a6:	d007      	beq.n	800f4b8 <sbrk_aligned+0x38>
 800f4a8:	1a21      	subs	r1, r4, r0
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f000 f87c 	bl	800f5a8 <_sbrk_r>
 800f4b0:	3001      	adds	r0, #1
 800f4b2:	d101      	bne.n	800f4b8 <sbrk_aligned+0x38>
 800f4b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	20002ba8 	.word	0x20002ba8

0800f4c0 <_malloc_r>:
 800f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c4:	1ccd      	adds	r5, r1, #3
 800f4c6:	f025 0503 	bic.w	r5, r5, #3
 800f4ca:	3508      	adds	r5, #8
 800f4cc:	2d0c      	cmp	r5, #12
 800f4ce:	bf38      	it	cc
 800f4d0:	250c      	movcc	r5, #12
 800f4d2:	2d00      	cmp	r5, #0
 800f4d4:	4607      	mov	r7, r0
 800f4d6:	db01      	blt.n	800f4dc <_malloc_r+0x1c>
 800f4d8:	42a9      	cmp	r1, r5
 800f4da:	d905      	bls.n	800f4e8 <_malloc_r+0x28>
 800f4dc:	230c      	movs	r3, #12
 800f4de:	603b      	str	r3, [r7, #0]
 800f4e0:	2600      	movs	r6, #0
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	4e2e      	ldr	r6, [pc, #184]	; (800f5a4 <_malloc_r+0xe4>)
 800f4ea:	f000 f86d 	bl	800f5c8 <__malloc_lock>
 800f4ee:	6833      	ldr	r3, [r6, #0]
 800f4f0:	461c      	mov	r4, r3
 800f4f2:	bb34      	cbnz	r4, 800f542 <_malloc_r+0x82>
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	f7ff ffc2 	bl	800f480 <sbrk_aligned>
 800f4fc:	1c43      	adds	r3, r0, #1
 800f4fe:	4604      	mov	r4, r0
 800f500:	d14d      	bne.n	800f59e <_malloc_r+0xde>
 800f502:	6834      	ldr	r4, [r6, #0]
 800f504:	4626      	mov	r6, r4
 800f506:	2e00      	cmp	r6, #0
 800f508:	d140      	bne.n	800f58c <_malloc_r+0xcc>
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	4631      	mov	r1, r6
 800f50e:	4638      	mov	r0, r7
 800f510:	eb04 0803 	add.w	r8, r4, r3
 800f514:	f000 f848 	bl	800f5a8 <_sbrk_r>
 800f518:	4580      	cmp	r8, r0
 800f51a:	d13a      	bne.n	800f592 <_malloc_r+0xd2>
 800f51c:	6821      	ldr	r1, [r4, #0]
 800f51e:	3503      	adds	r5, #3
 800f520:	1a6d      	subs	r5, r5, r1
 800f522:	f025 0503 	bic.w	r5, r5, #3
 800f526:	3508      	adds	r5, #8
 800f528:	2d0c      	cmp	r5, #12
 800f52a:	bf38      	it	cc
 800f52c:	250c      	movcc	r5, #12
 800f52e:	4629      	mov	r1, r5
 800f530:	4638      	mov	r0, r7
 800f532:	f7ff ffa5 	bl	800f480 <sbrk_aligned>
 800f536:	3001      	adds	r0, #1
 800f538:	d02b      	beq.n	800f592 <_malloc_r+0xd2>
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	442b      	add	r3, r5
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	e00e      	b.n	800f560 <_malloc_r+0xa0>
 800f542:	6822      	ldr	r2, [r4, #0]
 800f544:	1b52      	subs	r2, r2, r5
 800f546:	d41e      	bmi.n	800f586 <_malloc_r+0xc6>
 800f548:	2a0b      	cmp	r2, #11
 800f54a:	d916      	bls.n	800f57a <_malloc_r+0xba>
 800f54c:	1961      	adds	r1, r4, r5
 800f54e:	42a3      	cmp	r3, r4
 800f550:	6025      	str	r5, [r4, #0]
 800f552:	bf18      	it	ne
 800f554:	6059      	strne	r1, [r3, #4]
 800f556:	6863      	ldr	r3, [r4, #4]
 800f558:	bf08      	it	eq
 800f55a:	6031      	streq	r1, [r6, #0]
 800f55c:	5162      	str	r2, [r4, r5]
 800f55e:	604b      	str	r3, [r1, #4]
 800f560:	4638      	mov	r0, r7
 800f562:	f104 060b 	add.w	r6, r4, #11
 800f566:	f000 f835 	bl	800f5d4 <__malloc_unlock>
 800f56a:	f026 0607 	bic.w	r6, r6, #7
 800f56e:	1d23      	adds	r3, r4, #4
 800f570:	1af2      	subs	r2, r6, r3
 800f572:	d0b6      	beq.n	800f4e2 <_malloc_r+0x22>
 800f574:	1b9b      	subs	r3, r3, r6
 800f576:	50a3      	str	r3, [r4, r2]
 800f578:	e7b3      	b.n	800f4e2 <_malloc_r+0x22>
 800f57a:	6862      	ldr	r2, [r4, #4]
 800f57c:	42a3      	cmp	r3, r4
 800f57e:	bf0c      	ite	eq
 800f580:	6032      	streq	r2, [r6, #0]
 800f582:	605a      	strne	r2, [r3, #4]
 800f584:	e7ec      	b.n	800f560 <_malloc_r+0xa0>
 800f586:	4623      	mov	r3, r4
 800f588:	6864      	ldr	r4, [r4, #4]
 800f58a:	e7b2      	b.n	800f4f2 <_malloc_r+0x32>
 800f58c:	4634      	mov	r4, r6
 800f58e:	6876      	ldr	r6, [r6, #4]
 800f590:	e7b9      	b.n	800f506 <_malloc_r+0x46>
 800f592:	230c      	movs	r3, #12
 800f594:	603b      	str	r3, [r7, #0]
 800f596:	4638      	mov	r0, r7
 800f598:	f000 f81c 	bl	800f5d4 <__malloc_unlock>
 800f59c:	e7a1      	b.n	800f4e2 <_malloc_r+0x22>
 800f59e:	6025      	str	r5, [r4, #0]
 800f5a0:	e7de      	b.n	800f560 <_malloc_r+0xa0>
 800f5a2:	bf00      	nop
 800f5a4:	20002ba4 	.word	0x20002ba4

0800f5a8 <_sbrk_r>:
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	4d06      	ldr	r5, [pc, #24]	; (800f5c4 <_sbrk_r+0x1c>)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	4608      	mov	r0, r1
 800f5b2:	602b      	str	r3, [r5, #0]
 800f5b4:	f7f4 fe42 	bl	800423c <_sbrk>
 800f5b8:	1c43      	adds	r3, r0, #1
 800f5ba:	d102      	bne.n	800f5c2 <_sbrk_r+0x1a>
 800f5bc:	682b      	ldr	r3, [r5, #0]
 800f5be:	b103      	cbz	r3, 800f5c2 <_sbrk_r+0x1a>
 800f5c0:	6023      	str	r3, [r4, #0]
 800f5c2:	bd38      	pop	{r3, r4, r5, pc}
 800f5c4:	20002bac 	.word	0x20002bac

0800f5c8 <__malloc_lock>:
 800f5c8:	4801      	ldr	r0, [pc, #4]	; (800f5d0 <__malloc_lock+0x8>)
 800f5ca:	f000 b809 	b.w	800f5e0 <__retarget_lock_acquire_recursive>
 800f5ce:	bf00      	nop
 800f5d0:	20002bb0 	.word	0x20002bb0

0800f5d4 <__malloc_unlock>:
 800f5d4:	4801      	ldr	r0, [pc, #4]	; (800f5dc <__malloc_unlock+0x8>)
 800f5d6:	f000 b804 	b.w	800f5e2 <__retarget_lock_release_recursive>
 800f5da:	bf00      	nop
 800f5dc:	20002bb0 	.word	0x20002bb0

0800f5e0 <__retarget_lock_acquire_recursive>:
 800f5e0:	4770      	bx	lr

0800f5e2 <__retarget_lock_release_recursive>:
 800f5e2:	4770      	bx	lr

0800f5e4 <_init>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	bf00      	nop
 800f5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ea:	bc08      	pop	{r3}
 800f5ec:	469e      	mov	lr, r3
 800f5ee:	4770      	bx	lr

0800f5f0 <_fini>:
 800f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f2:	bf00      	nop
 800f5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f6:	bc08      	pop	{r3}
 800f5f8:	469e      	mov	lr, r3
 800f5fa:	4770      	bx	lr

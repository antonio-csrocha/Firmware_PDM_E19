
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a80  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08010c44  08010c44  00020c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cac  08010cac  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010cac  08010cac  00020cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cb4  08010cb4  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cb4  08010cb4  00020cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cb8  08010cb8  00020cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010cbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a10  200001f4  08010eb0  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20002c04  08010eb0  00032c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e6d3  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f6  00000000  00000000  0005e8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00063cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  000656c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029176  00000000  00000000  00066e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002429c  00000000  00000000  0008ffe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e675d  00000000  00000000  000b4282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019a9df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  0019aa34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f4 	.word	0x200001f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08010c2c 	.word	0x08010c2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f8 	.word	0x200001f8
 8000200:	08010c2c 	.word	0x08010c2c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <AT24Cxx_Read>:
 */

#include "AT24Cxx.h"

HAL_StatusTypeDef AT24Cxx_Read(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	461a      	mov	r2, r3
 8000508:	460b      	mov	r3, r1
 800050a:	817b      	strh	r3, [r7, #10]
 800050c:	4613      	mov	r3, r2
 800050e:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
 8000510:	897b      	ldrh	r3, [r7, #10]
 8000512:	09db      	lsrs	r3, r3, #7
 8000514:	b29b      	uxth	r3, r3
 8000516:	b21b      	sxth	r3, r3
 8000518:	f003 030e 	and.w	r3, r3, #14
 800051c:	b21b      	sxth	r3, r3
 800051e:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 8000522:	b21b      	sxth	r3, r3
 8000524:	b299      	uxth	r1, r3
 8000526:	897a      	ldrh	r2, [r7, #10]
 8000528:	2301      	movs	r3, #1
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	893b      	ldrh	r3, [r7, #8]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f006 fd96 	bl	8007068 <HAL_I2C_Mem_Read>
 800053c:	4603      	mov	r3, r0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <AT24Cxx_Write_DMA>:
{
	return HAL_I2C_Mem_Write(hi2c, 0xA0 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
}

HAL_StatusTypeDef AT24Cxx_Write_DMA(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af02      	add	r7, sp, #8
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	461a      	mov	r2, r3
 8000552:	460b      	mov	r3, r1
 8000554:	817b      	strh	r3, [r7, #10]
 8000556:	4613      	mov	r3, r2
 8000558:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write_DMA(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size);
 800055a:	897b      	ldrh	r3, [r7, #10]
 800055c:	09db      	lsrs	r3, r3, #7
 800055e:	b29b      	uxth	r3, r3
 8000560:	b21b      	sxth	r3, r3
 8000562:	f003 030e 	and.w	r3, r3, #14
 8000566:	b21b      	sxth	r3, r3
 8000568:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 800056c:	b21b      	sxth	r3, r3
 800056e:	b299      	uxth	r1, r3
 8000570:	897a      	ldrh	r2, [r7, #10]
 8000572:	893b      	ldrh	r3, [r7, #8]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f006 ff99 	bl	80074b4 <HAL_I2C_Mem_Write_DMA>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f004 f842 	bl	8004618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f89c 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fd50 	bl	800103c <MX_GPIO_Init>
  MX_ADC1_Init();
 800059c:	f000 f90a 	bl	80007b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a0:	f000 f994 	bl	80008cc <MX_ADC2_Init>
  MX_DMA_Init();
 80005a4:	f000 fd0c 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005a8:	f00f fc44 	bl	800fe34 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 80005ac:	f000 fa18 	bl	80009e0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80005b0:	f000 fa60 	bl	8000a74 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005b4:	f000 fa8c 	bl	8000ad0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b8:	f000 fb28 	bl	8000c0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005bc:	f000 fb9c 	bl	8000cf8 <MX_TIM3_Init>
  MX_TIM6_Init();
 80005c0:	f000 fc10 	bl	8000de4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80005c4:	f000 fc44 	bl	8000e50 <MX_TIM7_Init>
  MX_TIM8_Init();
 80005c8:	f000 fc76 	bl	8000eb8 <MX_TIM8_Init>
  MX_CRC_Init();
 80005cc:	f000 fa3e 	bl	8000a4c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 80005d0:	4932      	ldr	r1, [pc, #200]	; (800069c <main+0x110>)
 80005d2:	4833      	ldr	r0, [pc, #204]	; (80006a0 <main+0x114>)
 80005d4:	f001 ff64 	bl	80024a0 <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(Accumulator_Delay >= READING_DELAY)
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <main+0x118>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2bc7      	cmp	r3, #199	; 0xc7
 80005de:	dd02      	ble.n	80005e6 <main+0x5a>
	  {
		  PDM_Read_Data(&Data_Conversion);
 80005e0:	4831      	ldr	r0, [pc, #196]	; (80006a8 <main+0x11c>)
 80005e2:	f003 f95d 	bl	80038a0 <PDM_Read_Data>
	  }

	  //check if output currents are below thresholds and timeouts
	  if(Accumulator_Output_Check >= OUTPUT_FUSE_FREQ)
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <main+0x120>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b18      	cmp	r3, #24
 80005ec:	d901      	bls.n	80005f2 <main+0x66>
	  {
		  PDM_Output_Fuse();
 80005ee:	f002 fa7f 	bl	8002af0 <PDM_Output_Fuse>
	  }

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_10Hz >= DATA_FREQ_10HZ)
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <main+0x124>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fa:	d306      	bcc.n	800060a <main+0x7e>
	  {
		  Accumulator_Msg_10Hz = 0;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <main+0x124>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 8000602:	2101      	movs	r1, #1
 8000604:	4826      	ldr	r0, [pc, #152]	; (80006a0 <main+0x114>)
 8000606:	f000 ff4b 	bl	80014a0 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_25Hz >= DATA_FREQ_25HZ)
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0x128>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000612:	d306      	bcc.n	8000622 <main+0x96>
	  {
		  Accumulator_Msg_25Hz = 0;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <main+0x128>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 800061a:	2102      	movs	r1, #2
 800061c:	4820      	ldr	r0, [pc, #128]	; (80006a0 <main+0x114>)
 800061e:	f000 ff3f 	bl	80014a0 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_50Hz >= DATA_FREQ_50HZ)
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <main+0x12c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2bc7      	cmp	r3, #199	; 0xc7
 8000628:	d906      	bls.n	8000638 <main+0xac>
	  {
		  Accumulator_Msg_50Hz = 0;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <main+0x12c>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 8000630:	2103      	movs	r1, #3
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <main+0x114>)
 8000634:	f000 ff34 	bl	80014a0 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_80Hz >= DATA_FREQ_80HZ)
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <main+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b7c      	cmp	r3, #124	; 0x7c
 800063e:	d906      	bls.n	800064e <main+0xc2>
	  {
		  Accumulator_Msg_80Hz = 0;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <main+0x130>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 8000646:	2104      	movs	r1, #4
 8000648:	4815      	ldr	r0, [pc, #84]	; (80006a0 <main+0x114>)
 800064a:	f000 ff29 	bl	80014a0 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_100Hz >= DATA_FREQ_100HZ)
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <main+0x134>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b63      	cmp	r3, #99	; 0x63
 8000654:	d906      	bls.n	8000664 <main+0xd8>
	  {
		  Accumulator_Msg_100Hz = 0;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0x134>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 800065c:	2105      	movs	r1, #5
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x114>)
 8000660:	f000 ff1e 	bl	80014a0 <PDM_CAN_Transmit_Data>
	  }

	  //Checks if USB accumulator is above time threshold
	  if((Accumulator_USB_Data >= DATA_FREQ_USB))
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x138>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066c:	d3b4      	bcc.n	80005d8 <main+0x4c>
	  {
		  Accumulator_USB_Data = 0;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x138>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]

		  //If connected, send data channels via USB
		  if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) && (USB_Connected_Flag == 1))
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <main+0x13c>)
 800067a:	f006 fb4d 	bl	8006d18 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d106      	bne.n	8000692 <main+0x106>
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0x140>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d102      	bne.n	8000692 <main+0x106>
			  PDM_USB_Transmit_Data();
 800068c:	f001 ffb8 	bl	8002600 <PDM_USB_Transmit_Data>
 8000690:	e002      	b.n	8000698 <main+0x10c>
		  //If disconnected reset flag
		  else
			  USB_Connected_Flag = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <main+0x140>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	  if(Accumulator_Delay >= READING_DELAY)
 8000698:	e79e      	b.n	80005d8 <main+0x4c>
 800069a:	bf00      	nop
 800069c:	20000540 	.word	0x20000540
 80006a0:	2000125c 	.word	0x2000125c
 80006a4:	200011f8 	.word	0x200011f8
 80006a8:	20000e8c 	.word	0x20000e8c
 80006ac:	2000059c 	.word	0x2000059c
 80006b0:	20001170 	.word	0x20001170
 80006b4:	20000e90 	.word	0x20000e90
 80006b8:	20000f7c 	.word	0x20000f7c
 80006bc:	20001050 	.word	0x20001050
 80006c0:	20000fa0 	.word	0x20000fa0
 80006c4:	20001284 	.word	0x20001284
 80006c8:	40020000 	.word	0x40020000
 80006cc:	20001004 	.word	0x20001004

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f010 f9d4 	bl	8010a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <SystemClock_Config+0xdc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <SystemClock_Config+0xdc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xe0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <SystemClock_Config+0xe0>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000744:	23b4      	movs	r3, #180	; 0xb4
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f00a ffed 	bl	800b738 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 fe1a 	bl	800139c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000768:	f00a f9b4 	bl	800aad4 <HAL_PWREx_EnableOverDrive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000772:	f000 fe13 	bl	800139c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2105      	movs	r1, #5
 8000794:	4618      	mov	r0, r3
 8000796:	f00a f9ed 	bl	800ab74 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a0:	f000 fdfc 	bl	800139c <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	; 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <MX_ADC1_Init+0x108>)
 80007c8:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <MX_ADC1_Init+0x10c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007cc:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_ADC1_Init+0x108>)
 80007ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_ADC1_Init+0x108>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_ADC1_Init+0x108>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_ADC1_Init+0x108>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_ADC1_Init+0x108>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_ADC1_Init+0x108>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_ADC1_Init+0x108>)
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <MX_ADC1_Init+0x110>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_ADC1_Init+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_ADC1_Init+0x108>)
 8000802:	2205      	movs	r2, #5
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_ADC1_Init+0x108>)
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_ADC1_Init+0x108>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_ADC1_Init+0x108>)
 8000816:	f003 ff95 	bl	8004744 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fdbc 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000824:	2305      	movs	r3, #5
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800082c:	2307      	movs	r3, #7
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_ADC1_Init+0x108>)
 8000836:	f004 f8f7 	bl	8004a28 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fdac 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000844:	2306      	movs	r3, #6
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_ADC1_Init+0x108>)
 8000852:	f004 f8e9 	bl	8004a28 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 fd9e 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000860:	2307      	movs	r3, #7
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_ADC1_Init+0x108>)
 800086e:	f004 f8db 	bl	8004a28 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000878:	f000 fd90 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800087c:	230e      	movs	r3, #14
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ADC1_Init+0x108>)
 800088a:	f004 f8cd 	bl	8004a28 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000894:	f000 fd82 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_ADC1_Init+0x114>)
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800089c:	2305      	movs	r3, #5
 800089e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_ADC1_Init+0x108>)
 80008a6:	f004 f8bf 	bl	8004a28 <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80008b0:	f000 fd74 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000eac 	.word	0x20000eac
 80008c0:	40012000 	.word	0x40012000
 80008c4:	0f000001 	.word	0x0f000001
 80008c8:	10000012 	.word	0x10000012

080008cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008e0:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <MX_ADC2_Init+0x10c>)
 80008e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008ec:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_ADC2_Init+0x108>)
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <MX_ADC2_Init+0x110>)
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_ADC2_Init+0x108>)
 800091a:	2205      	movs	r2, #5
 800091c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000928:	2201      	movs	r2, #1
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800092c:	4829      	ldr	r0, [pc, #164]	; (80009d4 <MX_ADC2_Init+0x108>)
 800092e:	f003 ff09 	bl	8004744 <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 fd30 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000944:	2307      	movs	r3, #7
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4821      	ldr	r0, [pc, #132]	; (80009d4 <MX_ADC2_Init+0x108>)
 800094e:	f004 f86b 	bl	8004a28 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 fd20 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800095c:	2301      	movs	r3, #1
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	481a      	ldr	r0, [pc, #104]	; (80009d4 <MX_ADC2_Init+0x108>)
 800096a:	f004 f85d 	bl	8004a28 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000974:	f000 fd12 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000978:	2302      	movs	r3, #2
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800097c:	2303      	movs	r3, #3
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000986:	f004 f84f 	bl	8004a28 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000990:	f000 fd04 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000994:	2303      	movs	r3, #3
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_ADC2_Init+0x108>)
 80009a2:	f004 f841 	bl	8004a28 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80009ac:	f000 fcf6 	bl	800139c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009b4:	2305      	movs	r3, #5
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_ADC2_Init+0x108>)
 80009be:	f004 f833 	bl	8004a28 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80009c8:	f000 fce8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000498 	.word	0x20000498
 80009d8:	40012100 	.word	0x40012100
 80009dc:	0f000001 	.word	0x0f000001

080009e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_CAN1_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009ec:	2205      	movs	r2, #5
 80009ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009f8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009fc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a00:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a32:	f004 faa9 	bl	8004f88 <HAL_CAN_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 fcae 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000125c 	.word	0x2000125c
 8000a48:	40006400 	.word	0x40006400

08000a4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_CRC_Init+0x20>)
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <MX_CRC_Init+0x24>)
 8000a54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_CRC_Init+0x20>)
 8000a58:	f005 fadb 	bl	8006012 <HAL_CRC_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a62:	f000 fc9b 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000594 	.word	0x20000594
 8000a70:	40023000 	.word	0x40023000

08000a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <MX_I2C1_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_I2C1_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000ab2:	f006 f995 	bl	8006de0 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 fc6e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000540 	.word	0x20000540
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	00061a80 	.word	0x00061a80

08000ad0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	; 0x58
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2220      	movs	r2, #32
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00f ffbf 	bl	8010a8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b0e:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b10:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <MX_TIM1_Init+0x138>)
 8000b12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17;
 8000b14:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b16:	2211      	movs	r2, #17
 8000b18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b20:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3a:	4832      	ldr	r0, [pc, #200]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b3c:	f00b f89a 	bl	800bc74 <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b46:	f000 fc29 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b54:	4619      	mov	r1, r3
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b58:	f00b fc5c 	bl	800c414 <HAL_TIM_ConfigClockSource>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b62:	f000 fc1b 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b66:	4827      	ldr	r0, [pc, #156]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b68:	f00b f973 	bl	800be52 <HAL_TIM_PWM_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b72:	f000 fc13 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b82:	4619      	mov	r1, r3
 8000b84:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b86:	f00c f845 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b90:	f000 fc04 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b94:	2360      	movs	r3, #96	; 0x60
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000bb6:	f00b fb6b 	bl	800c290 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bc0:	f000 fbec 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000be8:	f00c f890 	bl	800cd0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000bf2:	f000 fbd3 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000bf8:	f003 fb14 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20001054 	.word	0x20001054
 8000c08:	40010000 	.word	0x40010000

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c64:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c66:	f00b f805 	bl	800bc74 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c70:	f000 fb94 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c82:	f00b fbc7 	bl	800c414 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c8c:	f000 fb86 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c92:	f00b f8de 	bl	800be52 <HAL_TIM_PWM_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c9c:	f000 fb7e 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000cb0:	f00b ffb0 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cba:	f000 fb6f 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000cd6:	f00b fadb 	bl	800c290 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ce0:	f000 fb5c 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000ce6:	f003 fa9d 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20001174 	.word	0x20001174

08000cf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <MX_TIM3_Init+0xe8>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d30:	2208      	movs	r2, #8
 8000d32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4e:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d50:	f00a ff90 	bl	800bc74 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d5a:	f000 fb1f 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481c      	ldr	r0, [pc, #112]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d6c:	f00b fb52 	bl	800c414 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d76:	f000 fb11 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d7c:	f00b f869 	bl	800be52 <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d86:	f000 fb09 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d9a:	f00b ff3b 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000da4:	f000 fafa 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	220c      	movs	r2, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000dc0:	f00b fa66 	bl	800c290 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dca:	f000 fae7 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000dd0:	f003 fa28 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8000dd4:	bf00      	nop
 8000dd6:	3738      	adds	r7, #56	; 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000e44 	.word	0x20000e44
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000df4:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <MX_TIM6_Init+0x68>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000dfa:	2259      	movs	r2, #89	; 0x59
 8000dfc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e14:	f00a ff2e 	bl	800bc74 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e1e:	f000 fabd 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e30:	f00b fef0 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e3a:	f000 faaf 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20001008 	.word	0x20001008
 8000e4c:	40001000 	.word	0x40001000

08000e50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <MX_TIM7_Init+0x64>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e72:	2263      	movs	r2, #99	; 0x63
 8000e74:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e7e:	f00a fef9 	bl	800bc74 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000e88:	f000 fa88 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e9a:	f00b febb 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000ea4:	f000 fa7a 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200012c4 	.word	0x200012c4
 8000eb4:	40001400 	.word	0x40001400

08000eb8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b092      	sub	sp, #72	; 0x48
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2220      	movs	r2, #32
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00f fdd2 	bl	8010a8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000eea:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <MX_TIM8_Init+0x104>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000ef0:	2211      	movs	r2, #17
 8000ef2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000efc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f14:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f16:	f00a ff9c 	bl	800be52 <HAL_TIM_PWM_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000f20:	f000 fa3c 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	4619      	mov	r1, r3
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f34:	f00b fe6e 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000f3e:	f000 fa2d 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f42:	2370      	movs	r3, #112	; 0x70
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	2204      	movs	r2, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f68:	f00b f992 	bl	800c290 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f72:	f000 fa13 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f9a:	f00b feb7 	bl	800cd0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000fa4:	f000 f9fa 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000faa:	f003 f93b 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3748      	adds	r7, #72	; 0x48
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000044c 	.word	0x2000044c
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_DMA_Init+0x78>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <MX_DMA_Init+0x78>)
 8000fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_DMA_Init+0x78>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_DMA_Init+0x78>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <MX_DMA_Init+0x78>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_DMA_Init+0x78>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2011      	movs	r0, #17
 8001004:	f004 ffc1 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001008:	2011      	movs	r0, #17
 800100a:	f004 ffda 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2038      	movs	r0, #56	; 0x38
 8001014:	f004 ffb9 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001018:	2038      	movs	r0, #56	; 0x38
 800101a:	f004 ffd2 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	203a      	movs	r0, #58	; 0x3a
 8001024:	f004 ffb1 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001028:	203a      	movs	r0, #58	; 0x3a
 800102a:	f004 ffca 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	4b88      	ldr	r3, [pc, #544]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a87      	ldr	r2, [pc, #540]	; (8001278 <MX_GPIO_Init+0x23c>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	4b81      	ldr	r3, [pc, #516]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a80      	ldr	r2, [pc, #512]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b7e      	ldr	r3, [pc, #504]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0320 	and.w	r3, r3, #32
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b7a      	ldr	r3, [pc, #488]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a79      	ldr	r2, [pc, #484]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b77      	ldr	r3, [pc, #476]	; (8001278 <MX_GPIO_Init+0x23c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b73      	ldr	r3, [pc, #460]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a72      	ldr	r2, [pc, #456]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b6c      	ldr	r3, [pc, #432]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a6b      	ldr	r2, [pc, #428]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a64      	ldr	r2, [pc, #400]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b62      	ldr	r3, [pc, #392]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a5d      	ldr	r2, [pc, #372]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <MX_GPIO_Init+0x23c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <MX_GPIO_Init+0x23c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a56      	ldr	r2, [pc, #344]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b54      	ldr	r3, [pc, #336]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	213c      	movs	r1, #60	; 0x3c
 8001136:	4851      	ldr	r0, [pc, #324]	; (800127c <MX_GPIO_Init+0x240>)
 8001138:	f005 fe06 	bl	8006d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001142:	484f      	ldr	r0, [pc, #316]	; (8001280 <MX_GPIO_Init+0x244>)
 8001144:	f005 fe00 	bl	8006d48 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800114e:	484d      	ldr	r0, [pc, #308]	; (8001284 <MX_GPIO_Init+0x248>)
 8001150:	f005 fdfa 	bl	8006d48 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8001154:	233c      	movs	r3, #60	; 0x3c
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4844      	ldr	r0, [pc, #272]	; (800127c <MX_GPIO_Init+0x240>)
 800116c:	f005 fb4c 	bl	8006808 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001170:	230f      	movs	r3, #15
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001174:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4840      	ldr	r0, [pc, #256]	; (8001288 <MX_GPIO_Init+0x24c>)
 8001186:	f005 fb3f 	bl	8006808 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800118a:	f24f 0330 	movw	r3, #61488	; 0xf030
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001190:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	483a      	ldr	r0, [pc, #232]	; (800128c <MX_GPIO_Init+0x250>)
 80011a2:	f005 fb31 	bl	8006808 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80011a6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4830      	ldr	r0, [pc, #192]	; (8001280 <MX_GPIO_Init+0x244>)
 80011c0:	f005 fb22 	bl	8006808 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80011c4:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x248>)
 80011de:	f005 fb13 	bl	8006808 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80011e2:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011e8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4825      	ldr	r0, [pc, #148]	; (8001290 <MX_GPIO_Init+0x254>)
 80011fa:	f005 fb05 	bl	8006808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	2006      	movs	r0, #6
 8001204:	f004 fec1 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001208:	2006      	movs	r0, #6
 800120a:	f004 feda 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	2007      	movs	r0, #7
 8001214:	f004 feb9 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001218:	2007      	movs	r0, #7
 800121a:	f004 fed2 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	2008      	movs	r0, #8
 8001224:	f004 feb1 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001228:	2008      	movs	r0, #8
 800122a:	f004 feca 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	2009      	movs	r0, #9
 8001234:	f004 fea9 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001238:	2009      	movs	r0, #9
 800123a:	f004 fec2 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	200a      	movs	r0, #10
 8001244:	f004 fea1 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001248:	200a      	movs	r0, #10
 800124a:	f004 feba 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	2017      	movs	r0, #23
 8001254:	f004 fe99 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001258:	2017      	movs	r0, #23
 800125a:	f004 feb2 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2101      	movs	r1, #1
 8001262:	2028      	movs	r0, #40	; 0x28
 8001264:	f004 fe91 	bl	8005f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001268:	2028      	movs	r0, #40	; 0x28
 800126a:	f004 feaa 	bl	8005fc2 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40021000 	.word	0x40021000
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40021800 	.word	0x40021800
 8001288:	40021400 	.word	0x40021400
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800

08001294 <PDM_Hard_Code_Config>:

/* USER CODE BEGIN 4 */
void PDM_Hard_Code_Config()
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	PWM_Pin_Status = 0x11;
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <PDM_Hard_Code_Config+0xfc>)
 800129a:	2211      	movs	r2, #17
 800129c:	701a      	strb	r2, [r3, #0]

	Output_Pin[0].Enabled_Inputs[0] = 0x0003;
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <PDM_Hard_Code_Config+0x100>)
 80012a0:	2203      	movs	r2, #3
 80012a2:	801a      	strh	r2, [r3, #0]
	Output_Pin[0].Input_Levels[0] = 0x0001;
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <PDM_Hard_Code_Config+0x100>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	809a      	strh	r2, [r3, #4]
	PWM_Pins[0].PWM_Frequency = PWM_FREQ_1000HZ;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b0:	805a      	strh	r2, [r3, #2]
	PWM_Pins[0].Input_DC_Preset_Enable[0] = 0x0004;
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	809a      	strh	r2, [r3, #4]
	PWM_Pins[0].Input_DC_Preset[0] = 0x0004;
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	811a      	strh	r2, [r3, #8]
	PWM_Pins[0].Duty_Cycle_Preset[0] = 500;
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012c4:	819a      	strh	r2, [r3, #12]

	PWM_Pins[0].Command_Var_Lim[0][0] = 0;
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	845a      	strh	r2, [r3, #34]	; 0x22
	PWM_Pins[0].Command_Var_Lim[0][1] = 1000;
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d2:	849a      	strh	r2, [r3, #36]	; 0x24
	PWM_Pins[0].Command_Var_Lim[1][0] = 700;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012d6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80012da:	84da      	strh	r2, [r3, #38]	; 0x26
	PWM_Pins[0].Command_Var_Lim[1][1] = 900;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012de:	f44f 7261 	mov.w	r2, #900	; 0x384
 80012e2:	851a      	strh	r2, [r3, #40]	; 0x28
	PWM_Pins[0].Map_Lengths[0] = 3;
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	771a      	strb	r2, [r3, #28]
	PWM_Pins[0].Map_Lengths[1] = 3;
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	775a      	strb	r2, [r3, #29]
	PWM_Pins[0].Duty_Cycle_Map[0][0] = 0;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	PWM_Pins[0].Duty_Cycle_Map[0][1] = 200;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 80012fa:	22c8      	movs	r2, #200	; 0xc8
 80012fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	PWM_Pins[0].Duty_Cycle_Map[0][2] = 500;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001302:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	PWM_Pins[0].Duty_Cycle_Map[0][3] = 1000;
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 800130c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001310:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	PWM_Pins[0].Duty_Cycle_Map[1][0] = 0;
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001316:	2200      	movs	r2, #0
 8001318:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	PWM_Pins[0].Duty_Cycle_Map[1][1] = 333;
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 800131e:	f240 124d 	movw	r2, #333	; 0x14d
 8001322:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PWM_Pins[0].Duty_Cycle_Map[1][2] = 667;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001328:	f240 229b 	movw	r2, #667	; 0x29b
 800132c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PWM_Pins[0].Duty_Cycle_Map[1][3] = 1000;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001336:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PWM_Pins[0].Duty_Cycle_Map[2][0] = 0;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 800133c:	2200      	movs	r2, #0
 800133e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	PWM_Pins[0].Duty_Cycle_Map[2][1] = 500;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001344:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001348:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	PWM_Pins[0].Duty_Cycle_Map[2][2] = 750;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 800134e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001352:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	PWM_Pins[0].Duty_Cycle_Map[2][3] = 1000;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800135c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	PWM_Pins[0].Duty_Cycle_Map[3][0] = 0;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001362:	2200      	movs	r2, #0
 8001364:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	PWM_Pins[0].Duty_Cycle_Map[3][1] = 600;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 800136a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800136e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	PWM_Pins[0].Duty_Cycle_Map[3][2] = 900;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 8001374:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001378:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	PWM_Pins[0].Duty_Cycle_Map[3][3] = 1000;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <PDM_Hard_Code_Config+0x104>)
 800137e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001382:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20000ef4 	.word	0x20000ef4
 8001394:	200010a8 	.word	0x200010a8
 8001398:	200005a4 	.word	0x200005a4

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, uint8_t CAN_BaudRate)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f003 fee2 	bl	800517e <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	if(CAN_BaudRate == CAN_Disable)
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <PDM_CAN_Init+0x1c>
	{
		return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e02b      	b.n	800141c <PDM_CAN_Init+0x74>
	}
	else if(CAN_BaudRate == CAN_125kbps)
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d103      	bne.n	80013d2 <PDM_CAN_Init+0x2a>
	{
		hcan->Init.Prescaler = 40;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2228      	movs	r2, #40	; 0x28
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	e013      	b.n	80013fa <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_250kbps)
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d103      	bne.n	80013e0 <PDM_CAN_Init+0x38>
	{
		hcan->Init.Prescaler = 20;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2214      	movs	r2, #20
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	e00c      	b.n	80013fa <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_500kbps)
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d103      	bne.n	80013ee <PDM_CAN_Init+0x46>
	{
		hcan->Init.Prescaler = 10;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	220a      	movs	r2, #10
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	e005      	b.n	80013fa <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_1000kbps)
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d102      	bne.n	80013fa <PDM_CAN_Init+0x52>
	{
		hcan->Init.Prescaler = 5;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2205      	movs	r2, #5
 80013f8:	605a      	str	r2, [r3, #4]
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f003 fdc4 	bl	8004f88 <HAL_CAN_Init>

	//Initialize receive callbacks if there is at least one PWM CAN enabled
	if((PWM_Pin_Status & 0xF0) != 0x00)
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <PDM_CAN_Init+0x7c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <PDM_CAN_Init+0x6c>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800140c:	2102      	movs	r1, #2
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f004 fa67 	bl	80058e2 <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f003 ffb5 	bl	8005384 <HAL_CAN_Start>
 800141a:	4603      	mov	r3, r0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000ef4 	.word	0x20000ef4

08001428 <PDM_PWM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
HAL_StatusTypeDef PDM_PWM_CAN_Filter_Config(CAN_HandleTypeDef *hcan, PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	71fb      	strb	r3, [r7, #7]
	//Double check if PWM CAN is enabled for this specific output
	if(((PWM_Pin_Status >> pwm_out_number) & 0x10) != OUTPUT_PWM_CAN_ENABLE)
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <PDM_PWM_CAN_Filter_Config+0x74>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	fa42 f303 	asr.w	r3, r2, r3
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <PDM_PWM_CAN_Filter_Config+0x26>
		return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e022      	b.n	8001494 <PDM_PWM_CAN_Filter_Config+0x6c>

	CAN_FilterTypeDef CAN_Filter_Config;

	//Sets CAN filter configuration
	CAN_Filter_Config.FilterBank = pwm_out_number;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001456:	2301      	movs	r3, #1
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_Filter_Config.FilterIdHigh = pwm_struct->Command_Var_CAN_ID[0] >> 13;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	0b5b      	lsrs	r3, r3, #13
 8001460:	613b      	str	r3, [r7, #16]
	CAN_Filter_Config.FilterIdLow = (pwm_struct->Command_Var_CAN_ID[0] << 3) & 0xFFF8;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	b29b      	uxth	r3, r3
 800146a:	617b      	str	r3, [r7, #20]
	CAN_Filter_Config.FilterMaskIdHigh = pwm_struct->Command_Var_CAN_ID[1] >> 13;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	0b5b      	lsrs	r3, r3, #13
 8001472:	61bb      	str	r3, [r7, #24]
	CAN_Filter_Config.FilterMaskIdLow = (pwm_struct->Command_Var_CAN_ID[1] << 3) & 0xFFF8;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	b29b      	uxth	r3, r3
 800147c:	61fb      	str	r3, [r7, #28]
	CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
	CAN_Filter_Config.FilterActivation = ENABLE;
 8001482:	2301      	movs	r3, #1
 8001484:	633b      	str	r3, [r7, #48]	; 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &CAN_Filter_Config);
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f003 fe99 	bl	80051c4 <HAL_CAN_ConfigFilter>
 8001492:	4603      	mov	r3, r0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000ef4 	.word	0x20000ef4

080014a0 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

	//Selects CAN transmission ID based on data transmission frequency
	switch(data_freq)
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d821      	bhi.n	80014fc <PDM_CAN_Transmit_Data+0x5c>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <PDM_CAN_Transmit_Data+0x20>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014f5 	.word	0x080014f5
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	080014e5 	.word	0x080014e5
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014d5 	.word	0x080014d5
	{
	case Data_Freq_100Hz:
		CAN_Tx_Message.ExtId = 0x1E35C003;
 80014d4:	4b58      	ldr	r3, [pc, #352]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80014d6:	4a59      	ldr	r2, [pc, #356]	; (800163c <PDM_CAN_Transmit_Data+0x19c>)
 80014d8:	605a      	str	r2, [r3, #4]
		break;
 80014da:	e011      	b.n	8001500 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_80Hz:
		CAN_Tx_Message.ExtId = 0x1E35C004;
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80014de:	4a58      	ldr	r2, [pc, #352]	; (8001640 <PDM_CAN_Transmit_Data+0x1a0>)
 80014e0:	605a      	str	r2, [r3, #4]
		break;
 80014e2:	e00d      	b.n	8001500 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_50Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80014e6:	4a57      	ldr	r2, [pc, #348]	; (8001644 <PDM_CAN_Transmit_Data+0x1a4>)
 80014e8:	605a      	str	r2, [r3, #4]
		break;
 80014ea:	e009      	b.n	8001500 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_25Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 80014ec:	4b52      	ldr	r3, [pc, #328]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80014ee:	4a55      	ldr	r2, [pc, #340]	; (8001644 <PDM_CAN_Transmit_Data+0x1a4>)
 80014f0:	605a      	str	r2, [r3, #4]
		break;
 80014f2:	e005      	b.n	8001500 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_10Hz:
		CAN_Tx_Message.ExtId = 0x1E35C006;
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80014f6:	4a54      	ldr	r2, [pc, #336]	; (8001648 <PDM_CAN_Transmit_Data+0x1a8>)
 80014f8:	605a      	str	r2, [r3, #4]
		break;
 80014fa:	e001      	b.n	8001500 <PDM_CAN_Transmit_Data+0x60>
	default:
		return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e096      	b.n	800162e <PDM_CAN_Transmit_Data+0x18e>
	}

	//Prepares transmission header
	CAN_Tx_Message.DLC = 0;
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
	CAN_Tx_Message.IDE = CAN_ID_EXT;
 8001506:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001508:	2204      	movs	r2, #4
 800150a:	609a      	str	r2, [r3, #8]
	CAN_Tx_Message.RTR = CAN_RTR_DATA;
 800150c:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
	CAN_Tx_Message.TransmitGlobalTime = DISABLE;
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001514:	2200      	movs	r2, #0
 8001516:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	73bb      	strb	r3, [r7, #14]
 800151c:	e068      	b.n	80015f0 <PDM_CAN_Transmit_Data+0x150>
	{
		//Place data and ID inside transmission buffer if the data has the same frequency as selected
		if(Data_Freq_Buffer[i] == data_freq)
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	4a4a      	ldr	r2, [pc, #296]	; (800164c <PDM_CAN_Transmit_Data+0x1ac>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	429a      	cmp	r2, r3
 8001528:	d141      	bne.n	80015ae <PDM_CAN_Transmit_Data+0x10e>
		{
			CAN_Tx_Data[CAN_Tx_Message.DLC]		 = Data_ID_Buffer[i] >> 8;
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	4a48      	ldr	r2, [pc, #288]	; (8001650 <PDM_CAN_Transmit_Data+0x1b0>)
 800152e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b40      	ldr	r3, [pc, #256]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	b2d1      	uxtb	r1, r2
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 800153e:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 1] |= Data_ID_Buffer[i] & 0xFF;
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	3301      	adds	r3, #1
 8001546:	4a43      	ldr	r2, [pc, #268]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	b25a      	sxtb	r2, r3
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	4940      	ldr	r1, [pc, #256]	; (8001650 <PDM_CAN_Transmit_Data+0x1b0>)
 8001550:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001554:	b25b      	sxtb	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b25a      	sxtb	r2, r3
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	3301      	adds	r3, #1
 8001560:	b2d1      	uxtb	r1, r2
 8001562:	4a3c      	ldr	r2, [pc, #240]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 8001564:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 2]  = Data_Buffer[i] >> 8;
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <PDM_CAN_Transmit_Data+0x1b8>)
 800156a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	3302      	adds	r3, #2
 8001578:	b2d1      	uxtb	r1, r2
 800157a:	4a36      	ldr	r2, [pc, #216]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 800157c:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 3] |= Data_Buffer[i] & 0xFF;
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	3303      	adds	r3, #3
 8001584:	4a33      	ldr	r2, [pc, #204]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	b25a      	sxtb	r2, r3
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	4932      	ldr	r1, [pc, #200]	; (8001658 <PDM_CAN_Transmit_Data+0x1b8>)
 800158e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b25a      	sxtb	r2, r3
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	3303      	adds	r3, #3
 800159e:	b2d1      	uxtb	r1, r2
 80015a0:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 80015a2:	54d1      	strb	r1, [r2, r3]

			CAN_Tx_Message.DLC += 4;
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	3304      	adds	r3, #4
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80015ac:	6113      	str	r3, [r2, #16]
		}

		//Sends transmission buffer if it's full
		if(CAN_Tx_Message.DLC == 8)
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d119      	bne.n	80015ea <PDM_CAN_Transmit_Data+0x14a>
		{
			ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <PDM_CAN_Transmit_Data+0x1bc>)
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 80015ba:	491f      	ldr	r1, [pc, #124]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f003 ff6e 	bl	800549e <HAL_CAN_AddTxMessage>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

			//Wait Transmission finish
			for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80015c6:	2300      	movs	r3, #0
 80015c8:	737b      	strb	r3, [r7, #13]
 80015ca:	e002      	b.n	80015d2 <PDM_CAN_Transmit_Data+0x132>
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
 80015ce:	3301      	adds	r3, #1
 80015d0:	737b      	strb	r3, [r7, #13]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f004 f83e 	bl	8005654 <HAL_CAN_GetTxMailboxesFreeLevel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d002      	beq.n	80015e4 <PDM_CAN_Transmit_Data+0x144>
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d9f3      	bls.n	80015cc <PDM_CAN_Transmit_Data+0x12c>

			CAN_Tx_Message.DLC = 0;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80015ea:	7bbb      	ldrb	r3, [r7, #14]
 80015ec:	3301      	adds	r3, #1
 80015ee:	73bb      	strb	r3, [r7, #14]
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	2b1d      	cmp	r3, #29
 80015f4:	d993      	bls.n	800151e <PDM_CAN_Transmit_Data+0x7e>
		}
	}

	//If there is only one data channel not sent, send it alone
	if(CAN_Tx_Message.DLC == 4)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d116      	bne.n	800162c <PDM_CAN_Transmit_Data+0x18c>
	{
		ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <PDM_CAN_Transmit_Data+0x1bc>)
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <PDM_CAN_Transmit_Data+0x1b4>)
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <PDM_CAN_Transmit_Data+0x198>)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f003 ff4a 	bl	800549e <HAL_CAN_AddTxMessage>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800160e:	2300      	movs	r3, #0
 8001610:	733b      	strb	r3, [r7, #12]
 8001612:	e002      	b.n	800161a <PDM_CAN_Transmit_Data+0x17a>
 8001614:	7b3b      	ldrb	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	733b      	strb	r3, [r7, #12]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f004 f81a 	bl	8005654 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b03      	cmp	r3, #3
 8001624:	d002      	beq.n	800162c <PDM_CAN_Transmit_Data+0x18c>
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d9f3      	bls.n	8001614 <PDM_CAN_Transmit_Data+0x174>
	}

	return ret_val;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000e94 	.word	0x20000e94
 800163c:	1e35c003 	.word	0x1e35c003
 8001640:	1e35c004 	.word	0x1e35c004
 8001644:	1e35c005 	.word	0x1e35c005
 8001648:	1e35c006 	.word	0x1e35c006
 800164c:	20000f80 	.word	0x20000f80
 8001650:	200011bc 	.word	0x200011bc
 8001654:	2000130c 	.word	0x2000130c
 8001658:	20001288 	.word	0x20001288
 800165c:	20000448 	.word	0x20000448

08001660 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
	uint8_t receive_flag = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
	uint32_t rx_id = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]

	if(CAN_Rx_Message.IDE == CAN_ID_STD)
 800166e:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <PDM_CAN_Process_Rx_Data+0x184>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d103      	bne.n	800167e <PDM_CAN_Process_Rx_Data+0x1e>
	{
		rx_id = CAN_Rx_Message.StdId;
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <PDM_CAN_Process_Rx_Data+0x184>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	e002      	b.n	8001684 <PDM_CAN_Process_Rx_Data+0x24>
	}else{
		rx_id = CAN_Rx_Message.ExtId;
 800167e:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <PDM_CAN_Process_Rx_Data+0x184>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i = 0; i < 4; i++)
 8001684:	2300      	movs	r3, #0
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	e0a4      	b.n	80017d4 <PDM_CAN_Process_Rx_Data+0x174>
	{
		//Checks if received message contains data to any PWN CAN output
		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[0])
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 800168e:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	3314      	adds	r3, #20
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d13c      	bne.n	800171c <PDM_CAN_Process_Rx_Data+0xbc>
		{
			PWM_Pins[i].Command_Var[0]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0]]) << 8;
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 80016a6:	f44f 710a 	mov.w	r1, #552	; 0x228
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	3310      	adds	r3, #16
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <PDM_CAN_Process_Rx_Data+0x18c>)
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	021a      	lsls	r2, r3, #8
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	b210      	sxth	r0, r2
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 80016c2:	f44f 710a 	mov.w	r1, #552	; 0x228
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	331e      	adds	r3, #30
 80016ce:	4602      	mov	r2, r0
 80016d0:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[0] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0] + 1]) & 0xFF;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 80016d6:	f44f 710a 	mov.w	r1, #552	; 0x228
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	331e      	adds	r3, #30
 80016e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 80016ea:	f44f 700a 	mov.w	r0, #552	; 0x228
 80016ee:	fb00 f303 	mul.w	r3, r0, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	3310      	adds	r3, #16
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	4a3c      	ldr	r2, [pc, #240]	; (80017ec <PDM_CAN_Process_Rx_Data+0x18c>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	b21a      	sxth	r2, r3
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	430a      	orrs	r2, r1
 8001704:	b210      	sxth	r0, r2
 8001706:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 8001708:	f44f 710a 	mov.w	r1, #552	; 0x228
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	331e      	adds	r3, #30
 8001714:	4602      	mov	r2, r0
 8001716:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
		}

		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[1])
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4a32      	ldr	r2, [pc, #200]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 8001720:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	3318      	adds	r3, #24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d13c      	bne.n	80017ae <PDM_CAN_Process_Rx_Data+0x14e>
		{
			PWM_Pins[i].Command_Var[1]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1]]) << 8;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 8001738:	f44f 710a 	mov.w	r1, #552	; 0x228
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3311      	adds	r3, #17
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <PDM_CAN_Process_Rx_Data+0x18c>)
 800174a:	5c9b      	ldrb	r3, [r3, r2]
 800174c:	021a      	lsls	r2, r3, #8
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	b210      	sxth	r0, r2
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 8001754:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	3320      	adds	r3, #32
 8001760:	4602      	mov	r2, r0
 8001762:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[1] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1] + 1]) & 0xFF;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 8001768:	f44f 710a 	mov.w	r1, #552	; 0x228
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	3320      	adds	r3, #32
 8001774:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 800177c:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001780:	fb00 f303 	mul.w	r3, r0, r3
 8001784:	4413      	add	r3, r2
 8001786:	3311      	adds	r3, #17
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <PDM_CAN_Process_Rx_Data+0x18c>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	b21a      	sxth	r2, r3
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	430a      	orrs	r2, r1
 8001796:	b210      	sxth	r0, r2
 8001798:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 800179a:	f44f 710a 	mov.w	r1, #552	; 0x228
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3320      	adds	r3, #32
 80017a6:	4602      	mov	r2, r0
 80017a8:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
		}

		//If the received message contains data to any PWM CAN output, set it's duty cycle
		if(receive_flag == 1)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10c      	bne.n	80017ce <PDM_CAN_Process_Rx_Data+0x16e>
		{
			PDM_PWM_Output_Process(&PWM_Pins[i], i);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f44f 720a 	mov.w	r2, #552	; 0x228
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <PDM_CAN_Process_Rx_Data+0x188>)
 80017c0:	4413      	add	r3, r2
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fefe 	bl	80035c8 <PDM_PWM_Output_Process>
			return;
 80017cc:	e007      	b.n	80017de <PDM_CAN_Process_Rx_Data+0x17e>
	for(uint8_t i = 0; i < 4; i++)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	3301      	adds	r3, #1
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	f67f af57 	bls.w	800168a <PDM_CAN_Process_Rx_Data+0x2a>
		}
	}

	return;
 80017dc:	bf00      	nop
}
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000f20 	.word	0x20000f20
 80017e8:	200005a4 	.word	0x200005a4
 80017ec:	20001168 	.word	0x20001168

080017f0 <PDM_Load_Config_Buffer>:

//Use to load pin, current limit and basic pwm control into a buffer
//uint8_t *data_buffer - buffer to receive configuration
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Load_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 80017f0:	b4b0      	push	{r4, r5, r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	f640 028c 	movw	r2, #2188	; 0x88c
 8001802:	4293      	cmp	r3, r2
 8001804:	f040 833b 	bne.w	8001e7e <PDM_Load_Config_Buffer+0x68e>
		return;

	uint16_t data_index = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	82fb      	strh	r3, [r7, #22]

	//Loads output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	82bb      	strh	r3, [r7, #20]
 8001810:	e0e4      	b.n	80019dc <PDM_Load_Config_Buffer+0x1ec>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001812:	2300      	movs	r3, #0
 8001814:	74fb      	strb	r3, [r7, #19]
 8001816:	e073      	b.n	8001900 <PDM_Load_Config_Buffer+0x110>
		{
			Output_Pin[i].Enabled_Inputs[j]  = data_buffer[data_index++] << 8;
 8001818:	8afb      	ldrh	r3, [r7, #22]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	82fa      	strh	r2, [r7, #22]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	8aba      	ldrh	r2, [r7, #20]
 800182a:	7cf9      	ldrb	r1, [r7, #19]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b29c      	uxth	r4, r3
 8001830:	488b      	ldr	r0, [pc, #556]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	440b      	add	r3, r1
 800183c:	4622      	mov	r2, r4
 800183e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			Output_Pin[i].Enabled_Inputs[j] |= data_buffer[data_index++] & 0xFF;
 8001842:	8afb      	ldrh	r3, [r7, #22]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	82fa      	strh	r2, [r7, #22]
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461c      	mov	r4, r3
 8001852:	8aba      	ldrh	r2, [r7, #20]
 8001854:	7cf9      	ldrb	r1, [r7, #19]
 8001856:	4882      	ldr	r0, [pc, #520]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	440b      	add	r3, r1
 8001862:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001866:	b21a      	sxth	r2, r3
 8001868:	b223      	sxth	r3, r4
 800186a:	4313      	orrs	r3, r2
 800186c:	b21b      	sxth	r3, r3
 800186e:	8aba      	ldrh	r2, [r7, #20]
 8001870:	7cf9      	ldrb	r1, [r7, #19]
 8001872:	b29c      	uxth	r4, r3
 8001874:	487a      	ldr	r0, [pc, #488]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	440b      	add	r3, r1
 8001880:	4622      	mov	r2, r4
 8001882:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

			Output_Pin[i].Input_Levels[j]	 = data_buffer[data_index++] << 8;
 8001886:	8afb      	ldrh	r3, [r7, #22]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	82fa      	strh	r2, [r7, #22]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	8aba      	ldrh	r2, [r7, #20]
 8001898:	7cf9      	ldrb	r1, [r7, #19]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b29c      	uxth	r4, r3
 800189e:	4870      	ldr	r0, [pc, #448]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	440b      	add	r3, r1
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4403      	add	r3, r0
 80018ae:	4622      	mov	r2, r4
 80018b0:	809a      	strh	r2, [r3, #4]
			Output_Pin[i].Input_Levels[j]	|= data_buffer[data_index++] & 0xFF;
 80018b2:	8afb      	ldrh	r3, [r7, #22]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	82fa      	strh	r2, [r7, #22]
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461c      	mov	r4, r3
 80018c2:	8aba      	ldrh	r2, [r7, #20]
 80018c4:	7cf9      	ldrb	r1, [r7, #19]
 80018c6:	4866      	ldr	r0, [pc, #408]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	440b      	add	r3, r1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4403      	add	r3, r0
 80018d6:	889b      	ldrh	r3, [r3, #4]
 80018d8:	b21a      	sxth	r2, r3
 80018da:	b223      	sxth	r3, r4
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21b      	sxth	r3, r3
 80018e0:	8aba      	ldrh	r2, [r7, #20]
 80018e2:	7cf9      	ldrb	r1, [r7, #19]
 80018e4:	b29c      	uxth	r4, r3
 80018e6:	485e      	ldr	r0, [pc, #376]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	440b      	add	r3, r1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4403      	add	r3, r0
 80018f6:	4622      	mov	r2, r4
 80018f8:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 2 ; j++)
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	3301      	adds	r3, #1
 80018fe:	74fb      	strb	r3, [r7, #19]
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d988      	bls.n	8001818 <PDM_Load_Config_Buffer+0x28>
		}
		Output_Pin[i].Current_Thresholds   = data_buffer[data_index++] << 8;
 8001906:	8afb      	ldrh	r3, [r7, #22]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	82fa      	strh	r2, [r7, #22]
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	8aba      	ldrh	r2, [r7, #20]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b298      	uxth	r0, r3
 800191c:	4950      	ldr	r1, [pc, #320]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3308      	adds	r3, #8
 800192a:	4602      	mov	r2, r0
 800192c:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Current_Thresholds  |= data_buffer[data_index++] & 0xFF;
 800192e:	8afb      	ldrh	r3, [r7, #22]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	82fa      	strh	r2, [r7, #22]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	8aba      	ldrh	r2, [r7, #20]
 8001940:	4947      	ldr	r1, [pc, #284]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3308      	adds	r3, #8
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b21a      	sxth	r2, r3
 8001952:	b203      	sxth	r3, r0
 8001954:	4313      	orrs	r3, r2
 8001956:	b21b      	sxth	r3, r3
 8001958:	8aba      	ldrh	r2, [r7, #20]
 800195a:	b298      	uxth	r0, r3
 800195c:	4940      	ldr	r1, [pc, #256]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3308      	adds	r3, #8
 800196a:	4602      	mov	r2, r0
 800196c:	801a      	strh	r2, [r3, #0]

		Output_Pin[i].Timeout_Output_Fuse  = data_buffer[data_index++] << 8;
 800196e:	8afb      	ldrh	r3, [r7, #22]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	82fa      	strh	r2, [r7, #22]
 8001974:	461a      	mov	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	8aba      	ldrh	r2, [r7, #20]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b298      	uxth	r0, r3
 8001984:	4936      	ldr	r1, [pc, #216]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	330a      	adds	r3, #10
 8001992:	4602      	mov	r2, r0
 8001994:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Timeout_Output_Fuse |= data_buffer[data_index++] & 0xFF;
 8001996:	8afb      	ldrh	r3, [r7, #22]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	82fa      	strh	r2, [r7, #22]
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	8aba      	ldrh	r2, [r7, #20]
 80019a8:	492d      	ldr	r1, [pc, #180]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	330a      	adds	r3, #10
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	b203      	sxth	r3, r0
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21b      	sxth	r3, r3
 80019c0:	8aba      	ldrh	r2, [r7, #20]
 80019c2:	b298      	uxth	r0, r3
 80019c4:	4926      	ldr	r1, [pc, #152]	; (8001a60 <PDM_Load_Config_Buffer+0x270>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	330a      	adds	r3, #10
 80019d2:	4602      	mov	r2, r0
 80019d4:	801a      	strh	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 80019d6:	8abb      	ldrh	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	82bb      	strh	r3, [r7, #20]
 80019dc:	8abb      	ldrh	r3, [r7, #20]
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	f67f af17 	bls.w	8001812 <PDM_Load_Config_Buffer+0x22>
	}

	//Loads each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	823b      	strh	r3, [r7, #16]
 80019e8:	e00c      	b.n	8001a04 <PDM_Load_Config_Buffer+0x214>
	{
		Data_Freq_Buffer[i] = data_buffer[data_index++];
 80019ea:	8afb      	ldrh	r3, [r7, #22]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	82fa      	strh	r2, [r7, #22]
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	441a      	add	r2, r3
 80019f6:	8a3b      	ldrh	r3, [r7, #16]
 80019f8:	7811      	ldrb	r1, [r2, #0]
 80019fa:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <PDM_Load_Config_Buffer+0x274>)
 80019fc:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80019fe:	8a3b      	ldrh	r3, [r7, #16]
 8001a00:	3301      	adds	r3, #1
 8001a02:	823b      	strh	r3, [r7, #16]
 8001a04:	8a3b      	ldrh	r3, [r7, #16]
 8001a06:	2b1d      	cmp	r3, #29
 8001a08:	d9ef      	bls.n	80019ea <PDM_Load_Config_Buffer+0x1fa>
	}

	//Loads CAN bus baud rate
	CAN_Baud_Rate = data_buffer[data_index++];
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	82fa      	strh	r2, [r7, #22]
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <PDM_Load_Config_Buffer+0x278>)
 8001a1a:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs general configuration (PWM CAN and PWM enabled)
	PWM_Pin_Status = data_buffer[data_index++];
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	82fa      	strh	r2, [r7, #22]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <PDM_Load_Config_Buffer+0x27c>)
 8001a2c:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	81fb      	strh	r3, [r7, #14]
 8001a32:	e1b6      	b.n	8001da2 <PDM_Load_Config_Buffer+0x5b2>
	{
		PWM_Pins[i].PWM_Frequency = data_buffer[data_index++];
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	82fa      	strh	r2, [r7, #22]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	b290      	uxth	r0, r2
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <PDM_Load_Config_Buffer+0x280>)
 8001a48:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3302      	adds	r3, #2
 8001a54:	4602      	mov	r2, r0
 8001a56:	801a      	strh	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	737b      	strb	r3, [r7, #13]
 8001a5c:	e081      	b.n	8001b62 <PDM_Load_Config_Buffer+0x372>
 8001a5e:	bf00      	nop
 8001a60:	200010a8 	.word	0x200010a8
 8001a64:	20000f80 	.word	0x20000f80
 8001a68:	2000109c 	.word	0x2000109c
 8001a6c:	20000ef4 	.word	0x20000ef4
 8001a70:	200005a4 	.word	0x200005a4
		{
			PWM_Pins[i].Input_DC_Preset_Enable[j]  = data_buffer[data_index++] << 8;
 8001a74:	8afb      	ldrh	r3, [r7, #22]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	82fa      	strh	r2, [r7, #22]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b299      	uxth	r1, r3
 8001a84:	89fa      	ldrh	r2, [r7, #14]
 8001a86:	7b7b      	ldrb	r3, [r7, #13]
 8001a88:	0209      	lsls	r1, r1, #8
 8001a8a:	b28c      	uxth	r4, r1
 8001a8c:	4938      	ldr	r1, [pc, #224]	; (8001b70 <PDM_Load_Config_Buffer+0x380>)
 8001a8e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001a92:	fb00 f202 	mul.w	r2, r0, r2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	440b      	add	r3, r1
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset_Enable[j] |= data_buffer[data_index++] & 0xFF;
 8001aa0:	8afb      	ldrh	r3, [r7, #22]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	82fa      	strh	r2, [r7, #22]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461c      	mov	r4, r3
 8001ab0:	89fa      	ldrh	r2, [r7, #14]
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	492e      	ldr	r1, [pc, #184]	; (8001b70 <PDM_Load_Config_Buffer+0x380>)
 8001ab6:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001aba:	fb00 f202 	mul.w	r2, r0, r2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	440b      	add	r3, r1
 8001ac4:	889b      	ldrh	r3, [r3, #4]
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	b223      	sxth	r3, r4
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b219      	sxth	r1, r3
 8001ace:	89fa      	ldrh	r2, [r7, #14]
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	b28c      	uxth	r4, r1
 8001ad4:	4926      	ldr	r1, [pc, #152]	; (8001b70 <PDM_Load_Config_Buffer+0x380>)
 8001ad6:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001ada:	fb00 f202 	mul.w	r2, r0, r2
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	440b      	add	r3, r1
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Input_DC_Preset[j] 		   = data_buffer[data_index++] << 8;
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	82fa      	strh	r2, [r7, #22]
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b299      	uxth	r1, r3
 8001af8:	89fa      	ldrh	r2, [r7, #14]
 8001afa:	7b7b      	ldrb	r3, [r7, #13]
 8001afc:	0209      	lsls	r1, r1, #8
 8001afe:	b28c      	uxth	r4, r1
 8001b00:	491b      	ldr	r1, [pc, #108]	; (8001b70 <PDM_Load_Config_Buffer+0x380>)
 8001b02:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001b06:	fb00 f202 	mul.w	r2, r0, r2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	4622      	mov	r2, r4
 8001b10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PWM_Pins[i].Input_DC_Preset[j] 		  |= data_buffer[data_index++] & 0xFF;
 8001b14:	8afb      	ldrh	r3, [r7, #22]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	82fa      	strh	r2, [r7, #22]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461c      	mov	r4, r3
 8001b24:	89fa      	ldrh	r2, [r7, #14]
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	4911      	ldr	r1, [pc, #68]	; (8001b70 <PDM_Load_Config_Buffer+0x380>)
 8001b2a:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001b2e:	fb00 f202 	mul.w	r2, r0, r2
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	b223      	sxth	r3, r4
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b219      	sxth	r1, r3
 8001b42:	89fa      	ldrh	r2, [r7, #14]
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	b28c      	uxth	r4, r1
 8001b48:	4909      	ldr	r1, [pc, #36]	; (8001b70 <PDM_Load_Config_Buffer+0x380>)
 8001b4a:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001b4e:	fb00 f202 	mul.w	r2, r0, r2
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	4622      	mov	r2, r4
 8001b58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t j = 0; j < 4; j++)
 8001b5c:	7b7b      	ldrb	r3, [r7, #13]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	737b      	strb	r3, [r7, #13]
 8001b62:	7b7b      	ldrb	r3, [r7, #13]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d985      	bls.n	8001a74 <PDM_Load_Config_Buffer+0x284>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	733b      	strb	r3, [r7, #12]
 8001b6c:	e112      	b.n	8001d94 <PDM_Load_Config_Buffer+0x5a4>
 8001b6e:	bf00      	nop
 8001b70:	200005a4 	.word	0x200005a4
		{
			PWM_Pins[i].Duty_Cycle_Preset[j]	 = data_buffer[data_index++] << 8;
 8001b74:	8afb      	ldrh	r3, [r7, #22]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	82fa      	strh	r2, [r7, #22]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b299      	uxth	r1, r3
 8001b84:	89fa      	ldrh	r2, [r7, #14]
 8001b86:	7b3b      	ldrb	r3, [r7, #12]
 8001b88:	0209      	lsls	r1, r1, #8
 8001b8a:	b28c      	uxth	r4, r1
 8001b8c:	498b      	ldr	r1, [pc, #556]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001b8e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001b92:	fb00 f202 	mul.w	r2, r0, r2
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	440b      	add	r3, r1
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Duty_Cycle_Preset[j]	|= data_buffer[data_index++] & 0xFF;
 8001ba2:	8afb      	ldrh	r3, [r7, #22]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	82fa      	strh	r2, [r7, #22]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461c      	mov	r4, r3
 8001bb2:	89fa      	ldrh	r2, [r7, #14]
 8001bb4:	7b3b      	ldrb	r3, [r7, #12]
 8001bb6:	4981      	ldr	r1, [pc, #516]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001bb8:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001bbc:	fb00 f202 	mul.w	r2, r0, r2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	889b      	ldrh	r3, [r3, #4]
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	b223      	sxth	r3, r4
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b219      	sxth	r1, r3
 8001bd2:	89fa      	ldrh	r2, [r7, #14]
 8001bd4:	7b3b      	ldrb	r3, [r7, #12]
 8001bd6:	b28c      	uxth	r4, r1
 8001bd8:	4978      	ldr	r1, [pc, #480]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001bda:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001bde:	fb00 f202 	mul.w	r2, r0, r2
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	440b      	add	r3, r1
 8001bea:	4622      	mov	r2, r4
 8001bec:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Command_Var_Position[j]  = data_buffer[data_index++];
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	82fa      	strh	r2, [r7, #22]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	1899      	adds	r1, r3, r2
 8001bfa:	89fa      	ldrh	r2, [r7, #14]
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	780c      	ldrb	r4, [r1, #0]
 8001c00:	496e      	ldr	r1, [pc, #440]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001c02:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001c06:	fb00 f202 	mul.w	r2, r0, r2
 8001c0a:	440a      	add	r2, r1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3310      	adds	r3, #16
 8001c10:	4622      	mov	r2, r4
 8001c12:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_CAN_ID[j]	 = data_buffer[data_index++] << 24;
 8001c14:	8afb      	ldrh	r3, [r7, #22]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	82fa      	strh	r2, [r7, #22]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	0619      	lsls	r1, r3, #24
 8001c24:	89fa      	ldrh	r2, [r7, #14]
 8001c26:	7b3b      	ldrb	r3, [r7, #12]
 8001c28:	460c      	mov	r4, r1
 8001c2a:	4964      	ldr	r1, [pc, #400]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001c2c:	208a      	movs	r0, #138	; 0x8a
 8001c2e:	fb00 f202 	mul.w	r2, r0, r2
 8001c32:	4413      	add	r3, r2
 8001c34:	3304      	adds	r3, #4
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	605c      	str	r4, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 16;
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	82fa      	strh	r2, [r7, #22]
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	041c      	lsls	r4, r3, #16
 8001c4c:	89fa      	ldrh	r2, [r7, #14]
 8001c4e:	7b3b      	ldrb	r3, [r7, #12]
 8001c50:	495a      	ldr	r1, [pc, #360]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001c52:	208a      	movs	r0, #138	; 0x8a
 8001c54:	fb00 f202 	mul.w	r2, r0, r2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4620      	mov	r0, r4
 8001c64:	89f9      	ldrh	r1, [r7, #14]
 8001c66:	7b3b      	ldrb	r3, [r7, #12]
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	4854      	ldr	r0, [pc, #336]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001c6c:	248a      	movs	r4, #138	; 0x8a
 8001c6e:	fb04 f101 	mul.w	r1, r4, r1
 8001c72:	440b      	add	r3, r1
 8001c74:	3304      	adds	r3, #4
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4403      	add	r3, r0
 8001c7a:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 8;
 8001c7c:	8afb      	ldrh	r3, [r7, #22]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	82fa      	strh	r2, [r7, #22]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	021c      	lsls	r4, r3, #8
 8001c8c:	89fa      	ldrh	r2, [r7, #14]
 8001c8e:	7b3b      	ldrb	r3, [r7, #12]
 8001c90:	494a      	ldr	r1, [pc, #296]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001c92:	208a      	movs	r0, #138	; 0x8a
 8001c94:	fb00 f202 	mul.w	r2, r0, r2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	89f9      	ldrh	r1, [r7, #14]
 8001ca6:	7b3b      	ldrb	r3, [r7, #12]
 8001ca8:	4302      	orrs	r2, r0
 8001caa:	4844      	ldr	r0, [pc, #272]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001cac:	248a      	movs	r4, #138	; 0x8a
 8001cae:	fb04 f101 	mul.w	r1, r4, r1
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4403      	add	r3, r0
 8001cba:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] & 0xFF;
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	82fa      	strh	r2, [r7, #22]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461c      	mov	r4, r3
 8001ccc:	89fa      	ldrh	r2, [r7, #14]
 8001cce:	7b3b      	ldrb	r3, [r7, #12]
 8001cd0:	493a      	ldr	r1, [pc, #232]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001cd2:	208a      	movs	r0, #138	; 0x8a
 8001cd4:	fb00 f202 	mul.w	r2, r0, r2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	89f9      	ldrh	r1, [r7, #14]
 8001ce6:	7b3b      	ldrb	r3, [r7, #12]
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	4834      	ldr	r0, [pc, #208]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001cec:	248a      	movs	r4, #138	; 0x8a
 8001cee:	fb04 f101 	mul.w	r1, r4, r1
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4403      	add	r3, r0
 8001cfa:	605a      	str	r2, [r3, #4]

			PWM_Pins[i].Map_Lengths[j]			 = data_buffer[data_index++] & 0xFF;
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	82fa      	strh	r2, [r7, #22]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1899      	adds	r1, r3, r2
 8001d08:	89fa      	ldrh	r2, [r7, #14]
 8001d0a:	7b3b      	ldrb	r3, [r7, #12]
 8001d0c:	780c      	ldrb	r4, [r1, #0]
 8001d0e:	492b      	ldr	r1, [pc, #172]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001d10:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001d14:	fb00 f202 	mul.w	r2, r0, r2
 8001d18:	440a      	add	r2, r1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	331c      	adds	r3, #28
 8001d1e:	4622      	mov	r2, r4
 8001d20:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_Lim[j][0]	 = data_buffer[data_index++] << 8;
 8001d22:	8afb      	ldrh	r3, [r7, #22]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	82fa      	strh	r2, [r7, #22]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	0219      	lsls	r1, r3, #8
 8001d32:	89fa      	ldrh	r2, [r7, #14]
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	b20c      	sxth	r4, r1
 8001d38:	4920      	ldr	r1, [pc, #128]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001d3a:	208a      	movs	r0, #138	; 0x8a
 8001d3c:	fb00 f202 	mul.w	r2, r0, r2
 8001d40:	4413      	add	r3, r2
 8001d42:	3308      	adds	r3, #8
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	4622      	mov	r2, r4
 8001d4a:	805a      	strh	r2, [r3, #2]
			PWM_Pins[i].Command_Var_Lim[j][1]	|= data_buffer[data_index++] & 0xFF;
 8001d4c:	8afb      	ldrh	r3, [r7, #22]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	82fa      	strh	r2, [r7, #22]
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	89fa      	ldrh	r2, [r7, #14]
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001d62:	208a      	movs	r0, #138	; 0x8a
 8001d64:	fb00 f202 	mul.w	r2, r0, r2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f9b3 0024 	ldrsh.w	r0, [r3, #36]	; 0x24
 8001d72:	b221      	sxth	r1, r4
 8001d74:	89fa      	ldrh	r2, [r7, #14]
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	4301      	orrs	r1, r0
 8001d7a:	b20c      	sxth	r4, r1
 8001d7c:	490f      	ldr	r1, [pc, #60]	; (8001dbc <PDM_Load_Config_Buffer+0x5cc>)
 8001d7e:	208a      	movs	r0, #138	; 0x8a
 8001d80:	fb00 f202 	mul.w	r2, r0, r2
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	849a      	strh	r2, [r3, #36]	; 0x24
		for(uint8_t j = 0; j < 2; j++)
 8001d8e:	7b3b      	ldrb	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	733b      	strb	r3, [r7, #12]
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f67f aeec 	bls.w	8001b74 <PDM_Load_Config_Buffer+0x384>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	81fb      	strh	r3, [r7, #14]
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	f67f ae45 	bls.w	8001a34 <PDM_Load_Config_Buffer+0x244>
		}
	}

	//Loads PWM 3D maps
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	817b      	strh	r3, [r7, #10]
 8001dae:	e062      	b.n	8001e76 <PDM_Load_Config_Buffer+0x686>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	727b      	strb	r3, [r7, #9]
 8001db4:	e059      	b.n	8001e6a <PDM_Load_Config_Buffer+0x67a>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	723b      	strb	r3, [r7, #8]
 8001dba:	e050      	b.n	8001e5e <PDM_Load_Config_Buffer+0x66e>
 8001dbc:	200005a4 	.word	0x200005a4
			{
				PWM_Pins[i].Duty_Cycle_Map[j][k]  = data_buffer[data_index++] << 8;
 8001dc0:	8afb      	ldrh	r3, [r7, #22]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	82fa      	strh	r2, [r7, #22]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	8978      	ldrh	r0, [r7, #10]
 8001dd2:	7a7a      	ldrb	r2, [r7, #9]
 8001dd4:	7a39      	ldrb	r1, [r7, #8]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b29d      	uxth	r5, r3
 8001dda:	4c2b      	ldr	r4, [pc, #172]	; (8001e88 <PDM_Load_Config_Buffer+0x698>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001de6:	fb02 f200 	mul.w	r2, r2, r0
 8001dea:	4413      	add	r3, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	3330      	adds	r3, #48	; 0x30
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4423      	add	r3, r4
 8001df4:	462a      	mov	r2, r5
 8001df6:	80da      	strh	r2, [r3, #6]
				PWM_Pins[i].Duty_Cycle_Map[j][k] |= data_buffer[data_index++] & 0xFF;
 8001df8:	8afb      	ldrh	r3, [r7, #22]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	82fa      	strh	r2, [r7, #22]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461d      	mov	r5, r3
 8001e08:	8978      	ldrh	r0, [r7, #10]
 8001e0a:	7a7a      	ldrb	r2, [r7, #9]
 8001e0c:	7a39      	ldrb	r1, [r7, #8]
 8001e0e:	4c1e      	ldr	r4, [pc, #120]	; (8001e88 <PDM_Load_Config_Buffer+0x698>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001e1a:	fb02 f200 	mul.w	r2, r2, r0
 8001e1e:	4413      	add	r3, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	3330      	adds	r3, #48	; 0x30
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4423      	add	r3, r4
 8001e28:	88db      	ldrh	r3, [r3, #6]
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	b22b      	sxth	r3, r5
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	8978      	ldrh	r0, [r7, #10]
 8001e34:	7a7a      	ldrb	r2, [r7, #9]
 8001e36:	7a39      	ldrb	r1, [r7, #8]
 8001e38:	b29d      	uxth	r5, r3
 8001e3a:	4c13      	ldr	r4, [pc, #76]	; (8001e88 <PDM_Load_Config_Buffer+0x698>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001e46:	fb02 f200 	mul.w	r2, r2, r0
 8001e4a:	4413      	add	r3, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3330      	adds	r3, #48	; 0x30
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4423      	add	r3, r4
 8001e54:	462a      	mov	r2, r5
 8001e56:	80da      	strh	r2, [r3, #6]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001e58:	7a3b      	ldrb	r3, [r7, #8]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	723b      	strb	r3, [r7, #8]
 8001e5e:	7a3b      	ldrb	r3, [r7, #8]
 8001e60:	2b0e      	cmp	r3, #14
 8001e62:	d9ad      	bls.n	8001dc0 <PDM_Load_Config_Buffer+0x5d0>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001e64:	7a7b      	ldrb	r3, [r7, #9]
 8001e66:	3301      	adds	r3, #1
 8001e68:	727b      	strb	r3, [r7, #9]
 8001e6a:	7a7b      	ldrb	r3, [r7, #9]
 8001e6c:	2b0e      	cmp	r3, #14
 8001e6e:	d9a2      	bls.n	8001db6 <PDM_Load_Config_Buffer+0x5c6>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001e70:	897b      	ldrh	r3, [r7, #10]
 8001e72:	3301      	adds	r3, #1
 8001e74:	817b      	strh	r3, [r7, #10]
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d999      	bls.n	8001db0 <PDM_Load_Config_Buffer+0x5c0>
			}
		}
	}

	return;
 8001e7c:	e000      	b.n	8001e80 <PDM_Load_Config_Buffer+0x690>
		return;
 8001e7e:	bf00      	nop
}
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bcb0      	pop	{r4, r5, r7}
 8001e86:	4770      	bx	lr
 8001e88:	200005a4 	.word	0x200005a4

08001e8c <PDM_Write_Config_Buffer>:

//Use to write pin, current limit and basic pwm control into their respective variables
//uint8_t *data_buffer - buffer to send config
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Write_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001e8c:	b490      	push	{r4, r7}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	f640 028c 	movw	r2, #2188	; 0x88c
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 826f 	bne.w	8002382 <PDM_Write_Config_Buffer+0x4f6>
		return;

	uint16_t data_index = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	82fb      	strh	r3, [r7, #22]

	//Writes output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	82bb      	strh	r3, [r7, #20]
 8001eac:	e0a1      	b.n	8001ff2 <PDM_Write_Config_Buffer+0x166>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	74fb      	strb	r3, [r7, #19]
 8001eb2:	e050      	b.n	8001f56 <PDM_Write_Config_Buffer+0xca>
		{
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] >> 8;
 8001eb4:	8aba      	ldrh	r2, [r7, #20]
 8001eb6:	7cf9      	ldrb	r1, [r7, #19]
 8001eb8:	489a      	ldr	r0, [pc, #616]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	8afb      	ldrh	r3, [r7, #22]
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	82f9      	strh	r1, [r7, #22]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	440b      	add	r3, r1
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] & 0xFF;
 8001edc:	8aba      	ldrh	r2, [r7, #20]
 8001ede:	7cf9      	ldrb	r1, [r7, #19]
 8001ee0:	4890      	ldr	r0, [pc, #576]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8001ef0:	8afb      	ldrh	r3, [r7, #22]
 8001ef2:	1c59      	adds	r1, r3, #1
 8001ef4:	82f9      	strh	r1, [r7, #22]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	440b      	add	r3, r1
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] >> 8;
 8001f00:	8aba      	ldrh	r2, [r7, #20]
 8001f02:	7cf9      	ldrb	r1, [r7, #19]
 8001f04:	4887      	ldr	r0, [pc, #540]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	440b      	add	r3, r1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4403      	add	r3, r0
 8001f14:	889b      	ldrh	r3, [r3, #4]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	8afb      	ldrh	r3, [r7, #22]
 8001f1c:	1c59      	adds	r1, r3, #1
 8001f1e:	82f9      	strh	r1, [r7, #22]
 8001f20:	4619      	mov	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	440b      	add	r3, r1
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] & 0xFF;
 8001f2a:	8aba      	ldrh	r2, [r7, #20]
 8001f2c:	7cf9      	ldrb	r1, [r7, #19]
 8001f2e:	487d      	ldr	r0, [pc, #500]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	440b      	add	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4403      	add	r3, r0
 8001f3e:	889a      	ldrh	r2, [r3, #4]
 8001f40:	8afb      	ldrh	r3, [r7, #22]
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	82f9      	strh	r1, [r7, #22]
 8001f46:	4619      	mov	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2 ; j++)
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	3301      	adds	r3, #1
 8001f54:	74fb      	strb	r3, [r7, #19]
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d9ab      	bls.n	8001eb4 <PDM_Write_Config_Buffer+0x28>
		}
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds >> 8;
 8001f5c:	8aba      	ldrh	r2, [r7, #20]
 8001f5e:	4971      	ldr	r1, [pc, #452]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	8afb      	ldrh	r3, [r7, #22]
 8001f74:	1c59      	adds	r1, r3, #1
 8001f76:	82f9      	strh	r1, [r7, #22]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	440b      	add	r3, r1
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds & 0xFF;
 8001f82:	8aba      	ldrh	r2, [r7, #20]
 8001f84:	4967      	ldr	r1, [pc, #412]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3308      	adds	r3, #8
 8001f92:	881a      	ldrh	r2, [r3, #0]
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	82f9      	strh	r1, [r7, #22]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]

		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse >> 8;
 8001fa4:	8aba      	ldrh	r2, [r7, #20]
 8001fa6:	495f      	ldr	r1, [pc, #380]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	330a      	adds	r3, #10
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	8afb      	ldrh	r3, [r7, #22]
 8001fbc:	1c59      	adds	r1, r3, #1
 8001fbe:	82f9      	strh	r1, [r7, #22]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse & 0xFF;
 8001fca:	8aba      	ldrh	r2, [r7, #20]
 8001fcc:	4955      	ldr	r1, [pc, #340]	; (8002124 <PDM_Write_Config_Buffer+0x298>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	330a      	adds	r3, #10
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	8afb      	ldrh	r3, [r7, #22]
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	82f9      	strh	r1, [r7, #22]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001fec:	8abb      	ldrh	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	82bb      	strh	r3, [r7, #20]
 8001ff2:	8abb      	ldrh	r3, [r7, #20]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	f67f af5a 	bls.w	8001eae <PDM_Write_Config_Buffer+0x22>
	}

	//Writes each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	823b      	strh	r3, [r7, #16]
 8001ffe:	e00c      	b.n	800201a <PDM_Write_Config_Buffer+0x18e>
	{
		data_buffer[data_index++] = Data_Freq_Buffer[i];
 8002000:	8a3a      	ldrh	r2, [r7, #16]
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	1c59      	adds	r1, r3, #1
 8002006:	82f9      	strh	r1, [r7, #22]
 8002008:	4619      	mov	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	440b      	add	r3, r1
 800200e:	4946      	ldr	r1, [pc, #280]	; (8002128 <PDM_Write_Config_Buffer+0x29c>)
 8002010:	5c8a      	ldrb	r2, [r1, r2]
 8002012:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8002014:	8a3b      	ldrh	r3, [r7, #16]
 8002016:	3301      	adds	r3, #1
 8002018:	823b      	strh	r3, [r7, #16]
 800201a:	8a3b      	ldrh	r3, [r7, #16]
 800201c:	2b1d      	cmp	r3, #29
 800201e:	d9ef      	bls.n	8002000 <PDM_Write_Config_Buffer+0x174>
	}

	//Writes CAN bus baud rate
	data_buffer[data_index++] = CAN_Baud_Rate;
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	82fa      	strh	r2, [r7, #22]
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	4a3f      	ldr	r2, [pc, #252]	; (800212c <PDM_Write_Config_Buffer+0x2a0>)
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs general configuration (PWM CAN and PWM enabled)
	data_buffer[data_index++] = PWM_Pin_Status;
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	82fa      	strh	r2, [r7, #22]
 8002038:	461a      	mov	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <PDM_Write_Config_Buffer+0x2a4>)
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002044:	2300      	movs	r3, #0
 8002046:	81fb      	strh	r3, [r7, #14]
 8002048:	e147      	b.n	80022da <PDM_Write_Config_Buffer+0x44e>
	{
		data_buffer[data_index++] = PWM_Pins[i].PWM_Frequency;
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	4a39      	ldr	r2, [pc, #228]	; (8002134 <PDM_Write_Config_Buffer+0x2a8>)
 800204e:	f44f 710a 	mov.w	r1, #552	; 0x228
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3302      	adds	r3, #2
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	8afb      	ldrh	r3, [r7, #22]
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	82f9      	strh	r1, [r7, #22]
 8002062:	4619      	mov	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	440b      	add	r3, r1
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 800206c:	2300      	movs	r3, #0
 800206e:	737b      	strb	r3, [r7, #13]
 8002070:	e052      	b.n	8002118 <PDM_Write_Config_Buffer+0x28c>
		{
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] >> 8;
 8002072:	89fa      	ldrh	r2, [r7, #14]
 8002074:	7b7b      	ldrb	r3, [r7, #13]
 8002076:	492f      	ldr	r1, [pc, #188]	; (8002134 <PDM_Write_Config_Buffer+0x2a8>)
 8002078:	f44f 708a 	mov.w	r0, #276	; 0x114
 800207c:	fb00 f202 	mul.w	r2, r0, r2
 8002080:	4413      	add	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	889b      	ldrh	r3, [r3, #4]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	b29a      	uxth	r2, r3
 800208c:	8afb      	ldrh	r3, [r7, #22]
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	82f9      	strh	r1, [r7, #22]
 8002092:	4619      	mov	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	440b      	add	r3, r1
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] & 0xFF;
 800209c:	89fa      	ldrh	r2, [r7, #14]
 800209e:	7b7b      	ldrb	r3, [r7, #13]
 80020a0:	4924      	ldr	r1, [pc, #144]	; (8002134 <PDM_Write_Config_Buffer+0x2a8>)
 80020a2:	f44f 708a 	mov.w	r0, #276	; 0x114
 80020a6:	fb00 f202 	mul.w	r2, r0, r2
 80020aa:	4413      	add	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	440b      	add	r3, r1
 80020b0:	889a      	ldrh	r2, [r3, #4]
 80020b2:	8afb      	ldrh	r3, [r7, #22]
 80020b4:	1c59      	adds	r1, r3, #1
 80020b6:	82f9      	strh	r1, [r7, #22]
 80020b8:	4619      	mov	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	440b      	add	r3, r1
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] >> 8;
 80020c2:	89fa      	ldrh	r2, [r7, #14]
 80020c4:	7b7b      	ldrb	r3, [r7, #13]
 80020c6:	491b      	ldr	r1, [pc, #108]	; (8002134 <PDM_Write_Config_Buffer+0x2a8>)
 80020c8:	f44f 708a 	mov.w	r0, #276	; 0x114
 80020cc:	fb00 f202 	mul.w	r2, r0, r2
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	b29a      	uxth	r2, r3
 80020dc:	8afb      	ldrh	r3, [r7, #22]
 80020de:	1c59      	adds	r1, r3, #1
 80020e0:	82f9      	strh	r1, [r7, #22]
 80020e2:	4619      	mov	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	440b      	add	r3, r1
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] & 0xFF;
 80020ec:	89fa      	ldrh	r2, [r7, #14]
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	4910      	ldr	r1, [pc, #64]	; (8002134 <PDM_Write_Config_Buffer+0x2a8>)
 80020f2:	f44f 708a 	mov.w	r0, #276	; 0x114
 80020f6:	fb00 f202 	mul.w	r2, r0, r2
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8002102:	8afb      	ldrh	r3, [r7, #22]
 8002104:	1c59      	adds	r1, r3, #1
 8002106:	82f9      	strh	r1, [r7, #22]
 8002108:	4619      	mov	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	440b      	add	r3, r1
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 4; j++)
 8002112:	7b7b      	ldrb	r3, [r7, #13]
 8002114:	3301      	adds	r3, #1
 8002116:	737b      	strb	r3, [r7, #13]
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d9a9      	bls.n	8002072 <PDM_Write_Config_Buffer+0x1e6>
		}

		for(uint8_t j = 0; j < 2; j++)
 800211e:	2300      	movs	r3, #0
 8002120:	733b      	strb	r3, [r7, #12]
 8002122:	e0d3      	b.n	80022cc <PDM_Write_Config_Buffer+0x440>
 8002124:	200010a8 	.word	0x200010a8
 8002128:	20000f80 	.word	0x20000f80
 800212c:	2000109c 	.word	0x2000109c
 8002130:	20000ef4 	.word	0x20000ef4
 8002134:	200005a4 	.word	0x200005a4
		{
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] >> 8;
 8002138:	89fa      	ldrh	r2, [r7, #14]
 800213a:	7b3b      	ldrb	r3, [r7, #12]
 800213c:	4993      	ldr	r1, [pc, #588]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 800213e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8002142:	fb00 f202 	mul.w	r2, r0, r2
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29a      	uxth	r2, r3
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	82f9      	strh	r1, [r7, #22]
 800215a:	4619      	mov	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	440b      	add	r3, r1
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] & 0xFF;
 8002164:	89fa      	ldrh	r2, [r7, #14]
 8002166:	7b3b      	ldrb	r3, [r7, #12]
 8002168:	4988      	ldr	r1, [pc, #544]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 800216a:	f44f 708a 	mov.w	r0, #276	; 0x114
 800216e:	fb00 f202 	mul.w	r2, r0, r2
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	889a      	ldrh	r2, [r3, #4]
 800217c:	8afb      	ldrh	r3, [r7, #22]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	82f9      	strh	r1, [r7, #22]
 8002182:	4619      	mov	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	440b      	add	r3, r1
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Position[j];
 800218c:	89f9      	ldrh	r1, [r7, #14]
 800218e:	7b3a      	ldrb	r2, [r7, #12]
 8002190:	8afb      	ldrh	r3, [r7, #22]
 8002192:	1c58      	adds	r0, r3, #1
 8002194:	82f8      	strh	r0, [r7, #22]
 8002196:	4618      	mov	r0, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4403      	add	r3, r0
 800219c:	487b      	ldr	r0, [pc, #492]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 800219e:	f44f 740a 	mov.w	r4, #552	; 0x228
 80021a2:	fb04 f101 	mul.w	r1, r4, r1
 80021a6:	4401      	add	r1, r0
 80021a8:	440a      	add	r2, r1
 80021aa:	3210      	adds	r2, #16
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 24;
 80021b0:	89fa      	ldrh	r2, [r7, #14]
 80021b2:	7b3b      	ldrb	r3, [r7, #12]
 80021b4:	4975      	ldr	r1, [pc, #468]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 80021b6:	208a      	movs	r0, #138	; 0x8a
 80021b8:	fb00 f202 	mul.w	r2, r0, r2
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0e1a      	lsrs	r2, r3, #24
 80021c8:	8afb      	ldrh	r3, [r7, #22]
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	82f9      	strh	r1, [r7, #22]
 80021ce:	4619      	mov	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	440b      	add	r3, r1
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 16;
 80021d8:	89fa      	ldrh	r2, [r7, #14]
 80021da:	7b3b      	ldrb	r3, [r7, #12]
 80021dc:	496b      	ldr	r1, [pc, #428]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 80021de:	208a      	movs	r0, #138	; 0x8a
 80021e0:	fb00 f202 	mul.w	r2, r0, r2
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0c1a      	lsrs	r2, r3, #16
 80021f0:	8afb      	ldrh	r3, [r7, #22]
 80021f2:	1c59      	adds	r1, r3, #1
 80021f4:	82f9      	strh	r1, [r7, #22]
 80021f6:	4619      	mov	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	440b      	add	r3, r1
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 8;
 8002200:	89fa      	ldrh	r2, [r7, #14]
 8002202:	7b3b      	ldrb	r3, [r7, #12]
 8002204:	4961      	ldr	r1, [pc, #388]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 8002206:	208a      	movs	r0, #138	; 0x8a
 8002208:	fb00 f202 	mul.w	r2, r0, r2
 800220c:	4413      	add	r3, r2
 800220e:	3304      	adds	r3, #4
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0a1a      	lsrs	r2, r3, #8
 8002218:	8afb      	ldrh	r3, [r7, #22]
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	82f9      	strh	r1, [r7, #22]
 800221e:	4619      	mov	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	440b      	add	r3, r1
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] & 0xFF;
 8002228:	89fa      	ldrh	r2, [r7, #14]
 800222a:	7b3b      	ldrb	r3, [r7, #12]
 800222c:	4957      	ldr	r1, [pc, #348]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 800222e:	208a      	movs	r0, #138	; 0x8a
 8002230:	fb00 f202 	mul.w	r2, r0, r2
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	8afb      	ldrh	r3, [r7, #22]
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	82f9      	strh	r1, [r7, #22]
 8002244:	4619      	mov	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	440b      	add	r3, r1
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Map_Lengths[j];
 800224e:	89f9      	ldrh	r1, [r7, #14]
 8002250:	7b3a      	ldrb	r2, [r7, #12]
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	1c58      	adds	r0, r3, #1
 8002256:	82f8      	strh	r0, [r7, #22]
 8002258:	4618      	mov	r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4403      	add	r3, r0
 800225e:	484b      	ldr	r0, [pc, #300]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 8002260:	f44f 740a 	mov.w	r4, #552	; 0x228
 8002264:	fb04 f101 	mul.w	r1, r4, r1
 8002268:	4401      	add	r1, r0
 800226a:	440a      	add	r2, r1
 800226c:	321c      	adds	r2, #28
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] >> 8;
 8002272:	89fa      	ldrh	r2, [r7, #14]
 8002274:	7b3b      	ldrb	r3, [r7, #12]
 8002276:	4945      	ldr	r1, [pc, #276]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 8002278:	208a      	movs	r0, #138	; 0x8a
 800227a:	fb00 f202 	mul.w	r2, r0, r2
 800227e:	4413      	add	r3, r2
 8002280:	3308      	adds	r3, #8
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800228a:	121b      	asrs	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	8afb      	ldrh	r3, [r7, #22]
 8002290:	1c59      	adds	r1, r3, #1
 8002292:	82f9      	strh	r1, [r7, #22]
 8002294:	4619      	mov	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	440b      	add	r3, r1
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] & 0xFF;
 800229e:	89fa      	ldrh	r2, [r7, #14]
 80022a0:	7b3b      	ldrb	r3, [r7, #12]
 80022a2:	493a      	ldr	r1, [pc, #232]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 80022a4:	208a      	movs	r0, #138	; 0x8a
 80022a6:	fb00 f202 	mul.w	r2, r0, r2
 80022aa:	4413      	add	r3, r2
 80022ac:	3308      	adds	r3, #8
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022b6:	8afb      	ldrh	r3, [r7, #22]
 80022b8:	1c59      	adds	r1, r3, #1
 80022ba:	82f9      	strh	r1, [r7, #22]
 80022bc:	4619      	mov	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	440b      	add	r3, r1
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2; j++)
 80022c6:	7b3b      	ldrb	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	733b      	strb	r3, [r7, #12]
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f67f af32 	bls.w	8002138 <PDM_Write_Config_Buffer+0x2ac>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80022d4:	89fb      	ldrh	r3, [r7, #14]
 80022d6:	3301      	adds	r3, #1
 80022d8:	81fb      	strh	r3, [r7, #14]
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	f67f aeb4 	bls.w	800204a <PDM_Write_Config_Buffer+0x1be>
		}
	}

	//Writes PWM 3D maps
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	e048      	b.n	800237a <PDM_Write_Config_Buffer+0x4ee>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	727b      	strb	r3, [r7, #9]
 80022ec:	e03f      	b.n	800236e <PDM_Write_Config_Buffer+0x4e2>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	723b      	strb	r3, [r7, #8]
 80022f2:	e036      	b.n	8002362 <PDM_Write_Config_Buffer+0x4d6>
			{
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] >> 8;
 80022f4:	8978      	ldrh	r0, [r7, #10]
 80022f6:	7a7a      	ldrb	r2, [r7, #9]
 80022f8:	7a39      	ldrb	r1, [r7, #8]
 80022fa:	4c24      	ldr	r4, [pc, #144]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	f44f 728a 	mov.w	r2, #276	; 0x114
 8002306:	fb02 f200 	mul.w	r2, r2, r0
 800230a:	4413      	add	r3, r2
 800230c:	440b      	add	r3, r1
 800230e:	3330      	adds	r3, #48	; 0x30
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4423      	add	r3, r4
 8002314:	88db      	ldrh	r3, [r3, #6]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b29a      	uxth	r2, r3
 800231a:	8afb      	ldrh	r3, [r7, #22]
 800231c:	1c59      	adds	r1, r3, #1
 800231e:	82f9      	strh	r1, [r7, #22]
 8002320:	4619      	mov	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	440b      	add	r3, r1
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] & 0xFF;
 800232a:	8978      	ldrh	r0, [r7, #10]
 800232c:	7a7a      	ldrb	r2, [r7, #9]
 800232e:	7a39      	ldrb	r1, [r7, #8]
 8002330:	4c16      	ldr	r4, [pc, #88]	; (800238c <PDM_Write_Config_Buffer+0x500>)
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	f44f 728a 	mov.w	r2, #276	; 0x114
 800233c:	fb02 f200 	mul.w	r2, r2, r0
 8002340:	4413      	add	r3, r2
 8002342:	440b      	add	r3, r1
 8002344:	3330      	adds	r3, #48	; 0x30
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4423      	add	r3, r4
 800234a:	88da      	ldrh	r2, [r3, #6]
 800234c:	8afb      	ldrh	r3, [r7, #22]
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	82f9      	strh	r1, [r7, #22]
 8002352:	4619      	mov	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	440b      	add	r3, r1
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 800235c:	7a3b      	ldrb	r3, [r7, #8]
 800235e:	3301      	adds	r3, #1
 8002360:	723b      	strb	r3, [r7, #8]
 8002362:	7a3b      	ldrb	r3, [r7, #8]
 8002364:	2b0e      	cmp	r3, #14
 8002366:	d9c5      	bls.n	80022f4 <PDM_Write_Config_Buffer+0x468>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002368:	7a7b      	ldrb	r3, [r7, #9]
 800236a:	3301      	adds	r3, #1
 800236c:	727b      	strb	r3, [r7, #9]
 800236e:	7a7b      	ldrb	r3, [r7, #9]
 8002370:	2b0e      	cmp	r3, #14
 8002372:	d9bc      	bls.n	80022ee <PDM_Write_Config_Buffer+0x462>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	3301      	adds	r3, #1
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d9b3      	bls.n	80022e8 <PDM_Write_Config_Buffer+0x45c>
			}
		}
	}

	return;
 8002380:	e000      	b.n	8002384 <PDM_Write_Config_Buffer+0x4f8>
		return;
 8002382:	bf00      	nop
}
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bc90      	pop	{r4, r7}
 800238a:	4770      	bx	lr
 800238c:	200005a4 	.word	0x200005a4

08002390 <PDM_USB_Receive_Config>:

//Sets up pins, current limits, pwm controls and pwm 3D maps with received data from USB port
//uint8_t *Data - buffer received via USB port
//uint16_t Size - size of the buffer must be 5 bytes bigger than the information received (1 byte of command and 4 bytes of CRC)
static void PDM_USB_Receive_Config(uint8_t *Data, uint16_t Size)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
	uint32_t crc[2];

	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) &Data[5], (EEPROM_BUFFER_SIZE / sizeof(uint32_t)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3305      	adds	r3, #5
 80023a0:	f240 2223 	movw	r2, #547	; 0x223
 80023a4:	4619      	mov	r1, r3
 80023a6:	481b      	ldr	r0, [pc, #108]	; (8002414 <PDM_USB_Receive_Config+0x84>)
 80023a8:	f003 fe4f 	bl	800604a <HAL_CRC_Calculate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	60bb      	str	r3, [r7, #8]

	crc[1]  = Data[1] << 24;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3301      	adds	r3, #1
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[2] << 16;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	3202      	adds	r2, #2
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	0412      	lsls	r2, r2, #16
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[3] << 8;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	3203      	adds	r2, #3
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	0212      	lsls	r2, r2, #8
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[4];
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	3204      	adds	r2, #4
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

	if(crc[0] != crc[1])
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d10f      	bne.n	800240a <PDM_USB_Receive_Config+0x7a>
		return;

	PDM_Write_Config_Buffer(&Data[5], EEPROM_BUFFER_SIZE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3305      	adds	r3, #5
 80023ee:	f640 018c 	movw	r1, #2188	; 0x88c
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fd4a 	bl	8001e8c <PDM_Write_Config_Buffer>

	AT24Cxx_Write_DMA(&hi2c1, 0x0000, &Data[5], EEPROM_BUFFER_SIZE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1d5a      	adds	r2, r3, #5
 80023fc:	f640 038c 	movw	r3, #2188	; 0x88c
 8002400:	2100      	movs	r1, #0
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <PDM_USB_Receive_Config+0x88>)
 8002404:	f7fe f89f 	bl	8000546 <AT24Cxx_Write_DMA>

	return;
 8002408:	e000      	b.n	800240c <PDM_USB_Receive_Config+0x7c>
		return;
 800240a:	bf00      	nop
}
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000594 	.word	0x20000594
 8002418:	20000540 	.word	0x20000540

0800241c <PDM_USB_Transmit_Config>:

//Sends pins, current limits, pwm controls and pwm 3D maps via USB port
static void PDM_USB_Transmit_Config()
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
	uint8_t *data_buffer = malloc((EEPROM_BUFFER_SIZE + 5) * sizeof(uint8_t));
 8002422:	f640 0091 	movw	r0, #2193	; 0x891
 8002426:	f00e fb21 	bl	8010a6c <malloc>
 800242a:	4603      	mov	r3, r0
 800242c:	607b      	str	r3, [r7, #4]
	uint32_t crc = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]

	PDM_Load_Config_Buffer(&data_buffer[5], EEPROM_BUFFER_SIZE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3305      	adds	r3, #5
 8002436:	f640 018c 	movw	r1, #2188	; 0x88c
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f9d8 	bl	80017f0 <PDM_Load_Config_Buffer>

	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[5], (EEPROM_BUFFER_SIZE / sizeof(uint32_t)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3305      	adds	r3, #5
 8002444:	f240 2223 	movw	r2, #547	; 0x223
 8002448:	4619      	mov	r1, r3
 800244a:	4814      	ldr	r0, [pc, #80]	; (800249c <PDM_USB_Transmit_Config+0x80>)
 800244c:	f003 fdfd 	bl	800604a <HAL_CRC_Calculate>
 8002450:	6038      	str	r0, [r7, #0]

	data_buffer[1] = crc >> 24;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	0e1a      	lsrs	r2, r3, #24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3301      	adds	r3, #1
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = crc >> 16;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	0c1a      	lsrs	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3302      	adds	r3, #2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = crc >> 8;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	0a1a      	lsrs	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3303      	adds	r3, #3
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = crc & 0xFF;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

	CDC_Transmit_FS(data_buffer, (EEPROM_BUFFER_SIZE + 5));
 8002480:	f640 0191 	movw	r1, #2193	; 0x891
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f00d fddd 	bl	8010044 <CDC_Transmit_FS>

	free(data_buffer);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f00e faf6 	bl	8010a7c <free>
	data_buffer = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]

	return;
 8002494:	bf00      	nop
}
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000594 	.word	0x20000594

080024a0 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
//	uint8_t data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE];
	uint8_t *data_buffer = malloc(EEPROM_BUFFER_SIZE * sizeof(uint8_t));
 80024aa:	f640 008c 	movw	r0, #2188	; 0x88c
 80024ae:	f00e fadd 	bl	8010a6c <malloc>
 80024b2:	4603      	mov	r3, r0
 80024b4:	60bb      	str	r3, [r7, #8]

	//Reads general configuration from EEPROM
	AT24Cxx_Read(hi2c, 0x0000, data_buffer, EEPROM_BUFFER_SIZE);
 80024b6:	f640 038c 	movw	r3, #2188	; 0x88c
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	2100      	movs	r1, #0
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	f7fe f81c 	bl	80004fc <AT24Cxx_Read>

	//Loads configuration into global variables
	PDM_Load_Config_Buffer(data_buffer, EEPROM_BUFFER_SIZE);
 80024c4:	f640 018c 	movw	r1, #2188	; 0x88c
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f7ff f991 	bl	80017f0 <PDM_Load_Config_Buffer>
//	AT24Cxx_Read(hi2c, EEPROM_BUFFER_SIZE, &data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);

	//Load maps into global PWM structs
//	PDM_Load_Map_Buffer(&data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);

	free(data_buffer);
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f00e fad4 	bl	8010a7c <free>
	data_buffer = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 80024d8:	f7fe fedc 	bl	8001294 <PDM_Hard_Code_Config>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 80024dc:	2300      	movs	r3, #0
 80024de:	81fb      	strh	r3, [r7, #14]
 80024e0:	e009      	b.n	80024f6 <PDM_Init+0x56>
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	89fa      	ldrh	r2, [r7, #14]
 80024e6:	0052      	lsls	r2, r2, #1
 80024e8:	b291      	uxth	r1, r2
 80024ea:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <PDM_Init+0xc4>)
 80024ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	3301      	adds	r3, #1
 80024f4:	81fb      	strh	r3, [r7, #14]
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	2b1d      	cmp	r3, #29
 80024fa:	d9f2      	bls.n	80024e2 <PDM_Init+0x42>

	//Initializes each PWM able output
	for(uint8_t i = 0; i < 4; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	737b      	strb	r3, [r7, #13]
 8002500:	e00e      	b.n	8002520 <PDM_Init+0x80>
		PDM_PWM_Init(hcan, &PWM_Pins[i], i);
 8002502:	7b7b      	ldrb	r3, [r7, #13]
 8002504:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <PDM_Init+0xc8>)
 800250e:	4413      	add	r3, r2
 8002510:	7b7a      	ldrb	r2, [r7, #13]
 8002512:	4619      	mov	r1, r3
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 ff7f 	bl	8003418 <PDM_PWM_Init>
	for(uint8_t i = 0; i < 4; i++)
 800251a:	7b7b      	ldrb	r3, [r7, #13]
 800251c:	3301      	adds	r3, #1
 800251e:	737b      	strb	r3, [r7, #13]
 8002520:	7b7b      	ldrb	r3, [r7, #13]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d9ed      	bls.n	8002502 <PDM_Init+0x62>

	//Checks input pin levels
	PDM_Input_Process();
 8002526:	f000 f971 	bl	800280c <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, CAN_Baud_Rate);
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <PDM_Init+0xcc>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe ff39 	bl	80013a8 <PDM_CAN_Init>

	//Sets outputs based on input levels
	PDM_Output_Process();
 8002536:	f000 fa69 	bl	8002a0c <PDM_Output_Process>

	//Initializates timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, &ADC_BUFFER[5], 5);
 800253a:	2205      	movs	r2, #5
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <PDM_Init+0xd0>)
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <PDM_Init+0xd4>)
 8002540:	f002 f944 	bl	80047cc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &ADC_BUFFER[0], 5);
 8002544:	2205      	movs	r2, #5
 8002546:	490c      	ldr	r1, [pc, #48]	; (8002578 <PDM_Init+0xd8>)
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <PDM_Init+0xdc>)
 800254a:	f002 f93f 	bl	80047cc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 800254e:	480c      	ldr	r0, [pc, #48]	; (8002580 <PDM_Init+0xe0>)
 8002550:	f009 fbe0 	bl	800bd14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <PDM_Init+0xe4>)
 8002556:	f009 fbdd 	bl	800bd14 <HAL_TIM_Base_Start_IT>

	return;
 800255a:	bf00      	nop
}
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200011bc 	.word	0x200011bc
 8002568:	200005a4 	.word	0x200005a4
 800256c:	2000109c 	.word	0x2000109c
 8002570:	20000f0c 	.word	0x20000f0c
 8002574:	20000eac 	.word	0x20000eac
 8002578:	20000ef8 	.word	0x20000ef8
 800257c:	20000498 	.word	0x20000498
 8002580:	20001008 	.word	0x20001008
 8002584:	200012c4 	.word	0x200012c4

08002588 <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
	if((Data[0] == USB_COMMAND_READ_CONFIG) && (Size == 1))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d105      	bne.n	80025a8 <PDM_USB_Process+0x20>
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <PDM_USB_Process+0x20>
		PDM_USB_Transmit_Config();
 80025a2:	f7ff ff3b 	bl	800241c <PDM_USB_Transmit_Config>
 80025a6:	e024      	b.n	80025f2 <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_WRITE_CONFIG) && (Size == (EEPROM_BUFFER_SIZE + 5)))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d10a      	bne.n	80025c6 <PDM_USB_Process+0x3e>
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	f640 0291 	movw	r2, #2193	; 0x891
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d105      	bne.n	80025c6 <PDM_USB_Process+0x3e>
		PDM_USB_Receive_Config(Data, Size);
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fee6 	bl	8002390 <PDM_USB_Receive_Config>
 80025c4:	e015      	b.n	80025f2 <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_CONNECT) && (Size == 1))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d106      	bne.n	80025dc <PDM_USB_Process+0x54>
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d103      	bne.n	80025dc <PDM_USB_Process+0x54>
		USB_Connected_Flag = 1;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <PDM_USB_Process+0x74>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e00a      	b.n	80025f2 <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_DISCONNECT) && (Size == 1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d106      	bne.n	80025f2 <PDM_USB_Process+0x6a>
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d103      	bne.n	80025f2 <PDM_USB_Process+0x6a>
		USB_Connected_Flag = 0;
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <PDM_USB_Process+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
}
 80025f0:	e7ff      	b.n	80025f2 <PDM_USB_Process+0x6a>
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20001004 	.word	0x20001004

08002600 <PDM_USB_Transmit_Data>:

//Sends data channels via USB
void PDM_USB_Transmit_Data()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
	uint8_t *data_buffer = malloc((NBR_OF_DATA_CHANNELS * 2) * sizeof(uint8_t));
 8002606:	203c      	movs	r0, #60	; 0x3c
 8002608:	f00e fa30 	bl	8010a6c <malloc>
 800260c:	4603      	mov	r3, r0
 800260e:	60bb      	str	r3, [r7, #8]
	uint32_t crc = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]

	//Load data channels inside transmission buffer
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e024      	b.n	8002664 <PDM_USB_Transmit_Data+0x64>
	{
		data_buffer[(i * 2) + 5]  = Data_Buffer[i] >> 8;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <PDM_USB_Transmit_Data+0xe8>)
 800261e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	b299      	uxth	r1, r3
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	3305      	adds	r3, #5
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	4413      	add	r3, r2
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
		data_buffer[(i * 2) + 6] |= Data_Buffer[i] & 0xFF;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	3306      	adds	r3, #6
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b25a      	sxtb	r2, r3
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	4928      	ldr	r1, [pc, #160]	; (80026e8 <PDM_USB_Transmit_Data+0xe8>)
 8002646:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800264a:	b25b      	sxtb	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	b259      	sxtb	r1, r3
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	3306      	adds	r3, #6
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	b2ca      	uxtb	r2, r1
 800265c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	3301      	adds	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b1d      	cmp	r3, #29
 8002668:	d9d7      	bls.n	800261a <PDM_USB_Transmit_Data+0x1a>
	}

	//Load command into transmission buffer
	data_buffer[0] = USB_COMMAND_READ_DATA & 0xFF;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2205      	movs	r2, #5
 800266e:	701a      	strb	r2, [r3, #0]

	//Calculate buffer CRC
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[5], (NBR_OF_DATA_CHANNELS / sizeof(uint32_t)));
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3305      	adds	r3, #5
 8002674:	2207      	movs	r2, #7
 8002676:	4619      	mov	r1, r3
 8002678:	481c      	ldr	r0, [pc, #112]	; (80026ec <PDM_USB_Transmit_Data+0xec>)
 800267a:	f003 fce6 	bl	800604a <HAL_CRC_Calculate>
 800267e:	6078      	str	r0, [r7, #4]

	//Load CRC into transmission buffer
	data_buffer[1]  = crc >> 24;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0e1a      	lsrs	r2, r3, #24
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	3301      	adds	r3, #1
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]
	data_buffer[2] |= crc >> 16;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3302      	adds	r3, #2
 8002690:	7819      	ldrb	r1, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	b2da      	uxtb	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3302      	adds	r3, #2
 800269c:	430a      	orrs	r2, r1
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
	data_buffer[3] |= crc >> 8;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3303      	adds	r3, #3
 80026a6:	7819      	ldrb	r1, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3303      	adds	r3, #3
 80026b2:	430a      	orrs	r2, r1
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
	data_buffer[4] |= crc;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3304      	adds	r3, #4
 80026bc:	7819      	ldrb	r1, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3304      	adds	r3, #4
 80026c6:	430a      	orrs	r2, r1
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

	//Transmit data buffer via USB
	CDC_Transmit_FS(data_buffer, EEPROM_BUFFER_SIZE + 5);
 80026cc:	f640 0191 	movw	r1, #2193	; 0x891
 80026d0:	68b8      	ldr	r0, [r7, #8]
 80026d2:	f00d fcb7 	bl	8010044 <CDC_Transmit_FS>

	free(data_buffer);
 80026d6:	68b8      	ldr	r0, [r7, #8]
 80026d8:	f00e f9d0 	bl	8010a7c <free>
	data_buffer = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]

	return;
 80026e0:	bf00      	nop
}
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20001288 	.word	0x20001288
 80026ec:	20000594 	.word	0x20000594

080026f0 <PDM_Output_Set>:

//Sets output pin levels
//uint8_t output_pin - number of output
//uint8_t output_level - level of output
static void PDM_Output_Set(uint8_t output_pin, uint8_t output_level)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71bb      	strb	r3, [r7, #6]
	switch(output_pin)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	3b04      	subs	r3, #4
 8002704:	2b0b      	cmp	r3, #11
 8002706:	d878      	bhi.n	80027fa <PDM_Output_Set+0x10a>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <PDM_Output_Set+0x20>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002741 	.word	0x08002741
 8002714:	08002751 	.word	0x08002751
 8002718:	08002761 	.word	0x08002761
 800271c:	08002771 	.word	0x08002771
 8002720:	08002781 	.word	0x08002781
 8002724:	08002791 	.word	0x08002791
 8002728:	080027a1 	.word	0x080027a1
 800272c:	080027b1 	.word	0x080027b1
 8002730:	080027c1 	.word	0x080027c1
 8002734:	080027cf 	.word	0x080027cf
 8002738:	080027dd 	.word	0x080027dd
 800273c:	080027eb 	.word	0x080027eb
	{
	case 4:
		HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_level);
 8002740:	79bb      	ldrb	r3, [r7, #6]
 8002742:	461a      	mov	r2, r3
 8002744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002748:	482e      	ldr	r0, [pc, #184]	; (8002804 <PDM_Output_Set+0x114>)
 800274a:	f004 fafd 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800274e:	e053      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 5:
		HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_level);
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	461a      	mov	r2, r3
 8002754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002758:	482a      	ldr	r0, [pc, #168]	; (8002804 <PDM_Output_Set+0x114>)
 800275a:	f004 faf5 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800275e:	e04b      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 6:
		HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_level);
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	461a      	mov	r2, r3
 8002764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002768:	4826      	ldr	r0, [pc, #152]	; (8002804 <PDM_Output_Set+0x114>)
 800276a:	f004 faed 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800276e:	e043      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 7:
		HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_level);
 8002770:	79bb      	ldrb	r3, [r7, #6]
 8002772:	461a      	mov	r2, r3
 8002774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002778:	4822      	ldr	r0, [pc, #136]	; (8002804 <PDM_Output_Set+0x114>)
 800277a:	f004 fae5 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800277e:	e03b      	b.n	80027f8 <PDM_Output_Set+0x108>

#ifndef LQFP64
	case 8:
		HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_level);
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	461a      	mov	r2, r3
 8002784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002788:	481e      	ldr	r0, [pc, #120]	; (8002804 <PDM_Output_Set+0x114>)
 800278a:	f004 fadd 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800278e:	e033      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 9:
		HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_level);
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	461a      	mov	r2, r3
 8002794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002798:	481a      	ldr	r0, [pc, #104]	; (8002804 <PDM_Output_Set+0x114>)
 800279a:	f004 fad5 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800279e:	e02b      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 10:
		HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_level);
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a8:	4816      	ldr	r0, [pc, #88]	; (8002804 <PDM_Output_Set+0x114>)
 80027aa:	f004 facd 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 80027ae:	e023      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 11:
		HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_level);
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027b8:	4812      	ldr	r0, [pc, #72]	; (8002804 <PDM_Output_Set+0x114>)
 80027ba:	f004 fac5 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 80027be:	e01b      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 12:
		HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_level);
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	461a      	mov	r2, r3
 80027c4:	2108      	movs	r1, #8
 80027c6:	4810      	ldr	r0, [pc, #64]	; (8002808 <PDM_Output_Set+0x118>)
 80027c8:	f004 fabe 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 80027cc:	e014      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 13:
		HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_level);
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	461a      	mov	r2, r3
 80027d2:	2104      	movs	r1, #4
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <PDM_Output_Set+0x118>)
 80027d6:	f004 fab7 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 80027da:	e00d      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 14:
		HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_level);
 80027dc:	79bb      	ldrb	r3, [r7, #6]
 80027de:	461a      	mov	r2, r3
 80027e0:	2120      	movs	r1, #32
 80027e2:	4809      	ldr	r0, [pc, #36]	; (8002808 <PDM_Output_Set+0x118>)
 80027e4:	f004 fab0 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 80027e8:	e006      	b.n	80027f8 <PDM_Output_Set+0x108>

	case 15:
		HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_level);
 80027ea:	79bb      	ldrb	r3, [r7, #6]
 80027ec:	461a      	mov	r2, r3
 80027ee:	2110      	movs	r1, #16
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <PDM_Output_Set+0x118>)
 80027f2:	f004 faa9 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 80027f6:	bf00      	nop
#endif
	}

	return;
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
}
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021800 	.word	0x40021800

0800280c <PDM_Input_Process>:

//Process input pin levels
void PDM_Input_Process()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	Input_Pin_Levels = 0x0000;
 8002810:	4b7a      	ldr	r3, [pc, #488]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels  = HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 8002816:	2101      	movs	r1, #1
 8002818:	4879      	ldr	r0, [pc, #484]	; (8002a00 <PDM_Input_Process+0x1f4>)
 800281a:	f004 fa7d 	bl	8006d18 <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002824:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 8002826:	2102      	movs	r1, #2
 8002828:	4875      	ldr	r0, [pc, #468]	; (8002a00 <PDM_Input_Process+0x1f4>)
 800282a:	f004 fa75 	bl	8006d18 <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	b21a      	sxth	r2, r3
 8002834:	4b71      	ldr	r3, [pc, #452]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b21b      	sxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	b21b      	sxth	r3, r3
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b6e      	ldr	r3, [pc, #440]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002842:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8002844:	2104      	movs	r1, #4
 8002846:	486e      	ldr	r0, [pc, #440]	; (8002a00 <PDM_Input_Process+0x1f4>)
 8002848:	f004 fa66 	bl	8006d18 <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	b21a      	sxth	r2, r3
 8002852:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b21b      	sxth	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b21b      	sxth	r3, r3
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b67      	ldr	r3, [pc, #412]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002860:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8002862:	2108      	movs	r1, #8
 8002864:	4866      	ldr	r0, [pc, #408]	; (8002a00 <PDM_Input_Process+0x1f4>)
 8002866:	f004 fa57 	bl	8006d18 <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	b21a      	sxth	r2, r3
 8002870:	4b62      	ldr	r3, [pc, #392]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b21b      	sxth	r3, r3
 8002876:	4313      	orrs	r3, r2
 8002878:	b21b      	sxth	r3, r3
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <PDM_Input_Process+0x1f0>)
 800287e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8002880:	2110      	movs	r1, #16
 8002882:	4860      	ldr	r0, [pc, #384]	; (8002a04 <PDM_Input_Process+0x1f8>)
 8002884:	f004 fa48 	bl	8006d18 <HAL_GPIO_ReadPin>
 8002888:	4603      	mov	r3, r0
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b21b      	sxth	r3, r3
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b58      	ldr	r3, [pc, #352]	; (80029fc <PDM_Input_Process+0x1f0>)
 800289c:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 800289e:	2120      	movs	r1, #32
 80028a0:	4858      	ldr	r0, [pc, #352]	; (8002a04 <PDM_Input_Process+0x1f8>)
 80028a2:	f004 fa39 	bl	8006d18 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <PDM_Input_Process+0x1f0>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <PDM_Input_Process+0x1f0>)
 80028ba:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	4852      	ldr	r0, [pc, #328]	; (8002a08 <PDM_Input_Process+0x1fc>)
 80028c0:	f004 fa2a 	bl	8006d18 <HAL_GPIO_ReadPin>
 80028c4:	4603      	mov	r3, r0
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <PDM_Input_Process+0x1f0>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <PDM_Input_Process+0x1f0>)
 80028d8:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	484a      	ldr	r0, [pc, #296]	; (8002a08 <PDM_Input_Process+0x1fc>)
 80028de:	f004 fa1b 	bl	8006d18 <HAL_GPIO_ReadPin>
 80028e2:	4603      	mov	r3, r0
 80028e4:	01db      	lsls	r3, r3, #7
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	4b44      	ldr	r3, [pc, #272]	; (80029fc <PDM_Input_Process+0x1f0>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b41      	ldr	r3, [pc, #260]	; (80029fc <PDM_Input_Process+0x1f0>)
 80028f6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 80028f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028fc:	4842      	ldr	r0, [pc, #264]	; (8002a08 <PDM_Input_Process+0x1fc>)
 80028fe:	f004 fa0b 	bl	8006d18 <HAL_GPIO_ReadPin>
 8002902:	4603      	mov	r3, r0
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b21a      	sxth	r2, r3
 8002908:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <PDM_Input_Process+0x1f0>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21b      	sxth	r3, r3
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b39      	ldr	r3, [pc, #228]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002916:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 8002918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800291c:	483a      	ldr	r0, [pc, #232]	; (8002a08 <PDM_Input_Process+0x1fc>)
 800291e:	f004 f9fb 	bl	8006d18 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	b21a      	sxth	r2, r3
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <PDM_Input_Process+0x1f0>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b21b      	sxth	r3, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	b21b      	sxth	r3, r3
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002936:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 8002938:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800293c:	4832      	ldr	r0, [pc, #200]	; (8002a08 <PDM_Input_Process+0x1fc>)
 800293e:	f004 f9eb 	bl	8006d18 <HAL_GPIO_ReadPin>
 8002942:	4603      	mov	r3, r0
 8002944:	029b      	lsls	r3, r3, #10
 8002946:	b21a      	sxth	r2, r3
 8002948:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <PDM_Input_Process+0x1f0>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b21b      	sxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	b21b      	sxth	r3, r3
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002956:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 8002958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800295c:	482a      	ldr	r0, [pc, #168]	; (8002a08 <PDM_Input_Process+0x1fc>)
 800295e:	f004 f9db 	bl	8006d18 <HAL_GPIO_ReadPin>
 8002962:	4603      	mov	r3, r0
 8002964:	02db      	lsls	r3, r3, #11
 8002966:	b21a      	sxth	r2, r3
 8002968:	4b24      	ldr	r3, [pc, #144]	; (80029fc <PDM_Input_Process+0x1f0>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b21b      	sxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b21b      	sxth	r3, r3
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002976:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8002978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <PDM_Input_Process+0x1f8>)
 800297e:	f004 f9cb 	bl	8006d18 <HAL_GPIO_ReadPin>
 8002982:	4603      	mov	r3, r0
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <PDM_Input_Process+0x1f0>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	b21b      	sxth	r3, r3
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <PDM_Input_Process+0x1f0>)
 8002996:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8002998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299c:	4819      	ldr	r0, [pc, #100]	; (8002a04 <PDM_Input_Process+0x1f8>)
 800299e:	f004 f9bb 	bl	8006d18 <HAL_GPIO_ReadPin>
 80029a2:	4603      	mov	r3, r0
 80029a4:	035b      	lsls	r3, r3, #13
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <PDM_Input_Process+0x1f0>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <PDM_Input_Process+0x1f0>)
 80029b6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 80029b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029bc:	4811      	ldr	r0, [pc, #68]	; (8002a04 <PDM_Input_Process+0x1f8>)
 80029be:	f004 f9ab 	bl	8006d18 <HAL_GPIO_ReadPin>
 80029c2:	4603      	mov	r3, r0
 80029c4:	039b      	lsls	r3, r3, #14
 80029c6:	b21a      	sxth	r2, r3
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <PDM_Input_Process+0x1f0>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <PDM_Input_Process+0x1f0>)
 80029d6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	4809      	ldr	r0, [pc, #36]	; (8002a04 <PDM_Input_Process+0x1f8>)
 80029de:	f004 f99b 	bl	8006d18 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	03db      	lsls	r3, r3, #15
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <PDM_Input_Process+0x1f0>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4b01      	ldr	r3, [pc, #4]	; (80029fc <PDM_Input_Process+0x1f0>)
 80029f6:	801a      	strh	r2, [r3, #0]

	return;
 80029f8:	bf00      	nop
}
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20001314 	.word	0x20001314
 8002a00:	40021400 	.word	0x40021400
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40020800 	.word	0x40020800

08002a0c <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
#ifndef LQFP64
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002a12:	2304      	movs	r3, #4
 8002a14:	71fb      	strb	r3, [r7, #7]
 8002a16:	e046      	b.n	8002aa6 <PDM_Output_Process+0x9a>
#else
	for(uint8_t i = 4; i < (NBR_OF_OUTPUTS - 8); i++)
#endif
	{
		//Check if virtual fuse isn't tripped and if the input pins match their enabled states
		if((((Driver_Safety_Flag >> i) & 0x01) == 0)
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <PDM_Output_Process+0xd4>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	fa42 f303 	asr.w	r3, r2, r3
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d134      	bne.n	8002a96 <PDM_Output_Process+0x8a>
				&& (__PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[0], Output_Pin[i].Input_Levels[0])
 8002a2c:	79fa      	ldrb	r2, [r7, #7]
 8002a2e:	492d      	ldr	r1, [pc, #180]	; (8002ae4 <PDM_Output_Process+0xd8>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <PDM_Output_Process+0xdc>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	4013      	ands	r3, r2
 8002a42:	b299      	uxth	r1, r3
 8002a44:	79fa      	ldrb	r2, [r7, #7]
 8002a46:	4827      	ldr	r0, [pc, #156]	; (8002ae4 <PDM_Output_Process+0xd8>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4403      	add	r3, r0
 8002a52:	3304      	adds	r3, #4
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	4299      	cmp	r1, r3
 8002a58:	d017      	beq.n	8002a8a <PDM_Output_Process+0x7e>
				||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[1], Output_Pin[i].Input_Levels[1])))
 8002a5a:	79fa      	ldrb	r2, [r7, #7]
 8002a5c:	4921      	ldr	r1, [pc, #132]	; (8002ae4 <PDM_Output_Process+0xd8>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3302      	adds	r3, #2
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <PDM_Output_Process+0xdc>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b299      	uxth	r1, r3
 8002a74:	79fa      	ldrb	r2, [r7, #7]
 8002a76:	481b      	ldr	r0, [pc, #108]	; (8002ae4 <PDM_Output_Process+0xd8>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4403      	add	r3, r0
 8002a82:	3306      	adds	r3, #6
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	4299      	cmp	r1, r3
 8002a88:	d105      	bne.n	8002a96 <PDM_Output_Process+0x8a>
		{
			PDM_Output_Set(i, GPIO_PIN_SET);
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fe2e 	bl	80026f0 <PDM_Output_Set>
 8002a94:	e004      	b.n	8002aa0 <PDM_Output_Process+0x94>
		}else{
			PDM_Output_Set(i, GPIO_PIN_RESET);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fe28 	bl	80026f0 <PDM_Output_Set>
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	71fb      	strb	r3, [r7, #7]
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b0f      	cmp	r3, #15
 8002aaa:	d9b5      	bls.n	8002a18 <PDM_Output_Process+0xc>
#ifdef LQFP64
	PDM_Output_Expander_Set(&hi2c1);
#endif

	//Checks each PWM able output individually
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	71bb      	strb	r3, [r7, #6]
 8002ab0:	e00e      	b.n	8002ad0 <PDM_Output_Process+0xc4>
	{
		PDM_PWM_Output_Process(&PWM_Pins[i], i);
 8002ab2:	79bb      	ldrb	r3, [r7, #6]
 8002ab4:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <PDM_Output_Process+0xe0>)
 8002abe:	4413      	add	r3, r2
 8002ac0:	79ba      	ldrb	r2, [r7, #6]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fd7f 	bl	80035c8 <PDM_PWM_Output_Process>
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002aca:	79bb      	ldrb	r3, [r7, #6]
 8002acc:	3301      	adds	r3, #1
 8002ace:	71bb      	strb	r3, [r7, #6]
 8002ad0:	79bb      	ldrb	r3, [r7, #6]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d9ed      	bls.n	8002ab2 <PDM_Output_Process+0xa6>
	}

	return;
 8002ad6:	bf00      	nop
}
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200005a0 	.word	0x200005a0
 8002ae4:	200010a8 	.word	0x200010a8
 8002ae8:	20001314 	.word	0x20001314
 8002aec:	200005a4 	.word	0x200005a4

08002af0 <PDM_Output_Fuse>:

//Checks output currents and compares with thresholds and timeouts, if over both, processes outputs
void PDM_Output_Fuse()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
	uint8_t fuse_flag = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	71bb      	strb	r3, [r7, #6]
 8002afe:	e066      	b.n	8002bce <PDM_Output_Fuse+0xde>
	{
		if(Output_Pin[i].Current_Thresholds == 0)
 8002b00:	79ba      	ldrb	r2, [r7, #6]
 8002b02:	493c      	ldr	r1, [pc, #240]	; (8002bf4 <PDM_Output_Fuse+0x104>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3308      	adds	r3, #8
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d057      	beq.n	8002bc6 <PDM_Output_Fuse+0xd6>
			continue;

		if(Data_Buffer[i] > Output_Pin[i].Current_Thresholds)
 8002b16:	79bb      	ldrb	r3, [r7, #6]
 8002b18:	4a37      	ldr	r2, [pc, #220]	; (8002bf8 <PDM_Output_Fuse+0x108>)
 8002b1a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002b1e:	79ba      	ldrb	r2, [r7, #6]
 8002b20:	4834      	ldr	r0, [pc, #208]	; (8002bf4 <PDM_Output_Fuse+0x104>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	4299      	cmp	r1, r3
 8002b32:	d933      	bls.n	8002b9c <PDM_Output_Fuse+0xac>
		{
			Accumulator_Output_Fuse[i] += Accumulator_Output_Check;
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	4a31      	ldr	r2, [pc, #196]	; (8002bfc <PDM_Output_Fuse+0x10c>)
 8002b38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b3c:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <PDM_Output_Fuse+0x110>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	440a      	add	r2, r1
 8002b44:	492d      	ldr	r1, [pc, #180]	; (8002bfc <PDM_Output_Fuse+0x10c>)
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(Accumulator_Output_Fuse[i] >= (Output_Pin[i].Timeout_Output_Fuse * 10))
 8002b4a:	79bb      	ldrb	r3, [r7, #6]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <PDM_Output_Fuse+0x10c>)
 8002b4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b52:	79ba      	ldrb	r2, [r7, #6]
 8002b54:	4827      	ldr	r0, [pc, #156]	; (8002bf4 <PDM_Output_Fuse+0x104>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4403      	add	r3, r0
 8002b60:	330a      	adds	r3, #10
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	d32a      	bcc.n	8002bc8 <PDM_Output_Fuse+0xd8>
			{
				Driver_Safety_Flag |= (1 << i);
 8002b72:	79bb      	ldrb	r3, [r7, #6]
 8002b74:	2201      	movs	r2, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	b21a      	sxth	r2, r3
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <PDM_Output_Fuse+0x114>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <PDM_Output_Fuse+0x114>)
 8002b8a:	801a      	strh	r2, [r3, #0]
				Accumulator_Output_Fuse[i] = 0;
 8002b8c:	79bb      	ldrb	r3, [r7, #6]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <PDM_Output_Fuse+0x10c>)
 8002b90:	2100      	movs	r1, #0
 8002b92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				fuse_flag = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	71fb      	strb	r3, [r7, #7]
 8002b9a:	e015      	b.n	8002bc8 <PDM_Output_Fuse+0xd8>
			}

		}else{
			Driver_Overcurrent_Flag &= ~(1 << i);
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <PDM_Output_Fuse+0x118>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <PDM_Output_Fuse+0x118>)
 8002bb8:	801a      	strh	r2, [r3, #0]
			Accumulator_Output_Fuse[i] = 0;
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <PDM_Output_Fuse+0x10c>)
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002bc4:	e000      	b.n	8002bc8 <PDM_Output_Fuse+0xd8>
			continue;
 8002bc6:	bf00      	nop
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	71bb      	strb	r3, [r7, #6]
 8002bce:	79bb      	ldrb	r3, [r7, #6]
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d995      	bls.n	8002b00 <PDM_Output_Fuse+0x10>
		}
	}

	Accumulator_Output_Check -= OUTPUT_FUSE_FREQ;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <PDM_Output_Fuse+0x110>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3b19      	subs	r3, #25
 8002bda:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <PDM_Output_Fuse+0x110>)
 8002bdc:	6013      	str	r3, [r2, #0]

	if(fuse_flag == 1)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <PDM_Output_Fuse+0xfa>
		PDM_Output_Process();
 8002be4:	f7ff ff12 	bl	8002a0c <PDM_Output_Process>

	return;
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
}
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200010a8 	.word	0x200010a8
 8002bf8:	20001288 	.word	0x20001288
 8002bfc:	20000f3c 	.word	0x20000f3c
 8002c00:	2000059c 	.word	0x2000059c
 8002c04:	200005a0 	.word	0x200005a0
 8002c08:	20000494 	.word	0x20000494

08002c0c <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "pdm.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Message, CAN_Rx_Data) == HAL_OK)
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002c18:	2100      	movs	r1, #0
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f002 fd4f 	bl	80056be <HAL_CAN_GetRxMessage>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002c26:	f7fe fd1b 	bl	8001660 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002c2e:	f004 f8a4 	bl	8006d7a <HAL_GPIO_TogglePin>
	}

	return;
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
}
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20001168 	.word	0x20001168
 8002c40:	20000f20 	.word	0x20000f20
 8002c44:	40021800 	.word	0x40021800

08002c48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 8002c52:	f7ff fddb 	bl	800280c <PDM_Input_Process>

	PDM_Output_Process();
 8002c56:	f7ff fed9 	bl	8002a0c <PDM_Output_Process>

	return;
 8002c5a:	bf00      	nop
}
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
	return;
 8002c6a:	bf00      	nop
}
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d104      	bne.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		Accumulator_Delay += 10;
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330a      	adds	r3, #10
 8002c90:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c92:	6013      	str	r3, [r2, #0]
	}

	if(htim->Instance == TIM6)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d131      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x8a>
	{
		Accumulator_Msg_10Hz++;
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002ca6:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25Hz++;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002cb0:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50Hz++;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002cba:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_80Hz++,
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002cc4:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100Hz++;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002cce:	6013      	str	r3, [r2, #0]

		Accumulator_Output_Check++;
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002cd8:	6013      	str	r3, [r2, #0]
		Accumulator_Temp_Read++;
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002ce2:	6013      	str	r3, [r2, #0]
		Accumulator_Volt_Read++;
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002cec:	6013      	str	r3, [r2, #0]

		if(USB_Connected_Flag == 1)
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x8a>
			Accumulator_USB_Data++;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002cfe:	6013      	str	r3, [r2, #0]
	}

	return;
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
}
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40001400 	.word	0x40001400
 8002d14:	200011f8 	.word	0x200011f8
 8002d18:	40001000 	.word	0x40001000
 8002d1c:	20001170 	.word	0x20001170
 8002d20:	20000e90 	.word	0x20000e90
 8002d24:	20000f7c 	.word	0x20000f7c
 8002d28:	20001050 	.word	0x20001050
 8002d2c:	20000fa0 	.word	0x20000fa0
 8002d30:	2000059c 	.word	0x2000059c
 8002d34:	200010a0 	.word	0x200010a0
 8002d38:	200010a4 	.word	0x200010a4
 8002d3c:	20001004 	.word	0x20001004
 8002d40:	20001284 	.word	0x20001284

08002d44 <PDM_PWM_Duty_Cycle_Set>:
//	return __PDM_LINEAR_INTERPOLATION(y, y0, y1, z[0], z[1]);
//}

//Sets PWM output duty cycle using its command variables
static void PDM_PWM_Duty_Cycle_Set(PWM_Control_Struct* pwm_struct)
{
 8002d44:	b4f0      	push	{r4, r5, r6, r7}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	//Checks if both command variables are above the collum and line limits and attributes the map's closest corner value
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dc0d      	bgt.n	8002d78 <PDM_PWM_Duty_Cycle_Set+0x34>
		&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dc05      	bgt.n	8002d78 <PDM_PWM_Duty_Cycle_Set+0x34>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][0];
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	801a      	strh	r2, [r3, #0]
		return;
 8002d76:	e34b      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002d84:	429a      	cmp	r2, r3
 8002d86:	db11      	blt.n	8002dac <PDM_PWM_Duty_Cycle_Set+0x68>
			 && (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dc09      	bgt.n	8002dac <PDM_PWM_Duty_Cycle_Set+0x68>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][pwm_struct->Map_Lengths[0]];
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7f1b      	ldrb	r3, [r3, #28]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	3330      	adds	r3, #48	; 0x30
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	88da      	ldrh	r2, [r3, #6]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	801a      	strh	r2, [r3, #0]
		return;
 8002daa:	e331      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dc15      	bgt.n	8002de8 <PDM_PWM_Duty_Cycle_Set+0xa4>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	db0d      	blt.n	8002de8 <PDM_PWM_Duty_Cycle_Set+0xa4>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][0];
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7f5b      	ldrb	r3, [r3, #29]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a5b      	subs	r3, r3, r1
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	3366      	adds	r3, #102	; 0x66
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	801a      	strh	r2, [r3, #0]
		return;
 8002de6:	e313      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	db19      	blt.n	8002e2c <PDM_PWM_Duty_Cycle_Set+0xe8>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002e04:	429a      	cmp	r2, r3
 8002e06:	db11      	blt.n	8002e2c <PDM_PWM_Duty_Cycle_Set+0xe8>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][pwm_struct->Map_Lengths[0]];
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7f5b      	ldrb	r3, [r3, #29]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7f1b      	ldrb	r3, [r3, #28]
 8002e12:	4618      	mov	r0, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a5b      	subs	r3, r3, r1
 8002e1c:	4403      	add	r3, r0
 8002e1e:	3330      	adds	r3, #48	; 0x30
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	88da      	ldrh	r2, [r3, #6]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	801a      	strh	r2, [r3, #0]
		return;
 8002e2a:	e2f1      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}

	//Check if the command variable point is outside the collums (x limits) of the 3D map
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	dd08      	ble.n	8002e4e <PDM_PWM_Duty_Cycle_Set+0x10a>
		|| (pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1]))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f2c0 80c5 	blt.w	8002fd8 <PDM_PWM_Duty_Cycle_Set+0x294>
	{
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e0bb      	b.n	8002fcc <PDM_PWM_Duty_Cycle_Set+0x288>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	3323      	adds	r3, #35	; 0x23
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	f2c0 80ac 	blt.w	8002fc6 <PDM_PWM_Duty_Cycle_Set+0x282>
				&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	3301      	adds	r3, #1
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	3323      	adds	r3, #35	; 0x23
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	440b      	add	r3, r1
 8002e80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f300 809e 	bgt.w	8002fc6 <PDM_PWM_Duty_Cycle_Set+0x282>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002e96:	429a      	cmp	r2, r3
 8002e98:	dc44      	bgt.n	8002f24 <PDM_PWM_Duty_Cycle_Set+0x1e0>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	3323      	adds	r3, #35	; 0x23
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002eb0:	1ac9      	subs	r1, r1, r3
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4403      	add	r3, r0
 8002ec2:	3366      	adds	r3, #102	; 0x66
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4403      	add	r3, r0
 8002ed6:	3366      	adds	r3, #102	; 0x66
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	1ae3      	subs	r3, r4, r3
 8002edc:	fb03 f201 	mul.w	r2, r3, r1
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	3323      	adds	r3, #35	; 0x23
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	3323      	adds	r3, #35	; 0x23
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f00:	1ac3      	subs	r3, r0, r3
 8002f02:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f06:	b299      	uxth	r1, r3
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4403      	add	r3, r0
 8002f16:	3366      	adds	r3, #102	; 0x66
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	801a      	strh	r2, [r3, #0]
																  	    pwm_struct->Command_Var_Step[1][y],
																		pwm_struct->Command_Var_Step[1][y + 1],
																		pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
																		pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
				}
				return;
 8002f22:	e275      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	3323      	adds	r3, #35	; 0x23
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f3a:	1ac9      	subs	r1, r1, r3
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7f1b      	ldrb	r3, [r3, #28]
 8002f44:	461c      	mov	r4, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	4423      	add	r3, r4
 8002f50:	3330      	adds	r3, #48	; 0x30
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4403      	add	r3, r0
 8002f56:	88db      	ldrh	r3, [r3, #6]
 8002f58:	461c      	mov	r4, r3
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7f1b      	ldrb	r3, [r3, #28]
 8002f60:	461d      	mov	r5, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	442b      	add	r3, r5
 8002f6c:	3330      	adds	r3, #48	; 0x30
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4403      	add	r3, r0
 8002f72:	88db      	ldrh	r3, [r3, #6]
 8002f74:	1ae3      	subs	r3, r4, r3
 8002f76:	fb03 f201 	mul.w	r2, r3, r1
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	3323      	adds	r3, #35	; 0x23
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	3323      	adds	r3, #35	; 0x23
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f9a:	1ac3      	subs	r3, r0, r3
 8002f9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7f1b      	ldrb	r3, [r3, #28]
 8002fa8:	461c      	mov	r4, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	4423      	add	r3, r4
 8002fb4:	3330      	adds	r3, #48	; 0x30
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4403      	add	r3, r0
 8002fba:	88db      	ldrh	r3, [r3, #6]
 8002fbc:	440b      	add	r3, r1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	801a      	strh	r2, [r3, #0]
				return;
 8002fc4:	e224      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7f5b      	ldrb	r3, [r3, #29]
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	f4ff af3e 	bcc.w	8002e54 <PDM_PWM_Duty_Cycle_Set+0x110>
			}
		}
	}

	//Check if the command variable point is outside the lines (y limits) of the 3D map
	if((pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dd08      	ble.n	8002ffa <PDM_PWM_Duty_Cycle_Set+0x2b6>
		|| (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f2c0 80bc 	blt.w	8003172 <PDM_PWM_Duty_Cycle_Set+0x42e>
	{
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73bb      	strb	r3, [r7, #14]
 8002ffe:	e0b2      	b.n	8003166 <PDM_PWM_Duty_Cycle_Set+0x422>
		{
			//Checks if the command variable point is inside the x, x + 1 collum
			if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003006:	7bbb      	ldrb	r3, [r7, #14]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	3314      	adds	r3, #20
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003014:	429a      	cmp	r2, r3
 8003016:	f2c0 80a3 	blt.w	8003160 <PDM_PWM_Duty_Cycle_Set+0x41c>
				&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	3301      	adds	r3, #1
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	3314      	adds	r3, #20
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	440b      	add	r3, r1
 800302c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003030:	429a      	cmp	r2, r3
 8003032:	f300 8095 	bgt.w	8003160 <PDM_PWM_Duty_Cycle_Set+0x41c>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003042:	429a      	cmp	r2, r3
 8003044:	dc3b      	bgt.n	80030be <PDM_PWM_Duty_Cycle_Set+0x37a>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800304c:	4619      	mov	r1, r3
 800304e:	7bbb      	ldrb	r3, [r7, #14]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	3314      	adds	r3, #20
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800305c:	1aca      	subs	r2, r1, r3
 800305e:	7bbb      	ldrb	r3, [r7, #14]
 8003060:	3301      	adds	r3, #1
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	3330      	adds	r3, #48	; 0x30
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	440b      	add	r3, r1
 800306a:	88db      	ldrh	r3, [r3, #6]
 800306c:	4618      	mov	r0, r3
 800306e:	7bbb      	ldrb	r3, [r7, #14]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	3330      	adds	r3, #48	; 0x30
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	440b      	add	r3, r1
 8003078:	88db      	ldrh	r3, [r3, #6]
 800307a:	1ac3      	subs	r3, r0, r3
 800307c:	fb03 f202 	mul.w	r2, r3, r2
 8003080:	7bbb      	ldrb	r3, [r7, #14]
 8003082:	3301      	adds	r3, #1
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	3314      	adds	r3, #20
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	440b      	add	r3, r1
 800308c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003090:	4618      	mov	r0, r3
 8003092:	7bbb      	ldrb	r3, [r7, #14]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	3314      	adds	r3, #20
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	440b      	add	r3, r1
 800309c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030a0:	1ac3      	subs	r3, r0, r3
 80030a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	3330      	adds	r3, #48	; 0x30
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	440b      	add	r3, r1
 80030b2:	88db      	ldrh	r3, [r3, #6]
 80030b4:	4413      	add	r3, r2
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	801a      	strh	r2, [r3, #0]
																  	    pwm_struct->Command_Var_Step[0][x],
																		pwm_struct->Command_Var_Step[0][x + 1],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
				}
				return;
 80030bc:	e1a8      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80030c4:	4619      	mov	r1, r3
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	3314      	adds	r3, #20
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030d4:	1aca      	subs	r2, r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7f5b      	ldrb	r3, [r3, #29]
 80030da:	461c      	mov	r4, r3
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	1c58      	adds	r0, r3, #1
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4623      	mov	r3, r4
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1b1b      	subs	r3, r3, r4
 80030e8:	4403      	add	r3, r0
 80030ea:	3330      	adds	r3, #48	; 0x30
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	440b      	add	r3, r1
 80030f0:	88db      	ldrh	r3, [r3, #6]
 80030f2:	461d      	mov	r5, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7f5b      	ldrb	r3, [r3, #29]
 80030f8:	461c      	mov	r4, r3
 80030fa:	7bb8      	ldrb	r0, [r7, #14]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4623      	mov	r3, r4
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1b1b      	subs	r3, r3, r4
 8003104:	4403      	add	r3, r0
 8003106:	3330      	adds	r3, #48	; 0x30
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	440b      	add	r3, r1
 800310c:	88db      	ldrh	r3, [r3, #6]
 800310e:	1aeb      	subs	r3, r5, r3
 8003110:	fb03 f202 	mul.w	r2, r3, r2
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	3301      	adds	r3, #1
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	3314      	adds	r3, #20
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	440b      	add	r3, r1
 8003120:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003124:	4618      	mov	r0, r3
 8003126:	7bbb      	ldrb	r3, [r7, #14]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	3314      	adds	r3, #20
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	440b      	add	r3, r1
 8003130:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003134:	1ac3      	subs	r3, r0, r3
 8003136:	fb92 f3f3 	sdiv	r3, r2, r3
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7f5b      	ldrb	r3, [r3, #29]
 8003140:	461c      	mov	r4, r3
 8003142:	7bb8      	ldrb	r0, [r7, #14]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4623      	mov	r3, r4
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1b1b      	subs	r3, r3, r4
 800314c:	4403      	add	r3, r0
 800314e:	3330      	adds	r3, #48	; 0x30
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	88db      	ldrh	r3, [r3, #6]
 8003156:	4413      	add	r3, r2
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	801a      	strh	r2, [r3, #0]
				return;
 800315e:	e157      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003160:	7bbb      	ldrb	r3, [r7, #14]
 8003162:	3301      	adds	r3, #1
 8003164:	73bb      	strb	r3, [r7, #14]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7f1b      	ldrb	r3, [r3, #28]
 800316a:	7bba      	ldrb	r2, [r7, #14]
 800316c:	429a      	cmp	r2, r3
 800316e:	f4ff af47 	bcc.w	8003000 <PDM_PWM_Duty_Cycle_Set+0x2bc>
			}
		}
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003172:	2300      	movs	r3, #0
 8003174:	737b      	strb	r3, [r7, #13]
 8003176:	e144      	b.n	8003402 <PDM_PWM_Duty_Cycle_Set+0x6be>
	{
		//Checks if the command variable point is inside the x, x + 1 collum
		if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 800317e:	7b7b      	ldrb	r3, [r7, #13]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	3314      	adds	r3, #20
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	440b      	add	r3, r1
 8003188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800318c:	429a      	cmp	r2, r3
 800318e:	f2c0 8135 	blt.w	80033fc <PDM_PWM_Duty_Cycle_Set+0x6b8>
			&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003198:	7b7b      	ldrb	r3, [r7, #13]
 800319a:	3301      	adds	r3, #1
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	3314      	adds	r3, #20
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	440b      	add	r3, r1
 80031a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f300 8127 	bgt.w	80033fc <PDM_PWM_Duty_Cycle_Set+0x6b8>
		{
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	733b      	strb	r3, [r7, #12]
 80031b2:	e11d      	b.n	80033f0 <PDM_PWM_Duty_Cycle_Set+0x6ac>
			{
				//Checks if the command variable point is inside the y, y + 1 line
				if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80031ba:	7b3b      	ldrb	r3, [r7, #12]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	3323      	adds	r3, #35	; 0x23
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	440b      	add	r3, r1
 80031c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f2c0 810e 	blt.w	80033ea <PDM_PWM_Duty_Cycle_Set+0x6a6>
					&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80031d4:	7b3b      	ldrb	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	3323      	adds	r3, #35	; 0x23
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	440b      	add	r3, r1
 80031e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f300 8100 	bgt.w	80033ea <PDM_PWM_Duty_Cycle_Set+0x6a6>
				{
					pwm_struct->Duty_Cycle = __PDM_BILINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80031f0:	4619      	mov	r1, r3
 80031f2:	7b3b      	ldrb	r3, [r7, #12]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	3323      	adds	r3, #35	; 0x23
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003200:	1ac9      	subs	r1, r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003208:	4618      	mov	r0, r3
 800320a:	7b7b      	ldrb	r3, [r7, #13]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	3314      	adds	r3, #20
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003218:	1ac0      	subs	r0, r0, r3
 800321a:	7b3b      	ldrb	r3, [r7, #12]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	7b7b      	ldrb	r3, [r7, #13]
 8003220:	1c5d      	adds	r5, r3, #1
 8003222:	687c      	ldr	r4, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	442b      	add	r3, r5
 800322c:	3330      	adds	r3, #48	; 0x30
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4423      	add	r3, r4
 8003232:	88db      	ldrh	r3, [r3, #6]
 8003234:	461e      	mov	r6, r3
 8003236:	7b3b      	ldrb	r3, [r7, #12]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	7b7d      	ldrb	r5, [r7, #13]
 800323c:	687c      	ldr	r4, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	442b      	add	r3, r5
 8003246:	3330      	adds	r3, #48	; 0x30
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4423      	add	r3, r4
 800324c:	88db      	ldrh	r3, [r3, #6]
 800324e:	1af3      	subs	r3, r6, r3
 8003250:	fb03 f200 	mul.w	r2, r3, r0
 8003254:	7b7b      	ldrb	r3, [r7, #13]
 8003256:	3301      	adds	r3, #1
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	3314      	adds	r3, #20
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4403      	add	r3, r0
 8003260:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003264:	461c      	mov	r4, r3
 8003266:	7b7b      	ldrb	r3, [r7, #13]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	3314      	adds	r3, #20
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4403      	add	r3, r0
 8003270:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003274:	1ae3      	subs	r3, r4, r3
 8003276:	fb92 f0f3 	sdiv	r0, r2, r3
 800327a:	7b3b      	ldrb	r3, [r7, #12]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	7b7d      	ldrb	r5, [r7, #13]
 8003280:	687c      	ldr	r4, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	442b      	add	r3, r5
 800328a:	3330      	adds	r3, #48	; 0x30
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4423      	add	r3, r4
 8003290:	88db      	ldrh	r3, [r3, #6]
 8003292:	4418      	add	r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800329a:	461c      	mov	r4, r3
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	3314      	adds	r3, #20
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032aa:	1ae4      	subs	r4, r4, r3
 80032ac:	7b3a      	ldrb	r2, [r7, #12]
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	1c5e      	adds	r6, r3, #1
 80032b2:	687d      	ldr	r5, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	4433      	add	r3, r6
 80032bc:	3330      	adds	r3, #48	; 0x30
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	442b      	add	r3, r5
 80032c2:	88db      	ldrh	r3, [r3, #6]
 80032c4:	469c      	mov	ip, r3
 80032c6:	7b3a      	ldrb	r2, [r7, #12]
 80032c8:	7b7e      	ldrb	r6, [r7, #13]
 80032ca:	687d      	ldr	r5, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	4433      	add	r3, r6
 80032d4:	3330      	adds	r3, #48	; 0x30
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	442b      	add	r3, r5
 80032da:	88db      	ldrh	r3, [r3, #6]
 80032dc:	ebac 0303 	sub.w	r3, ip, r3
 80032e0:	fb03 f204 	mul.w	r2, r3, r4
 80032e4:	7b7b      	ldrb	r3, [r7, #13]
 80032e6:	3301      	adds	r3, #1
 80032e8:	687c      	ldr	r4, [r7, #4]
 80032ea:	3314      	adds	r3, #20
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4423      	add	r3, r4
 80032f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032f4:	461d      	mov	r5, r3
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	687c      	ldr	r4, [r7, #4]
 80032fa:	3314      	adds	r3, #20
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4423      	add	r3, r4
 8003300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003304:	1aeb      	subs	r3, r5, r3
 8003306:	fb92 f4f3 	sdiv	r4, r2, r3
 800330a:	7b3a      	ldrb	r2, [r7, #12]
 800330c:	7b7e      	ldrb	r6, [r7, #13]
 800330e:	687d      	ldr	r5, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	4433      	add	r3, r6
 8003318:	3330      	adds	r3, #48	; 0x30
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	442b      	add	r3, r5
 800331e:	88db      	ldrh	r3, [r3, #6]
 8003320:	4423      	add	r3, r4
 8003322:	1ac3      	subs	r3, r0, r3
 8003324:	fb03 f201 	mul.w	r2, r3, r1
 8003328:	7b3b      	ldrb	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	3323      	adds	r3, #35	; 0x23
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	440b      	add	r3, r1
 8003334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003338:	4618      	mov	r0, r3
 800333a:	7b3b      	ldrb	r3, [r7, #12]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	3323      	adds	r3, #35	; 0x23
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	440b      	add	r3, r1
 8003344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003348:	1ac3      	subs	r3, r0, r3
 800334a:	fb92 f3f3 	sdiv	r3, r2, r3
 800334e:	b299      	uxth	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003356:	4618      	mov	r0, r3
 8003358:	7b7b      	ldrb	r3, [r7, #13]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	3314      	adds	r3, #20
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003366:	1ac0      	subs	r0, r0, r3
 8003368:	7b3a      	ldrb	r2, [r7, #12]
 800336a:	7b7b      	ldrb	r3, [r7, #13]
 800336c:	1c5d      	adds	r5, r3, #1
 800336e:	687c      	ldr	r4, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	442b      	add	r3, r5
 8003378:	3330      	adds	r3, #48	; 0x30
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4423      	add	r3, r4
 800337e:	88db      	ldrh	r3, [r3, #6]
 8003380:	461e      	mov	r6, r3
 8003382:	7b3a      	ldrb	r2, [r7, #12]
 8003384:	7b7d      	ldrb	r5, [r7, #13]
 8003386:	687c      	ldr	r4, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	442b      	add	r3, r5
 8003390:	3330      	adds	r3, #48	; 0x30
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4423      	add	r3, r4
 8003396:	88db      	ldrh	r3, [r3, #6]
 8003398:	1af3      	subs	r3, r6, r3
 800339a:	fb03 f200 	mul.w	r2, r3, r0
 800339e:	7b7b      	ldrb	r3, [r7, #13]
 80033a0:	3301      	adds	r3, #1
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	3314      	adds	r3, #20
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4403      	add	r3, r0
 80033aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033ae:	461c      	mov	r4, r3
 80033b0:	7b7b      	ldrb	r3, [r7, #13]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	3314      	adds	r3, #20
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4403      	add	r3, r0
 80033ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033be:	1ae3      	subs	r3, r4, r3
 80033c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80033c4:	b298      	uxth	r0, r3
 80033c6:	7b3a      	ldrb	r2, [r7, #12]
 80033c8:	7b7d      	ldrb	r5, [r7, #13]
 80033ca:	687c      	ldr	r4, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	442b      	add	r3, r5
 80033d4:	3330      	adds	r3, #48	; 0x30
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4423      	add	r3, r4
 80033da:	88db      	ldrh	r3, [r3, #6]
 80033dc:	4403      	add	r3, r0
 80033de:	b29b      	uxth	r3, r3
 80033e0:	440b      	add	r3, r1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	801a      	strh	r2, [r3, #0]
																		  pwm_struct->Command_Var_Step[1][y + 1],
																		  pwm_struct->Duty_Cycle_Map[y][x],
																		  pwm_struct->Duty_Cycle_Map[y][x + 1],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x + 1]);
					return;
 80033e8:	e012      	b.n	8003410 <PDM_PWM_Duty_Cycle_Set+0x6cc>
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 80033ea:	7b3b      	ldrb	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	733b      	strb	r3, [r7, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7f5b      	ldrb	r3, [r3, #29]
 80033f4:	7b3a      	ldrb	r2, [r7, #12]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f4ff aedc 	bcc.w	80031b4 <PDM_PWM_Duty_Cycle_Set+0x470>
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 80033fc:	7b7b      	ldrb	r3, [r7, #13]
 80033fe:	3301      	adds	r3, #1
 8003400:	737b      	strb	r3, [r7, #13]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7f1b      	ldrb	r3, [r3, #28]
 8003406:	7b7a      	ldrb	r2, [r7, #13]
 8003408:	429a      	cmp	r2, r3
 800340a:	f4ff aeb5 	bcc.w	8003178 <PDM_PWM_Duty_Cycle_Set+0x434>
				}
			}
		}
	}
	return;
 800340e:	bf00      	nop
}
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bcf0      	pop	{r4, r5, r6, r7}
 8003416:	4770      	bx	lr

08003418 <PDM_PWM_Init>:

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (PWM_Pin_Status >> pwm_out_number) & 0x01;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	331a      	adds	r3, #26
 800342a:	4a61      	ldr	r2, [pc, #388]	; (80035b0 <PDM_PWM_Init+0x198>)
 800342c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003430:	b21a      	sxth	r2, r3
 8003432:	4b60      	ldr	r3, [pc, #384]	; (80035b4 <PDM_PWM_Init+0x19c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	fa41 f303 	asr.w	r3, r1, r3
 800343e:	b21b      	sxth	r3, r3
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	b21b      	sxth	r3, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	b21a      	sxth	r2, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	331a      	adds	r3, #26
 800344e:	b291      	uxth	r1, r2
 8003450:	4a57      	ldr	r2, [pc, #348]	; (80035b0 <PDM_PWM_Init+0x198>)
 8003452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	2b03      	cmp	r3, #3
 800345a:	f200 80a5 	bhi.w	80035a8 <PDM_PWM_Init+0x190>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <PDM_PWM_Init+0x4c>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003475 	.word	0x08003475
 8003468:	0800347f 	.word	0x0800347f
 800346c:	08003489 	.word	0x08003489
 8003470:	08003493 	.word	0x08003493
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <PDM_PWM_Init+0x1a0>)
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	230c      	movs	r3, #12
 800347a:	837b      	strh	r3, [r7, #26]
 800347c:	e00d      	b.n	800349a <PDM_PWM_Init+0x82>
 800347e:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <PDM_PWM_Init+0x1a4>)
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	2304      	movs	r3, #4
 8003484:	837b      	strh	r3, [r7, #26]
 8003486:	e008      	b.n	800349a <PDM_PWM_Init+0x82>
 8003488:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <PDM_PWM_Init+0x1a8>)
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	2308      	movs	r3, #8
 800348e:	837b      	strh	r3, [r7, #26]
 8003490:	e003      	b.n	800349a <PDM_PWM_Init+0x82>
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <PDM_PWM_Init+0x1ac>)
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	230c      	movs	r3, #12
 8003498:	837b      	strh	r3, [r7, #26]
 800349a:	bf00      	nop

	//Sets PWM parameters if PWM is enabled
	if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 800349c:	4b45      	ldr	r3, [pc, #276]	; (80035b4 <PDM_PWM_Init+0x19c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	fa42 f303 	asr.w	r3, r2, r3
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d075      	beq.n	800359c <PDM_PWM_Init+0x184>
	{
		//Sets the PWM frequency
		__HAL_TIM_SET_AUTORELOAD(htim, pwm_struct->PWM_Frequency);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	885a      	ldrh	r2, [r3, #2]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	885b      	ldrh	r3, [r3, #2]
 80034be:	461a      	mov	r2, r3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	60da      	str	r2, [r3, #12]

		//Sets CAN filter and duty cycle map steps if PWM CAN is enabled and map lengths are bigger than zero
		if((((PWM_Pin_Status >> pwm_out_number) & 0x10) == OUTPUT_PWM_CAN_ENABLE) && (pwm_struct->Map_Lengths[0] != 0) && (pwm_struct->Map_Lengths[1] != 0))
 80034c4:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <PDM_PWM_Init+0x19c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	fa42 f303 	asr.w	r3, r2, r3
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d061      	beq.n	800359c <PDM_PWM_Init+0x184>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	7f1b      	ldrb	r3, [r3, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05d      	beq.n	800359c <PDM_PWM_Init+0x184>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	7f5b      	ldrb	r3, [r3, #29]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d059      	beq.n	800359c <PDM_PWM_Init+0x184>
		{
			PDM_PWM_CAN_Filter_Config(hcan, pwm_struct, pwm_out_number);
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7fd ff9a 	bl	8001428 <PDM_PWM_CAN_Filter_Config>

			for(uint16_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	833b      	strh	r3, [r7, #24]
 80034f8:	e020      	b.n	800353c <PDM_PWM_Init+0x124>
				pwm_struct->Command_Var_Step[0][i] = ((i * (pwm_struct->Command_Var_Lim[0][1] - pwm_struct->Command_Var_Lim[0][0])) / pwm_struct->Map_Lengths[0]) + pwm_struct->Command_Var_Lim[0][0];
 80034fa:	8b3b      	ldrh	r3, [r7, #24]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8003502:	4611      	mov	r1, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800350a:	1a8a      	subs	r2, r1, r2
 800350c:	fb02 f303 	mul.w	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	7f12      	ldrb	r2, [r2, #28]
 8003514:	fb93 f3f2 	sdiv	r3, r3, r2
 8003518:	b29a      	uxth	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003520:	b29b      	uxth	r3, r3
 8003522:	4413      	add	r3, r2
 8003524:	b29a      	uxth	r2, r3
 8003526:	8b3b      	ldrh	r3, [r7, #24]
 8003528:	b211      	sxth	r1, r2
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	3314      	adds	r3, #20
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	460a      	mov	r2, r1
 8003534:	805a      	strh	r2, [r3, #2]
			for(uint16_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 8003536:	8b3b      	ldrh	r3, [r7, #24]
 8003538:	3301      	adds	r3, #1
 800353a:	833b      	strh	r3, [r7, #24]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	7f1b      	ldrb	r3, [r3, #28]
 8003540:	b29b      	uxth	r3, r3
 8003542:	8b3a      	ldrh	r2, [r7, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d9d8      	bls.n	80034fa <PDM_PWM_Init+0xe2>

			for(uint16_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 8003548:	2300      	movs	r3, #0
 800354a:	82fb      	strh	r3, [r7, #22]
 800354c:	e020      	b.n	8003590 <PDM_PWM_Init+0x178>
				pwm_struct->Command_Var_Step[1][j] = ((j * (pwm_struct->Command_Var_Lim[1][1] - pwm_struct->Command_Var_Lim[1][0])) / pwm_struct->Map_Lengths[1]) + pwm_struct->Command_Var_Lim[1][0];
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 8003556:	4611      	mov	r1, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 800355e:	1a8a      	subs	r2, r1, r2
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	7f52      	ldrb	r2, [r2, #29]
 8003568:	fb93 f3f2 	sdiv	r3, r3, r2
 800356c:	b29a      	uxth	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003574:	b29b      	uxth	r3, r3
 8003576:	4413      	add	r3, r2
 8003578:	b29a      	uxth	r2, r3
 800357a:	8afb      	ldrh	r3, [r7, #22]
 800357c:	b211      	sxth	r1, r2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	3323      	adds	r3, #35	; 0x23
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	460a      	mov	r2, r1
 8003588:	805a      	strh	r2, [r3, #2]
			for(uint16_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 800358a:	8afb      	ldrh	r3, [r7, #22]
 800358c:	3301      	adds	r3, #1
 800358e:	82fb      	strh	r3, [r7, #22]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	7f5b      	ldrb	r3, [r3, #29]
 8003594:	b29b      	uxth	r3, r3
 8003596:	8afa      	ldrh	r2, [r7, #22]
 8003598:	429a      	cmp	r2, r3
 800359a:	d9d8      	bls.n	800354e <PDM_PWM_Init+0x136>
		}
	}

	//Start the PWM timer
	HAL_TIM_PWM_Start(htim, tim_channel);
 800359c:	8b7b      	ldrh	r3, [r7, #26]
 800359e:	4619      	mov	r1, r3
 80035a0:	69f8      	ldr	r0, [r7, #28]
 80035a2:	f008 fca5 	bl	800bef0 <HAL_TIM_PWM_Start>

	return;
 80035a6:	e000      	b.n	80035aa <PDM_PWM_Init+0x192>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80035a8:	bf00      	nop
}
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200011bc 	.word	0x200011bc
 80035b4:	20000ef4 	.word	0x20000ef4
 80035b8:	20000e44 	.word	0x20000e44
 80035bc:	2000044c 	.word	0x2000044c
 80035c0:	20001174 	.word	0x20001174
 80035c4:	20001054 	.word	0x20001054

080035c8 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	f200 80ed 	bhi.w	80037b6 <PDM_PWM_Output_Process+0x1ee>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <PDM_PWM_Output_Process+0x1c>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	080035ff 	.word	0x080035ff
 80035ec:	08003609 	.word	0x08003609
 80035f0:	08003613 	.word	0x08003613
 80035f4:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <PDM_PWM_Output_Process+0x1f8>)
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	230c      	movs	r3, #12
 80035fa:	817b      	strh	r3, [r7, #10]
 80035fc:	e00d      	b.n	800361a <PDM_PWM_Output_Process+0x52>
 80035fe:	4b71      	ldr	r3, [pc, #452]	; (80037c4 <PDM_PWM_Output_Process+0x1fc>)
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	2304      	movs	r3, #4
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	e008      	b.n	800361a <PDM_PWM_Output_Process+0x52>
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <PDM_PWM_Output_Process+0x200>)
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	2308      	movs	r3, #8
 800360e:	817b      	strh	r3, [r7, #10]
 8003610:	e003      	b.n	800361a <PDM_PWM_Output_Process+0x52>
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <PDM_PWM_Output_Process+0x204>)
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	230c      	movs	r3, #12
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	bf00      	nop

	//Check if virtual fuse isn't tripped and if the input pins match their enabled states
	if((((Driver_Safety_Flag >> pwm_out_number) & 0x0001) == 0)
 800361c:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <PDM_PWM_Output_Process+0x208>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	fa42 f303 	asr.w	r3, r2, r3
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d175      	bne.n	800371c <PDM_PWM_Output_Process+0x154>
			&& (__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0])
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	4968      	ldr	r1, [pc, #416]	; (80037d4 <PDM_PWM_Output_Process+0x20c>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <PDM_PWM_Output_Process+0x210>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	4013      	ands	r3, r2
 8003646:	b299      	uxth	r1, r3
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	4862      	ldr	r0, [pc, #392]	; (80037d4 <PDM_PWM_Output_Process+0x20c>)
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4403      	add	r3, r0
 8003656:	3304      	adds	r3, #4
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	4299      	cmp	r1, r3
 800365c:	d017      	beq.n	800368e <PDM_PWM_Output_Process+0xc6>
			||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1])))
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	495c      	ldr	r1, [pc, #368]	; (80037d4 <PDM_PWM_Output_Process+0x20c>)
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3302      	adds	r3, #2
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <PDM_PWM_Output_Process+0x210>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	4013      	ands	r3, r2
 8003676:	b299      	uxth	r1, r3
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4856      	ldr	r0, [pc, #344]	; (80037d4 <PDM_PWM_Output_Process+0x20c>)
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4403      	add	r3, r0
 8003686:	3306      	adds	r3, #6
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	4299      	cmp	r1, r3
 800368c:	d146      	bne.n	800371c <PDM_PWM_Output_Process+0x154>
	{
		//Checks if the output is enabled as PWM, if i isn't, just sets it at 100%
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 800368e:	4b53      	ldr	r3, [pc, #332]	; (80037dc <PDM_PWM_Output_Process+0x214>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	fa42 f303 	asr.w	r3, r2, r3
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d037      	beq.n	8003712 <PDM_PWM_Output_Process+0x14a>
		{
			//Checks if the inputs match the first PWM preset
			if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[0], pwm_struct->Input_DC_Preset[0]))
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f44f 720a 	mov.w	r2, #552	; 0x228
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	889a      	ldrh	r2, [r3, #4]
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <PDM_PWM_Output_Process+0x210>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	4013      	ands	r3, r2
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	891b      	ldrh	r3, [r3, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d104      	bne.n	80036cc <PDM_PWM_Output_Process+0x104>
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[0];
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	899a      	ldrh	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	801a      	strh	r2, [r3, #0]
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 80036ca:	e02b      	b.n	8003724 <PDM_PWM_Output_Process+0x15c>

			//Checks if the inputs match the second PWM preset
			else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[1], pwm_struct->Input_DC_Preset[1]))
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f44f 720a 	mov.w	r2, #552	; 0x228
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	88da      	ldrh	r2, [r3, #6]
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <PDM_PWM_Output_Process+0x210>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	895b      	ldrh	r3, [r3, #10]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d104      	bne.n	80036f6 <PDM_PWM_Output_Process+0x12e>
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[1];
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	89da      	ldrh	r2, [r3, #14]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	801a      	strh	r2, [r3, #0]
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 80036f4:	e016      	b.n	8003724 <PDM_PWM_Output_Process+0x15c>

			//If no preset is matched, set PWM duty cycle using the 3D map
			else if(((PWM_Pin_Status >> pwm_out_number) & 0x10) == OUTPUT_PWM_CAN_ENABLE)
 80036f6:	4b39      	ldr	r3, [pc, #228]	; (80037dc <PDM_PWM_Output_Process+0x214>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	fa42 f303 	asr.w	r3, r2, r3
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <PDM_PWM_Output_Process+0x15c>
				PDM_PWM_Duty_Cycle_Set(pwm_struct);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fb1a 	bl	8002d44 <PDM_PWM_Duty_Cycle_Set>
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003710:	e008      	b.n	8003724 <PDM_PWM_Output_Process+0x15c>

		}else{
			pwm_struct->Duty_Cycle = 1010;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8003718:	801a      	strh	r2, [r3, #0]
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 800371a:	e003      	b.n	8003724 <PDM_PWM_Output_Process+0x15c>
		}
	}else
		pwm_struct->Duty_Cycle = 0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e000      	b.n	8003726 <PDM_PWM_Output_Process+0x15e>
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003724:	bf00      	nop


	__HAL_TIM_SET_COMPARE(htim, tim_channel, (htim->Init.Period * pwm_struct->Duty_Cycle) / 1000);
 8003726:	897b      	ldrh	r3, [r7, #10]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <PDM_PWM_Output_Process+0x180>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	8812      	ldrh	r2, [r2, #0]
 8003734:	fb02 f203 	mul.w	r2, r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4928      	ldr	r1, [pc, #160]	; (80037e0 <PDM_PWM_Output_Process+0x218>)
 800373e:	fba1 1202 	umull	r1, r2, r1, r2
 8003742:	0992      	lsrs	r2, r2, #6
 8003744:	635a      	str	r2, [r3, #52]	; 0x34
 8003746:	e02e      	b.n	80037a6 <PDM_PWM_Output_Process+0x1de>
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d10d      	bne.n	800376a <PDM_PWM_Output_Process+0x1a2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	8812      	ldrh	r2, [r2, #0]
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4920      	ldr	r1, [pc, #128]	; (80037e0 <PDM_PWM_Output_Process+0x218>)
 8003760:	fba1 1303 	umull	r1, r3, r1, r3
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	6393      	str	r3, [r2, #56]	; 0x38
 8003768:	e01d      	b.n	80037a6 <PDM_PWM_Output_Process+0x1de>
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10d      	bne.n	800378c <PDM_PWM_Output_Process+0x1c4>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4917      	ldr	r1, [pc, #92]	; (80037e0 <PDM_PWM_Output_Process+0x218>)
 8003782:	fba1 1303 	umull	r1, r3, r1, r3
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	63d3      	str	r3, [r2, #60]	; 0x3c
 800378a:	e00c      	b.n	80037a6 <PDM_PWM_Output_Process+0x1de>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	4910      	ldr	r1, [pc, #64]	; (80037e0 <PDM_PWM_Output_Process+0x218>)
 800379e:	fba1 1303 	umull	r1, r3, r1, r3
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	Data_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->Duty_Cycle;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	331a      	adds	r3, #26
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	8811      	ldrh	r1, [r2, #0]
 80037ae:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <PDM_PWM_Output_Process+0x21c>)
 80037b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 80037b4:	e000      	b.n	80037b8 <PDM_PWM_Output_Process+0x1f0>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80037b6:	bf00      	nop
}
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000e44 	.word	0x20000e44
 80037c4:	2000044c 	.word	0x2000044c
 80037c8:	20001174 	.word	0x20001174
 80037cc:	20001054 	.word	0x20001054
 80037d0:	200005a0 	.word	0x200005a0
 80037d4:	200010a8 	.word	0x200010a8
 80037d8:	20001314 	.word	0x20001314
 80037dc:	20000ef4 	.word	0x20000ef4
 80037e0:	10624dd3 	.word	0x10624dd3
 80037e4:	20001288 	.word	0x20001288

080037e8 <PDM_Next_Data_Conversion>:
//uint8_t next_data - next data to be converted:	0: Output current 0
//													1: Output current 1
//													2: Driver temperature
//													3: Driver voltage
static void PDM_Next_Data_Conversion(uint8_t next_data)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
	switch(next_data)
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d84c      	bhi.n	8003892 <PDM_Next_Data_Conversion+0xaa>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <PDM_Next_Data_Conversion+0x18>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003811 	.word	0x08003811
 8003804:	08003831 	.word	0x08003831
 8003808:	08003851 	.word	0x08003851
 800380c:	08003871 	.word	0x08003871
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003810:	2201      	movs	r2, #1
 8003812:	2120      	movs	r1, #32
 8003814:	4821      	ldr	r0, [pc, #132]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003816:	f003 fa97 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 800381a:	2200      	movs	r2, #0
 800381c:	2108      	movs	r1, #8
 800381e:	481f      	ldr	r0, [pc, #124]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003820:	f003 fa92 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003824:	2200      	movs	r2, #0
 8003826:	2104      	movs	r1, #4
 8003828:	481c      	ldr	r0, [pc, #112]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 800382a:	f003 fa8d 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800382e:	e02f      	b.n	8003890 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003830:	2201      	movs	r2, #1
 8003832:	2120      	movs	r1, #32
 8003834:	4819      	ldr	r0, [pc, #100]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003836:	f003 fa87 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 800383a:	2200      	movs	r2, #0
 800383c:	2108      	movs	r1, #8
 800383e:	4817      	ldr	r0, [pc, #92]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003840:	f003 fa82 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003844:	2201      	movs	r2, #1
 8003846:	2104      	movs	r1, #4
 8003848:	4814      	ldr	r0, [pc, #80]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 800384a:	f003 fa7d 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800384e:	e01f      	b.n	8003890 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003850:	2201      	movs	r2, #1
 8003852:	2120      	movs	r1, #32
 8003854:	4811      	ldr	r0, [pc, #68]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003856:	f003 fa77 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 800385a:	2201      	movs	r2, #1
 800385c:	2108      	movs	r1, #8
 800385e:	480f      	ldr	r0, [pc, #60]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003860:	f003 fa72 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003864:	2200      	movs	r2, #0
 8003866:	2104      	movs	r1, #4
 8003868:	480c      	ldr	r0, [pc, #48]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 800386a:	f003 fa6d 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800386e:	e00f      	b.n	8003890 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003870:	2201      	movs	r2, #1
 8003872:	2120      	movs	r1, #32
 8003874:	4809      	ldr	r0, [pc, #36]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003876:	f003 fa67 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 800387a:	2201      	movs	r2, #1
 800387c:	2108      	movs	r1, #8
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 8003880:	f003 fa62 	bl	8006d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003884:	2201      	movs	r2, #1
 8003886:	2104      	movs	r1, #4
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <PDM_Next_Data_Conversion+0xb4>)
 800388a:	f003 fa5d 	bl	8006d48 <HAL_GPIO_WritePin>
		break;
 800388e:	bf00      	nop
	}

	return;
 8003890:	bf00      	nop
 8003892:	bf00      	nop
}
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <PDM_Read_Data>:
//										1: Output current 1
//										2: Driver temperature
//										3: Driver voltage
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Read_Data(uint8_t *data_read)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	//Stop us timer to reduce processing cost
	HAL_TIM_Base_Stop_IT(&htim7);
 80038a8:	48ad      	ldr	r0, [pc, #692]	; (8003b60 <PDM_Read_Data+0x2c0>)
 80038aa:	f008 faa3 	bl	800bdf4 <HAL_TIM_Base_Stop_IT>

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(*data_read)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	f200 81a1 	bhi.w	8003bfa <PDM_Read_Data+0x35a>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <PDM_Read_Data+0x20>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	08003997 	.word	0x08003997
 80038c8:	08003a8d 	.word	0x08003a8d
 80038cc:	08003b23 	.word	0x08003b23
	{
	case Data_Read_Current0:
		*data_read = Data_Read_Current1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e058      	b.n	800398e <PDM_Read_Data+0xee>
		{
			//Convert ADC into current
			Data_Buffer[i * 2] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	4aa1      	ldr	r2, [pc, #644]	; (8003b64 <PDM_Read_Data+0x2c4>)
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	f241 62f7 	movw	r2, #5879	; 0x16f7
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 80038f0:	33dc      	adds	r3, #220	; 0xdc
 80038f2:	4a9d      	ldr	r2, [pc, #628]	; (8003b68 <PDM_Read_Data+0x2c8>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	0b5a      	lsrs	r2, r3, #13
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	b291      	uxth	r1, r2
 8003900:	4a9a      	ldr	r2, [pc, #616]	; (8003b6c <PDM_Read_Data+0x2cc>)
 8003902:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[i * 2] > Output_Pin[i * 2].Current_Thresholds)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4a98      	ldr	r2, [pc, #608]	; (8003b6c <PDM_Read_Data+0x2cc>)
 800390c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	005a      	lsls	r2, r3, #1
 8003914:	4896      	ldr	r0, [pc, #600]	; (8003b70 <PDM_Read_Data+0x2d0>)
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	3308      	adds	r3, #8
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	4299      	cmp	r1, r3
 8003926:	d90d      	bls.n	8003944 <PDM_Read_Data+0xa4>
				Driver_Overcurrent_Flag |= (1 << (i * 2));
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2201      	movs	r2, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	b21a      	sxth	r2, r3
 8003934:	4b8f      	ldr	r3, [pc, #572]	; (8003b74 <PDM_Read_Data+0x2d4>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b21b      	sxth	r3, r3
 800393e:	b29a      	uxth	r2, r3
 8003940:	4b8c      	ldr	r3, [pc, #560]	; (8003b74 <PDM_Read_Data+0x2d4>)
 8003942:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4a87      	ldr	r2, [pc, #540]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003950:	d20d      	bcs.n	800396e <PDM_Read_Data+0xce>
				Data_ID_Buffer[i * 2] |= 1;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4a88      	ldr	r2, [pc, #544]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003958:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	b291      	uxth	r1, r2
 8003966:	4a84      	ldr	r2, [pc, #528]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003968:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800396c:	e00c      	b.n	8003988 <PDM_Read_Data+0xe8>
			else
				Data_ID_Buffer[i * 2] &= 0xFFFE;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4a81      	ldr	r2, [pc, #516]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003974:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	b291      	uxth	r1, r2
 8003982:	4a7d      	ldr	r2, [pc, #500]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	3301      	adds	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b07      	cmp	r3, #7
 8003992:	d9a3      	bls.n	80038dc <PDM_Read_Data+0x3c>
		}
		break;
 8003994:	e131      	b.n	8003bfa <PDM_Read_Data+0x35a>

	case Data_Read_Current1:
		*data_read = Data_Read_Current0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	73bb      	strb	r3, [r7, #14]
 80039a0:	e060      	b.n	8003a64 <PDM_Read_Data+0x1c4>
		{
			//Convert ADC into current
			Data_Buffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	4a6f      	ldr	r2, [pc, #444]	; (8003b64 <PDM_Read_Data+0x2c4>)
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	f241 62f7 	movw	r2, #5879	; 0x16f7
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 80039b6:	33dc      	adds	r3, #220	; 0xdc
 80039b8:	4a6b      	ldr	r2, [pc, #428]	; (8003b68 <PDM_Read_Data+0x2c8>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0b5a      	lsrs	r2, r3, #13
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	3301      	adds	r3, #1
 80039c6:	b291      	uxth	r1, r2
 80039c8:	4a68      	ldr	r2, [pc, #416]	; (8003b6c <PDM_Read_Data+0x2cc>)
 80039ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[(i * 2) + 1] > Output_Pin[(i * 2) + 1].Current_Thresholds)
 80039ce:	7bbb      	ldrb	r3, [r7, #14]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a65      	ldr	r2, [pc, #404]	; (8003b6c <PDM_Read_Data+0x2cc>)
 80039d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80039da:	7bbb      	ldrb	r3, [r7, #14]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	4863      	ldr	r0, [pc, #396]	; (8003b70 <PDM_Read_Data+0x2d0>)
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4403      	add	r3, r0
 80039ec:	3308      	adds	r3, #8
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	4299      	cmp	r1, r3
 80039f2:	d90e      	bls.n	8003a12 <PDM_Read_Data+0x172>
				Driver_Overcurrent_Flag |= (1 << ((i * 2) + 1));
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	3301      	adds	r3, #1
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	b21a      	sxth	r2, r3
 8003a02:	4b5c      	ldr	r3, [pc, #368]	; (8003b74 <PDM_Read_Data+0x2d4>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	b21b      	sxth	r3, r3
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <PDM_Read_Data+0x2d4>)
 8003a10:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	4a53      	ldr	r2, [pc, #332]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003a1e:	d20f      	bcs.n	8003a40 <PDM_Read_Data+0x1a0>
				Data_ID_Buffer[(i * 2) + 1] |= 1;
 8003a20:	7bbb      	ldrb	r3, [r7, #14]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a54      	ldr	r2, [pc, #336]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003a28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	3301      	adds	r3, #1
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	b291      	uxth	r1, r2
 8003a38:	4a4f      	ldr	r2, [pc, #316]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003a3e:	e00e      	b.n	8003a5e <PDM_Read_Data+0x1be>
			else
				Data_ID_Buffer[(i * 2) + 1] &= 0xFFFE;
 8003a40:	7bbb      	ldrb	r3, [r7, #14]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	3301      	adds	r3, #1
 8003a46:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003a48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003a4c:	7bbb      	ldrb	r3, [r7, #14]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	3301      	adds	r3, #1
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	b291      	uxth	r1, r2
 8003a58:	4a47      	ldr	r2, [pc, #284]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003a5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003a5e:	7bbb      	ldrb	r3, [r7, #14]
 8003a60:	3301      	adds	r3, #1
 8003a62:	73bb      	strb	r3, [r7, #14]
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	2b07      	cmp	r3, #7
 8003a68:	d99b      	bls.n	80039a2 <PDM_Read_Data+0x102>
		}

		if(Accumulator_Temp_Read >= READING_DELAY_TEMP)
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <PDM_Read_Data+0x2dc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	d903      	bls.n	8003a7a <PDM_Read_Data+0x1da>
			*data_read = Data_Read_Temperature;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]

		else if(Accumulator_Volt_Read >= READING_DELAY_VOLT)
			*data_read = Data_Read_Voltage;

		break;
 8003a78:	e0bc      	b.n	8003bf4 <PDM_Read_Data+0x354>
		else if(Accumulator_Volt_Read >= READING_DELAY_VOLT)
 8003a7a:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <PDM_Read_Data+0x2e0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b09      	cmp	r3, #9
 8003a80:	f240 80b8 	bls.w	8003bf4 <PDM_Read_Data+0x354>
			*data_read = Data_Read_Voltage;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2203      	movs	r2, #3
 8003a88:	701a      	strb	r2, [r3, #0]
		break;
 8003a8a:	e0b3      	b.n	8003bf4 <PDM_Read_Data+0x354>

	case Data_Read_Temperature:
		*data_read = Data_Read_Current0;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	737b      	strb	r3, [r7, #13]
 8003a96:	e040      	b.n	8003b1a <PDM_Read_Data+0x27a>
		{
			//Convert ADC into temperature
			Data_Buffer[16 + i] = __PDM_CONVERT_TEMPERATURE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003a98:	7b7b      	ldrb	r3, [r7, #13]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f06f 0215 	mvn.w	r2, #21
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	4a34      	ldr	r2, [pc, #208]	; (8003b84 <PDM_Read_Data+0x2e4>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	7b7b      	ldrb	r3, [r7, #13]
 8003aba:	3310      	adds	r3, #16
 8003abc:	b291      	uxth	r1, r2
 8003abe:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <PDM_Read_Data+0x2cc>)
 8003ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 8003ac4:	7b7b      	ldrb	r3, [r7, #13]
 8003ac6:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d906      	bls.n	8003ade <PDM_Read_Data+0x23e>
 8003ad0:	7b7b      	ldrb	r3, [r7, #13]
 8003ad2:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003adc:	d90d      	bls.n	8003afa <PDM_Read_Data+0x25a>
				Data_ID_Buffer[16 + i] |= 1;
 8003ade:	7b7b      	ldrb	r3, [r7, #13]
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003ae4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003ae8:	7b7b      	ldrb	r3, [r7, #13]
 8003aea:	3310      	adds	r3, #16
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	b291      	uxth	r1, r2
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003af4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003af8:	e00c      	b.n	8003b14 <PDM_Read_Data+0x274>
			else
				Data_ID_Buffer[16 + i] &= 0xFFFE;
 8003afa:	7b7b      	ldrb	r3, [r7, #13]
 8003afc:	3310      	adds	r3, #16
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003b00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003b04:	7b7b      	ldrb	r3, [r7, #13]
 8003b06:	3310      	adds	r3, #16
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	b291      	uxth	r1, r2
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003b14:	7b7b      	ldrb	r3, [r7, #13]
 8003b16:	3301      	adds	r3, #1
 8003b18:	737b      	strb	r3, [r7, #13]
 8003b1a:	7b7b      	ldrb	r3, [r7, #13]
 8003b1c:	2b07      	cmp	r3, #7
 8003b1e:	d9bb      	bls.n	8003a98 <PDM_Read_Data+0x1f8>
		}
		break;
 8003b20:	e06b      	b.n	8003bfa <PDM_Read_Data+0x35a>

	case Data_Read_Voltage:
		*data_read = Data_Read_Current0;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	733b      	strb	r3, [r7, #12]
 8003b2c:	e046      	b.n	8003bbc <PDM_Read_Data+0x31c>
		{
			//Convert ADC into voltage if the ADC value is valid
			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 8003b2e:	7b3b      	ldrb	r3, [r7, #12]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	2b09      	cmp	r3, #9
 8003b38:	d906      	bls.n	8003b48 <PDM_Read_Data+0x2a8>
 8003b3a:	7b3b      	ldrb	r3, [r7, #12]
 8003b3c:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <PDM_Read_Data+0x2c4>)
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003b46:	d91f      	bls.n	8003b88 <PDM_Read_Data+0x2e8>
				Data_ID_Buffer[24] &= 0xFFFE;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003b4a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <PDM_Read_Data+0x2d8>)
 8003b54:	861a      	strh	r2, [r3, #48]	; 0x30
		for(uint8_t i = 0; i < 8; i++)
 8003b56:	7b3b      	ldrb	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	733b      	strb	r3, [r7, #12]
 8003b5c:	e02e      	b.n	8003bbc <PDM_Read_Data+0x31c>
 8003b5e:	bf00      	nop
 8003b60:	200012c4 	.word	0x200012c4
 8003b64:	20000ef8 	.word	0x20000ef8
 8003b68:	d1b71759 	.word	0xd1b71759
 8003b6c:	20001288 	.word	0x20001288
 8003b70:	200010a8 	.word	0x200010a8
 8003b74:	20000494 	.word	0x20000494
 8003b78:	200011bc 	.word	0x200011bc
 8003b7c:	200010a0 	.word	0x200010a0
 8003b80:	200010a4 	.word	0x200010a4
 8003b84:	cccccccd 	.word	0xcccccccd
			else
			{
				Data_Buffer[24] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003b88:	7b3b      	ldrb	r3, [r7, #12]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <PDM_Read_Data+0x398>)
 8003b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b90:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <PDM_Read_Data+0x398>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <PDM_Read_Data+0x39c>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0b5b      	lsrs	r3, r3, #13
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <PDM_Read_Data+0x3a0>)
 8003baa:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_ID_Buffer[24] |= 1;
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <PDM_Read_Data+0x3a4>)
 8003bae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <PDM_Read_Data+0x3a4>)
 8003bb8:	861a      	strh	r2, [r3, #48]	; 0x30
				break;
 8003bba:	e002      	b.n	8003bc2 <PDM_Read_Data+0x322>
		for(uint8_t i = 0; i < 8; i++)
 8003bbc:	7b3b      	ldrb	r3, [r7, #12]
 8003bbe:	2b07      	cmp	r3, #7
 8003bc0:	d9b5      	bls.n	8003b2e <PDM_Read_Data+0x28e>
			}
		}

		//If no ADC value is valid, calculate voltage with Driver 1 reading
		if((Data_ID_Buffer[24] & 0xFFFE) == 0)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <PDM_Read_Data+0x3a4>)
 8003bc4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d112      	bne.n	8003bf8 <PDM_Read_Data+0x358>
			Data_Buffer[0] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[0], ADC_BUFFER[8]);
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <PDM_Read_Data+0x398>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <PDM_Read_Data+0x398>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <PDM_Read_Data+0x39c>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <PDM_Read_Data+0x3a0>)
 8003bf0:	801a      	strh	r2, [r3, #0]

		break;
 8003bf2:	e001      	b.n	8003bf8 <PDM_Read_Data+0x358>
		break;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <PDM_Read_Data+0x35a>
		break;
 8003bf8:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	Data_Buffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(ADC_BUFFER[9]);
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <PDM_Read_Data+0x398>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f647 52ea 	movw	r2, #32234	; 0x7dea
 8003c02:	fb02 f203 	mul.w	r2, r2, r3
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <PDM_Read_Data+0x3a8>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <PDM_Read_Data+0x3ac>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <PDM_Read_Data+0x3a0>)
 8003c16:	865a      	strh	r2, [r3, #50]	; 0x32

	//Sets multiplexer for next data conversion
	PDM_Next_Data_Conversion(*data_read);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fde3 	bl	80037e8 <PDM_Next_Data_Conversion>

	Accumulator_Delay = 0;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <PDM_Read_Data+0x3b0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

	//Restart us timer
	return HAL_TIM_Base_Start_IT(&htim7);
 8003c28:	480a      	ldr	r0, [pc, #40]	; (8003c54 <PDM_Read_Data+0x3b4>)
 8003c2a:	f008 f873 	bl	800bd14 <HAL_TIM_Base_Start_IT>
 8003c2e:	4603      	mov	r3, r0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000ef8 	.word	0x20000ef8
 8003c3c:	d1b71759 	.word	0xd1b71759
 8003c40:	20001288 	.word	0x20001288
 8003c44:	200011bc 	.word	0x200011bc
 8003c48:	ffd56d90 	.word	0xffd56d90
 8003c4c:	10624dd3 	.word	0x10624dd3
 8003c50:	200011f8 	.word	0x200011f8
 8003c54:	200012c4 	.word	0x200012c4

08003c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_MspInit+0x4c>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_MspInit+0x4c>)
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HAL_MspInit+0x4c>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_MspInit+0x4c>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_MspInit+0x4c>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_MspInit+0x4c>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800

08003ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 031c 	add.w	r3, r7, #28
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6b      	ldr	r2, [pc, #428]	; (8003e74 <HAL_ADC_MspInit+0x1cc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d172      	bne.n	8003db0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cda:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a62      	ldr	r2, [pc, #392]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b60      	ldr	r3, [pc, #384]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d1e:	23e0      	movs	r3, #224	; 0xe0
 8003d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d22:	2303      	movs	r3, #3
 8003d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4852      	ldr	r0, [pc, #328]	; (8003e7c <HAL_ADC_MspInit+0x1d4>)
 8003d32:	f002 fd69 	bl	8006808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d36:	2310      	movs	r3, #16
 8003d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d42:	f107 031c 	add.w	r3, r7, #28
 8003d46:	4619      	mov	r1, r3
 8003d48:	484d      	ldr	r0, [pc, #308]	; (8003e80 <HAL_ADC_MspInit+0x1d8>)
 8003d4a:	f002 fd5d 	bl	8006808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003d4e:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d50:	4a4d      	ldr	r2, [pc, #308]	; (8003e88 <HAL_ADC_MspInit+0x1e0>)
 8003d52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003d54:	4b4b      	ldr	r3, [pc, #300]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d60:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d6e:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d92:	483c      	ldr	r0, [pc, #240]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003d94:	f002 f98c 	bl	80060b0 <HAL_DMA_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003d9e:	f7fd fafd 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
 8003da8:	4a36      	ldr	r2, [pc, #216]	; (8003e84 <HAL_ADC_MspInit+0x1dc>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003dae:	e05d      	b.n	8003e6c <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <HAL_ADC_MspInit+0x1e4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d158      	bne.n	8003e6c <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a26      	ldr	r2, [pc, #152]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_ADC_MspInit+0x1d0>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 8003df2:	231f      	movs	r3, #31
 8003df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df6:	2303      	movs	r3, #3
 8003df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	4619      	mov	r1, r3
 8003e04:	481d      	ldr	r0, [pc, #116]	; (8003e7c <HAL_ADC_MspInit+0x1d4>)
 8003e06:	f002 fcff 	bl	8006808 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e0c:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <HAL_ADC_MspInit+0x1ec>)
 8003e0e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e16:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e2a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e32:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e3a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e42:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e52:	f002 f92d 	bl	80060b0 <HAL_DMA_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8003e5c:	f7fd fa9e 	bl	800139c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_ADC_MspInit+0x1e8>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e6c:	bf00      	nop
 8003e6e:	3730      	adds	r7, #48	; 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40012000 	.word	0x40012000
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	40020800 	.word	0x40020800
 8003e84:	20000fa4 	.word	0x20000fa4
 8003e88:	40026410 	.word	0x40026410
 8003e8c:	40012100 	.word	0x40012100
 8003e90:	200011fc 	.word	0x200011fc
 8003e94:	40026440 	.word	0x40026440

08003e98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_CAN_MspInit+0x94>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d134      	bne.n	8003f24 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <HAL_CAN_MspInit+0x98>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <HAL_CAN_MspInit+0x98>)
 8003ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_CAN_MspInit+0x98>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_CAN_MspInit+0x98>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <HAL_CAN_MspInit+0x98>)
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_CAN_MspInit+0x98>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f00:	2303      	movs	r3, #3
 8003f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f04:	2309      	movs	r3, #9
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4809      	ldr	r0, [pc, #36]	; (8003f34 <HAL_CAN_MspInit+0x9c>)
 8003f10:	f002 fc7a 	bl	8006808 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003f14:	2200      	movs	r2, #0
 8003f16:	2100      	movs	r1, #0
 8003f18:	2014      	movs	r0, #20
 8003f1a:	f002 f836 	bl	8005f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f1e:	2014      	movs	r0, #20
 8003f20:	f002 f84f 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003f24:	bf00      	nop
 8003f26:	3728      	adds	r7, #40	; 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40006400 	.word	0x40006400
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40020400 	.word	0x40020400

08003f38 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_CAN_MspDeInit+0x38>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10d      	bne.n	8003f66 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_CAN_MspDeInit+0x3c>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_CAN_MspDeInit+0x3c>)
 8003f50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f54:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003f56:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f5a:	4807      	ldr	r0, [pc, #28]	; (8003f78 <HAL_CAN_MspDeInit+0x40>)
 8003f5c:	f002 fde8 	bl	8006b30 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8003f60:	2014      	movs	r0, #20
 8003f62:	f002 f83c 	bl	8005fde <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40006400 	.word	0x40006400
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020400 	.word	0x40020400

08003f7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <HAL_CRC_MspInit+0x3c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10d      	bne.n	8003faa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_CRC_MspInit+0x40>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_CRC_MspInit+0x40>)
 8003f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <HAL_CRC_MspInit+0x40>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023000 	.word	0x40023000
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a34      	ldr	r2, [pc, #208]	; (80040b0 <HAL_I2C_MspInit+0xf0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d161      	bne.n	80040a6 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <HAL_I2C_MspInit+0xf4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <HAL_I2C_MspInit+0xf4>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_I2C_MspInit+0xf4>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ffe:	23c0      	movs	r3, #192	; 0xc0
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004002:	2312      	movs	r3, #18
 8004004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800400e:	2304      	movs	r3, #4
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4619      	mov	r1, r3
 8004018:	4827      	ldr	r0, [pc, #156]	; (80040b8 <HAL_I2C_MspInit+0xf8>)
 800401a:	f002 fbf5 	bl	8006808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_I2C_MspInit+0xf4>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <HAL_I2C_MspInit+0xf4>)
 8004028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800402c:	6413      	str	r3, [r2, #64]	; 0x40
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_I2C_MspInit+0xf4>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_I2C_MspInit+0x100>)
 800403e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004046:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004048:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800404e:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004050:	2200      	movs	r2, #0
 8004052:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800405a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 800405e:	2200      	movs	r2, #0
 8004060:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 800406a:	2200      	movs	r2, #0
 800406c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004070:	2200      	movs	r2, #0
 8004072:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004076:	2200      	movs	r2, #0
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800407a:	4810      	ldr	r0, [pc, #64]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 800407c:	f002 f818 	bl	80060b0 <HAL_DMA_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8004086:	f7fd f989 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a0b      	ldr	r2, [pc, #44]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 800408e:	635a      	str	r2, [r3, #52]	; 0x34
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <HAL_I2C_MspInit+0xfc>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004096:	2200      	movs	r2, #0
 8004098:	2100      	movs	r1, #0
 800409a:	201f      	movs	r0, #31
 800409c:	f001 ff75 	bl	8005f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040a0:	201f      	movs	r0, #31
 80040a2:	f001 ff8e 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040a6:	bf00      	nop
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40005400 	.word	0x40005400
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020400 	.word	0x40020400
 80040bc:	200004e0 	.word	0x200004e0
 80040c0:	400260a0 	.word	0x400260a0

080040c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3e      	ldr	r2, [pc, #248]	; (80041cc <HAL_TIM_Base_MspInit+0x108>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d116      	bne.n	8004104 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2019      	movs	r0, #25
 80040f8:	f001 ff47 	bl	8005f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80040fc:	2019      	movs	r0, #25
 80040fe:	f001 ff60 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004102:	e05e      	b.n	80041c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d10e      	bne.n	800412c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6413      	str	r3, [r2, #64]	; 0x40
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69bb      	ldr	r3, [r7, #24]
}
 800412a:	e04a      	b.n	80041c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <HAL_TIM_Base_MspInit+0x110>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	6413      	str	r3, [r2, #64]	; 0x40
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697b      	ldr	r3, [r7, #20]
}
 8004152:	e036      	b.n	80041c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM6)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <HAL_TIM_Base_MspInit+0x114>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d116      	bne.n	800418c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004168:	f043 0310 	orr.w	r3, r3, #16
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2036      	movs	r0, #54	; 0x36
 8004180:	f001 ff03 	bl	8005f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004184:	2036      	movs	r0, #54	; 0x36
 8004186:	f001 ff1c 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
}
 800418a:	e01a      	b.n	80041c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a12      	ldr	r2, [pc, #72]	; (80041dc <HAL_TIM_Base_MspInit+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d115      	bne.n	80041c2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 80041a0:	f043 0320 	orr.w	r3, r3, #32
 80041a4:	6413      	str	r3, [r2, #64]	; 0x40
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_TIM_Base_MspInit+0x10c>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	2037      	movs	r0, #55	; 0x37
 80041b8:	f001 fee7 	bl	8005f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041bc:	2037      	movs	r0, #55	; 0x37
 80041be:	f001 ff00 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
}
 80041c2:	bf00      	nop
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40001000 	.word	0x40001000
 80041dc:	40001400 	.word	0x40001400

080041e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <HAL_TIM_PWM_MspInit+0x3c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10d      	bne.n	800420e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_TIM_PWM_MspInit+0x40>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_TIM_PWM_MspInit+0x40>)
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	6453      	str	r3, [r2, #68]	; 0x44
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <HAL_TIM_PWM_MspInit+0x40>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010400 	.word	0x40010400
 8004220:	40023800 	.word	0x40023800

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 031c 	add.w	r3, r7, #28
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a49      	ldr	r2, [pc, #292]	; (8004368 <HAL_TIM_MspPostInit+0x144>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d11f      	bne.n	8004286 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	4b48      	ldr	r3, [pc, #288]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a47      	ldr	r2, [pc, #284]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 8004250:	f043 0310 	orr.w	r3, r3, #16
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b45      	ldr	r3, [pc, #276]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8004262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004268:	2302      	movs	r3, #2
 800426a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	2300      	movs	r3, #0
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004274:	2301      	movs	r3, #1
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8004278:	f107 031c 	add.w	r3, r7, #28
 800427c:	4619      	mov	r1, r3
 800427e:	483c      	ldr	r0, [pc, #240]	; (8004370 <HAL_TIM_MspPostInit+0x14c>)
 8004280:	f002 fac2 	bl	8006808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004284:	e06b      	b.n	800435e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428e:	d11f      	bne.n	80042d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4a34      	ldr	r2, [pc, #208]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
 80042a0:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 80042ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ba:	2300      	movs	r3, #0
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042be:	2301      	movs	r3, #1
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 80042c2:	f107 031c 	add.w	r3, r7, #28
 80042c6:	4619      	mov	r1, r3
 80042c8:	482a      	ldr	r0, [pc, #168]	; (8004374 <HAL_TIM_MspPostInit+0x150>)
 80042ca:	f002 fa9d 	bl	8006808 <HAL_GPIO_Init>
}
 80042ce:	e046      	b.n	800435e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <HAL_TIM_MspPostInit+0x154>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d11e      	bne.n	8004318 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a22      	ldr	r2, [pc, #136]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80042f6:	2302      	movs	r3, #2
 80042f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fa:	2302      	movs	r3, #2
 80042fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004302:	2300      	movs	r3, #0
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004306:	2302      	movs	r3, #2
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 800430a:	f107 031c 	add.w	r3, r7, #28
 800430e:	4619      	mov	r1, r3
 8004310:	4818      	ldr	r0, [pc, #96]	; (8004374 <HAL_TIM_MspPostInit+0x150>)
 8004312:	f002 fa79 	bl	8006808 <HAL_GPIO_Init>
}
 8004316:	e022      	b.n	800435e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a17      	ldr	r2, [pc, #92]	; (800437c <HAL_TIM_MspPostInit+0x158>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d11d      	bne.n	800435e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 800433e:	2301      	movs	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004342:	2302      	movs	r3, #2
 8004344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434a:	2300      	movs	r3, #0
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800434e:	2303      	movs	r3, #3
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8004352:	f107 031c 	add.w	r3, r7, #28
 8004356:	4619      	mov	r1, r3
 8004358:	4806      	ldr	r0, [pc, #24]	; (8004374 <HAL_TIM_MspPostInit+0x150>)
 800435a:	f002 fa55 	bl	8006808 <HAL_GPIO_Init>
}
 800435e:	bf00      	nop
 8004360:	3730      	adds	r7, #48	; 0x30
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40023800 	.word	0x40023800
 8004370:	40021000 	.word	0x40021000
 8004374:	40020400 	.word	0x40020400
 8004378:	40000400 	.word	0x40000400
 800437c:	40010400 	.word	0x40010400

08004380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004384:	e7fe      	b.n	8004384 <NMI_Handler+0x4>

08004386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800438a:	e7fe      	b.n	800438a <HardFault_Handler+0x4>

0800438c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004390:	e7fe      	b.n	8004390 <MemManage_Handler+0x4>

08004392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004396:	e7fe      	b.n	8004396 <BusFault_Handler+0x4>

08004398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800439c:	e7fe      	b.n	800439c <UsageFault_Handler+0x4>

0800439e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043cc:	f000 f976 	bl	80046bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 80043d8:	2001      	movs	r0, #1
 80043da:	f002 fce9 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 80043e6:	2002      	movs	r0, #2
 80043e8:	f002 fce2 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEL1_Pin);
 80043f4:	2004      	movs	r0, #4
 80043f6:	f002 fcdb 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}

080043fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEL0_Pin);
 8004402:	2008      	movs	r0, #8
 8004404:	f002 fcd4 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}

0800440c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAULTRST_Pin);
 8004410:	2010      	movs	r0, #16
 8004412:	f002 fccd 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <DMA1_Stream6_IRQHandler+0x10>)
 8004422:	f001 ff6d 	bl	8006300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200004e0 	.word	0x200004e0

08004430 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <CAN1_RX0_IRQHandler+0x10>)
 8004436:	f001 fa7a 	bl	800592e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000125c 	.word	0x2000125c

08004444 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_Pin);
 8004448:	2020      	movs	r0, #32
 800444a:	f002 fcb1 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT7_Pin);
 800444e:	2040      	movs	r0, #64	; 0x40
 8004450:	f002 fcae 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_RX_LED_Pin);
 8004454:	2080      	movs	r0, #128	; 0x80
 8004456:	f002 fcab 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT6_Pin);
 800445a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800445e:	f002 fca7 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT5_Pin);
 8004462:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004466:	f002 fca3 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004476:	f007 fe03 	bl	800c080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20001054 	.word	0x20001054

08004484 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <I2C1_EV_IRQHandler+0x10>)
 800448a:	f003 f975 	bl	8007778 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000540 	.word	0x20000540

08004498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OUTPUT3_Pin);
 800449c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80044a0:	f002 fc86 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT7_Pin);
 80044a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044a8:	f002 fc82 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT13_Pin);
 80044ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80044b0:	f002 fc7e 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT14_Pin);
 80044b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044b8:	f002 fc7a 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT4_Pin);
 80044bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044c0:	f002 fc76 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT16_Pin);
 80044c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044c8:	f002 fc72 	bl	8006db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044d4:	4802      	ldr	r0, [pc, #8]	; (80044e0 <TIM6_DAC_IRQHandler+0x10>)
 80044d6:	f007 fdd3 	bl	800c080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20001008 	.word	0x20001008

080044e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <TIM7_IRQHandler+0x10>)
 80044ea:	f007 fdc9 	bl	800c080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200012c4 	.word	0x200012c4

080044f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044fc:	4802      	ldr	r0, [pc, #8]	; (8004508 <DMA2_Stream0_IRQHandler+0x10>)
 80044fe:	f001 feff 	bl	8006300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000fa4 	.word	0x20000fa4

0800450c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <DMA2_Stream2_IRQHandler+0x10>)
 8004512:	f001 fef5 	bl	8006300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200011fc 	.word	0x200011fc

08004520 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004524:	4802      	ldr	r0, [pc, #8]	; (8004530 <OTG_FS_IRQHandler+0x10>)
 8004526:	f005 fa5c 	bl	80099e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200027ec 	.word	0x200027ec

08004534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800453c:	4a14      	ldr	r2, [pc, #80]	; (8004590 <_sbrk+0x5c>)
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <_sbrk+0x60>)
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004548:	4b13      	ldr	r3, [pc, #76]	; (8004598 <_sbrk+0x64>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <_sbrk+0x64>)
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <_sbrk+0x68>)
 8004554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <_sbrk+0x64>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d207      	bcs.n	8004574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004564:	f00c fa58 	bl	8010a18 <__errno>
 8004568:	4603      	mov	r3, r0
 800456a:	220c      	movs	r2, #12
 800456c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	e009      	b.n	8004588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <_sbrk+0x64>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <_sbrk+0x64>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	4a05      	ldr	r2, [pc, #20]	; (8004598 <_sbrk+0x64>)
 8004584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20020000 	.word	0x20020000
 8004594:	00004000 	.word	0x00004000
 8004598:	20000210 	.word	0x20000210
 800459c:	20002c08 	.word	0x20002c08

080045a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <SystemInit+0x20>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <SystemInit+0x20>)
 80045ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045c8:	480d      	ldr	r0, [pc, #52]	; (8004600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045ca:	490e      	ldr	r1, [pc, #56]	; (8004604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045d0:	e002      	b.n	80045d8 <LoopCopyDataInit>

080045d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045d6:	3304      	adds	r3, #4

080045d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045dc:	d3f9      	bcc.n	80045d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045de:	4a0b      	ldr	r2, [pc, #44]	; (800460c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045e0:	4c0b      	ldr	r4, [pc, #44]	; (8004610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e4:	e001      	b.n	80045ea <LoopFillZerobss>

080045e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045e8:	3204      	adds	r2, #4

080045ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045ec:	d3fb      	bcc.n	80045e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045ee:	f7ff ffd7 	bl	80045a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045f2:	f00c fa17 	bl	8010a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045f6:	f7fb ffc9 	bl	800058c <main>
  bx  lr    
 80045fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004604:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004608:	08010cbc 	.word	0x08010cbc
  ldr r2, =_sbss
 800460c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8004610:	20002c04 	.word	0x20002c04

08004614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004614:	e7fe      	b.n	8004614 <ADC_IRQHandler>
	...

08004618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <HAL_Init+0x40>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <HAL_Init+0x40>)
 8004622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_Init+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_Init+0x40>)
 800462e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_Init+0x40>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a07      	ldr	r2, [pc, #28]	; (8004658 <HAL_Init+0x40>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004640:	2003      	movs	r0, #3
 8004642:	f001 fc97 	bl	8005f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004646:	200f      	movs	r0, #15
 8004648:	f000 f808 	bl	800465c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800464c:	f7ff fb04 	bl	8003c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023c00 	.word	0x40023c00

0800465c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_InitTick+0x54>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_InitTick+0x58>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	4619      	mov	r1, r3
 800466e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004672:	fbb3 f3f1 	udiv	r3, r3, r1
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fcbd 	bl	8005ffa <HAL_SYSTICK_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e00e      	b.n	80046a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d80a      	bhi.n	80046a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004690:	2200      	movs	r2, #0
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f001 fc77 	bl	8005f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <HAL_InitTick+0x5c>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000000 	.word	0x20000000
 80046b4:	20000008 	.word	0x20000008
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_IncTick+0x20>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_IncTick+0x24>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4413      	add	r3, r2
 80046cc:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <HAL_IncTick+0x24>)
 80046ce:	6013      	str	r3, [r2, #0]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000008 	.word	0x20000008
 80046e0:	20001318 	.word	0x20001318

080046e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return uwTick;
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <HAL_GetTick+0x14>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20001318 	.word	0x20001318

080046fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff ffee 	bl	80046e4 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d005      	beq.n	8004722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_Delay+0x44>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004722:	bf00      	nop
 8004724:	f7ff ffde 	bl	80046e4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d8f7      	bhi.n	8004724 <HAL_Delay+0x28>
  {
  }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000008 	.word	0x20000008

08004744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e033      	b.n	80047c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff faa0 	bl	8003ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	d118      	bne.n	80047b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800478a:	f023 0302 	bic.w	r3, r3, #2
 800478e:	f043 0202 	orr.w	r2, r3, #2
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa78 	bl	8004c8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
 80047b2:	e001      	b.n	80047b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_Start_DMA+0x1e>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e0e9      	b.n	80049be <HAL_ADC_Start_DMA+0x1f2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d018      	beq.n	8004832 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004810:	4b6d      	ldr	r3, [pc, #436]	; (80049c8 <HAL_ADC_Start_DMA+0x1fc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6d      	ldr	r2, [pc, #436]	; (80049cc <HAL_ADC_Start_DMA+0x200>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0c9a      	lsrs	r2, r3, #18
 800481c:	4613      	mov	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004824:	e002      	b.n	800482c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3b01      	subs	r3, #1
 800482a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f9      	bne.n	8004826 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004840:	d107      	bne.n	8004852 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004850:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	f040 80a1 	bne.w	80049a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800488c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d106      	bne.n	80048b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f023 0206 	bic.w	r2, r3, #6
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
 80048ae:	e002      	b.n	80048b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048be:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <HAL_ADC_Start_DMA+0x204>)
 80048c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	4a43      	ldr	r2, [pc, #268]	; (80049d4 <HAL_ADC_Start_DMA+0x208>)
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	4a42      	ldr	r2, [pc, #264]	; (80049d8 <HAL_ADC_Start_DMA+0x20c>)
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	4a41      	ldr	r2, [pc, #260]	; (80049dc <HAL_ADC_Start_DMA+0x210>)
 80048d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	334c      	adds	r3, #76	; 0x4c
 800490e:	4619      	mov	r1, r3
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f001 fc7a 	bl	800620c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2b00      	cmp	r3, #0
 8004922:	d12a      	bne.n	800497a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2d      	ldr	r2, [pc, #180]	; (80049e0 <HAL_ADC_Start_DMA+0x214>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d015      	beq.n	800495a <HAL_ADC_Start_DMA+0x18e>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2c      	ldr	r2, [pc, #176]	; (80049e4 <HAL_ADC_Start_DMA+0x218>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d105      	bne.n	8004944 <HAL_ADC_Start_DMA+0x178>
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_ADC_Start_DMA+0x204>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <HAL_ADC_Start_DMA+0x21c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d136      	bne.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_ADC_Start_DMA+0x204>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d130      	bne.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d129      	bne.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e020      	b.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_ADC_Start_DMA+0x214>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d11b      	bne.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d114      	bne.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	e00b      	b.n	80049bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0210 	orr.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000000 	.word	0x20000000
 80049cc:	431bde83 	.word	0x431bde83
 80049d0:	40012300 	.word	0x40012300
 80049d4:	08004e85 	.word	0x08004e85
 80049d8:	08004f3f 	.word	0x08004f3f
 80049dc:	08004f5b 	.word	0x08004f5b
 80049e0:	40012000 	.word	0x40012000
 80049e4:	40012100 	.word	0x40012100
 80049e8:	40012200 	.word	0x40012200

080049ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x1c>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e113      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x244>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d925      	bls.n	8004aa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	3b1e      	subs	r3, #30
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43da      	mvns	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	400a      	ands	r2, r1
 8004a78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68d9      	ldr	r1, [r3, #12]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4403      	add	r3, r0
 8004a92:	3b1e      	subs	r3, #30
 8004a94:	409a      	lsls	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e022      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6919      	ldr	r1, [r3, #16]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6919      	ldr	r1, [r3, #16]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4403      	add	r3, r0
 8004adc:	409a      	lsls	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	d824      	bhi.n	8004b38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	3b05      	subs	r3, #5
 8004b00:	221f      	movs	r2, #31
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43da      	mvns	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	3b05      	subs	r3, #5
 8004b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34
 8004b36:	e04c      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	d824      	bhi.n	8004b8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	3b23      	subs	r3, #35	; 0x23
 8004b52:	221f      	movs	r2, #31
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43da      	mvns	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	400a      	ands	r2, r1
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3b23      	subs	r3, #35	; 0x23
 8004b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
 8004b88:	e023      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	3b41      	subs	r3, #65	; 0x41
 8004b9c:	221f      	movs	r2, #31
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	400a      	ands	r2, r1
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4618      	mov	r0, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3b41      	subs	r3, #65	; 0x41
 8004bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bd2:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <HAL_ADC_ConfigChannel+0x250>)
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <HAL_ADC_ConfigChannel+0x254>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10f      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x1d8>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d10b      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <HAL_ADC_ConfigChannel+0x254>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d12b      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x23a>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_ADC_ConfigChannel+0x258>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <HAL_ADC_ConfigChannel+0x1f4>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b11      	cmp	r3, #17
 8004c1a:	d122      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <HAL_ADC_ConfigChannel+0x258>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d111      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c3e:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <HAL_ADC_ConfigChannel+0x25c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <HAL_ADC_ConfigChannel+0x260>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	0c9a      	lsrs	r2, r3, #18
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c54:	e002      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f9      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40012300 	.word	0x40012300
 8004c7c:	40012000 	.word	0x40012000
 8004c80:	10000012 	.word	0x10000012
 8004c84:	20000000 	.word	0x20000000
 8004c88:	431bde83 	.word	0x431bde83

08004c8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c94:	4b79      	ldr	r3, [pc, #484]	; (8004e7c <ADC_Init+0x1f0>)
 8004c96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	021a      	lsls	r2, r3, #8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6899      	ldr	r1, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	4a58      	ldr	r2, [pc, #352]	; (8004e80 <ADC_Init+0x1f4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d022      	beq.n	8004d6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6899      	ldr	r1, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	e00f      	b.n	8004d8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0202 	bic.w	r2, r2, #2
 8004d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7e1b      	ldrb	r3, [r3, #24]
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01b      	beq.n	8004df0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004dd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	3b01      	subs	r3, #1
 8004de4:	035a      	lsls	r2, r3, #13
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
 8004dee:	e007      	b.n	8004e00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	051a      	lsls	r2, r3, #20
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e42:	025a      	lsls	r2, r3, #9
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	029a      	lsls	r2, r3, #10
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40012300 	.word	0x40012300
 8004e80:	0f000001 	.word	0x0f000001

08004e84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d13c      	bne.n	8004f18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d12b      	bne.n	8004f10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d127      	bne.n	8004f10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d119      	bne.n	8004f10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0220 	bic.w	r2, r2, #32
 8004eea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	f043 0201 	orr.w	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff fd6b 	bl	80049ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f16:	e00e      	b.n	8004f36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fd75 	bl	8004a14 <HAL_ADC_ErrorCallback>
}
 8004f2a:	e004      	b.n	8004f36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fd57 	bl	8004a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff fd4a 	bl	8004a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0ed      	b.n	8005176 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fe ff76 	bl	8003e98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fbc:	f7ff fb92 	bl	80046e4 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fc2:	e012      	b.n	8004fea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fc4:	f7ff fb8e 	bl	80046e4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b0a      	cmp	r3, #10
 8004fd0:	d90b      	bls.n	8004fea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2205      	movs	r2, #5
 8004fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e0c5      	b.n	8005176 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0e5      	beq.n	8004fc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0202 	bic.w	r2, r2, #2
 8005006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005008:	f7ff fb6c 	bl	80046e4 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800500e:	e012      	b.n	8005036 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005010:	f7ff fb68 	bl	80046e4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b0a      	cmp	r3, #10
 800501c:	d90b      	bls.n	8005036 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2205      	movs	r2, #5
 800502e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e09f      	b.n	8005176 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7e1b      	ldrb	r3, [r3, #24]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d108      	bne.n	800505e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e007      	b.n	800506e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800506c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7e5b      	ldrb	r3, [r3, #25]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d108      	bne.n	8005088 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e007      	b.n	8005098 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005096:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	7e9b      	ldrb	r3, [r3, #26]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d108      	bne.n	80050b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0220 	orr.w	r2, r2, #32
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e007      	b.n	80050c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0220 	bic.w	r2, r2, #32
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7edb      	ldrb	r3, [r3, #27]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d108      	bne.n	80050dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0210 	bic.w	r2, r2, #16
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e007      	b.n	80050ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0210 	orr.w	r2, r2, #16
 80050ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7f1b      	ldrb	r3, [r3, #28]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d108      	bne.n	8005106 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e007      	b.n	8005116 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0208 	bic.w	r2, r2, #8
 8005114:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7f5b      	ldrb	r3, [r3, #29]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d108      	bne.n	8005130 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0204 	orr.w	r2, r2, #4
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e007      	b.n	8005140 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0204 	bic.w	r2, r2, #4
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	ea42 0103 	orr.w	r1, r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	1e5a      	subs	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e015      	b.n	80051bc <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f93b 	bl	800540c <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fe fece 	bl	8003f38 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051aa:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d003      	beq.n	80051ea <HAL_CAN_ConfigFilter+0x26>
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f040 80be 	bne.w	8005366 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80051ea:	4b65      	ldr	r3, [pc, #404]	; (8005380 <HAL_CAN_ConfigFilter+0x1bc>)
 80051ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051f4:	f043 0201 	orr.w	r2, r3, #1
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005204:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	431a      	orrs	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2201      	movs	r2, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	43db      	mvns	r3, r3
 800523c:	401a      	ands	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d123      	bne.n	8005294 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800526e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3248      	adds	r2, #72	; 0x48
 8005274:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005288:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800528a:	6979      	ldr	r1, [r7, #20]
 800528c:	3348      	adds	r3, #72	; 0x48
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	440b      	add	r3, r1
 8005292:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d122      	bne.n	80052e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80052bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3248      	adds	r2, #72	; 0x48
 80052c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80052d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	3348      	adds	r3, #72	; 0x48
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	440b      	add	r3, r1
 80052e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	401a      	ands	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80052fc:	e007      	b.n	800530e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	431a      	orrs	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43db      	mvns	r3, r3
 8005320:	401a      	ands	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005328:	e007      	b.n	800533a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	431a      	orrs	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	431a      	orrs	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005358:	f023 0201 	bic.w	r2, r3, #1
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e006      	b.n	8005374 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40006400 	.word	0x40006400

08005384 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d12e      	bne.n	80053f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053b0:	f7ff f998 	bl	80046e4 <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80053b6:	e012      	b.n	80053de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053b8:	f7ff f994 	bl	80046e4 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b0a      	cmp	r3, #10
 80053c4:	d90b      	bls.n	80053de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2205      	movs	r2, #5
 80053d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e012      	b.n	8005404 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e006      	b.n	8005404 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
  }
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d133      	bne.n	8005488 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005430:	f7ff f958 	bl	80046e4 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005436:	e012      	b.n	800545e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005438:	f7ff f954 	bl	80046e4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b0a      	cmp	r3, #10
 8005444:	d90b      	bls.n	800545e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2205      	movs	r2, #5
 8005456:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e01b      	b.n	8005496 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0e5      	beq.n	8005438 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0202 	bic.w	r2, r2, #2
 800547a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e006      	b.n	8005496 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800549e:	b480      	push	{r7}
 80054a0:	b089      	sub	sp, #36	; 0x24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80054bc:	7ffb      	ldrb	r3, [r7, #31]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d003      	beq.n	80054ca <HAL_CAN_AddTxMessage+0x2c>
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f040 80b8 	bne.w	800563a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a0 	beq.w	800562a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	0e1b      	lsrs	r3, r3, #24
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d907      	bls.n	800550a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e09e      	b.n	8005648 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800550a:	2201      	movs	r2, #1
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	409a      	lsls	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10d      	bne.n	8005538 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	6809      	ldr	r1, [r1, #0]
 800552a:	431a      	orrs	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3318      	adds	r3, #24
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	440b      	add	r3, r1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e00f      	b.n	8005558 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005542:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800554c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	3318      	adds	r3, #24
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	440b      	add	r3, r1
 8005556:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3318      	adds	r3, #24
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	440b      	add	r3, r1
 8005568:	3304      	adds	r3, #4
 800556a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	7d1b      	ldrb	r3, [r3, #20]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d111      	bne.n	8005598 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3318      	adds	r3, #24
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	6811      	ldr	r1, [r2, #0]
 8005588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3318      	adds	r3, #24
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	440b      	add	r3, r1
 8005594:	3304      	adds	r3, #4
 8005596:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3307      	adds	r3, #7
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	061a      	lsls	r2, r3, #24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3306      	adds	r3, #6
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3305      	adds	r3, #5
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4313      	orrs	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	3204      	adds	r2, #4
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	4610      	mov	r0, r2
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	6811      	ldr	r1, [r2, #0]
 80055c0:	ea43 0200 	orr.w	r2, r3, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80055ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3303      	adds	r3, #3
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	061a      	lsls	r2, r3, #24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3302      	adds	r3, #2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3301      	adds	r3, #1
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	4313      	orrs	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	4610      	mov	r0, r2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	ea43 0200 	orr.w	r2, r3, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	440b      	add	r3, r1
 8005600:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005604:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3318      	adds	r3, #24
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	4413      	add	r3, r2
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6811      	ldr	r1, [r2, #0]
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3318      	adds	r3, #24
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	440b      	add	r3, r1
 8005624:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e00e      	b.n	8005648 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e006      	b.n	8005648 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3724      	adds	r7, #36	; 0x24
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005666:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005668:	7afb      	ldrb	r3, [r7, #11]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d11d      	bne.n	80056b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80056be:	b480      	push	{r7}
 80056c0:	b087      	sub	sp, #28
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d003      	beq.n	80056e2 <HAL_CAN_GetRxMessage+0x24>
 80056da:	7dfb      	ldrb	r3, [r7, #23]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	f040 80f3 	bne.w	80058c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10e      	bne.n	8005706 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e0e7      	b.n	80058d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0d8      	b.n	80058d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	331b      	adds	r3, #27
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	4413      	add	r3, r2
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0204 	and.w	r2, r3, #4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	331b      	adds	r3, #27
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	4413      	add	r3, r2
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0d5b      	lsrs	r3, r3, #21
 8005752:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e00b      	b.n	8005774 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	331b      	adds	r3, #27
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	4413      	add	r3, r2
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	331b      	adds	r3, #27
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	4413      	add	r3, r2
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0202 	and.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	331b      	adds	r3, #27
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	4413      	add	r3, r2
 8005796:	3304      	adds	r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 020f 	and.w	r2, r3, #15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	331b      	adds	r3, #27
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	4413      	add	r3, r2
 80057ae:	3304      	adds	r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	331b      	adds	r3, #27
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	4413      	add	r3, r2
 80057c6:	3304      	adds	r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	0c1b      	lsrs	r3, r3, #16
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	4413      	add	r3, r2
 80057dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	0a1a      	lsrs	r2, r3, #8
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	4413      	add	r3, r2
 800580c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	0c1a      	lsrs	r2, r3, #16
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	3302      	adds	r3, #2
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4413      	add	r3, r2
 8005826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0e1a      	lsrs	r2, r3, #24
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	3303      	adds	r3, #3
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4413      	add	r3, r2
 8005840:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	4413      	add	r3, r2
 8005858:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	0a1a      	lsrs	r2, r3, #8
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	3305      	adds	r3, #5
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	4413      	add	r3, r2
 8005872:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0c1a      	lsrs	r2, r3, #16
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	3306      	adds	r3, #6
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	4413      	add	r3, r2
 800588c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	0e1a      	lsrs	r2, r3, #24
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	3307      	adds	r3, #7
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d108      	bne.n	80058b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0220 	orr.w	r2, r2, #32
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	e007      	b.n	80058c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0220 	orr.w	r2, r2, #32
 80058c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e006      	b.n	80058d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d002      	beq.n	8005900 <HAL_CAN_ActivateNotification+0x1e>
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d109      	bne.n	8005914 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6959      	ldr	r1, [r3, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	e006      	b.n	8005922 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08a      	sub	sp, #40	; 0x28
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005936:	2300      	movs	r3, #0
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d07c      	beq.n	8005a6e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d023      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2201      	movs	r2, #1
 8005984:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f983 	bl	8005c9c <HAL_CAN_TxMailbox0CompleteCallback>
 8005996:	e016      	b.n	80059c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	e00c      	b.n	80059c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e002      	b.n	80059c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f989 	bl	8005cd8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d024      	beq.n	8005a1a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f963 	bl	8005cb0 <HAL_CAN_TxMailbox1CompleteCallback>
 80059ea:	e016      	b.n	8005a1a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
 80059fe:	e00c      	b.n	8005a1a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
 8005a12:	e002      	b.n	8005a1a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f969 	bl	8005cec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d024      	beq.n	8005a6e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f943 	bl	8005cc4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005a3e:	e016      	b.n	8005a6e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
 8005a52:	e00c      	b.n	8005a6e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
 8005a66:	e002      	b.n	8005a6e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f949 	bl	8005d00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f930 	bl	8005d14 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fd f89d 	bl	8002c0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2210      	movs	r2, #16
 8005af4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2208      	movs	r2, #8
 8005b10:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f912 	bl	8005d3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f8f9 	bl	8005d28 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d006      	beq.n	8005b58 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8fc 	bl	8005d50 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2208      	movs	r2, #8
 8005b72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8f5 	bl	8005d64 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d07b      	beq.n	8005c7c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d072      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d043      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d03e      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfc:	2b60      	cmp	r3, #96	; 0x60
 8005bfe:	d02b      	beq.n	8005c58 <HAL_CAN_IRQHandler+0x32a>
 8005c00:	2b60      	cmp	r3, #96	; 0x60
 8005c02:	d82e      	bhi.n	8005c62 <HAL_CAN_IRQHandler+0x334>
 8005c04:	2b50      	cmp	r3, #80	; 0x50
 8005c06:	d022      	beq.n	8005c4e <HAL_CAN_IRQHandler+0x320>
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d82a      	bhi.n	8005c62 <HAL_CAN_IRQHandler+0x334>
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	d019      	beq.n	8005c44 <HAL_CAN_IRQHandler+0x316>
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d826      	bhi.n	8005c62 <HAL_CAN_IRQHandler+0x334>
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d010      	beq.n	8005c3a <HAL_CAN_IRQHandler+0x30c>
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d822      	bhi.n	8005c62 <HAL_CAN_IRQHandler+0x334>
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d002      	beq.n	8005c26 <HAL_CAN_IRQHandler+0x2f8>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d005      	beq.n	8005c30 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005c24:	e01d      	b.n	8005c62 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	f043 0308 	orr.w	r3, r3, #8
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c2e:	e019      	b.n	8005c64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	f043 0310 	orr.w	r3, r3, #16
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c38:	e014      	b.n	8005c64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c42:	e00f      	b.n	8005c64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c4c:	e00a      	b.n	8005c64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c56:	e005      	b.n	8005c64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c60:	e000      	b.n	8005c64 <HAL_CAN_IRQHandler+0x336>
            break;
 8005c62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f872 	bl	8005d78 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c94:	bf00      	nop
 8005c96:	3728      	adds	r7, #40	; 0x28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005da8:	4013      	ands	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	60d3      	str	r3, [r2, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <__NVIC_GetPriorityGrouping+0x18>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	f003 0307 	and.w	r3, r3, #7
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db0b      	blt.n	8005e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	f003 021f 	and.w	r2, r3, #31
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <__NVIC_EnableIRQ+0x38>)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	2001      	movs	r0, #1
 8005e12:	fa00 f202 	lsl.w	r2, r0, r2
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	e000e100 	.word	0xe000e100

08005e2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	db12      	blt.n	8005e64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	f003 021f 	and.w	r2, r3, #31
 8005e44:	490a      	ldr	r1, [pc, #40]	; (8005e70 <__NVIC_DisableIRQ+0x44>)
 8005e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e52:	3320      	adds	r3, #32
 8005e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e58:	f3bf 8f4f 	dsb	sy
}
 8005e5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e5e:	f3bf 8f6f 	isb	sy
}
 8005e62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	e000e100 	.word	0xe000e100

08005e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	db0a      	blt.n	8005e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	490c      	ldr	r1, [pc, #48]	; (8005ec0 <__NVIC_SetPriority+0x4c>)
 8005e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e92:	0112      	lsls	r2, r2, #4
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	440b      	add	r3, r1
 8005e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e9c:	e00a      	b.n	8005eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	4908      	ldr	r1, [pc, #32]	; (8005ec4 <__NVIC_SetPriority+0x50>)
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	0112      	lsls	r2, r2, #4
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	761a      	strb	r2, [r3, #24]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	e000e100 	.word	0xe000e100
 8005ec4:	e000ed00 	.word	0xe000ed00

08005ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	; 0x24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f1c3 0307 	rsb	r3, r3, #7
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	bf28      	it	cs
 8005ee6:	2304      	movcs	r3, #4
 8005ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3304      	adds	r3, #4
 8005eee:	2b06      	cmp	r3, #6
 8005ef0:	d902      	bls.n	8005ef8 <NVIC_EncodePriority+0x30>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3b03      	subs	r3, #3
 8005ef6:	e000      	b.n	8005efa <NVIC_EncodePriority+0x32>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43da      	mvns	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f10:	f04f 31ff 	mov.w	r1, #4294967295
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	43d9      	mvns	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f20:	4313      	orrs	r3, r2
         );
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f40:	d301      	bcc.n	8005f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f42:	2301      	movs	r3, #1
 8005f44:	e00f      	b.n	8005f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f46:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <SysTick_Config+0x40>)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f4e:	210f      	movs	r1, #15
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	f7ff ff8e 	bl	8005e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <SysTick_Config+0x40>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <SysTick_Config+0x40>)
 8005f60:	2207      	movs	r2, #7
 8005f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000e010 	.word	0xe000e010

08005f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff05 	bl	8005d8c <__NVIC_SetPriorityGrouping>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	4603      	mov	r3, r0
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f9c:	f7ff ff1a 	bl	8005dd4 <__NVIC_GetPriorityGrouping>
 8005fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f7ff ff8e 	bl	8005ec8 <NVIC_EncodePriority>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff ff5d 	bl	8005e74 <__NVIC_SetPriority>
}
 8005fba:	bf00      	nop
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	4603      	mov	r3, r0
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff ff0d 	bl	8005df0 <__NVIC_EnableIRQ>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff ff1d 	bl	8005e2c <__NVIC_DisableIRQ>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ff94 	bl	8005f30 <SysTick_Config>
 8006008:	4603      	mov	r3, r0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e00e      	b.n	8006042 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	795b      	ldrb	r3, [r3, #5]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fd ffa1 	bl	8003f7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2202      	movs	r2, #2
 800605e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e00a      	b.n	800608c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	441a      	add	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3301      	adds	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d3f0      	bcc.n	8006076 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80060a2:	693b      	ldr	r3, [r7, #16]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7fe fb12 	bl	80046e4 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e099      	b.n	8006200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ec:	e00f      	b.n	800610e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ee:	f7fe faf9 	bl	80046e4 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	d908      	bls.n	800610e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2203      	movs	r2, #3
 8006106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e078      	b.n	8006200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e8      	bne.n	80060ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4b38      	ldr	r3, [pc, #224]	; (8006208 <HAL_DMA_Init+0x158>)
 8006128:	4013      	ands	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800613a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b04      	cmp	r3, #4
 8006166:	d107      	bne.n	8006178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	4313      	orrs	r3, r2
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d117      	bne.n	80061d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 faab 	bl	8006710 <DMA_CheckFifoParam>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061ce:	2301      	movs	r3, #1
 80061d0:	e016      	b.n	8006200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa62 	bl	80066a4 <DMA_CalcBaseAndBitshift>
 80061e0:	4603      	mov	r3, r0
 80061e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e8:	223f      	movs	r2, #63	; 0x3f
 80061ea:	409a      	lsls	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	f010803f 	.word	0xf010803f

0800620c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_DMA_Start_IT+0x26>
 800622e:	2302      	movs	r3, #2
 8006230:	e040      	b.n	80062b4 <HAL_DMA_Start_IT+0xa8>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b01      	cmp	r3, #1
 8006244:	d12f      	bne.n	80062a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2202      	movs	r2, #2
 800624a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f9f4 	bl	8006648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006264:	223f      	movs	r2, #63	; 0x3f
 8006266:	409a      	lsls	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0216 	orr.w	r2, r2, #22
 800627a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e005      	b.n	80062b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062ae:	2302      	movs	r3, #2
 80062b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d004      	beq.n	80062da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e00c      	b.n	80062f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2205      	movs	r2, #5
 80062de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800630c:	4b92      	ldr	r3, [pc, #584]	; (8006558 <HAL_DMA_IRQHandler+0x258>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a92      	ldr	r2, [pc, #584]	; (800655c <HAL_DMA_IRQHandler+0x25c>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0a9b      	lsrs	r3, r3, #10
 8006318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	2208      	movs	r2, #8
 800632c:	409a      	lsls	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01a      	beq.n	800636c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0204 	bic.w	r2, r2, #4
 8006352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006358:	2208      	movs	r2, #8
 800635a:	409a      	lsls	r2, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	2201      	movs	r2, #1
 8006372:	409a      	lsls	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d012      	beq.n	80063a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	2201      	movs	r2, #1
 8006390:	409a      	lsls	r2, r3
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	f043 0202 	orr.w	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a6:	2204      	movs	r2, #4
 80063a8:	409a      	lsls	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d012      	beq.n	80063d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c4:	2204      	movs	r2, #4
 80063c6:	409a      	lsls	r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	f043 0204 	orr.w	r2, r3, #4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063dc:	2210      	movs	r2, #16
 80063de:	409a      	lsls	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d043      	beq.n	8006470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d03c      	beq.n	8006470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	2210      	movs	r2, #16
 80063fc:	409a      	lsls	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d018      	beq.n	8006442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d108      	bne.n	8006430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d024      	beq.n	8006470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
 800642e:	e01f      	b.n	8006470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01b      	beq.n	8006470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
 8006440:	e016      	b.n	8006470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d107      	bne.n	8006460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0208 	bic.w	r2, r2, #8
 800645e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006474:	2220      	movs	r2, #32
 8006476:	409a      	lsls	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4013      	ands	r3, r2
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 808e 	beq.w	800659e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8086 	beq.w	800659e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	2220      	movs	r2, #32
 8006498:	409a      	lsls	r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	d136      	bne.n	8006518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0216 	bic.w	r2, r2, #22
 80064b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <HAL_DMA_IRQHandler+0x1da>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0208 	bic.w	r2, r2, #8
 80064e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	223f      	movs	r2, #63	; 0x3f
 80064f0:	409a      	lsls	r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650a:	2b00      	cmp	r3, #0
 800650c:	d07d      	beq.n	800660a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
        }
        return;
 8006516:	e078      	b.n	800660a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01c      	beq.n	8006560 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d108      	bne.n	8006546 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	2b00      	cmp	r3, #0
 800653a:	d030      	beq.n	800659e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	e02b      	b.n	800659e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d027      	beq.n	800659e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
 8006556:	e022      	b.n	800659e <HAL_DMA_IRQHandler+0x29e>
 8006558:	20000000 	.word	0x20000000
 800655c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0210 	bic.w	r2, r2, #16
 800657c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d032      	beq.n	800660c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d022      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2205      	movs	r2, #5
 80065b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d307      	bcc.n	80065e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f2      	bne.n	80065ca <HAL_DMA_IRQHandler+0x2ca>
 80065e4:	e000      	b.n	80065e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80065e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	e000      	b.n	800660c <HAL_DMA_IRQHandler+0x30c>
        return;
 800660a:	bf00      	nop
    }
  }
}
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop

08006614 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006622:	b2db      	uxtb	r3, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d108      	bne.n	8006688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006686:	e007      	b.n	8006698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	3b10      	subs	r3, #16
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <DMA_CalcBaseAndBitshift+0x64>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <DMA_CalcBaseAndBitshift+0x68>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d909      	bls.n	80066e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	1d1a      	adds	r2, r3, #4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	659a      	str	r2, [r3, #88]	; 0x58
 80066e4:	e007      	b.n	80066f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	aaaaaaab 	.word	0xaaaaaaab
 800670c:	08010ca4 	.word	0x08010ca4

08006710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11f      	bne.n	800676a <DMA_CheckFifoParam+0x5a>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d856      	bhi.n	80067de <DMA_CheckFifoParam+0xce>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <DMA_CheckFifoParam+0x28>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006749 	.word	0x08006749
 800673c:	0800675b 	.word	0x0800675b
 8006740:	08006749 	.word	0x08006749
 8006744:	080067df 	.word	0x080067df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d046      	beq.n	80067e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006758:	e043      	b.n	80067e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006762:	d140      	bne.n	80067e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006768:	e03d      	b.n	80067e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006772:	d121      	bne.n	80067b8 <DMA_CheckFifoParam+0xa8>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d837      	bhi.n	80067ea <DMA_CheckFifoParam+0xda>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <DMA_CheckFifoParam+0x70>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	08006791 	.word	0x08006791
 8006784:	08006797 	.word	0x08006797
 8006788:	08006791 	.word	0x08006791
 800678c:	080067a9 	.word	0x080067a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
      break;
 8006794:	e030      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d025      	beq.n	80067ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067a6:	e022      	b.n	80067ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067b0:	d11f      	bne.n	80067f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067b6:	e01c      	b.n	80067f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d903      	bls.n	80067c6 <DMA_CheckFifoParam+0xb6>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d003      	beq.n	80067cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80067c4:	e018      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
      break;
 80067ca:	e015      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00e      	beq.n	80067f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e00b      	b.n	80067f6 <DMA_CheckFifoParam+0xe6>
      break;
 80067de:	bf00      	nop
 80067e0:	e00a      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      break;
 80067e2:	bf00      	nop
 80067e4:	e008      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      break;
 80067e6:	bf00      	nop
 80067e8:	e006      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      break;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <DMA_CheckFifoParam+0xe8>
      break;
 80067f6:	bf00      	nop
    }
  } 
  
  return status; 
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop

08006808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006808:	b480      	push	{r7}
 800680a:	b089      	sub	sp, #36	; 0x24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800681e:	2300      	movs	r3, #0
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e165      	b.n	8006af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006824:	2201      	movs	r2, #1
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4013      	ands	r3, r2
 8006836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	429a      	cmp	r2, r3
 800683e:	f040 8154 	bne.w	8006aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b01      	cmp	r3, #1
 800684c:	d005      	beq.n	800685a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006856:	2b02      	cmp	r3, #2
 8006858:	d130      	bne.n	80068bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	2203      	movs	r2, #3
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43db      	mvns	r3, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4013      	ands	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	4313      	orrs	r3, r2
 8006882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006890:	2201      	movs	r2, #1
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 0201 	and.w	r2, r3, #1
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d017      	beq.n	80068f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	2203      	movs	r2, #3
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4013      	ands	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d123      	bne.n	800694c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	08da      	lsrs	r2, r3, #3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3208      	adds	r2, #8
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	220f      	movs	r2, #15
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	08da      	lsrs	r2, r3, #3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3208      	adds	r2, #8
 8006946:	69b9      	ldr	r1, [r7, #24]
 8006948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	2203      	movs	r2, #3
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4013      	ands	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 0203 	and.w	r2, r3, #3
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	4313      	orrs	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80ae 	beq.w	8006aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	4b5d      	ldr	r3, [pc, #372]	; (8006b08 <HAL_GPIO_Init+0x300>)
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	4a5c      	ldr	r2, [pc, #368]	; (8006b08 <HAL_GPIO_Init+0x300>)
 8006998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800699c:	6453      	str	r3, [r2, #68]	; 0x44
 800699e:	4b5a      	ldr	r3, [pc, #360]	; (8006b08 <HAL_GPIO_Init+0x300>)
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069aa:	4a58      	ldr	r2, [pc, #352]	; (8006b0c <HAL_GPIO_Init+0x304>)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	089b      	lsrs	r3, r3, #2
 80069b0:	3302      	adds	r3, #2
 80069b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	220f      	movs	r2, #15
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43db      	mvns	r3, r3
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	4013      	ands	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a4f      	ldr	r2, [pc, #316]	; (8006b10 <HAL_GPIO_Init+0x308>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d025      	beq.n	8006a22 <HAL_GPIO_Init+0x21a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a4e      	ldr	r2, [pc, #312]	; (8006b14 <HAL_GPIO_Init+0x30c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01f      	beq.n	8006a1e <HAL_GPIO_Init+0x216>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a4d      	ldr	r2, [pc, #308]	; (8006b18 <HAL_GPIO_Init+0x310>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d019      	beq.n	8006a1a <HAL_GPIO_Init+0x212>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a4c      	ldr	r2, [pc, #304]	; (8006b1c <HAL_GPIO_Init+0x314>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <HAL_GPIO_Init+0x20e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a4b      	ldr	r2, [pc, #300]	; (8006b20 <HAL_GPIO_Init+0x318>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00d      	beq.n	8006a12 <HAL_GPIO_Init+0x20a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a4a      	ldr	r2, [pc, #296]	; (8006b24 <HAL_GPIO_Init+0x31c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d007      	beq.n	8006a0e <HAL_GPIO_Init+0x206>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a49      	ldr	r2, [pc, #292]	; (8006b28 <HAL_GPIO_Init+0x320>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <HAL_GPIO_Init+0x202>
 8006a06:	2306      	movs	r3, #6
 8006a08:	e00c      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a0a:	2307      	movs	r3, #7
 8006a0c:	e00a      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a0e:	2305      	movs	r3, #5
 8006a10:	e008      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a12:	2304      	movs	r3, #4
 8006a14:	e006      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a16:	2303      	movs	r3, #3
 8006a18:	e004      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e002      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_GPIO_Init+0x21c>
 8006a22:	2300      	movs	r3, #0
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	f002 0203 	and.w	r2, r2, #3
 8006a2a:	0092      	lsls	r2, r2, #2
 8006a2c:	4093      	lsls	r3, r2
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a34:	4935      	ldr	r1, [pc, #212]	; (8006b0c <HAL_GPIO_Init+0x304>)
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a42:	4b3a      	ldr	r3, [pc, #232]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a66:	4a31      	ldr	r2, [pc, #196]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a6c:	4b2f      	ldr	r3, [pc, #188]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a90:	4a26      	ldr	r2, [pc, #152]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a96:	4b25      	ldr	r3, [pc, #148]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006aba:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4013      	ands	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <HAL_GPIO_Init+0x324>)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3301      	adds	r3, #1
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b0f      	cmp	r3, #15
 8006af4:	f67f ae96 	bls.w	8006824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	3724      	adds	r7, #36	; 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40013800 	.word	0x40013800
 8006b10:	40020000 	.word	0x40020000
 8006b14:	40020400 	.word	0x40020400
 8006b18:	40020800 	.word	0x40020800
 8006b1c:	40020c00 	.word	0x40020c00
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40021400 	.word	0x40021400
 8006b28:	40021800 	.word	0x40021800
 8006b2c:	40013c00 	.word	0x40013c00

08006b30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	e0c7      	b.n	8006cdc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	f040 80b7 	bne.w	8006cd6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006b68:	4a62      	ldr	r2, [pc, #392]	; (8006cf4 <HAL_GPIO_DeInit+0x1c4>)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b74:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	220f      	movs	r2, #15
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	4013      	ands	r3, r2
 8006b88:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a5a      	ldr	r2, [pc, #360]	; (8006cf8 <HAL_GPIO_DeInit+0x1c8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d025      	beq.n	8006bde <HAL_GPIO_DeInit+0xae>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a59      	ldr	r2, [pc, #356]	; (8006cfc <HAL_GPIO_DeInit+0x1cc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d01f      	beq.n	8006bda <HAL_GPIO_DeInit+0xaa>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <HAL_GPIO_DeInit+0x1d0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d019      	beq.n	8006bd6 <HAL_GPIO_DeInit+0xa6>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a57      	ldr	r2, [pc, #348]	; (8006d04 <HAL_GPIO_DeInit+0x1d4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <HAL_GPIO_DeInit+0xa2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a56      	ldr	r2, [pc, #344]	; (8006d08 <HAL_GPIO_DeInit+0x1d8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00d      	beq.n	8006bce <HAL_GPIO_DeInit+0x9e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a55      	ldr	r2, [pc, #340]	; (8006d0c <HAL_GPIO_DeInit+0x1dc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <HAL_GPIO_DeInit+0x9a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a54      	ldr	r2, [pc, #336]	; (8006d10 <HAL_GPIO_DeInit+0x1e0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d101      	bne.n	8006bc6 <HAL_GPIO_DeInit+0x96>
 8006bc2:	2306      	movs	r3, #6
 8006bc4:	e00c      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bc6:	2307      	movs	r3, #7
 8006bc8:	e00a      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bca:	2305      	movs	r3, #5
 8006bcc:	e008      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bce:	2304      	movs	r3, #4
 8006bd0:	e006      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e004      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e002      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <HAL_GPIO_DeInit+0xb0>
 8006bde:	2300      	movs	r3, #0
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	f002 0203 	and.w	r2, r2, #3
 8006be6:	0092      	lsls	r2, r2, #2
 8006be8:	4093      	lsls	r3, r2
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d132      	bne.n	8006c56 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006bf0:	4b48      	ldr	r3, [pc, #288]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	4946      	ldr	r1, [pc, #280]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006bfe:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	4943      	ldr	r1, [pc, #268]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006c0c:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	43db      	mvns	r3, r3
 8006c14:	493f      	ldr	r1, [pc, #252]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006c1a:	4b3e      	ldr	r3, [pc, #248]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	493c      	ldr	r1, [pc, #240]	; (8006d14 <HAL_GPIO_DeInit+0x1e4>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	220f      	movs	r2, #15
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006c38:	4a2e      	ldr	r2, [pc, #184]	; (8006cf4 <HAL_GPIO_DeInit+0x1c4>)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	3302      	adds	r3, #2
 8006c40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	43da      	mvns	r2, r3
 8006c48:	482a      	ldr	r0, [pc, #168]	; (8006cf4 <HAL_GPIO_DeInit+0x1c4>)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	400a      	ands	r2, r1
 8006c50:	3302      	adds	r3, #2
 8006c52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	2103      	movs	r1, #3
 8006c60:	fa01 f303 	lsl.w	r3, r1, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	401a      	ands	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	08da      	lsrs	r2, r3, #3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3208      	adds	r2, #8
 8006c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	220f      	movs	r2, #15
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	43db      	mvns	r3, r3
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	08d2      	lsrs	r2, r2, #3
 8006c8c:	4019      	ands	r1, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3208      	adds	r2, #8
 8006c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	401a      	ands	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	401a      	ands	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	2103      	movs	r1, #3
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	401a      	ands	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	f67f af34 	bls.w	8006b4c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40013800 	.word	0x40013800
 8006cf8:	40020000 	.word	0x40020000
 8006cfc:	40020400 	.word	0x40020400
 8006d00:	40020800 	.word	0x40020800
 8006d04:	40020c00 	.word	0x40020c00
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	40021400 	.word	0x40021400
 8006d10:	40021800 	.word	0x40021800
 8006d14:	40013c00 	.word	0x40013c00

08006d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
 8006d34:	e001      	b.n	8006d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	807b      	strh	r3, [r7, #2]
 8006d54:	4613      	mov	r3, r2
 8006d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d58:	787b      	ldrb	r3, [r7, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d5e:	887a      	ldrh	r2, [r7, #2]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d64:	e003      	b.n	8006d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d66:	887b      	ldrh	r3, [r7, #2]
 8006d68:	041a      	lsls	r2, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	619a      	str	r2, [r3, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d8c:	887a      	ldrh	r2, [r7, #2]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4013      	ands	r3, r2
 8006d92:	041a      	lsls	r2, r3, #16
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	43d9      	mvns	r1, r3
 8006d98:	887b      	ldrh	r3, [r7, #2]
 8006d9a:	400b      	ands	r3, r1
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	619a      	str	r2, [r3, #24]
}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	4603      	mov	r3, r0
 8006db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dc6:	4a05      	ldr	r2, [pc, #20]	; (8006ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fb ff3a 	bl	8002c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40013c00 	.word	0x40013c00

08006de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e12b      	b.n	800704a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fd f8da 	bl	8003fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	; 0x24
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e44:	f003 ff88 	bl	800ad58 <HAL_RCC_GetPCLK1Freq>
 8006e48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	4a81      	ldr	r2, [pc, #516]	; (8007054 <HAL_I2C_Init+0x274>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d807      	bhi.n	8006e64 <HAL_I2C_Init+0x84>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a80      	ldr	r2, [pc, #512]	; (8007058 <HAL_I2C_Init+0x278>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bf94      	ite	ls
 8006e5c:	2301      	movls	r3, #1
 8006e5e:	2300      	movhi	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	e006      	b.n	8006e72 <HAL_I2C_Init+0x92>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a7d      	ldr	r2, [pc, #500]	; (800705c <HAL_I2C_Init+0x27c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	bf94      	ite	ls
 8006e6c:	2301      	movls	r3, #1
 8006e6e:	2300      	movhi	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e0e7      	b.n	800704a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4a78      	ldr	r2, [pc, #480]	; (8007060 <HAL_I2C_Init+0x280>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	0c9b      	lsrs	r3, r3, #18
 8006e84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a6a      	ldr	r2, [pc, #424]	; (8007054 <HAL_I2C_Init+0x274>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d802      	bhi.n	8006eb4 <HAL_I2C_Init+0xd4>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	e009      	b.n	8006ec8 <HAL_I2C_Init+0xe8>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	4a69      	ldr	r2, [pc, #420]	; (8007064 <HAL_I2C_Init+0x284>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	099b      	lsrs	r3, r3, #6
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006eda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	495c      	ldr	r1, [pc, #368]	; (8007054 <HAL_I2C_Init+0x274>)
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	d819      	bhi.n	8006f1c <HAL_I2C_Init+0x13c>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1e59      	subs	r1, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ef6:	1c59      	adds	r1, r3, #1
 8006ef8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006efc:	400b      	ands	r3, r1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <HAL_I2C_Init+0x138>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1e59      	subs	r1, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f10:	3301      	adds	r3, #1
 8006f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f16:	e051      	b.n	8006fbc <HAL_I2C_Init+0x1dc>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	e04f      	b.n	8006fbc <HAL_I2C_Init+0x1dc>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d111      	bne.n	8006f48 <HAL_I2C_Init+0x168>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	1e58      	subs	r0, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	440b      	add	r3, r1
 8006f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f36:	3301      	adds	r3, #1
 8006f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf0c      	ite	eq
 8006f40:	2301      	moveq	r3, #1
 8006f42:	2300      	movne	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e012      	b.n	8006f6e <HAL_I2C_Init+0x18e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1e58      	subs	r0, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	0099      	lsls	r1, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bf0c      	ite	eq
 8006f68:	2301      	moveq	r3, #1
 8006f6a:	2300      	movne	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_I2C_Init+0x196>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e022      	b.n	8006fbc <HAL_I2C_Init+0x1dc>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10e      	bne.n	8006f9c <HAL_I2C_Init+0x1bc>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1e58      	subs	r0, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6859      	ldr	r1, [r3, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	440b      	add	r3, r1
 8006f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f90:	3301      	adds	r3, #1
 8006f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9a:	e00f      	b.n	8006fbc <HAL_I2C_Init+0x1dc>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1e58      	subs	r0, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6859      	ldr	r1, [r3, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	0099      	lsls	r1, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	6809      	ldr	r1, [r1, #0]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6911      	ldr	r1, [r2, #16]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	68d2      	ldr	r2, [r2, #12]
 8006ff6:	4311      	orrs	r1, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	000186a0 	.word	0x000186a0
 8007058:	001e847f 	.word	0x001e847f
 800705c:	003d08ff 	.word	0x003d08ff
 8007060:	431bde83 	.word	0x431bde83
 8007064:	10624dd3 	.word	0x10624dd3

08007068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08c      	sub	sp, #48	; 0x30
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	4608      	mov	r0, r1
 8007072:	4611      	mov	r1, r2
 8007074:	461a      	mov	r2, r3
 8007076:	4603      	mov	r3, r0
 8007078:	817b      	strh	r3, [r7, #10]
 800707a:	460b      	mov	r3, r1
 800707c:	813b      	strh	r3, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007082:	f7fd fb2f 	bl	80046e4 <HAL_GetTick>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b20      	cmp	r3, #32
 8007092:	f040 8208 	bne.w	80074a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2319      	movs	r3, #25
 800709c:	2201      	movs	r2, #1
 800709e:	497b      	ldr	r1, [pc, #492]	; (800728c <HAL_I2C_Mem_Read+0x224>)
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f002 f95d 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070ac:	2302      	movs	r3, #2
 80070ae:	e1fb      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_I2C_Mem_Read+0x56>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e1f4      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d007      	beq.n	80070e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2222      	movs	r2, #34	; 0x22
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2240      	movs	r2, #64	; 0x40
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a5b      	ldr	r2, [pc, #364]	; (8007290 <HAL_I2C_Mem_Read+0x228>)
 8007124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007126:	88f8      	ldrh	r0, [r7, #6]
 8007128:	893a      	ldrh	r2, [r7, #8]
 800712a:	8979      	ldrh	r1, [r7, #10]
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	4603      	mov	r3, r0
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f001 fe70 	bl	8008e1c <I2C_RequestMemoryRead>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e1b0      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d113      	bne.n	8007176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800714e:	2300      	movs	r3, #0
 8007150:	623b      	str	r3, [r7, #32]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	623b      	str	r3, [r7, #32]
 8007162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e184      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717a:	2b01      	cmp	r3, #1
 800717c:	d11b      	bne.n	80071b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e164      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d11b      	bne.n	80071f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071de:	2300      	movs	r3, #0
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	e144      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800720c:	e138      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007212:	2b03      	cmp	r3, #3
 8007214:	f200 80f1 	bhi.w	80073fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721c:	2b01      	cmp	r3, #1
 800721e:	d123      	bne.n	8007268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f002 f9e5 	bl	80095f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e139      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007266:	e10b      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726c:	2b02      	cmp	r3, #2
 800726e:	d14e      	bne.n	800730e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	2200      	movs	r2, #0
 8007278:	4906      	ldr	r1, [pc, #24]	; (8007294 <HAL_I2C_Mem_Read+0x22c>)
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f002 f870 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e10e      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
 800728a:	bf00      	nop
 800728c:	00100002 	.word	0x00100002
 8007290:	ffff0000 	.word	0xffff0000
 8007294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691a      	ldr	r2, [r3, #16]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800730c:	e0b8      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	2200      	movs	r2, #0
 8007316:	4966      	ldr	r1, [pc, #408]	; (80074b0 <HAL_I2C_Mem_Read+0x448>)
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f002 f821 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0bf      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2200      	movs	r2, #0
 8007372:	494f      	ldr	r1, [pc, #316]	; (80074b0 <HAL_I2C_Mem_Read+0x448>)
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f001 fff3 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e091      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073f8:	e042      	b.n	8007480 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f002 f8f8 	bl	80095f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e04c      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b04      	cmp	r3, #4
 800744c:	d118      	bne.n	8007480 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007484:	2b00      	cmp	r3, #0
 8007486:	f47f aec2 	bne.w	800720e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e000      	b.n	80074a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	00010004 	.word	0x00010004

080074b4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	817b      	strh	r3, [r7, #10]
 80074c6:	460b      	mov	r3, r1
 80074c8:	813b      	strh	r3, [r7, #8]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074d2:	f7fd f907 	bl	80046e4 <HAL_GetTick>
 80074d6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	f040 813a 	bne.w	800775a <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80074e6:	4b9f      	ldr	r3, [pc, #636]	; (8007764 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	08db      	lsrs	r3, r3, #3
 80074ec:	4a9e      	ldr	r2, [pc, #632]	; (8007768 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	0a1a      	lsrs	r2, r3, #8
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009a      	lsls	r2, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	3b01      	subs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d116      	bne.n	800753a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f043 0220 	orr.w	r2, r3, #32
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e110      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b02      	cmp	r3, #2
 8007546:	d0db      	beq.n	8007500 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_I2C_Mem_Write_DMA+0xa2>
 8007552:	2302      	movs	r3, #2
 8007554:	e102      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b01      	cmp	r3, #1
 800756a:	d007      	beq.n	800757c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800758a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2221      	movs	r2, #33	; 0x21
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2240      	movs	r2, #64	; 0x40
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80075ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a6c      	ldr	r2, [pc, #432]	; (800776c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80075bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80075be:	897a      	ldrh	r2, [r7, #10]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80075c4:	893a      	ldrh	r2, [r7, #8]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80075ca:	88fa      	ldrh	r2, [r7, #6]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80a9 	beq.w	8007732 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02a      	beq.n	800763e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	4a60      	ldr	r2, [pc, #384]	; (8007770 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 80075ee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f4:	4a5f      	ldr	r2, [pc, #380]	; (8007774 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 80075f6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	2200      	movs	r2, #0
 80075fe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007604:	2200      	movs	r2, #0
 8007606:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	2200      	movs	r2, #0
 800760e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	2200      	movs	r2, #0
 8007616:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	4619      	mov	r1, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3310      	adds	r3, #16
 8007628:	461a      	mov	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762e:	f7fe fded 	bl	800620c <HAL_DMA_Start_IT>
 8007632:	4603      	mov	r3, r0
 8007634:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007636:	7efb      	ldrb	r3, [r7, #27]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d166      	bne.n	800770a <HAL_I2C_Mem_Write_DMA+0x256>
 800763c:	e013      	b.n	8007666 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e07a      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007666:	88f8      	ldrh	r0, [r7, #6]
 8007668:	893a      	ldrh	r2, [r7, #8]
 800766a:	8979      	ldrh	r1, [r7, #10]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	2323      	movs	r3, #35	; 0x23
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4603      	mov	r3, r0
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f001 fb3a 	bl	8008cf0 <I2C_RequestMemoryWrite>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d022      	beq.n	80076c8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fe18 	bl	80062bc <HAL_DMA_Abort_IT>
 800768c:	4603      	mov	r3, r0
 800768e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007694:	2200      	movs	r2, #0
 8007696:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e049      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	613b      	str	r3, [r7, #16]
 80076dc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007704:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e028      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	f043 0210 	orr.w	r2, r3, #16
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e014      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 800775a:	2302      	movs	r3, #2
  }
}
 800775c:	4618      	mov	r0, r3
 800775e:	3720      	adds	r7, #32
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000000 	.word	0x20000000
 8007768:	14f8b589 	.word	0x14f8b589
 800776c:	ffff0000 	.word	0xffff0000
 8007770:	08008fed 	.word	0x08008fed
 8007774:	08009197 	.word	0x08009197

08007778 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007798:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	2b10      	cmp	r3, #16
 80077a6:	d003      	beq.n	80077b0 <HAL_I2C_EV_IRQHandler+0x38>
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	f040 80c1 	bne.w	8007932 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10d      	bne.n	80077e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80077d0:	d003      	beq.n	80077da <HAL_I2C_EV_IRQHandler+0x62>
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80077d8:	d101      	bne.n	80077de <HAL_I2C_EV_IRQHandler+0x66>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <HAL_I2C_EV_IRQHandler+0x68>
 80077de:	2300      	movs	r3, #0
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	f000 8132 	beq.w	8007a4a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00c      	beq.n	800780a <HAL_I2C_EV_IRQHandler+0x92>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	0a5b      	lsrs	r3, r3, #9
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 ff7e 	bl	80096fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fcc8 	bl	8008198 <I2C_Master_SB>
 8007808:	e092      	b.n	8007930 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	08db      	lsrs	r3, r3, #3
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d009      	beq.n	800782a <HAL_I2C_EV_IRQHandler+0xb2>
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	0a5b      	lsrs	r3, r3, #9
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fd3e 	bl	80082a4 <I2C_Master_ADD10>
 8007828:	e082      	b.n	8007930 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <HAL_I2C_EV_IRQHandler+0xd2>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	0a5b      	lsrs	r3, r3, #9
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fd58 	bl	80082f8 <I2C_Master_ADDR>
 8007848:	e072      	b.n	8007930 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d03b      	beq.n	80078ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007864:	f000 80f3 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	09db      	lsrs	r3, r3, #7
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00f      	beq.n	8007894 <HAL_I2C_EV_IRQHandler+0x11c>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	0a9b      	lsrs	r3, r3, #10
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <HAL_I2C_EV_IRQHandler+0x11c>
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	089b      	lsrs	r3, r3, #2
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f942 	bl	8007b16 <I2C_MasterTransmit_TXE>
 8007892:	e04d      	b.n	8007930 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	089b      	lsrs	r3, r3, #2
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 80d6 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	0a5b      	lsrs	r3, r3, #9
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 80cf 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b21      	cmp	r3, #33	; 0x21
 80078b4:	d103      	bne.n	80078be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9c9 	bl	8007c4e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078bc:	e0c7      	b.n	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	f040 80c4 	bne.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa37 	bl	8007d3a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078cc:	e0bf      	b.n	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078dc:	f000 80b7 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	099b      	lsrs	r3, r3, #6
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00f      	beq.n	800790c <HAL_I2C_EV_IRQHandler+0x194>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	0a9b      	lsrs	r3, r3, #10
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <HAL_I2C_EV_IRQHandler+0x194>
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 faac 	bl	8007e62 <I2C_MasterReceive_RXNE>
 800790a:	e011      	b.n	8007930 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	089b      	lsrs	r3, r3, #2
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 809a 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	0a5b      	lsrs	r3, r3, #9
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8093 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb4b 	bl	8007fc4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800792e:	e08e      	b.n	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007930:	e08d      	b.n	8007a4e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	e007      	b.n	8007954 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d012      	beq.n	8007986 <HAL_I2C_EV_IRQHandler+0x20e>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	0a5b      	lsrs	r3, r3, #9
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00c      	beq.n	8007986 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800797c:	69b9      	ldr	r1, [r7, #24]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 ff09 	bl	8008796 <I2C_Slave_ADDR>
 8007984:	e066      	b.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	0a5b      	lsrs	r3, r3, #9
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 ff44 	bl	800882c <I2C_Slave_STOPF>
 80079a4:	e056      	b.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b21      	cmp	r3, #33	; 0x21
 80079aa:	d002      	beq.n	80079b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b29      	cmp	r3, #41	; 0x29
 80079b0:	d125      	bne.n	80079fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	09db      	lsrs	r3, r3, #7
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00f      	beq.n	80079de <HAL_I2C_EV_IRQHandler+0x266>
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	0a9b      	lsrs	r3, r3, #10
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <HAL_I2C_EV_IRQHandler+0x266>
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	089b      	lsrs	r3, r3, #2
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fe1f 	bl	800861a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079dc:	e039      	b.n	8007a52 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	089b      	lsrs	r3, r3, #2
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d033      	beq.n	8007a52 <HAL_I2C_EV_IRQHandler+0x2da>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	0a5b      	lsrs	r3, r3, #9
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02d      	beq.n	8007a52 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fe4c 	bl	8008694 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079fc:	e029      	b.n	8007a52 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	099b      	lsrs	r3, r3, #6
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	0a9b      	lsrs	r3, r3, #10
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	089b      	lsrs	r3, r3, #2
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d103      	bne.n	8007a2a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fe57 	bl	80086d6 <I2C_SlaveReceive_RXNE>
 8007a28:	e014      	b.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	089b      	lsrs	r3, r3, #2
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00e      	beq.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	0a5b      	lsrs	r3, r3, #9
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d008      	beq.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fe85 	bl	8008752 <I2C_SlaveReceive_BTF>
 8007a48:	e004      	b.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007a4a:	bf00      	nop
 8007a4c:	e002      	b.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a4e:	bf00      	nop
 8007a50:	e000      	b.n	8007a54 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b2c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d150      	bne.n	8007bde <I2C_MasterTransmit_TXE+0xc8>
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b21      	cmp	r3, #33	; 0x21
 8007b40:	d14d      	bne.n	8007bde <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d01d      	beq.n	8007b84 <I2C_MasterTransmit_TXE+0x6e>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d01a      	beq.n	8007b84 <I2C_MasterTransmit_TXE+0x6e>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b54:	d016      	beq.n	8007b84 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b64:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2211      	movs	r2, #17
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff6c 	bl	8007a5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b82:	e060      	b.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b92:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d107      	bne.n	8007bce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fb f84b 	bl	8002c62 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bcc:	e03b      	b.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff ff3f 	bl	8007a5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bdc:	e033      	b.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b21      	cmp	r3, #33	; 0x21
 8007be2:	d005      	beq.n	8007bf0 <I2C_MasterTransmit_TXE+0xda>
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	d12d      	bne.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b22      	cmp	r3, #34	; 0x22
 8007bee:	d12a      	bne.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d108      	bne.n	8007c0c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007c0a:	e01c      	b.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d103      	bne.n	8007c20 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f88e 	bl	8007d3a <I2C_MemoryTransmit_TXE_BTF>
}
 8007c1e:	e012      	b.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c44:	e7ff      	b.n	8007c46 <I2C_MasterTransmit_TXE+0x130>
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b21      	cmp	r3, #33	; 0x21
 8007c66:	d164      	bne.n	8007d32 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d012      	beq.n	8007c98 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	781a      	ldrb	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007c96:	e04c      	b.n	8007d32 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d01d      	beq.n	8007cda <I2C_MasterTransmit_BTF+0x8c>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d01a      	beq.n	8007cda <I2C_MasterTransmit_BTF+0x8c>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007caa:	d016      	beq.n	8007cda <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2211      	movs	r2, #17
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fec1 	bl	8007a5a <HAL_I2C_MasterTxCpltCallback>
}
 8007cd8:	e02b      	b.n	8007d32 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ce8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	d107      	bne.n	8007d24 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7fa ffa0 	bl	8002c62 <HAL_I2C_MemTxCpltCallback>
}
 8007d22:	e006      	b.n	8007d32 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff fe94 	bl	8007a5a <HAL_I2C_MasterTxCpltCallback>
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d11d      	bne.n	8007d8e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d10b      	bne.n	8007d72 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6a:	1c9a      	adds	r2, r3, #2
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007d70:	e073      	b.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	121b      	asrs	r3, r3, #8
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007d8c:	e065      	b.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d10b      	bne.n	8007dae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007dac:	e055      	b.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d151      	bne.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	2b22      	cmp	r3, #34	; 0x22
 8007dba:	d10d      	bne.n	8007dd8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007dd6:	e040      	b.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d015      	beq.n	8007e0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b21      	cmp	r3, #33	; 0x21
 8007de6:	d112      	bne.n	8007e0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e0c:	e025      	b.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d120      	bne.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b21      	cmp	r3, #33	; 0x21
 8007e1c:	d11d      	bne.n	8007e5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e2c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e3c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fa ff04 	bl	8002c62 <HAL_I2C_MemTxCpltCallback>
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b22      	cmp	r3, #34	; 0x22
 8007e74:	f040 80a2 	bne.w	8007fbc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d921      	bls.n	8007eca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	f040 8082 	bne.w	8007fbc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007ec8:	e078      	b.n	8007fbc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d074      	beq.n	8007fbc <I2C_MasterReceive_RXNE+0x15a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d002      	beq.n	8007ede <I2C_MasterReceive_RXNE+0x7c>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d16e      	bne.n	8007fbc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 fb56 	bl	8009590 <I2C_WaitOnSTOPRequestThroughIT>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d142      	bne.n	8007f70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d10a      	bne.n	8007f5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff fdc1 	bl	8007ada <HAL_I2C_MemRxCpltCallback>
}
 8007f58:	e030      	b.n	8007fbc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2212      	movs	r2, #18
 8007f66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff fd80 	bl	8007a6e <HAL_I2C_MasterRxCpltCallback>
}
 8007f6e:	e025      	b.n	8007fbc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fd99 	bl	8007aee <HAL_I2C_ErrorCallback>
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d11b      	bne.n	8008014 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008012:	e0bd      	b.n	8008190 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d129      	bne.n	8008072 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800802c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b04      	cmp	r3, #4
 8008032:	d00a      	beq.n	800804a <I2C_MasterReceive_BTF+0x86>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d007      	beq.n	800804a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008070:	e08e      	b.n	8008190 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d176      	bne.n	800816a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d002      	beq.n	8008088 <I2C_MasterReceive_BTF+0xc4>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b10      	cmp	r3, #16
 8008086:	d108      	bne.n	800809a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e019      	b.n	80080ce <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b04      	cmp	r3, #4
 800809e:	d002      	beq.n	80080a6 <I2C_MasterReceive_BTF+0xe2>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d108      	bne.n	80080b8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e00a      	b.n	80080ce <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d007      	beq.n	80080ce <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3b01      	subs	r3, #1
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008128:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d10a      	bne.n	8008154 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fcc4 	bl	8007ada <HAL_I2C_MemRxCpltCallback>
}
 8008152:	e01d      	b.n	8008190 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2212      	movs	r2, #18
 8008160:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fc83 	bl	8007a6e <HAL_I2C_MasterRxCpltCallback>
}
 8008168:	e012      	b.n	8008190 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d117      	bne.n	80081dc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081c4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80081c6:	e067      	b.n	8008298 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	611a      	str	r2, [r3, #16]
}
 80081da:	e05d      	b.n	8008298 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081e4:	d133      	bne.n	800824e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b21      	cmp	r3, #33	; 0x21
 80081f0:	d109      	bne.n	8008206 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008202:	611a      	str	r2, [r3, #16]
 8008204:	e008      	b.n	8008218 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <I2C_Master_SB+0x92>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d108      	bne.n	800823c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d032      	beq.n	8008298 <I2C_Master_SB+0x100>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d02d      	beq.n	8008298 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800824a:	605a      	str	r2, [r3, #4]
}
 800824c:	e024      	b.n	8008298 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10e      	bne.n	8008274 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825a:	b29b      	uxth	r3, r3
 800825c:	11db      	asrs	r3, r3, #7
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0306 	and.w	r3, r3, #6
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f063 030f 	orn	r3, r3, #15
 800826a:	b2da      	uxtb	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	611a      	str	r2, [r3, #16]
}
 8008272:	e011      	b.n	8008298 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008278:	2b01      	cmp	r3, #1
 800827a:	d10d      	bne.n	8008298 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008280:	b29b      	uxth	r3, r3
 8008282:	11db      	asrs	r3, r3, #7
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 0306 	and.w	r3, r3, #6
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f063 030e 	orn	r3, r3, #14
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	611a      	str	r2, [r3, #16]
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <I2C_Master_ADD10+0x26>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d108      	bne.n	80082dc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00c      	beq.n	80082ec <I2C_Master_ADD10+0x48>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ea:	605a      	str	r2, [r3, #4]
  }
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b091      	sub	sp, #68	; 0x44
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b22      	cmp	r3, #34	; 0x22
 8008320:	f040 8169 	bne.w	80085f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10f      	bne.n	800834c <I2C_Master_ADDR+0x54>
 800832c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d10b      	bne.n	800834c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008334:	2300      	movs	r3, #0
 8008336:	633b      	str	r3, [r7, #48]	; 0x30
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	633b      	str	r3, [r7, #48]	; 0x30
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	633b      	str	r3, [r7, #48]	; 0x30
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	e160      	b.n	800860e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11d      	bne.n	8008390 <I2C_Master_ADDR+0x98>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800835c:	d118      	bne.n	8008390 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835e:	2300      	movs	r3, #0
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008382:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	651a      	str	r2, [r3, #80]	; 0x50
 800838e:	e13e      	b.n	800860e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d113      	bne.n	80083c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800839a:	2300      	movs	r3, #0
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	e115      	b.n	80085ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	f040 808a 	bne.w	80084e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083d4:	d137      	bne.n	8008446 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f4:	d113      	bne.n	800841e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008404:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008406:	2300      	movs	r3, #0
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	e0e7      	b.n	80085ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800841e:	2300      	movs	r3, #0
 8008420:	623b      	str	r3, [r7, #32]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	623b      	str	r3, [r7, #32]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	623b      	str	r3, [r7, #32]
 8008432:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e0d3      	b.n	80085ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b08      	cmp	r3, #8
 800844a:	d02e      	beq.n	80084aa <I2C_Master_ADDR+0x1b2>
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	2b20      	cmp	r3, #32
 8008450:	d02b      	beq.n	80084aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	2b12      	cmp	r3, #18
 8008456:	d102      	bne.n	800845e <I2C_Master_ADDR+0x166>
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	2b01      	cmp	r3, #1
 800845c:	d125      	bne.n	80084aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	2b04      	cmp	r3, #4
 8008462:	d00e      	beq.n	8008482 <I2C_Master_ADDR+0x18a>
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	2b02      	cmp	r3, #2
 8008468:	d00b      	beq.n	8008482 <I2C_Master_ADDR+0x18a>
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	2b10      	cmp	r3, #16
 800846e:	d008      	beq.n	8008482 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e007      	b.n	8008492 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008490:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	61fb      	str	r3, [r7, #28]
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	e0a1      	b.n	80085ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e085      	b.n	80085ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d14d      	bne.n	8008588 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d016      	beq.n	8008520 <I2C_Master_ADDR+0x228>
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d013      	beq.n	8008520 <I2C_Master_ADDR+0x228>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d010      	beq.n	8008520 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e007      	b.n	8008530 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800852e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800853a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800853e:	d117      	bne.n	8008570 <I2C_Master_ADDR+0x278>
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008546:	d00b      	beq.n	8008560 <I2C_Master_ADDR+0x268>
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	2b01      	cmp	r3, #1
 800854c:	d008      	beq.n	8008560 <I2C_Master_ADDR+0x268>
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	2b08      	cmp	r3, #8
 8008552:	d005      	beq.n	8008560 <I2C_Master_ADDR+0x268>
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	2b10      	cmp	r3, #16
 8008558:	d002      	beq.n	8008560 <I2C_Master_ADDR+0x268>
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	2b20      	cmp	r3, #32
 800855e:	d107      	bne.n	8008570 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800856e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	e032      	b.n	80085ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008596:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a6:	d117      	bne.n	80085d8 <I2C_Master_ADDR+0x2e0>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085ae:	d00b      	beq.n	80085c8 <I2C_Master_ADDR+0x2d0>
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d008      	beq.n	80085c8 <I2C_Master_ADDR+0x2d0>
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d005      	beq.n	80085c8 <I2C_Master_ADDR+0x2d0>
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d002      	beq.n	80085c8 <I2C_Master_ADDR+0x2d0>
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d107      	bne.n	80085d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80085f4:	e00b      	b.n	800860e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	e7ff      	b.n	800860e <I2C_Master_ADDR+0x316>
 800860e:	bf00      	nop
 8008610:	3744      	adds	r7, #68	; 0x44
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008628:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d02b      	beq.n	800868c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d114      	bne.n	800868c <I2C_SlaveTransmit_TXE+0x72>
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	2b29      	cmp	r3, #41	; 0x29
 8008666:	d111      	bne.n	800868c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008676:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2221      	movs	r2, #33	; 0x21
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2228      	movs	r2, #40	; 0x28
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff f9fb 	bl	8007a82 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d02c      	beq.n	800874a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691a      	ldr	r2, [r3, #16]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29a      	uxth	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d114      	bne.n	800874a <I2C_SlaveReceive_RXNE+0x74>
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	2b2a      	cmp	r3, #42	; 0x2a
 8008724:	d111      	bne.n	800874a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008734:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2222      	movs	r2, #34	; 0x22
 800873a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2228      	movs	r2, #40	; 0x28
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff f9a6 	bl	8007a96 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d012      	beq.n	800878a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	b2d2      	uxtb	r2, r2
 8008770:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087b0:	2b28      	cmp	r3, #40	; 0x28
 80087b2:	d127      	bne.n	8008804 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	089b      	lsrs	r3, r3, #2
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	09db      	lsrs	r3, r3, #7
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	81bb      	strh	r3, [r7, #12]
 80087e6:	e002      	b.n	80087ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80087f6:	89ba      	ldrh	r2, [r7, #12]
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff f954 	bl	8007aaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008802:	e00e      	b.n	8008822 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008804:	2300      	movs	r3, #0
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	60bb      	str	r3, [r7, #8]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	60bb      	str	r3, [r7, #8]
 8008818:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800884a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800884c:	2300      	movs	r3, #0
 800884e:	60bb      	str	r3, [r7, #8]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	60bb      	str	r3, [r7, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008878:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008888:	d172      	bne.n	8008970 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b22      	cmp	r3, #34	; 0x22
 800888e:	d002      	beq.n	8008896 <I2C_Slave_STOPF+0x6a>
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b2a      	cmp	r3, #42	; 0x2a
 8008894:	d135      	bne.n	8008902 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	f043 0204 	orr.w	r2, r3, #4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fd fea0 	bl	8006614 <HAL_DMA_GetState>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d049      	beq.n	800896e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088de:	4a69      	ldr	r2, [pc, #420]	; (8008a84 <I2C_Slave_STOPF+0x258>)
 80088e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fd fce8 	bl	80062bc <HAL_DMA_Abort_IT>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d03d      	beq.n	800896e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008900:	e035      	b.n	800896e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	f043 0204 	orr.w	r2, r3, #4
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008934:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fe6a 	bl	8006614 <HAL_DMA_GetState>
 8008940:	4603      	mov	r3, r0
 8008942:	2b01      	cmp	r3, #1
 8008944:	d014      	beq.n	8008970 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	4a4e      	ldr	r2, [pc, #312]	; (8008a84 <I2C_Slave_STOPF+0x258>)
 800894c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fcb2 	bl	80062bc <HAL_DMA_Abort_IT>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	e000      	b.n	8008970 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800896e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d03e      	beq.n	80089f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b04      	cmp	r3, #4
 8008986:	d112      	bne.n	80089ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d112      	bne.n	80089e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	f043 0204 	orr.w	r2, r3, #4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f843 	bl	8008a8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008a06:	e039      	b.n	8008a7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0c:	d109      	bne.n	8008a22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2228      	movs	r2, #40	; 0x28
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff f83a 	bl	8007a96 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b28      	cmp	r3, #40	; 0x28
 8008a2c:	d111      	bne.n	8008a52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a15      	ldr	r2, [pc, #84]	; (8008a88 <I2C_Slave_STOPF+0x25c>)
 8008a32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff f83b 	bl	8007ac6 <HAL_I2C_ListenCpltCallback>
}
 8008a50:	e014      	b.n	8008a7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	2b22      	cmp	r3, #34	; 0x22
 8008a58:	d002      	beq.n	8008a60 <I2C_Slave_STOPF+0x234>
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b22      	cmp	r3, #34	; 0x22
 8008a5e:	d10d      	bne.n	8008a7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff f80d 	bl	8007a96 <HAL_I2C_SlaveRxCpltCallback>
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	08009211 	.word	0x08009211
 8008a88:	ffff0000 	.word	0xffff0000

08008a8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d002      	beq.n	8008ab0 <I2C_ITError+0x24>
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d10a      	bne.n	8008ac6 <I2C_ITError+0x3a>
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	2b22      	cmp	r3, #34	; 0x22
 8008ab4:	d107      	bne.n	8008ac6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ac4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008acc:	2b28      	cmp	r3, #40	; 0x28
 8008ace:	d107      	bne.n	8008ae0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2228      	movs	r2, #40	; 0x28
 8008ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008ade:	e015      	b.n	8008b0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aee:	d00a      	beq.n	8008b06 <I2C_ITError+0x7a>
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b60      	cmp	r3, #96	; 0x60
 8008af4:	d007      	beq.n	8008b06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1a:	d162      	bne.n	8008be2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d020      	beq.n	8008b7c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	4a6a      	ldr	r2, [pc, #424]	; (8008ce8 <I2C_ITError+0x25c>)
 8008b40:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fd fbb8 	bl	80062bc <HAL_DMA_Abort_IT>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 8089 	beq.w	8008c66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0201 	bic.w	r2, r2, #1
 8008b62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b76:	4610      	mov	r0, r2
 8008b78:	4798      	blx	r3
 8008b7a:	e074      	b.n	8008c66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	4a59      	ldr	r2, [pc, #356]	; (8008ce8 <I2C_ITError+0x25c>)
 8008b82:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fd fb97 	bl	80062bc <HAL_DMA_Abort_IT>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d068      	beq.n	8008c66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9e:	2b40      	cmp	r3, #64	; 0x40
 8008ba0:	d10b      	bne.n	8008bba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	b2d2      	uxtb	r2, r2
 8008bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0201 	bic.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	e041      	b.n	8008c66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b60      	cmp	r3, #96	; 0x60
 8008bec:	d125      	bne.n	8008c3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c06:	2b40      	cmp	r3, #64	; 0x40
 8008c08:	d10b      	bne.n	8008c22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0201 	bic.w	r2, r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fe ff65 	bl	8007b02 <HAL_I2C_AbortCpltCallback>
 8008c38:	e015      	b.n	8008c66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c44:	2b40      	cmp	r3, #64	; 0x40
 8008c46:	d10b      	bne.n	8008c60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691a      	ldr	r2, [r3, #16]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fe ff44 	bl	8007aee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10e      	bne.n	8008c94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d007      	beq.n	8008ca4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ca2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008caa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d113      	bne.n	8008ce0 <I2C_ITError+0x254>
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b28      	cmp	r3, #40	; 0x28
 8008cbc:	d110      	bne.n	8008ce0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a0a      	ldr	r2, [pc, #40]	; (8008cec <I2C_ITError+0x260>)
 8008cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fe fef3 	bl	8007ac6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	08009211 	.word	0x08009211
 8008cec:	ffff0000 	.word	0xffff0000

08008cf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	817b      	strh	r3, [r7, #10]
 8008d02:	460b      	mov	r3, r1
 8008d04:	813b      	strh	r3, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 fb1a 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00d      	beq.n	8008d4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d40:	d103      	bne.n	8008d4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e05f      	b.n	8008e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d4e:	897b      	ldrh	r3, [r7, #10]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	6a3a      	ldr	r2, [r7, #32]
 8008d62:	492d      	ldr	r1, [pc, #180]	; (8008e18 <I2C_RequestMemoryWrite+0x128>)
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fb52 	bl	800940e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e04c      	b.n	8008e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8c:	6a39      	ldr	r1, [r7, #32]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fbbc 	bl	800950c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00d      	beq.n	8008db6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d107      	bne.n	8008db2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e02b      	b.n	8008e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d105      	bne.n	8008dc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008dbc:	893b      	ldrh	r3, [r7, #8]
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	611a      	str	r2, [r3, #16]
 8008dc6:	e021      	b.n	8008e0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008dc8:	893b      	ldrh	r3, [r7, #8]
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd8:	6a39      	ldr	r1, [r7, #32]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fb96 	bl	800950c <I2C_WaitOnTXEFlagUntilTimeout>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00d      	beq.n	8008e02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d107      	bne.n	8008dfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e005      	b.n	8008e0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e02:	893b      	ldrh	r3, [r7, #8]
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	00010002 	.word	0x00010002

08008e1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	817b      	strh	r3, [r7, #10]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	813b      	strh	r3, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fa7c 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00d      	beq.n	8008e8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7c:	d103      	bne.n	8008e86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e0aa      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e8a:	897b      	ldrh	r3, [r7, #10]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	6a3a      	ldr	r2, [r7, #32]
 8008e9e:	4952      	ldr	r1, [pc, #328]	; (8008fe8 <I2C_RequestMemoryRead+0x1cc>)
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 fab4 	bl	800940e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e097      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec8:	6a39      	ldr	r1, [r7, #32]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fb1e 	bl	800950c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00d      	beq.n	8008ef2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	2b04      	cmp	r3, #4
 8008edc:	d107      	bne.n	8008eee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e076      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d105      	bne.n	8008f04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ef8:	893b      	ldrh	r3, [r7, #8]
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	611a      	str	r2, [r3, #16]
 8008f02:	e021      	b.n	8008f48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f04:	893b      	ldrh	r3, [r7, #8]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	6a39      	ldr	r1, [r7, #32]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 faf8 	bl	800950c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d107      	bne.n	8008f3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e050      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f3e:	893b      	ldrh	r3, [r7, #8]
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	6a39      	ldr	r1, [r7, #32]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fadd 	bl	800950c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00d      	beq.n	8008f74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d107      	bne.n	8008f70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e035      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f9e5 	bl	8009360 <I2C_WaitOnFlagUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00d      	beq.n	8008fb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008faa:	d103      	bne.n	8008fb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e013      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008fb8:	897b      	ldrh	r3, [r7, #10]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f043 0301 	orr.w	r3, r3, #1
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	6a3a      	ldr	r2, [r7, #32]
 8008fcc:	4906      	ldr	r1, [pc, #24]	; (8008fe8 <I2C_RequestMemoryRead+0x1cc>)
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fa1d 	bl	800940e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	00010002 	.word	0x00010002

08008fec <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009008:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800901e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	2200      	movs	r2, #0
 800902e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903c:	2200      	movs	r2, #0
 800903e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009040:	7cfb      	ldrb	r3, [r7, #19]
 8009042:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009046:	2b21      	cmp	r3, #33	; 0x21
 8009048:	d007      	beq.n	800905a <I2C_DMAXferCplt+0x6e>
 800904a:	7cfb      	ldrb	r3, [r7, #19]
 800904c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009050:	2b22      	cmp	r3, #34	; 0x22
 8009052:	d131      	bne.n	80090b8 <I2C_DMAXferCplt+0xcc>
 8009054:	7cbb      	ldrb	r3, [r7, #18]
 8009056:	2b20      	cmp	r3, #32
 8009058:	d12e      	bne.n	80090b8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009068:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2200      	movs	r2, #0
 800906e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009070:	7cfb      	ldrb	r3, [r7, #19]
 8009072:	2b29      	cmp	r3, #41	; 0x29
 8009074:	d10a      	bne.n	800908c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2221      	movs	r2, #33	; 0x21
 800907a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2228      	movs	r2, #40	; 0x28
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009084:	6978      	ldr	r0, [r7, #20]
 8009086:	f7fe fcfc 	bl	8007a82 <HAL_I2C_SlaveTxCpltCallback>
 800908a:	e00c      	b.n	80090a6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800908c:	7cfb      	ldrb	r3, [r7, #19]
 800908e:	2b2a      	cmp	r3, #42	; 0x2a
 8009090:	d109      	bne.n	80090a6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2222      	movs	r2, #34	; 0x22
 8009096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2228      	movs	r2, #40	; 0x28
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090a0:	6978      	ldr	r0, [r7, #20]
 80090a2:	f7fe fcf8 	bl	8007a96 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80090b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80090b6:	e06a      	b.n	800918e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d064      	beq.n	800918e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d107      	bne.n	80090de <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090dc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80090ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090f4:	d009      	beq.n	800910a <I2C_DMAXferCplt+0x11e>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d006      	beq.n	800910a <I2C_DMAXferCplt+0x11e>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009102:	d002      	beq.n	800910a <I2C_DMAXferCplt+0x11e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b20      	cmp	r3, #32
 8009108:	d107      	bne.n	800911a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009118:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009128:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009138:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2200      	movs	r2, #0
 800913e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8009148:	6978      	ldr	r0, [r7, #20]
 800914a:	f7fe fcd0 	bl	8007aee <HAL_I2C_ErrorCallback>
}
 800914e:	e01e      	b.n	800918e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b40      	cmp	r3, #64	; 0x40
 8009162:	d10a      	bne.n	800917a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2200      	movs	r2, #0
 8009170:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f7fe fcb1 	bl	8007ada <HAL_I2C_MemRxCpltCallback>
}
 8009178:	e009      	b.n	800918e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2212      	movs	r2, #18
 8009186:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009188:	6978      	ldr	r0, [r7, #20]
 800918a:	f7fe fc70 	bl	8007a6e <HAL_I2C_MasterRxCpltCallback>
}
 800918e:	bf00      	nop
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b0:	2200      	movs	r2, #0
 80091b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c0:	2200      	movs	r2, #0
 80091c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7fd fa33 	bl	8006630 <HAL_DMA_GetError>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d01b      	beq.n	8009208 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091de:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f043 0210 	orr.w	r2, r3, #16
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7fe fc73 	bl	8007aee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009220:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009228:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800922a:	4b4b      	ldr	r3, [pc, #300]	; (8009358 <I2C_DMAAbort+0x148>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	08db      	lsrs	r3, r3, #3
 8009230:	4a4a      	ldr	r2, [pc, #296]	; (800935c <I2C_DMAAbort+0x14c>)
 8009232:	fba2 2303 	umull	r2, r3, r2, r3
 8009236:	0a1a      	lsrs	r2, r3, #8
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	00da      	lsls	r2, r3, #3
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d106      	bne.n	8009258 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924e:	f043 0220 	orr.w	r2, r3, #32
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009256:	e00a      	b.n	800926e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3b01      	subs	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800926c:	d0ea      	beq.n	8009244 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927a:	2200      	movs	r2, #0
 800927c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	2200      	movs	r2, #0
 800928c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800929c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2200      	movs	r2, #0
 80092a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b0:	2200      	movs	r2, #0
 80092b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	2200      	movs	r2, #0
 80092c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0201 	bic.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b60      	cmp	r3, #96	; 0x60
 80092de:	d10e      	bne.n	80092fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2200      	movs	r2, #0
 80092f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f7fe fc03 	bl	8007b02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092fc:	e027      	b.n	800934e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80092fe:	7cfb      	ldrb	r3, [r7, #19]
 8009300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009304:	2b28      	cmp	r3, #40	; 0x28
 8009306:	d117      	bne.n	8009338 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009326:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2200      	movs	r2, #0
 800932c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2228      	movs	r2, #40	; 0x28
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009336:	e007      	b.n	8009348 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009348:	6978      	ldr	r0, [r7, #20]
 800934a:	f7fe fbd0 	bl	8007aee <HAL_I2C_ErrorCallback>
}
 800934e:	bf00      	nop
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000000 	.word	0x20000000
 800935c:	14f8b589 	.word	0x14f8b589

08009360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	4613      	mov	r3, r2
 800936e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009370:	e025      	b.n	80093be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d021      	beq.n	80093be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937a:	f7fb f9b3 	bl	80046e4 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d116      	bne.n	80093be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	f043 0220 	orr.w	r2, r3, #32
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e023      	b.n	8009406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	0c1b      	lsrs	r3, r3, #16
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d10d      	bne.n	80093e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	43da      	mvns	r2, r3
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4013      	ands	r3, r2
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf0c      	ite	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	2300      	movne	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	e00c      	b.n	80093fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	43da      	mvns	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4013      	ands	r3, r2
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bf0c      	ite	eq
 80093f6:	2301      	moveq	r3, #1
 80093f8:	2300      	movne	r3, #0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	429a      	cmp	r2, r3
 8009402:	d0b6      	beq.n	8009372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
 800941a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800941c:	e051      	b.n	80094c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942c:	d123      	bne.n	8009476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800943c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2220      	movs	r2, #32
 8009452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	f043 0204 	orr.w	r2, r3, #4
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e046      	b.n	8009504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947c:	d021      	beq.n	80094c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800947e:	f7fb f931 	bl	80046e4 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d302      	bcc.n	8009494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d116      	bne.n	80094c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2220      	movs	r2, #32
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e020      	b.n	8009504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	0c1b      	lsrs	r3, r3, #16
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d10c      	bne.n	80094e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	43da      	mvns	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4013      	ands	r3, r2
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bf14      	ite	ne
 80094de:	2301      	movne	r3, #1
 80094e0:	2300      	moveq	r3, #0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	e00b      	b.n	80094fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	43da      	mvns	r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4013      	ands	r3, r2
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf14      	ite	ne
 80094f8:	2301      	movne	r3, #1
 80094fa:	2300      	moveq	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d18d      	bne.n	800941e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009518:	e02d      	b.n	8009576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 f8c0 	bl	80096a0 <I2C_IsAcknowledgeFailed>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e02d      	b.n	8009586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d021      	beq.n	8009576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009532:	f7fb f8d7 	bl	80046e4 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	429a      	cmp	r2, r3
 8009540:	d302      	bcc.n	8009548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d116      	bne.n	8009576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e007      	b.n	8009586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d1ca      	bne.n	800951a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800959c:	4b13      	ldr	r3, [pc, #76]	; (80095ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	08db      	lsrs	r3, r3, #3
 80095a2:	4a13      	ldr	r2, [pc, #76]	; (80095f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	0a1a      	lsrs	r2, r3, #8
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d107      	bne.n	80095ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f043 0220 	orr.w	r2, r3, #32
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e008      	b.n	80095e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095dc:	d0e9      	beq.n	80095b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	20000000 	.word	0x20000000
 80095f0:	14f8b589 	.word	0x14f8b589

080095f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009600:	e042      	b.n	8009688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b10      	cmp	r3, #16
 800960e:	d119      	bne.n	8009644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f06f 0210 	mvn.w	r2, #16
 8009618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e029      	b.n	8009698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009644:	f7fb f84e 	bl	80046e4 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	429a      	cmp	r2, r3
 8009652:	d302      	bcc.n	800965a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d116      	bne.n	8009688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	f043 0220 	orr.w	r2, r3, #32
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e007      	b.n	8009698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d1b5      	bne.n	8009602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096b6:	d11b      	bne.n	80096f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096dc:	f043 0204 	orr.w	r2, r3, #4
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800970e:	d103      	bne.n	8009718 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009716:	e007      	b.n	8009728 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009720:	d102      	bne.n	8009728 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2208      	movs	r2, #8
 8009726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009736:	b08f      	sub	sp, #60	; 0x3c
 8009738:	af0a      	add	r7, sp, #40	; 0x28
 800973a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e116      	b.n	8009974 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f006 fdc9 	bl	80102f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2203      	movs	r2, #3
 800976a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f003 fc3c 	bl	800d002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	687e      	ldr	r6, [r7, #4]
 8009792:	466d      	mov	r5, sp
 8009794:	f106 0410 	add.w	r4, r6, #16
 8009798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800979a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800979c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800979e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80097a8:	1d33      	adds	r3, r6, #4
 80097aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ac:	6838      	ldr	r0, [r7, #0]
 80097ae:	f003 fb13 	bl	800cdd8 <USB_CoreInit>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e0d7      	b.n	8009974 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f003 fc2a 	bl	800d024 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
 80097d4:	e04a      	b.n	800986c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80097d6:	7bfa      	ldrb	r2, [r7, #15]
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	4613      	mov	r3, r2
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	1a9b      	subs	r3, r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	333d      	adds	r3, #61	; 0x3d
 80097e6:	2201      	movs	r2, #1
 80097e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80097ea:	7bfa      	ldrb	r2, [r7, #15]
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	4613      	mov	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	333c      	adds	r3, #60	; 0x3c
 80097fa:	7bfa      	ldrb	r2, [r7, #15]
 80097fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80097fe:	7bfa      	ldrb	r2, [r7, #15]
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	b298      	uxth	r0, r3
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	3342      	adds	r3, #66	; 0x42
 8009812:	4602      	mov	r2, r0
 8009814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009816:	7bfa      	ldrb	r2, [r7, #15]
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	333f      	adds	r3, #63	; 0x3f
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800982a:	7bfa      	ldrb	r2, [r7, #15]
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	3344      	adds	r3, #68	; 0x44
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800983e:	7bfa      	ldrb	r2, [r7, #15]
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	1a9b      	subs	r3, r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	440b      	add	r3, r1
 800984c:	3348      	adds	r3, #72	; 0x48
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009852:	7bfa      	ldrb	r2, [r7, #15]
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	3350      	adds	r3, #80	; 0x50
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	3301      	adds	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	429a      	cmp	r2, r3
 8009874:	d3af      	bcc.n	80097d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
 800987a:	e044      	b.n	8009906 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800987c:	7bfa      	ldrb	r2, [r7, #15]
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800988e:	2200      	movs	r2, #0
 8009890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009892:	7bfa      	ldrb	r2, [r7, #15]
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4613      	mov	r3, r2
 8009898:	00db      	lsls	r3, r3, #3
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80098a4:	7bfa      	ldrb	r2, [r7, #15]
 80098a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80098a8:	7bfa      	ldrb	r2, [r7, #15]
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098be:	7bfa      	ldrb	r2, [r7, #15]
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	440b      	add	r3, r1
 80098cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80098d4:	7bfa      	ldrb	r2, [r7, #15]
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80098ea:	7bfa      	ldrb	r2, [r7, #15]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	3301      	adds	r3, #1
 8009904:	73fb      	strb	r3, [r7, #15]
 8009906:	7bfa      	ldrb	r2, [r7, #15]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d3b5      	bcc.n	800987c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	603b      	str	r3, [r7, #0]
 8009916:	687e      	ldr	r6, [r7, #4]
 8009918:	466d      	mov	r5, sp
 800991a:	f106 0410 	add.w	r4, r6, #16
 800991e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800992a:	e885 0003 	stmia.w	r5, {r0, r1}
 800992e:	1d33      	adds	r3, r6, #4
 8009930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009932:	6838      	ldr	r0, [r7, #0]
 8009934:	f003 fbc2 	bl	800d0bc <USB_DevInit>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2202      	movs	r2, #2
 8009942:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e014      	b.n	8009974 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	2b01      	cmp	r3, #1
 8009960:	d102      	bne.n	8009968 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 f892 	bl	800aa8c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f004 fc31 	bl	800e1d4 <USB_DevDisconnect>

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800997c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <HAL_PCD_Start+0x1c>
 8009994:	2302      	movs	r3, #2
 8009996:	e020      	b.n	80099da <HAL_PCD_Start+0x5e>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d109      	bne.n	80099bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d005      	beq.n	80099bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f003 fb0d 	bl	800cfe0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f004 fbe1 	bl	800e192 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80099e2:	b590      	push	{r4, r7, lr}
 80099e4:	b08d      	sub	sp, #52	; 0x34
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f004 fc9f 	bl	800e33c <USB_GetMode>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f040 83ca 	bne.w	800a19a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f004 fc03 	bl	800e216 <USB_ReadInterrupts>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 83c0 	beq.w	800a198 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f004 fbfa 	bl	800e216 <USB_ReadInterrupts>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d107      	bne.n	8009a3c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695a      	ldr	r2, [r3, #20]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f002 0202 	and.w	r2, r2, #2
 8009a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f004 fbe8 	bl	800e216 <USB_ReadInterrupts>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d161      	bne.n	8009b14 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0210 	bic.w	r2, r2, #16
 8009a5e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	6a1b      	ldr	r3, [r3, #32]
 8009a64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f003 020f 	and.w	r2, r3, #15
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	1a9b      	subs	r3, r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	0c5b      	lsrs	r3, r3, #17
 8009a84:	f003 030f 	and.w	r3, r3, #15
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d124      	bne.n	8009ad6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009a92:	4013      	ands	r3, r2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d035      	beq.n	8009b04 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	091b      	lsrs	r3, r3, #4
 8009aa0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6a38      	ldr	r0, [r7, #32]
 8009aac:	f004 fa1f 	bl	800deee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009abc:	441a      	add	r2, r3
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	091b      	lsrs	r3, r3, #4
 8009aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ace:	441a      	add	r2, r3
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	619a      	str	r2, [r3, #24]
 8009ad4:	e016      	b.n	8009b04 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	0c5b      	lsrs	r3, r3, #17
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d110      	bne.n	8009b04 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ae8:	2208      	movs	r2, #8
 8009aea:	4619      	mov	r1, r3
 8009aec:	6a38      	ldr	r0, [r7, #32]
 8009aee:	f004 f9fe 	bl	800deee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	091b      	lsrs	r3, r3, #4
 8009afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009afe:	441a      	add	r2, r3
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0210 	orr.w	r2, r2, #16
 8009b12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f004 fb7c 	bl	800e216 <USB_ReadInterrupts>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b28:	d16e      	bne.n	8009c08 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f004 fb82 	bl	800e23c <USB_ReadDevAllOutEpInterrupt>
 8009b38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009b3a:	e062      	b.n	8009c02 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d057      	beq.n	8009bf6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b4c:	b2d2      	uxtb	r2, r2
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f004 fba7 	bl	800e2a4 <USB_ReadDevOutEPInterrupt>
 8009b56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00c      	beq.n	8009b7c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2301      	movs	r3, #1
 8009b72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fdde 	bl	800a738 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00c      	beq.n	8009ba0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	461a      	mov	r2, r3
 8009b94:	2308      	movs	r3, #8
 8009b96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fed8 	bl	800a950 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d008      	beq.n	8009bbc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2310      	movs	r3, #16
 8009bba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f003 0320 	and.w	r3, r3, #32
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bf4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d199      	bne.n	8009b3c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f004 fb02 	bl	800e216 <USB_ReadInterrupts>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c1c:	f040 80c0 	bne.w	8009da0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f004 fb23 	bl	800e270 <USB_ReadDevAllInEpInterrupt>
 8009c2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009c30:	e0b2      	b.n	8009d98 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 80a7 	beq.w	8009d8c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f004 fb49 	bl	800e2e0 <USB_ReadDevInEPInterrupt>
 8009c4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d057      	beq.n	8009d0a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	2201      	movs	r2, #1
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	43db      	mvns	r3, r3
 8009c74:	69f9      	ldr	r1, [r7, #28]
 8009c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d132      	bne.n	8009cfe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	3348      	adds	r3, #72	; 0x48
 8009ca8:	6819      	ldr	r1, [r3, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	4613      	mov	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	1a9b      	subs	r3, r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4403      	add	r3, r0
 8009cb8:	3344      	adds	r3, #68	; 0x44
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4419      	add	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4403      	add	r3, r0
 8009ccc:	3348      	adds	r3, #72	; 0x48
 8009cce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d113      	bne.n	8009cfe <HAL_PCD_IRQHandler+0x31c>
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cda:	4613      	mov	r3, r2
 8009cdc:	00db      	lsls	r3, r3, #3
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	3350      	adds	r3, #80	; 0x50
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d108      	bne.n	8009cfe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	f004 fb51 	bl	800e3a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f006 fba6 	bl	8010456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d008      	beq.n	8009d26 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d20:	461a      	mov	r2, r3
 8009d22:	2308      	movs	r3, #8
 8009d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f003 0310 	and.w	r3, r3, #16
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d008      	beq.n	8009d42 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2310      	movs	r3, #16
 8009d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d008      	beq.n	8009d5e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2340      	movs	r3, #64	; 0x40
 8009d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d008      	beq.n	8009d7a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	461a      	mov	r2, r3
 8009d76:	2302      	movs	r3, #2
 8009d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fc48 	bl	800a61c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	3301      	adds	r3, #1
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	085b      	lsrs	r3, r3, #1
 8009d96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f47f af49 	bne.w	8009c32 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f004 fa36 	bl	800e216 <USB_ReadInterrupts>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db4:	d122      	bne.n	8009dfc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dc4:	f023 0301 	bic.w	r3, r3, #1
 8009dc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d108      	bne.n	8009de6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009ddc:	2100      	movs	r1, #0
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f006 fd88 	bl	80108f4 <HAL_PCDEx_LPM_Callback>
 8009de4:	e002      	b.n	8009dec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f006 fbac 	bl	8010544 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695a      	ldr	r2, [r3, #20]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f004 fa08 	bl	800e216 <USB_ReadInterrupts>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e10:	d112      	bne.n	8009e38 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d102      	bne.n	8009e28 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f006 fb68 	bl	80104f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	695a      	ldr	r2, [r3, #20]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009e36:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f004 f9ea 	bl	800e216 <USB_ReadInterrupts>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e4c:	d121      	bne.n	8009e92 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695a      	ldr	r2, [r3, #20]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009e5c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d111      	bne.n	8009e8c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e76:	089b      	lsrs	r3, r3, #2
 8009e78:	f003 020f 	and.w	r2, r3, #15
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009e82:	2101      	movs	r1, #1
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f006 fd35 	bl	80108f4 <HAL_PCDEx_LPM_Callback>
 8009e8a:	e002      	b.n	8009e92 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f006 fb33 	bl	80104f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f004 f9bd 	bl	800e216 <USB_ReadInterrupts>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea6:	f040 80c7 	bne.w	800a038 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	69fa      	ldr	r2, [r7, #28]
 8009eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb8:	f023 0301 	bic.w	r3, r3, #1
 8009ebc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2110      	movs	r1, #16
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f003 fa57 	bl	800d378 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eca:	2300      	movs	r3, #0
 8009ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ece:	e056      	b.n	8009f7e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	461a      	mov	r2, r3
 8009ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ee2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	69fa      	ldr	r2, [r7, #28]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f02:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f30:	461a      	mov	r2, r3
 8009f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d3a3      	bcc.n	8009ed0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009f9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d016      	beq.n	8009fd2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fb4:	f043 030b 	orr.w	r3, r3, #11
 8009fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fca:	f043 030b 	orr.w	r3, r3, #11
 8009fce:	6453      	str	r3, [r2, #68]	; 0x44
 8009fd0:	e015      	b.n	8009ffe <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fe4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009fe8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff8:	f043 030b 	orr.w	r3, r3, #11
 8009ffc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a00c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a010:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a022:	461a      	mov	r2, r3
 800a024:	f004 f9bc 	bl	800e3a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f004 f8ea 	bl	800e216 <USB_ReadInterrupts>
 800a042:	4603      	mov	r3, r0
 800a044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a04c:	d124      	bne.n	800a098 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f004 f980 	bl	800e358 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f003 f9e8 	bl	800d432 <USB_GetDevSpeed>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681c      	ldr	r4, [r3, #0]
 800a06e:	f000 fe67 	bl	800ad40 <HAL_RCC_GetHCLKFreq>
 800a072:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	4620      	mov	r0, r4
 800a07e:	f002 ff0d 	bl	800ce9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f006 fa0f 	bl	80104a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	695a      	ldr	r2, [r3, #20]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a096:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f004 f8ba 	bl	800e216 <USB_ReadInterrupts>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f003 0308 	and.w	r3, r3, #8
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d10a      	bne.n	800a0c2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f006 f9ec 	bl	801048a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	695a      	ldr	r2, [r3, #20]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f002 0208 	and.w	r2, r2, #8
 800a0c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f004 f8a5 	bl	800e216 <USB_ReadInterrupts>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0d6:	d10f      	bne.n	800a0f8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f006 fa4e 	bl	8010584 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	695a      	ldr	r2, [r3, #20]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a0f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f004 f88a 	bl	800e216 <USB_ReadInterrupts>
 800a102:	4603      	mov	r3, r0
 800a104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a10c:	d10f      	bne.n	800a12e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	b2db      	uxtb	r3, r3
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f006 fa21 	bl	8010560 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	695a      	ldr	r2, [r3, #20]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a12c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4618      	mov	r0, r3
 800a134:	f004 f86f 	bl	800e216 <USB_ReadInterrupts>
 800a138:	4603      	mov	r3, r0
 800a13a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a142:	d10a      	bne.n	800a15a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f006 fa2f 	bl	80105a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	695a      	ldr	r2, [r3, #20]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f004 f859 	bl	800e216 <USB_ReadInterrupts>
 800a164:	4603      	mov	r3, r0
 800a166:	f003 0304 	and.w	r3, r3, #4
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d115      	bne.n	800a19a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f006 fa1f 	bl	80105c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6859      	ldr	r1, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
 800a196:	e000      	b.n	800a19a <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a198:	bf00      	nop
    }
  }
}
 800a19a:	3734      	adds	r7, #52	; 0x34
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd90      	pop	{r4, r7, pc}

0800a1a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_PCD_SetAddress+0x1a>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e013      	b.n	800a1e2 <HAL_PCD_SetAddress+0x42>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f003 ffb7 	bl	800e146 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	70fb      	strb	r3, [r7, #3]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	803b      	strh	r3, [r7, #0]
 800a200:	4613      	mov	r3, r2
 800a202:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	da0f      	bge.n	800a230 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	f003 020f 	and.w	r2, r3, #15
 800a216:	4613      	mov	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	3338      	adds	r3, #56	; 0x38
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	4413      	add	r3, r2
 800a224:	3304      	adds	r3, #4
 800a226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	705a      	strb	r2, [r3, #1]
 800a22e:	e00f      	b.n	800a250 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	f003 020f 	and.w	r2, r3, #15
 800a236:	4613      	mov	r3, r2
 800a238:	00db      	lsls	r3, r3, #3
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	4413      	add	r3, r2
 800a246:	3304      	adds	r3, #4
 800a248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	b2da      	uxtb	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a25c:	883a      	ldrh	r2, [r7, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	78ba      	ldrb	r2, [r7, #2]
 800a266:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a27a:	78bb      	ldrb	r3, [r7, #2]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d102      	bne.n	800a286 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d101      	bne.n	800a294 <HAL_PCD_EP_Open+0xaa>
 800a290:	2302      	movs	r3, #2
 800a292:	e00e      	b.n	800a2b2 <HAL_PCD_EP_Open+0xc8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68f9      	ldr	r1, [r7, #12]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f003 f8ea 	bl	800d47c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a2c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	da0f      	bge.n	800a2ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	f003 020f 	and.w	r2, r3, #15
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	1a9b      	subs	r3, r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	3338      	adds	r3, #56	; 0x38
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	705a      	strb	r2, [r3, #1]
 800a2ec:	e00f      	b.n	800a30e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2ee:	78fb      	ldrb	r3, [r7, #3]
 800a2f0:	f003 020f 	and.w	r2, r3, #15
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4413      	add	r3, r2
 800a304:	3304      	adds	r3, #4
 800a306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a30e:	78fb      	ldrb	r3, [r7, #3]
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	b2da      	uxtb	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a320:	2b01      	cmp	r3, #1
 800a322:	d101      	bne.n	800a328 <HAL_PCD_EP_Close+0x6e>
 800a324:	2302      	movs	r3, #2
 800a326:	e00e      	b.n	800a346 <HAL_PCD_EP_Close+0x8c>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68f9      	ldr	r1, [r7, #12]
 800a336:	4618      	mov	r0, r3
 800a338:	f003 f928 	bl	800d58c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
 800a35a:	460b      	mov	r3, r1
 800a35c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a35e:	7afb      	ldrb	r3, [r7, #11]
 800a360:	f003 020f 	and.w	r2, r3, #15
 800a364:	4613      	mov	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	1a9b      	subs	r3, r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4413      	add	r3, r2
 800a374:	3304      	adds	r3, #4
 800a376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2200      	movs	r2, #0
 800a388:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2200      	movs	r2, #0
 800a38e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a390:	7afb      	ldrb	r3, [r7, #11]
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	b2da      	uxtb	r2, r3
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d102      	bne.n	800a3aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	f003 030f 	and.w	r3, r3, #15
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	f003 fc03 	bl	800dbcc <USB_EP0StartXfer>
 800a3c6:	e008      	b.n	800a3da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6979      	ldr	r1, [r7, #20]
 800a3d6:	f003 f9b5 	bl	800d744 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	f003 020f 	and.w	r2, r3, #15
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a406:	681b      	ldr	r3, [r3, #0]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	607a      	str	r2, [r7, #4]
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	460b      	mov	r3, r1
 800a422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	4613      	mov	r3, r2
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	3338      	adds	r3, #56	; 0x38
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	3304      	adds	r3, #4
 800a43a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2201      	movs	r2, #1
 800a452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a454:	7afb      	ldrb	r3, [r7, #11]
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d102      	bne.n	800a46e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	f003 030f 	and.w	r3, r3, #15
 800a474:	2b00      	cmp	r3, #0
 800a476:	d109      	bne.n	800a48c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6818      	ldr	r0, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	461a      	mov	r2, r3
 800a484:	6979      	ldr	r1, [r7, #20]
 800a486:	f003 fba1 	bl	800dbcc <USB_EP0StartXfer>
 800a48a:	e008      	b.n	800a49e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	461a      	mov	r2, r3
 800a498:	6979      	ldr	r1, [r7, #20]
 800a49a:	f003 f953 	bl	800d744 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	f003 020f 	and.w	r2, r3, #15
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d901      	bls.n	800a4c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e050      	b.n	800a568 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a4c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	da0f      	bge.n	800a4ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	f003 020f 	and.w	r2, r3, #15
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	3338      	adds	r3, #56	; 0x38
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	705a      	strb	r2, [r3, #1]
 800a4ec:	e00d      	b.n	800a50a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	4413      	add	r3, r2
 800a500:	3304      	adds	r3, #4
 800a502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2201      	movs	r2, #1
 800a50e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	f003 030f 	and.w	r3, r3, #15
 800a516:	b2da      	uxtb	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a522:	2b01      	cmp	r3, #1
 800a524:	d101      	bne.n	800a52a <HAL_PCD_EP_SetStall+0x82>
 800a526:	2302      	movs	r3, #2
 800a528:	e01e      	b.n	800a568 <HAL_PCD_EP_SetStall+0xc0>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	4618      	mov	r0, r3
 800a53a:	f003 fd30 	bl	800df9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	f003 030f 	and.w	r3, r3, #15
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6818      	ldr	r0, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	b2d9      	uxtb	r1, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a558:	461a      	mov	r2, r3
 800a55a:	f003 ff21 	bl	800e3a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	f003 020f 	and.w	r2, r3, #15
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	429a      	cmp	r2, r3
 800a588:	d901      	bls.n	800a58e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e042      	b.n	800a614 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a58e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a592:	2b00      	cmp	r3, #0
 800a594:	da0f      	bge.n	800a5b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	f003 020f 	and.w	r2, r3, #15
 800a59c:	4613      	mov	r3, r2
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	3338      	adds	r3, #56	; 0x38
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	705a      	strb	r2, [r3, #1]
 800a5b4:	e00f      	b.n	800a5d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	f003 020f 	and.w	r2, r3, #15
 800a5bc:	4613      	mov	r3, r2
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	1a9b      	subs	r3, r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d101      	bne.n	800a5f6 <HAL_PCD_EP_ClrStall+0x86>
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	e00e      	b.n	800a614 <HAL_PCD_EP_ClrStall+0xa4>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	4618      	mov	r0, r3
 800a606:	f003 fd38 	bl	800e07a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af02      	add	r7, sp, #8
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	4613      	mov	r3, r2
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	3338      	adds	r3, #56	; 0x38
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	3304      	adds	r3, #4
 800a642:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	699a      	ldr	r2, [r3, #24]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	695b      	ldr	r3, [r3, #20]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d901      	bls.n	800a654 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e06c      	b.n	800a72e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	695a      	ldr	r2, [r3, #20]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	69fa      	ldr	r2, [r7, #28]
 800a666:	429a      	cmp	r2, r3
 800a668:	d902      	bls.n	800a670 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	3303      	adds	r3, #3
 800a674:	089b      	lsrs	r3, r3, #2
 800a676:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a678:	e02b      	b.n	800a6d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	69fa      	ldr	r2, [r7, #28]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d902      	bls.n	800a696 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	3303      	adds	r3, #3
 800a69a:	089b      	lsrs	r3, r3, #2
 800a69c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68d9      	ldr	r1, [r3, #12]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6978      	ldr	r0, [r7, #20]
 800a6b6:	f003 fbdc 	bl	800de72 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	441a      	add	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	441a      	add	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d809      	bhi.n	800a6fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d203      	bcs.n	800a6fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1be      	bne.n	800a67a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	695a      	ldr	r2, [r3, #20]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	429a      	cmp	r2, r3
 800a706:	d811      	bhi.n	800a72c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f003 030f 	and.w	r3, r3, #15
 800a70e:	2201      	movs	r2, #1
 800a710:	fa02 f303 	lsl.w	r3, r2, r3
 800a714:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a71c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	43db      	mvns	r3, r3
 800a722:	6939      	ldr	r1, [r7, #16]
 800a724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a728:	4013      	ands	r3, r2
 800a72a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3720      	adds	r7, #32
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	333c      	adds	r3, #60	; 0x3c
 800a750:	3304      	adds	r3, #4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	f040 80a0 	bne.w	800a8b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d015      	beq.n	800a7a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4a72      	ldr	r2, [pc, #456]	; (800a948 <PCD_EP_OutXfrComplete_int+0x210>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	f240 80dd 	bls.w	800a93e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80d7 	beq.w	800a93e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	461a      	mov	r2, r3
 800a79e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a2:	6093      	str	r3, [r2, #8]
 800a7a4:	e0cb      	b.n	800a93e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f003 0320 	and.w	r3, r3, #32
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d009      	beq.n	800a7c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2320      	movs	r3, #32
 800a7c0:	6093      	str	r3, [r2, #8]
 800a7c2:	e0bc      	b.n	800a93e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f040 80b7 	bne.w	800a93e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a5d      	ldr	r2, [pc, #372]	; (800a948 <PCD_EP_OutXfrComplete_int+0x210>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d90f      	bls.n	800a7f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7f4:	6093      	str	r3, [r2, #8]
 800a7f6:	e0a2      	b.n	800a93e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	1a9b      	subs	r3, r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	440b      	add	r3, r1
 800a806:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a80a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	0159      	lsls	r1, r3, #5
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	440b      	add	r3, r1
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a81e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	4613      	mov	r3, r2
 800a826:	00db      	lsls	r3, r3, #3
 800a828:	1a9b      	subs	r3, r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4403      	add	r3, r0
 800a82e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a832:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	4613      	mov	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	1a9b      	subs	r3, r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a846:	6819      	ldr	r1, [r3, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	4613      	mov	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	1a9b      	subs	r3, r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4403      	add	r3, r0
 800a856:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4419      	add	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	4613      	mov	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	1a9b      	subs	r3, r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4403      	add	r3, r0
 800a86c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a870:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d114      	bne.n	800a8a2 <PCD_EP_OutXfrComplete_int+0x16a>
 800a878:	6879      	ldr	r1, [r7, #4]
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	4613      	mov	r3, r2
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	1a9b      	subs	r3, r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d108      	bne.n	800a8a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a89a:	461a      	mov	r2, r3
 800a89c:	2101      	movs	r1, #1
 800a89e:	f003 fd7f 	bl	800e3a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f005 fdb9 	bl	8010420 <HAL_PCD_DataOutStageCallback>
 800a8ae:	e046      	b.n	800a93e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a26      	ldr	r2, [pc, #152]	; (800a94c <PCD_EP_OutXfrComplete_int+0x214>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d124      	bne.n	800a902 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8d4:	6093      	str	r3, [r2, #8]
 800a8d6:	e032      	b.n	800a93e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d008      	beq.n	800a8f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f005 fd90 	bl	8010420 <HAL_PCD_DataOutStageCallback>
 800a900:	e01d      	b.n	800a93e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d114      	bne.n	800a932 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	4613      	mov	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	1a9b      	subs	r3, r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d108      	bne.n	800a932 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6818      	ldr	r0, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a92a:	461a      	mov	r2, r3
 800a92c:	2100      	movs	r1, #0
 800a92e:	f003 fd37 	bl	800e3a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f005 fd71 	bl	8010420 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	4f54300a 	.word	0x4f54300a
 800a94c:	4f54310a 	.word	0x4f54310a

0800a950 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	333c      	adds	r3, #60	; 0x3c
 800a968:	3304      	adds	r3, #4
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4a15      	ldr	r2, [pc, #84]	; (800a9d8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d90e      	bls.n	800a9a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	461a      	mov	r2, r3
 800a99e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f005 fd29 	bl	80103fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4a0a      	ldr	r2, [pc, #40]	; (800a9d8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d90c      	bls.n	800a9cc <PCD_EP_OutSetupPacket_int+0x7c>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d108      	bne.n	800a9cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6818      	ldr	r0, [r3, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	f003 fcea 	bl	800e3a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	4f54300a 	.word	0x4f54300a

0800a9dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d107      	bne.n	800aa0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a9fa:	883b      	ldrh	r3, [r7, #0]
 800a9fc:	0419      	lsls	r1, r3, #16
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	629a      	str	r2, [r3, #40]	; 0x28
 800aa08:	e028      	b.n	800aa5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	0c1b      	lsrs	r3, r3, #16
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	4413      	add	r3, r2
 800aa16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
 800aa1c:	e00d      	b.n	800aa3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	3340      	adds	r3, #64	; 0x40
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	0c1b      	lsrs	r3, r3, #16
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	3301      	adds	r3, #1
 800aa38:	73fb      	strb	r3, [r7, #15]
 800aa3a:	7bfa      	ldrb	r2, [r7, #15]
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3ec      	bcc.n	800aa1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aa44:	883b      	ldrh	r3, [r7, #0]
 800aa46:	0418      	lsls	r0, r3, #16
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6819      	ldr	r1, [r3, #0]
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	4302      	orrs	r2, r0
 800aa54:	3340      	adds	r3, #64	; 0x40
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	440b      	add	r3, r1
 800aa5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	887a      	ldrh	r2, [r7, #2]
 800aa7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aabe:	f043 0303 	orr.w	r3, r3, #3
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aade:	2300      	movs	r3, #0
 800aae0:	603b      	str	r3, [r7, #0]
 800aae2:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <HAL_PWREx_EnableOverDrive+0x90>)
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <HAL_PWREx_EnableOverDrive+0x90>)
 800aae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaec:	6413      	str	r3, [r2, #64]	; 0x40
 800aaee:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <HAL_PWREx_EnableOverDrive+0x90>)
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaf6:	603b      	str	r3, [r7, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aafa:	4b1b      	ldr	r3, [pc, #108]	; (800ab68 <HAL_PWREx_EnableOverDrive+0x94>)
 800aafc:	2201      	movs	r2, #1
 800aafe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab00:	f7f9 fdf0 	bl	80046e4 <HAL_GetTick>
 800ab04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ab06:	e009      	b.n	800ab1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ab08:	f7f9 fdec 	bl	80046e4 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab16:	d901      	bls.n	800ab1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e01f      	b.n	800ab5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ab1c:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <HAL_PWREx_EnableOverDrive+0x98>)
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab28:	d1ee      	bne.n	800ab08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ab2a:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab30:	f7f9 fdd8 	bl	80046e4 <HAL_GetTick>
 800ab34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ab36:	e009      	b.n	800ab4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ab38:	f7f9 fdd4 	bl	80046e4 <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab46:	d901      	bls.n	800ab4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e007      	b.n	800ab5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ab4c:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <HAL_PWREx_EnableOverDrive+0x98>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab58:	d1ee      	bne.n	800ab38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	40023800 	.word	0x40023800
 800ab68:	420e0040 	.word	0x420e0040
 800ab6c:	40007000 	.word	0x40007000
 800ab70:	420e0044 	.word	0x420e0044

0800ab74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e0cc      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab88:	4b68      	ldr	r3, [pc, #416]	; (800ad2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d90c      	bls.n	800abb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab96:	4b65      	ldr	r3, [pc, #404]	; (800ad2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	b2d2      	uxtb	r2, r2
 800ab9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9e:	4b63      	ldr	r3, [pc, #396]	; (800ad2c <HAL_RCC_ClockConfig+0x1b8>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 030f 	and.w	r3, r3, #15
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d001      	beq.n	800abb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e0b8      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d020      	beq.n	800abfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abc8:	4b59      	ldr	r3, [pc, #356]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4a58      	ldr	r2, [pc, #352]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800abce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800abd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abe0:	4b53      	ldr	r3, [pc, #332]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	4a52      	ldr	r2, [pc, #328]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800abe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800abea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abec:	4b50      	ldr	r3, [pc, #320]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	494d      	ldr	r1, [pc, #308]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d044      	beq.n	800ac94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d107      	bne.n	800ac22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac12:	4b47      	ldr	r3, [pc, #284]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d119      	bne.n	800ac52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e07f      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d003      	beq.n	800ac32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d107      	bne.n	800ac42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac32:	4b3f      	ldr	r3, [pc, #252]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d109      	bne.n	800ac52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e06f      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac42:	4b3b      	ldr	r3, [pc, #236]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0302 	and.w	r3, r3, #2
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e067      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac52:	4b37      	ldr	r3, [pc, #220]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f023 0203 	bic.w	r2, r3, #3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4934      	ldr	r1, [pc, #208]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac64:	f7f9 fd3e 	bl	80046e4 <HAL_GetTick>
 800ac68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac6a:	e00a      	b.n	800ac82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac6c:	f7f9 fd3a 	bl	80046e4 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d901      	bls.n	800ac82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e04f      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac82:	4b2b      	ldr	r3, [pc, #172]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f003 020c 	and.w	r2, r3, #12
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d1eb      	bne.n	800ac6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <HAL_RCC_ClockConfig+0x1b8>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 030f 	and.w	r3, r3, #15
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d20c      	bcs.n	800acbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aca2:	4b22      	ldr	r3, [pc, #136]	; (800ad2c <HAL_RCC_ClockConfig+0x1b8>)
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	b2d2      	uxtb	r2, r2
 800aca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acaa:	4b20      	ldr	r3, [pc, #128]	; (800ad2c <HAL_RCC_ClockConfig+0x1b8>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d001      	beq.n	800acbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e032      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d008      	beq.n	800acda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acc8:	4b19      	ldr	r3, [pc, #100]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	4916      	ldr	r1, [pc, #88]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0308 	and.w	r3, r3, #8
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ace6:	4b12      	ldr	r3, [pc, #72]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	490e      	ldr	r1, [pc, #56]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800acfa:	f000 fb6b 	bl	800b3d4 <HAL_RCC_GetSysClockFreq>
 800acfe:	4602      	mov	r2, r0
 800ad00:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <HAL_RCC_ClockConfig+0x1bc>)
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	091b      	lsrs	r3, r3, #4
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	490a      	ldr	r1, [pc, #40]	; (800ad34 <HAL_RCC_ClockConfig+0x1c0>)
 800ad0c:	5ccb      	ldrb	r3, [r1, r3]
 800ad0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad12:	4a09      	ldr	r2, [pc, #36]	; (800ad38 <HAL_RCC_ClockConfig+0x1c4>)
 800ad14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <HAL_RCC_ClockConfig+0x1c8>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7f9 fc9e 	bl	800465c <HAL_InitTick>

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40023c00 	.word	0x40023c00
 800ad30:	40023800 	.word	0x40023800
 800ad34:	08010c8c 	.word	0x08010c8c
 800ad38:	20000000 	.word	0x20000000
 800ad3c:	20000004 	.word	0x20000004

0800ad40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad44:	4b03      	ldr	r3, [pc, #12]	; (800ad54 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad46:	681b      	ldr	r3, [r3, #0]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	20000000 	.word	0x20000000

0800ad58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ad5c:	f7ff fff0 	bl	800ad40 <HAL_RCC_GetHCLKFreq>
 800ad60:	4602      	mov	r2, r0
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	0a9b      	lsrs	r3, r3, #10
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	4903      	ldr	r1, [pc, #12]	; (800ad7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad6e:	5ccb      	ldrb	r3, [r1, r3]
 800ad70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	40023800 	.word	0x40023800
 800ad7c:	08010c9c 	.word	0x08010c9c

0800ad80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08c      	sub	sp, #48	; 0x30
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d010      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800adb8:	4b6f      	ldr	r3, [pc, #444]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800adba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adbe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc6:	496c      	ldr	r1, [pc, #432]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800add6:	2301      	movs	r3, #1
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d010      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800ade6:	4b64      	ldr	r3, [pc, #400]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ade8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf4:	4960      	ldr	r1, [pc, #384]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800ae04:	2301      	movs	r3, #1
 800ae06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d017      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae14:	4b58      	ldr	r3, [pc, #352]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	4955      	ldr	r1, [pc, #340]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae32:	d101      	bne.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800ae34:	2301      	movs	r3, #1
 800ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800ae40:	2301      	movs	r3, #1
 800ae42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0308 	and.w	r3, r3, #8
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d017      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ae50:	4b49      	ldr	r3, [pc, #292]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5e:	4946      	ldr	r1, [pc, #280]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae6e:	d101      	bne.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800ae70:	2301      	movs	r3, #1
 800ae72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0320 	and.w	r3, r3, #32
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 808a 	beq.w	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60bb      	str	r3, [r7, #8]
 800ae92:	4b39      	ldr	r3, [pc, #228]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae96:	4a38      	ldr	r2, [pc, #224]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ae9e:	4b36      	ldr	r3, [pc, #216]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea6:	60bb      	str	r3, [r7, #8]
 800aea8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800aeaa:	4b34      	ldr	r3, [pc, #208]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a33      	ldr	r2, [pc, #204]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aeb6:	f7f9 fc15 	bl	80046e4 <HAL_GetTick>
 800aeba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aebc:	e008      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aebe:	f7f9 fc11 	bl	80046e4 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d901      	bls.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e278      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aed0:	4b2a      	ldr	r3, [pc, #168]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0f0      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aedc:	4b26      	ldr	r3, [pc, #152]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aee4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d02f      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aef4:	6a3a      	ldr	r2, [r7, #32]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d028      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aefa:	4b1f      	ldr	r3, [pc, #124]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aefe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800af04:	4b1e      	ldr	r3, [pc, #120]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800af06:	2201      	movs	r2, #1
 800af08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800af0a:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800af10:	4a19      	ldr	r2, [pc, #100]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800af16:	4b18      	ldr	r3, [pc, #96]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d114      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800af22:	f7f9 fbdf 	bl	80046e4 <HAL_GetTick>
 800af26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af28:	e00a      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af2a:	f7f9 fbdb 	bl	80046e4 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	f241 3288 	movw	r2, #5000	; 0x1388
 800af38:	4293      	cmp	r3, r2
 800af3a:	d901      	bls.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e240      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af40:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d0ee      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af58:	d114      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800af5a:	4b07      	ldr	r3, [pc, #28]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800af6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af6e:	4902      	ldr	r1, [pc, #8]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af70:	4313      	orrs	r3, r2
 800af72:	608b      	str	r3, [r1, #8]
 800af74:	e00c      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800af76:	bf00      	nop
 800af78:	40023800 	.word	0x40023800
 800af7c:	40007000 	.word	0x40007000
 800af80:	42470e40 	.word	0x42470e40
 800af84:	4b4a      	ldr	r3, [pc, #296]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	4a49      	ldr	r2, [pc, #292]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800af8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800af8e:	6093      	str	r3, [r2, #8]
 800af90:	4b47      	ldr	r3, [pc, #284]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800af92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af9c:	4944      	ldr	r1, [pc, #272]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800af9e:	4313      	orrs	r3, r2
 800afa0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0310 	and.w	r3, r3, #16
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d004      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800afb4:	4b3f      	ldr	r3, [pc, #252]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800afb6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00a      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800afc4:	4b3a      	ldr	r3, [pc, #232]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800afc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd2:	4937      	ldr	r1, [pc, #220]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800afd4:	4313      	orrs	r3, r2
 800afd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afe6:	4b32      	ldr	r3, [pc, #200]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800afe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff4:	492e      	ldr	r1, [pc, #184]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b004:	2b00      	cmp	r3, #0
 800b006:	d011      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b008:	4b29      	ldr	r3, [pc, #164]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b00e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b016:	4926      	ldr	r1, [pc, #152]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b018:	4313      	orrs	r3, r2
 800b01a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b026:	d101      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b028:	2301      	movs	r3, #1
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b038:	4b1d      	ldr	r3, [pc, #116]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b03a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b03e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b046:	491a      	ldr	r1, [pc, #104]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b056:	2b00      	cmp	r3, #0
 800b058:	d011      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b05a:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b05c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b060:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b068:	4911      	ldr	r1, [pc, #68]	; (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b078:	d101      	bne.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b07a:	2301      	movs	r3, #1
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	2b01      	cmp	r3, #1
 800b082:	d005      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b08c:	f040 80ff 	bne.w	800b28e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b090:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b096:	f7f9 fb25 	bl	80046e4 <HAL_GetTick>
 800b09a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b09c:	e00e      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b09e:	f7f9 fb21 	bl	80046e4 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d907      	bls.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e188      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b0b0:	40023800 	.word	0x40023800
 800b0b4:	424711e0 	.word	0x424711e0
 800b0b8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0bc:	4b7e      	ldr	r3, [pc, #504]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1ea      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d028      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d124      	bne.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b0f0:	4b71      	ldr	r3, [pc, #452]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b102:	4b6d      	ldr	r3, [pc, #436]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b108:	0e1b      	lsrs	r3, r3, #24
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	019b      	lsls	r3, r3, #6
 800b11a:	431a      	orrs	r2, r3
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	3b01      	subs	r3, #1
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	431a      	orrs	r2, r3
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	061b      	lsls	r3, r3, #24
 800b12a:	431a      	orrs	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	071b      	lsls	r3, r3, #28
 800b132:	4961      	ldr	r1, [pc, #388]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b134:	4313      	orrs	r3, r2
 800b136:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0304 	and.w	r3, r3, #4
 800b142:	2b00      	cmp	r3, #0
 800b144:	d004      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b14e:	d00a      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d035      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b164:	d130      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b166:	4b54      	ldr	r3, [pc, #336]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b16c:	0c1b      	lsrs	r3, r3, #16
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	3301      	adds	r3, #1
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b178:	4b4f      	ldr	r3, [pc, #316]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b17e:	0f1b      	lsrs	r3, r3, #28
 800b180:	f003 0307 	and.w	r3, r3, #7
 800b184:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	019b      	lsls	r3, r3, #6
 800b190:	431a      	orrs	r2, r3
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	085b      	lsrs	r3, r3, #1
 800b196:	3b01      	subs	r3, #1
 800b198:	041b      	lsls	r3, r3, #16
 800b19a:	431a      	orrs	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	061b      	lsls	r3, r3, #24
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	071b      	lsls	r3, r3, #28
 800b1a8:	4943      	ldr	r1, [pc, #268]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b1b0:	4b41      	ldr	r3, [pc, #260]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1b6:	f023 021f 	bic.w	r2, r3, #31
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	493d      	ldr	r1, [pc, #244]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d029      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1dc:	d124      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b1de:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1e4:	0c1b      	lsrs	r3, r3, #16
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1f0:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1f6:	0f1b      	lsrs	r3, r3, #28
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	019b      	lsls	r3, r3, #6
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	085b      	lsrs	r3, r3, #1
 800b210:	3b01      	subs	r3, #1
 800b212:	041b      	lsls	r3, r3, #16
 800b214:	431a      	orrs	r2, r3
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	061b      	lsls	r3, r3, #24
 800b21a:	431a      	orrs	r2, r3
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	071b      	lsls	r3, r3, #28
 800b220:	4925      	ldr	r1, [pc, #148]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b222:	4313      	orrs	r3, r2
 800b224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b230:	2b00      	cmp	r3, #0
 800b232:	d016      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	019b      	lsls	r3, r3, #6
 800b23e:	431a      	orrs	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	085b      	lsrs	r3, r3, #1
 800b246:	3b01      	subs	r3, #1
 800b248:	041b      	lsls	r3, r3, #16
 800b24a:	431a      	orrs	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	061b      	lsls	r3, r3, #24
 800b252:	431a      	orrs	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	071b      	lsls	r3, r3, #28
 800b25a:	4917      	ldr	r1, [pc, #92]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b262:	4b16      	ldr	r3, [pc, #88]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b268:	f7f9 fa3c 	bl	80046e4 <HAL_GetTick>
 800b26c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b26e:	e008      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b270:	f7f9 fa38 	bl	80046e4 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d901      	bls.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e09f      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b282:	4b0d      	ldr	r3, [pc, #52]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0f0      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	2b01      	cmp	r3, #1
 800b292:	f040 8095 	bne.w	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b296:	4b0a      	ldr	r3, [pc, #40]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b29c:	f7f9 fa22 	bl	80046e4 <HAL_GetTick>
 800b2a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2a2:	e00f      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b2a4:	f7f9 fa1e 	bl	80046e4 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d908      	bls.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e085      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b2b6:	bf00      	nop
 800b2b8:	40023800 	.word	0x40023800
 800b2bc:	42470068 	.word	0x42470068
 800b2c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2c4:	4b41      	ldr	r3, [pc, #260]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d0:	d0e8      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d02b      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d127      	bne.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b2fa:	4b34      	ldr	r3, [pc, #208]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b300:	0c1b      	lsrs	r3, r3, #16
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	3301      	adds	r3, #1
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	699a      	ldr	r2, [r3, #24]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	019b      	lsls	r3, r3, #6
 800b316:	431a      	orrs	r2, r3
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	3b01      	subs	r3, #1
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	431a      	orrs	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	061b      	lsls	r3, r3, #24
 800b328:	4928      	ldr	r1, [pc, #160]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b32a:	4313      	orrs	r3, r2
 800b32c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b330:	4b26      	ldr	r3, [pc, #152]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b336:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33e:	3b01      	subs	r3, #1
 800b340:	021b      	lsls	r3, r3, #8
 800b342:	4922      	ldr	r1, [pc, #136]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b344:	4313      	orrs	r3, r2
 800b346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b352:	2b00      	cmp	r3, #0
 800b354:	d01d      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b35a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b35e:	d118      	bne.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b360:	4b1a      	ldr	r3, [pc, #104]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b366:	0e1b      	lsrs	r3, r3, #24
 800b368:	f003 030f 	and.w	r3, r3, #15
 800b36c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	699a      	ldr	r2, [r3, #24]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	019b      	lsls	r3, r3, #6
 800b378:	431a      	orrs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	3b01      	subs	r3, #1
 800b382:	041b      	lsls	r3, r3, #16
 800b384:	431a      	orrs	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	061b      	lsls	r3, r3, #24
 800b38a:	4910      	ldr	r1, [pc, #64]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b392:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b394:	2201      	movs	r2, #1
 800b396:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b398:	f7f9 f9a4 	bl	80046e4 <HAL_GetTick>
 800b39c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b39e:	e008      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b3a0:	f7f9 f9a0 	bl	80046e4 <HAL_GetTick>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d901      	bls.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e007      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b3b2:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3be:	d1ef      	bne.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3730      	adds	r7, #48	; 0x30
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	40023800 	.word	0x40023800
 800b3d0:	42470070 	.word	0x42470070

0800b3d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d8:	b088      	sub	sp, #32
 800b3da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3f0:	4bce      	ldr	r3, [pc, #824]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f003 030c 	and.w	r3, r3, #12
 800b3f8:	2b0c      	cmp	r3, #12
 800b3fa:	f200 818d 	bhi.w	800b718 <HAL_RCC_GetSysClockFreq+0x344>
 800b3fe:	a201      	add	r2, pc, #4	; (adr r2, 800b404 <HAL_RCC_GetSysClockFreq+0x30>)
 800b400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b404:	0800b439 	.word	0x0800b439
 800b408:	0800b719 	.word	0x0800b719
 800b40c:	0800b719 	.word	0x0800b719
 800b410:	0800b719 	.word	0x0800b719
 800b414:	0800b43f 	.word	0x0800b43f
 800b418:	0800b719 	.word	0x0800b719
 800b41c:	0800b719 	.word	0x0800b719
 800b420:	0800b719 	.word	0x0800b719
 800b424:	0800b445 	.word	0x0800b445
 800b428:	0800b719 	.word	0x0800b719
 800b42c:	0800b719 	.word	0x0800b719
 800b430:	0800b719 	.word	0x0800b719
 800b434:	0800b5b9 	.word	0x0800b5b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b438:	4bbd      	ldr	r3, [pc, #756]	; (800b730 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b43a:	61bb      	str	r3, [r7, #24]
       break;
 800b43c:	e16f      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b43e:	4bbd      	ldr	r3, [pc, #756]	; (800b734 <HAL_RCC_GetSysClockFreq+0x360>)
 800b440:	61bb      	str	r3, [r7, #24]
      break;
 800b442:	e16c      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b444:	4bb9      	ldr	r3, [pc, #740]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b44e:	4bb7      	ldr	r3, [pc, #732]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d053      	beq.n	800b502 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b45a:	4bb4      	ldr	r3, [pc, #720]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	099b      	lsrs	r3, r3, #6
 800b460:	461a      	mov	r2, r3
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b46a:	f04f 0100 	mov.w	r1, #0
 800b46e:	ea02 0400 	and.w	r4, r2, r0
 800b472:	603c      	str	r4, [r7, #0]
 800b474:	400b      	ands	r3, r1
 800b476:	607b      	str	r3, [r7, #4]
 800b478:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	014b      	lsls	r3, r1, #5
 800b48a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b48e:	0142      	lsls	r2, r0, #5
 800b490:	4610      	mov	r0, r2
 800b492:	4619      	mov	r1, r3
 800b494:	4623      	mov	r3, r4
 800b496:	1ac0      	subs	r0, r0, r3
 800b498:	462b      	mov	r3, r5
 800b49a:	eb61 0103 	sbc.w	r1, r1, r3
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	018b      	lsls	r3, r1, #6
 800b4a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b4ac:	0182      	lsls	r2, r0, #6
 800b4ae:	1a12      	subs	r2, r2, r0
 800b4b0:	eb63 0301 	sbc.w	r3, r3, r1
 800b4b4:	f04f 0000 	mov.w	r0, #0
 800b4b8:	f04f 0100 	mov.w	r1, #0
 800b4bc:	00d9      	lsls	r1, r3, #3
 800b4be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b4c2:	00d0      	lsls	r0, r2, #3
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	1852      	adds	r2, r2, r1
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	eb43 0101 	adc.w	r1, r3, r1
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	f04f 0000 	mov.w	r0, #0
 800b4d8:	f04f 0100 	mov.w	r1, #0
 800b4dc:	0259      	lsls	r1, r3, #9
 800b4de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b4e2:	0250      	lsls	r0, r2, #9
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	f7f4 fe86 	bl	8000204 <__aeabi_uldivmod>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	61fb      	str	r3, [r7, #28]
 800b500:	e04c      	b.n	800b59c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b502:	4b8a      	ldr	r3, [pc, #552]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	099b      	lsrs	r3, r3, #6
 800b508:	461a      	mov	r2, r3
 800b50a:	f04f 0300 	mov.w	r3, #0
 800b50e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b512:	f04f 0100 	mov.w	r1, #0
 800b516:	ea02 0a00 	and.w	sl, r2, r0
 800b51a:	ea03 0b01 	and.w	fp, r3, r1
 800b51e:	4650      	mov	r0, sl
 800b520:	4659      	mov	r1, fp
 800b522:	f04f 0200 	mov.w	r2, #0
 800b526:	f04f 0300 	mov.w	r3, #0
 800b52a:	014b      	lsls	r3, r1, #5
 800b52c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b530:	0142      	lsls	r2, r0, #5
 800b532:	4610      	mov	r0, r2
 800b534:	4619      	mov	r1, r3
 800b536:	ebb0 000a 	subs.w	r0, r0, sl
 800b53a:	eb61 010b 	sbc.w	r1, r1, fp
 800b53e:	f04f 0200 	mov.w	r2, #0
 800b542:	f04f 0300 	mov.w	r3, #0
 800b546:	018b      	lsls	r3, r1, #6
 800b548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b54c:	0182      	lsls	r2, r0, #6
 800b54e:	1a12      	subs	r2, r2, r0
 800b550:	eb63 0301 	sbc.w	r3, r3, r1
 800b554:	f04f 0000 	mov.w	r0, #0
 800b558:	f04f 0100 	mov.w	r1, #0
 800b55c:	00d9      	lsls	r1, r3, #3
 800b55e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b562:	00d0      	lsls	r0, r2, #3
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	eb12 020a 	adds.w	r2, r2, sl
 800b56c:	eb43 030b 	adc.w	r3, r3, fp
 800b570:	f04f 0000 	mov.w	r0, #0
 800b574:	f04f 0100 	mov.w	r1, #0
 800b578:	0299      	lsls	r1, r3, #10
 800b57a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b57e:	0290      	lsls	r0, r2, #10
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4610      	mov	r0, r2
 800b586:	4619      	mov	r1, r3
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f04f 0300 	mov.w	r3, #0
 800b590:	f7f4 fe38 	bl	8000204 <__aeabi_uldivmod>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4613      	mov	r3, r2
 800b59a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b59c:	4b63      	ldr	r3, [pc, #396]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	0c1b      	lsrs	r3, r3, #16
 800b5a2:	f003 0303 	and.w	r3, r3, #3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b5ac:	69fa      	ldr	r2, [r7, #28]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b4:	61bb      	str	r3, [r7, #24]
      break;
 800b5b6:	e0b2      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5b8:	4b5c      	ldr	r3, [pc, #368]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5c2:	4b5a      	ldr	r3, [pc, #360]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d04d      	beq.n	800b66a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5ce:	4b57      	ldr	r3, [pc, #348]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	099b      	lsrs	r3, r3, #6
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	f04f 0300 	mov.w	r3, #0
 800b5da:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5de:	f04f 0100 	mov.w	r1, #0
 800b5e2:	ea02 0800 	and.w	r8, r2, r0
 800b5e6:	ea03 0901 	and.w	r9, r3, r1
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	f04f 0200 	mov.w	r2, #0
 800b5f2:	f04f 0300 	mov.w	r3, #0
 800b5f6:	014b      	lsls	r3, r1, #5
 800b5f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b5fc:	0142      	lsls	r2, r0, #5
 800b5fe:	4610      	mov	r0, r2
 800b600:	4619      	mov	r1, r3
 800b602:	ebb0 0008 	subs.w	r0, r0, r8
 800b606:	eb61 0109 	sbc.w	r1, r1, r9
 800b60a:	f04f 0200 	mov.w	r2, #0
 800b60e:	f04f 0300 	mov.w	r3, #0
 800b612:	018b      	lsls	r3, r1, #6
 800b614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b618:	0182      	lsls	r2, r0, #6
 800b61a:	1a12      	subs	r2, r2, r0
 800b61c:	eb63 0301 	sbc.w	r3, r3, r1
 800b620:	f04f 0000 	mov.w	r0, #0
 800b624:	f04f 0100 	mov.w	r1, #0
 800b628:	00d9      	lsls	r1, r3, #3
 800b62a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b62e:	00d0      	lsls	r0, r2, #3
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	eb12 0208 	adds.w	r2, r2, r8
 800b638:	eb43 0309 	adc.w	r3, r3, r9
 800b63c:	f04f 0000 	mov.w	r0, #0
 800b640:	f04f 0100 	mov.w	r1, #0
 800b644:	0259      	lsls	r1, r3, #9
 800b646:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b64a:	0250      	lsls	r0, r2, #9
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4610      	mov	r0, r2
 800b652:	4619      	mov	r1, r3
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	461a      	mov	r2, r3
 800b658:	f04f 0300 	mov.w	r3, #0
 800b65c:	f7f4 fdd2 	bl	8000204 <__aeabi_uldivmod>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4613      	mov	r3, r2
 800b666:	61fb      	str	r3, [r7, #28]
 800b668:	e04a      	b.n	800b700 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b66a:	4b30      	ldr	r3, [pc, #192]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	099b      	lsrs	r3, r3, #6
 800b670:	461a      	mov	r2, r3
 800b672:	f04f 0300 	mov.w	r3, #0
 800b676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b67a:	f04f 0100 	mov.w	r1, #0
 800b67e:	ea02 0400 	and.w	r4, r2, r0
 800b682:	ea03 0501 	and.w	r5, r3, r1
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f04f 0200 	mov.w	r2, #0
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	014b      	lsls	r3, r1, #5
 800b694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b698:	0142      	lsls	r2, r0, #5
 800b69a:	4610      	mov	r0, r2
 800b69c:	4619      	mov	r1, r3
 800b69e:	1b00      	subs	r0, r0, r4
 800b6a0:	eb61 0105 	sbc.w	r1, r1, r5
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	018b      	lsls	r3, r1, #6
 800b6ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b6b2:	0182      	lsls	r2, r0, #6
 800b6b4:	1a12      	subs	r2, r2, r0
 800b6b6:	eb63 0301 	sbc.w	r3, r3, r1
 800b6ba:	f04f 0000 	mov.w	r0, #0
 800b6be:	f04f 0100 	mov.w	r1, #0
 800b6c2:	00d9      	lsls	r1, r3, #3
 800b6c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6c8:	00d0      	lsls	r0, r2, #3
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	1912      	adds	r2, r2, r4
 800b6d0:	eb45 0303 	adc.w	r3, r5, r3
 800b6d4:	f04f 0000 	mov.w	r0, #0
 800b6d8:	f04f 0100 	mov.w	r1, #0
 800b6dc:	0299      	lsls	r1, r3, #10
 800b6de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b6e2:	0290      	lsls	r0, r2, #10
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f04f 0300 	mov.w	r3, #0
 800b6f4:	f7f4 fd86 	bl	8000204 <__aeabi_uldivmod>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <HAL_RCC_GetSysClockFreq+0x358>)
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	0f1b      	lsrs	r3, r3, #28
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b70c:	69fa      	ldr	r2, [r7, #28]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	fbb2 f3f3 	udiv	r3, r2, r3
 800b714:	61bb      	str	r3, [r7, #24]
      break;
 800b716:	e002      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b71a:	61bb      	str	r3, [r7, #24]
      break;
 800b71c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b71e:	69bb      	ldr	r3, [r7, #24]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3720      	adds	r7, #32
 800b724:	46bd      	mov	sp, r7
 800b726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b72a:	bf00      	nop
 800b72c:	40023800 	.word	0x40023800
 800b730:	00f42400 	.word	0x00f42400
 800b734:	007a1200 	.word	0x007a1200

0800b738 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e28d      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8083 	beq.w	800b85e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b758:	4b94      	ldr	r3, [pc, #592]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f003 030c 	and.w	r3, r3, #12
 800b760:	2b04      	cmp	r3, #4
 800b762:	d019      	beq.n	800b798 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b764:	4b91      	ldr	r3, [pc, #580]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d106      	bne.n	800b77e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b770:	4b8e      	ldr	r3, [pc, #568]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b77c:	d00c      	beq.n	800b798 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b77e:	4b8b      	ldr	r3, [pc, #556]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b786:	2b0c      	cmp	r3, #12
 800b788:	d112      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b78a:	4b88      	ldr	r3, [pc, #544]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b796:	d10b      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b798:	4b84      	ldr	r3, [pc, #528]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d05b      	beq.n	800b85c <HAL_RCC_OscConfig+0x124>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d157      	bne.n	800b85c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e25a      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b8:	d106      	bne.n	800b7c8 <HAL_RCC_OscConfig+0x90>
 800b7ba:	4b7c      	ldr	r3, [pc, #496]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a7b      	ldr	r2, [pc, #492]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	e01d      	b.n	800b804 <HAL_RCC_OscConfig+0xcc>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7d0:	d10c      	bne.n	800b7ec <HAL_RCC_OscConfig+0xb4>
 800b7d2:	4b76      	ldr	r3, [pc, #472]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a75      	ldr	r2, [pc, #468]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	4b73      	ldr	r3, [pc, #460]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a72      	ldr	r2, [pc, #456]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	e00b      	b.n	800b804 <HAL_RCC_OscConfig+0xcc>
 800b7ec:	4b6f      	ldr	r3, [pc, #444]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a6e      	ldr	r2, [pc, #440]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7f6:	6013      	str	r3, [r2, #0]
 800b7f8:	4b6c      	ldr	r3, [pc, #432]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a6b      	ldr	r2, [pc, #428]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b7fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d013      	beq.n	800b834 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b80c:	f7f8 ff6a 	bl	80046e4 <HAL_GetTick>
 800b810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b812:	e008      	b.n	800b826 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b814:	f7f8 ff66 	bl	80046e4 <HAL_GetTick>
 800b818:	4602      	mov	r2, r0
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	2b64      	cmp	r3, #100	; 0x64
 800b820:	d901      	bls.n	800b826 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e21f      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b826:	4b61      	ldr	r3, [pc, #388]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0f0      	beq.n	800b814 <HAL_RCC_OscConfig+0xdc>
 800b832:	e014      	b.n	800b85e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b834:	f7f8 ff56 	bl	80046e4 <HAL_GetTick>
 800b838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b83a:	e008      	b.n	800b84e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b83c:	f7f8 ff52 	bl	80046e4 <HAL_GetTick>
 800b840:	4602      	mov	r2, r0
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	2b64      	cmp	r3, #100	; 0x64
 800b848:	d901      	bls.n	800b84e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	e20b      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b84e:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1f0      	bne.n	800b83c <HAL_RCC_OscConfig+0x104>
 800b85a:	e000      	b.n	800b85e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b85c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 0302 	and.w	r3, r3, #2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d06f      	beq.n	800b94a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b86a:	4b50      	ldr	r3, [pc, #320]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f003 030c 	and.w	r3, r3, #12
 800b872:	2b00      	cmp	r3, #0
 800b874:	d017      	beq.n	800b8a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b876:	4b4d      	ldr	r3, [pc, #308]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b87e:	2b08      	cmp	r3, #8
 800b880:	d105      	bne.n	800b88e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b882:	4b4a      	ldr	r3, [pc, #296]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00b      	beq.n	800b8a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b88e:	4b47      	ldr	r3, [pc, #284]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b896:	2b0c      	cmp	r3, #12
 800b898:	d11c      	bne.n	800b8d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b89a:	4b44      	ldr	r3, [pc, #272]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d116      	bne.n	800b8d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8a6:	4b41      	ldr	r3, [pc, #260]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d005      	beq.n	800b8be <HAL_RCC_OscConfig+0x186>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d001      	beq.n	800b8be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e1d3      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8be:	4b3b      	ldr	r3, [pc, #236]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	4937      	ldr	r1, [pc, #220]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8d2:	e03a      	b.n	800b94a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d020      	beq.n	800b91e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8dc:	4b34      	ldr	r3, [pc, #208]	; (800b9b0 <HAL_RCC_OscConfig+0x278>)
 800b8de:	2201      	movs	r2, #1
 800b8e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e2:	f7f8 feff 	bl	80046e4 <HAL_GetTick>
 800b8e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8e8:	e008      	b.n	800b8fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8ea:	f7f8 fefb 	bl	80046e4 <HAL_GetTick>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d901      	bls.n	800b8fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e1b4      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8fc:	4b2b      	ldr	r3, [pc, #172]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 0302 	and.w	r3, r3, #2
 800b904:	2b00      	cmp	r3, #0
 800b906:	d0f0      	beq.n	800b8ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b908:	4b28      	ldr	r3, [pc, #160]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	4925      	ldr	r1, [pc, #148]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	600b      	str	r3, [r1, #0]
 800b91c:	e015      	b.n	800b94a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b91e:	4b24      	ldr	r3, [pc, #144]	; (800b9b0 <HAL_RCC_OscConfig+0x278>)
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b924:	f7f8 fede 	bl	80046e4 <HAL_GetTick>
 800b928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b92a:	e008      	b.n	800b93e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b92c:	f7f8 feda 	bl	80046e4 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b02      	cmp	r3, #2
 800b938:	d901      	bls.n	800b93e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e193      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b93e:	4b1b      	ldr	r3, [pc, #108]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 0302 	and.w	r3, r3, #2
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f0      	bne.n	800b92c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0308 	and.w	r3, r3, #8
 800b952:	2b00      	cmp	r3, #0
 800b954:	d036      	beq.n	800b9c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d016      	beq.n	800b98c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b95e:	4b15      	ldr	r3, [pc, #84]	; (800b9b4 <HAL_RCC_OscConfig+0x27c>)
 800b960:	2201      	movs	r2, #1
 800b962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b964:	f7f8 febe 	bl	80046e4 <HAL_GetTick>
 800b968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b96a:	e008      	b.n	800b97e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b96c:	f7f8 feba 	bl	80046e4 <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	2b02      	cmp	r3, #2
 800b978:	d901      	bls.n	800b97e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e173      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b97e:	4b0b      	ldr	r3, [pc, #44]	; (800b9ac <HAL_RCC_OscConfig+0x274>)
 800b980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b982:	f003 0302 	and.w	r3, r3, #2
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0f0      	beq.n	800b96c <HAL_RCC_OscConfig+0x234>
 800b98a:	e01b      	b.n	800b9c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b98c:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <HAL_RCC_OscConfig+0x27c>)
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b992:	f7f8 fea7 	bl	80046e4 <HAL_GetTick>
 800b996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b998:	e00e      	b.n	800b9b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b99a:	f7f8 fea3 	bl	80046e4 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d907      	bls.n	800b9b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e15c      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
 800b9ac:	40023800 	.word	0x40023800
 800b9b0:	42470000 	.word	0x42470000
 800b9b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9b8:	4b8a      	ldr	r3, [pc, #552]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800b9ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9bc:	f003 0302 	and.w	r3, r3, #2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1ea      	bne.n	800b99a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8097 	beq.w	800bb00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9d6:	4b83      	ldr	r3, [pc, #524]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800b9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10f      	bne.n	800ba02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60bb      	str	r3, [r7, #8]
 800b9e6:	4b7f      	ldr	r3, [pc, #508]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800b9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ea:	4a7e      	ldr	r2, [pc, #504]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800b9ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9f0:	6413      	str	r3, [r2, #64]	; 0x40
 800b9f2:	4b7c      	ldr	r3, [pc, #496]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9fa:	60bb      	str	r3, [r7, #8]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba02:	4b79      	ldr	r3, [pc, #484]	; (800bbe8 <HAL_RCC_OscConfig+0x4b0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d118      	bne.n	800ba40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba0e:	4b76      	ldr	r3, [pc, #472]	; (800bbe8 <HAL_RCC_OscConfig+0x4b0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a75      	ldr	r2, [pc, #468]	; (800bbe8 <HAL_RCC_OscConfig+0x4b0>)
 800ba14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba1a:	f7f8 fe63 	bl	80046e4 <HAL_GetTick>
 800ba1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba20:	e008      	b.n	800ba34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba22:	f7f8 fe5f 	bl	80046e4 <HAL_GetTick>
 800ba26:	4602      	mov	r2, r0
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d901      	bls.n	800ba34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e118      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba34:	4b6c      	ldr	r3, [pc, #432]	; (800bbe8 <HAL_RCC_OscConfig+0x4b0>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0f0      	beq.n	800ba22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d106      	bne.n	800ba56 <HAL_RCC_OscConfig+0x31e>
 800ba48:	4b66      	ldr	r3, [pc, #408]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4c:	4a65      	ldr	r2, [pc, #404]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba4e:	f043 0301 	orr.w	r3, r3, #1
 800ba52:	6713      	str	r3, [r2, #112]	; 0x70
 800ba54:	e01c      	b.n	800ba90 <HAL_RCC_OscConfig+0x358>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d10c      	bne.n	800ba78 <HAL_RCC_OscConfig+0x340>
 800ba5e:	4b61      	ldr	r3, [pc, #388]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba62:	4a60      	ldr	r2, [pc, #384]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba64:	f043 0304 	orr.w	r3, r3, #4
 800ba68:	6713      	str	r3, [r2, #112]	; 0x70
 800ba6a:	4b5e      	ldr	r3, [pc, #376]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6e:	4a5d      	ldr	r2, [pc, #372]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba70:	f043 0301 	orr.w	r3, r3, #1
 800ba74:	6713      	str	r3, [r2, #112]	; 0x70
 800ba76:	e00b      	b.n	800ba90 <HAL_RCC_OscConfig+0x358>
 800ba78:	4b5a      	ldr	r3, [pc, #360]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7c:	4a59      	ldr	r2, [pc, #356]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba7e:	f023 0301 	bic.w	r3, r3, #1
 800ba82:	6713      	str	r3, [r2, #112]	; 0x70
 800ba84:	4b57      	ldr	r3, [pc, #348]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba88:	4a56      	ldr	r2, [pc, #344]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800ba8a:	f023 0304 	bic.w	r3, r3, #4
 800ba8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d015      	beq.n	800bac4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba98:	f7f8 fe24 	bl	80046e4 <HAL_GetTick>
 800ba9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba9e:	e00a      	b.n	800bab6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800baa0:	f7f8 fe20 	bl	80046e4 <HAL_GetTick>
 800baa4:	4602      	mov	r2, r0
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800baae:	4293      	cmp	r3, r2
 800bab0:	d901      	bls.n	800bab6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bab2:	2303      	movs	r3, #3
 800bab4:	e0d7      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bab6:	4b4b      	ldr	r3, [pc, #300]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0ee      	beq.n	800baa0 <HAL_RCC_OscConfig+0x368>
 800bac2:	e014      	b.n	800baee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bac4:	f7f8 fe0e 	bl	80046e4 <HAL_GetTick>
 800bac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800baca:	e00a      	b.n	800bae2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bacc:	f7f8 fe0a 	bl	80046e4 <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bada:	4293      	cmp	r3, r2
 800badc:	d901      	bls.n	800bae2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e0c1      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bae2:	4b40      	ldr	r3, [pc, #256]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1ee      	bne.n	800bacc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800baee:	7dfb      	ldrb	r3, [r7, #23]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d105      	bne.n	800bb00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800baf4:	4b3b      	ldr	r3, [pc, #236]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf8:	4a3a      	ldr	r2, [pc, #232]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bafa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bafe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 80ad 	beq.w	800bc64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bb0a:	4b36      	ldr	r3, [pc, #216]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f003 030c 	and.w	r3, r3, #12
 800bb12:	2b08      	cmp	r3, #8
 800bb14:	d060      	beq.n	800bbd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d145      	bne.n	800bbaa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb1e:	4b33      	ldr	r3, [pc, #204]	; (800bbec <HAL_RCC_OscConfig+0x4b4>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb24:	f7f8 fdde 	bl	80046e4 <HAL_GetTick>
 800bb28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb2a:	e008      	b.n	800bb3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb2c:	f7f8 fdda 	bl	80046e4 <HAL_GetTick>
 800bb30:	4602      	mov	r2, r0
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d901      	bls.n	800bb3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e093      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb3e:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1f0      	bne.n	800bb2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69da      	ldr	r2, [r3, #28]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	019b      	lsls	r3, r3, #6
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb60:	085b      	lsrs	r3, r3, #1
 800bb62:	3b01      	subs	r3, #1
 800bb64:	041b      	lsls	r3, r3, #16
 800bb66:	431a      	orrs	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6c:	061b      	lsls	r3, r3, #24
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb74:	071b      	lsls	r3, r3, #28
 800bb76:	491b      	ldr	r1, [pc, #108]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb7c:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <HAL_RCC_OscConfig+0x4b4>)
 800bb7e:	2201      	movs	r2, #1
 800bb80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb82:	f7f8 fdaf 	bl	80046e4 <HAL_GetTick>
 800bb86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb88:	e008      	b.n	800bb9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb8a:	f7f8 fdab 	bl	80046e4 <HAL_GetTick>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d901      	bls.n	800bb9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e064      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb9c:	4b11      	ldr	r3, [pc, #68]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0f0      	beq.n	800bb8a <HAL_RCC_OscConfig+0x452>
 800bba8:	e05c      	b.n	800bc64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbaa:	4b10      	ldr	r3, [pc, #64]	; (800bbec <HAL_RCC_OscConfig+0x4b4>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbb0:	f7f8 fd98 	bl	80046e4 <HAL_GetTick>
 800bbb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbb6:	e008      	b.n	800bbca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbb8:	f7f8 fd94 	bl	80046e4 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d901      	bls.n	800bbca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e04d      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbca:	4b06      	ldr	r3, [pc, #24]	; (800bbe4 <HAL_RCC_OscConfig+0x4ac>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1f0      	bne.n	800bbb8 <HAL_RCC_OscConfig+0x480>
 800bbd6:	e045      	b.n	800bc64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d107      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e040      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
 800bbe4:	40023800 	.word	0x40023800
 800bbe8:	40007000 	.word	0x40007000
 800bbec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bbf0:	4b1f      	ldr	r3, [pc, #124]	; (800bc70 <HAL_RCC_OscConfig+0x538>)
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d030      	beq.n	800bc60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d129      	bne.n	800bc60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d122      	bne.n	800bc60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bc20:	4013      	ands	r3, r2
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d119      	bne.n	800bc60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc36:	085b      	lsrs	r3, r3, #1
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d10f      	bne.n	800bc60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d107      	bne.n	800bc60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d001      	beq.n	800bc64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e000      	b.n	800bc66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	40023800 	.word	0x40023800

0800bc74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e041      	b.n	800bd0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7f8 fa12 	bl	80040c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f000 fc9e 	bl	800c5f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d001      	beq.n	800bd2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e04e      	b.n	800bdca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0201 	orr.w	r2, r2, #1
 800bd42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a23      	ldr	r2, [pc, #140]	; (800bdd8 <HAL_TIM_Base_Start_IT+0xc4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d022      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd56:	d01d      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a1f      	ldr	r2, [pc, #124]	; (800bddc <HAL_TIM_Base_Start_IT+0xc8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d018      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a1e      	ldr	r2, [pc, #120]	; (800bde0 <HAL_TIM_Base_Start_IT+0xcc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d013      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a1c      	ldr	r2, [pc, #112]	; (800bde4 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00e      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a1b      	ldr	r2, [pc, #108]	; (800bde8 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d009      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a19      	ldr	r2, [pc, #100]	; (800bdec <HAL_TIM_Base_Start_IT+0xd8>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d004      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a18      	ldr	r2, [pc, #96]	; (800bdf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d111      	bne.n	800bdb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f003 0307 	and.w	r3, r3, #7
 800bd9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b06      	cmp	r3, #6
 800bda4:	d010      	beq.n	800bdc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f042 0201 	orr.w	r2, r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdb6:	e007      	b.n	800bdc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	40010000 	.word	0x40010000
 800bddc:	40000400 	.word	0x40000400
 800bde0:	40000800 	.word	0x40000800
 800bde4:	40000c00 	.word	0x40000c00
 800bde8:	40010400 	.word	0x40010400
 800bdec:	40014000 	.word	0x40014000
 800bdf0:	40001800 	.word	0x40001800

0800bdf4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0201 	bic.w	r2, r2, #1
 800be0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6a1a      	ldr	r2, [r3, #32]
 800be12:	f241 1311 	movw	r3, #4369	; 0x1111
 800be16:	4013      	ands	r3, r2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10f      	bne.n	800be3c <HAL_TIM_Base_Stop_IT+0x48>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6a1a      	ldr	r2, [r3, #32]
 800be22:	f240 4344 	movw	r3, #1092	; 0x444
 800be26:	4013      	ands	r3, r2
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d107      	bne.n	800be3c <HAL_TIM_Base_Stop_IT+0x48>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 0201 	bic.w	r2, r2, #1
 800be3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e041      	b.n	800bee8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d106      	bne.n	800be7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7f8 f9b1 	bl	80041e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2202      	movs	r2, #2
 800be82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f000 fbaf 	bl	800c5f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d109      	bne.n	800bf14 <HAL_TIM_PWM_Start+0x24>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	bf14      	ite	ne
 800bf0c:	2301      	movne	r3, #1
 800bf0e:	2300      	moveq	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	e022      	b.n	800bf5a <HAL_TIM_PWM_Start+0x6a>
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b04      	cmp	r3, #4
 800bf18:	d109      	bne.n	800bf2e <HAL_TIM_PWM_Start+0x3e>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	bf14      	ite	ne
 800bf26:	2301      	movne	r3, #1
 800bf28:	2300      	moveq	r3, #0
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	e015      	b.n	800bf5a <HAL_TIM_PWM_Start+0x6a>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b08      	cmp	r3, #8
 800bf32:	d109      	bne.n	800bf48 <HAL_TIM_PWM_Start+0x58>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	bf14      	ite	ne
 800bf40:	2301      	movne	r3, #1
 800bf42:	2300      	moveq	r3, #0
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	e008      	b.n	800bf5a <HAL_TIM_PWM_Start+0x6a>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	bf14      	ite	ne
 800bf54:	2301      	movne	r3, #1
 800bf56:	2300      	moveq	r3, #0
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e07c      	b.n	800c05c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d104      	bne.n	800bf72 <HAL_TIM_PWM_Start+0x82>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf70:	e013      	b.n	800bf9a <HAL_TIM_PWM_Start+0xaa>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d104      	bne.n	800bf82 <HAL_TIM_PWM_Start+0x92>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf80:	e00b      	b.n	800bf9a <HAL_TIM_PWM_Start+0xaa>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b08      	cmp	r3, #8
 800bf86:	d104      	bne.n	800bf92 <HAL_TIM_PWM_Start+0xa2>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf90:	e003      	b.n	800bf9a <HAL_TIM_PWM_Start+0xaa>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2202      	movs	r2, #2
 800bf96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fe10 	bl	800cbc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a2d      	ldr	r2, [pc, #180]	; (800c064 <HAL_TIM_PWM_Start+0x174>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d004      	beq.n	800bfbc <HAL_TIM_PWM_Start+0xcc>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a2c      	ldr	r2, [pc, #176]	; (800c068 <HAL_TIM_PWM_Start+0x178>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d101      	bne.n	800bfc0 <HAL_TIM_PWM_Start+0xd0>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e000      	b.n	800bfc2 <HAL_TIM_PWM_Start+0xd2>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d007      	beq.n	800bfd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a22      	ldr	r2, [pc, #136]	; (800c064 <HAL_TIM_PWM_Start+0x174>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d022      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfe8:	d01d      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a1f      	ldr	r2, [pc, #124]	; (800c06c <HAL_TIM_PWM_Start+0x17c>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d018      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a1d      	ldr	r2, [pc, #116]	; (800c070 <HAL_TIM_PWM_Start+0x180>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d013      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a1c      	ldr	r2, [pc, #112]	; (800c074 <HAL_TIM_PWM_Start+0x184>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d00e      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a16      	ldr	r2, [pc, #88]	; (800c068 <HAL_TIM_PWM_Start+0x178>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d009      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a18      	ldr	r2, [pc, #96]	; (800c078 <HAL_TIM_PWM_Start+0x188>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d004      	beq.n	800c026 <HAL_TIM_PWM_Start+0x136>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a16      	ldr	r2, [pc, #88]	; (800c07c <HAL_TIM_PWM_Start+0x18c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d111      	bne.n	800c04a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f003 0307 	and.w	r3, r3, #7
 800c030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b06      	cmp	r3, #6
 800c036:	d010      	beq.n	800c05a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f042 0201 	orr.w	r2, r2, #1
 800c046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c048:	e007      	b.n	800c05a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f042 0201 	orr.w	r2, r2, #1
 800c058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	40010000 	.word	0x40010000
 800c068:	40010400 	.word	0x40010400
 800c06c:	40000400 	.word	0x40000400
 800c070:	40000800 	.word	0x40000800
 800c074:	40000c00 	.word	0x40000c00
 800c078:	40014000 	.word	0x40014000
 800c07c:	40001800 	.word	0x40001800

0800c080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	f003 0302 	and.w	r3, r3, #2
 800c092:	2b02      	cmp	r3, #2
 800c094:	d122      	bne.n	800c0dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	f003 0302 	and.w	r3, r3, #2
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d11b      	bne.n	800c0dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f06f 0202 	mvn.w	r2, #2
 800c0ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fa77 	bl	800c5b6 <HAL_TIM_IC_CaptureCallback>
 800c0c8:	e005      	b.n	800c0d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fa69 	bl	800c5a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fa7a 	bl	800c5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	f003 0304 	and.w	r3, r3, #4
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d122      	bne.n	800c130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	f003 0304 	and.w	r3, r3, #4
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	d11b      	bne.n	800c130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f06f 0204 	mvn.w	r2, #4
 800c100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2202      	movs	r2, #2
 800c106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fa4d 	bl	800c5b6 <HAL_TIM_IC_CaptureCallback>
 800c11c:	e005      	b.n	800c12a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fa3f 	bl	800c5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fa50 	bl	800c5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	f003 0308 	and.w	r3, r3, #8
 800c13a:	2b08      	cmp	r3, #8
 800c13c:	d122      	bne.n	800c184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	f003 0308 	and.w	r3, r3, #8
 800c148:	2b08      	cmp	r3, #8
 800c14a:	d11b      	bne.n	800c184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f06f 0208 	mvn.w	r2, #8
 800c154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2204      	movs	r2, #4
 800c15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa23 	bl	800c5b6 <HAL_TIM_IC_CaptureCallback>
 800c170:	e005      	b.n	800c17e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa15 	bl	800c5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa26 	bl	800c5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f003 0310 	and.w	r3, r3, #16
 800c18e:	2b10      	cmp	r3, #16
 800c190:	d122      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f003 0310 	and.w	r3, r3, #16
 800c19c:	2b10      	cmp	r3, #16
 800c19e:	d11b      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f06f 0210 	mvn.w	r2, #16
 800c1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f9f9 	bl	800c5b6 <HAL_TIM_IC_CaptureCallback>
 800c1c4:	e005      	b.n	800c1d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f9eb 	bl	800c5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f9fc 	bl	800c5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d10e      	bne.n	800c204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d107      	bne.n	800c204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f06f 0201 	mvn.w	r2, #1
 800c1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7f6 fd3a 	bl	8002c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c20e:	2b80      	cmp	r3, #128	; 0x80
 800c210:	d10e      	bne.n	800c230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c21c:	2b80      	cmp	r3, #128	; 0x80
 800c21e:	d107      	bne.n	800c230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fdca 	bl	800cdc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23a:	2b40      	cmp	r3, #64	; 0x40
 800c23c:	d10e      	bne.n	800c25c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	d107      	bne.n	800c25c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f9c1 	bl	800c5de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b20      	cmp	r3, #32
 800c268:	d10e      	bne.n	800c288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	f003 0320 	and.w	r3, r3, #32
 800c274:	2b20      	cmp	r3, #32
 800c276:	d107      	bne.n	800c288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f06f 0220 	mvn.w	r2, #32
 800c280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fd94 	bl	800cdb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d101      	bne.n	800c2ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	e0ae      	b.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b0c      	cmp	r3, #12
 800c2ba:	f200 809f 	bhi.w	800c3fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c2f9 	.word	0x0800c2f9
 800c2c8:	0800c3fd 	.word	0x0800c3fd
 800c2cc:	0800c3fd 	.word	0x0800c3fd
 800c2d0:	0800c3fd 	.word	0x0800c3fd
 800c2d4:	0800c339 	.word	0x0800c339
 800c2d8:	0800c3fd 	.word	0x0800c3fd
 800c2dc:	0800c3fd 	.word	0x0800c3fd
 800c2e0:	0800c3fd 	.word	0x0800c3fd
 800c2e4:	0800c37b 	.word	0x0800c37b
 800c2e8:	0800c3fd 	.word	0x0800c3fd
 800c2ec:	0800c3fd 	.word	0x0800c3fd
 800c2f0:	0800c3fd 	.word	0x0800c3fd
 800c2f4:	0800c3bb 	.word	0x0800c3bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68b9      	ldr	r1, [r7, #8]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fa18 	bl	800c734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	699a      	ldr	r2, [r3, #24]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f042 0208 	orr.w	r2, r2, #8
 800c312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	699a      	ldr	r2, [r3, #24]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f022 0204 	bic.w	r2, r2, #4
 800c322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6999      	ldr	r1, [r3, #24]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	691a      	ldr	r2, [r3, #16]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	430a      	orrs	r2, r1
 800c334:	619a      	str	r2, [r3, #24]
      break;
 800c336:	e064      	b.n	800c402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 fa68 	bl	800c814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699a      	ldr	r2, [r3, #24]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6999      	ldr	r1, [r3, #24]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	021a      	lsls	r2, r3, #8
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	430a      	orrs	r2, r1
 800c376:	619a      	str	r2, [r3, #24]
      break;
 800c378:	e043      	b.n	800c402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68b9      	ldr	r1, [r7, #8]
 800c380:	4618      	mov	r0, r3
 800c382:	f000 fabd 	bl	800c900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	69da      	ldr	r2, [r3, #28]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f042 0208 	orr.w	r2, r2, #8
 800c394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	69da      	ldr	r2, [r3, #28]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 0204 	bic.w	r2, r2, #4
 800c3a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69d9      	ldr	r1, [r3, #28]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	691a      	ldr	r2, [r3, #16]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	61da      	str	r2, [r3, #28]
      break;
 800c3b8:	e023      	b.n	800c402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68b9      	ldr	r1, [r7, #8]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fb11 	bl	800c9e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69da      	ldr	r2, [r3, #28]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	69da      	ldr	r2, [r3, #28]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	69d9      	ldr	r1, [r3, #28]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	021a      	lsls	r2, r3, #8
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	61da      	str	r2, [r3, #28]
      break;
 800c3fa:	e002      	b.n	800c402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3718      	adds	r7, #24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d101      	bne.n	800c430 <HAL_TIM_ConfigClockSource+0x1c>
 800c42c:	2302      	movs	r3, #2
 800c42e:	e0b4      	b.n	800c59a <HAL_TIM_ConfigClockSource+0x186>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c468:	d03e      	beq.n	800c4e8 <HAL_TIM_ConfigClockSource+0xd4>
 800c46a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c46e:	f200 8087 	bhi.w	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c476:	f000 8086 	beq.w	800c586 <HAL_TIM_ConfigClockSource+0x172>
 800c47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47e:	d87f      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c480:	2b70      	cmp	r3, #112	; 0x70
 800c482:	d01a      	beq.n	800c4ba <HAL_TIM_ConfigClockSource+0xa6>
 800c484:	2b70      	cmp	r3, #112	; 0x70
 800c486:	d87b      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c488:	2b60      	cmp	r3, #96	; 0x60
 800c48a:	d050      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x11a>
 800c48c:	2b60      	cmp	r3, #96	; 0x60
 800c48e:	d877      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c490:	2b50      	cmp	r3, #80	; 0x50
 800c492:	d03c      	beq.n	800c50e <HAL_TIM_ConfigClockSource+0xfa>
 800c494:	2b50      	cmp	r3, #80	; 0x50
 800c496:	d873      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c498:	2b40      	cmp	r3, #64	; 0x40
 800c49a:	d058      	beq.n	800c54e <HAL_TIM_ConfigClockSource+0x13a>
 800c49c:	2b40      	cmp	r3, #64	; 0x40
 800c49e:	d86f      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a0:	2b30      	cmp	r3, #48	; 0x30
 800c4a2:	d064      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4a4:	2b30      	cmp	r3, #48	; 0x30
 800c4a6:	d86b      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a8:	2b20      	cmp	r3, #32
 800c4aa:	d060      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4ac:	2b20      	cmp	r3, #32
 800c4ae:	d867      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d05c      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4b4:	2b10      	cmp	r3, #16
 800c4b6:	d05a      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4b8:	e062      	b.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	6899      	ldr	r1, [r3, #8]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	f000 fb5d 	bl	800cb88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c4dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	609a      	str	r2, [r3, #8]
      break;
 800c4e6:	e04f      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	6899      	ldr	r1, [r3, #8]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	f000 fb46 	bl	800cb88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689a      	ldr	r2, [r3, #8]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c50a:	609a      	str	r2, [r3, #8]
      break;
 800c50c:	e03c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6859      	ldr	r1, [r3, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	461a      	mov	r2, r3
 800c51c:	f000 faba 	bl	800ca94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2150      	movs	r1, #80	; 0x50
 800c526:	4618      	mov	r0, r3
 800c528:	f000 fb13 	bl	800cb52 <TIM_ITRx_SetConfig>
      break;
 800c52c:	e02c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	6859      	ldr	r1, [r3, #4]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	461a      	mov	r2, r3
 800c53c:	f000 fad9 	bl	800caf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2160      	movs	r1, #96	; 0x60
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fb03 	bl	800cb52 <TIM_ITRx_SetConfig>
      break;
 800c54c:	e01c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6818      	ldr	r0, [r3, #0]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	6859      	ldr	r1, [r3, #4]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f000 fa9a 	bl	800ca94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2140      	movs	r1, #64	; 0x40
 800c566:	4618      	mov	r0, r3
 800c568:	f000 faf3 	bl	800cb52 <TIM_ITRx_SetConfig>
      break;
 800c56c:	e00c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4619      	mov	r1, r3
 800c578:	4610      	mov	r0, r2
 800c57a:	f000 faea 	bl	800cb52 <TIM_ITRx_SetConfig>
      break;
 800c57e:	e003      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	73fb      	strb	r3, [r7, #15]
      break;
 800c584:	e000      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5aa:	bf00      	nop
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5be:	bf00      	nop
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5d2:	bf00      	nop
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b083      	sub	sp, #12
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
	...

0800c5f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a40      	ldr	r2, [pc, #256]	; (800c708 <TIM_Base_SetConfig+0x114>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d013      	beq.n	800c634 <TIM_Base_SetConfig+0x40>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c612:	d00f      	beq.n	800c634 <TIM_Base_SetConfig+0x40>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a3d      	ldr	r2, [pc, #244]	; (800c70c <TIM_Base_SetConfig+0x118>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d00b      	beq.n	800c634 <TIM_Base_SetConfig+0x40>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a3c      	ldr	r2, [pc, #240]	; (800c710 <TIM_Base_SetConfig+0x11c>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d007      	beq.n	800c634 <TIM_Base_SetConfig+0x40>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a3b      	ldr	r2, [pc, #236]	; (800c714 <TIM_Base_SetConfig+0x120>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d003      	beq.n	800c634 <TIM_Base_SetConfig+0x40>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a3a      	ldr	r2, [pc, #232]	; (800c718 <TIM_Base_SetConfig+0x124>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d108      	bne.n	800c646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c63a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4313      	orrs	r3, r2
 800c644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a2f      	ldr	r2, [pc, #188]	; (800c708 <TIM_Base_SetConfig+0x114>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d02b      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c654:	d027      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a2c      	ldr	r2, [pc, #176]	; (800c70c <TIM_Base_SetConfig+0x118>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d023      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a2b      	ldr	r2, [pc, #172]	; (800c710 <TIM_Base_SetConfig+0x11c>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d01f      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a2a      	ldr	r2, [pc, #168]	; (800c714 <TIM_Base_SetConfig+0x120>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d01b      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a29      	ldr	r2, [pc, #164]	; (800c718 <TIM_Base_SetConfig+0x124>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d017      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a28      	ldr	r2, [pc, #160]	; (800c71c <TIM_Base_SetConfig+0x128>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d013      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a27      	ldr	r2, [pc, #156]	; (800c720 <TIM_Base_SetConfig+0x12c>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d00f      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a26      	ldr	r2, [pc, #152]	; (800c724 <TIM_Base_SetConfig+0x130>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d00b      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a25      	ldr	r2, [pc, #148]	; (800c728 <TIM_Base_SetConfig+0x134>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d007      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a24      	ldr	r2, [pc, #144]	; (800c72c <TIM_Base_SetConfig+0x138>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d003      	beq.n	800c6a6 <TIM_Base_SetConfig+0xb2>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a23      	ldr	r2, [pc, #140]	; (800c730 <TIM_Base_SetConfig+0x13c>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d108      	bne.n	800c6b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	689a      	ldr	r2, [r3, #8]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a0a      	ldr	r2, [pc, #40]	; (800c708 <TIM_Base_SetConfig+0x114>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d003      	beq.n	800c6ec <TIM_Base_SetConfig+0xf8>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a0c      	ldr	r2, [pc, #48]	; (800c718 <TIM_Base_SetConfig+0x124>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d103      	bne.n	800c6f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	691a      	ldr	r2, [r3, #16]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	615a      	str	r2, [r3, #20]
}
 800c6fa:	bf00      	nop
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	40010000 	.word	0x40010000
 800c70c:	40000400 	.word	0x40000400
 800c710:	40000800 	.word	0x40000800
 800c714:	40000c00 	.word	0x40000c00
 800c718:	40010400 	.word	0x40010400
 800c71c:	40014000 	.word	0x40014000
 800c720:	40014400 	.word	0x40014400
 800c724:	40014800 	.word	0x40014800
 800c728:	40001800 	.word	0x40001800
 800c72c:	40001c00 	.word	0x40001c00
 800c730:	40002000 	.word	0x40002000

0800c734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	f023 0201 	bic.w	r2, r3, #1
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a1b      	ldr	r3, [r3, #32]
 800c74e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0303 	bic.w	r3, r3, #3
 800c76a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4313      	orrs	r3, r2
 800c774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f023 0302 	bic.w	r3, r3, #2
 800c77c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	4313      	orrs	r3, r2
 800c786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a20      	ldr	r2, [pc, #128]	; (800c80c <TIM_OC1_SetConfig+0xd8>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d003      	beq.n	800c798 <TIM_OC1_SetConfig+0x64>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a1f      	ldr	r2, [pc, #124]	; (800c810 <TIM_OC1_SetConfig+0xdc>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d10c      	bne.n	800c7b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f023 0308 	bic.w	r3, r3, #8
 800c79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	f023 0304 	bic.w	r3, r3, #4
 800c7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a15      	ldr	r2, [pc, #84]	; (800c80c <TIM_OC1_SetConfig+0xd8>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d003      	beq.n	800c7c2 <TIM_OC1_SetConfig+0x8e>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a14      	ldr	r2, [pc, #80]	; (800c810 <TIM_OC1_SetConfig+0xdc>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d111      	bne.n	800c7e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	621a      	str	r2, [r3, #32]
}
 800c800:	bf00      	nop
 800c802:	371c      	adds	r7, #28
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	40010000 	.word	0x40010000
 800c810:	40010400 	.word	0x40010400

0800c814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	f023 0210 	bic.w	r2, r3, #16
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	021b      	lsls	r3, r3, #8
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	4313      	orrs	r3, r2
 800c856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f023 0320 	bic.w	r3, r3, #32
 800c85e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	011b      	lsls	r3, r3, #4
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	4313      	orrs	r3, r2
 800c86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a22      	ldr	r2, [pc, #136]	; (800c8f8 <TIM_OC2_SetConfig+0xe4>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d003      	beq.n	800c87c <TIM_OC2_SetConfig+0x68>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a21      	ldr	r2, [pc, #132]	; (800c8fc <TIM_OC2_SetConfig+0xe8>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d10d      	bne.n	800c898 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	011b      	lsls	r3, r3, #4
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a17      	ldr	r2, [pc, #92]	; (800c8f8 <TIM_OC2_SetConfig+0xe4>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d003      	beq.n	800c8a8 <TIM_OC2_SetConfig+0x94>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a16      	ldr	r2, [pc, #88]	; (800c8fc <TIM_OC2_SetConfig+0xe8>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d113      	bne.n	800c8d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	693a      	ldr	r2, [r7, #16]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	693a      	ldr	r2, [r7, #16]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	621a      	str	r2, [r3, #32]
}
 800c8ea:	bf00      	nop
 800c8ec:	371c      	adds	r7, #28
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	40010000 	.word	0x40010000
 800c8fc:	40010400 	.word	0x40010400

0800c900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a1b      	ldr	r3, [r3, #32]
 800c91a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f023 0303 	bic.w	r3, r3, #3
 800c936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	4313      	orrs	r3, r2
 800c940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	021b      	lsls	r3, r3, #8
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	4313      	orrs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a21      	ldr	r2, [pc, #132]	; (800c9e0 <TIM_OC3_SetConfig+0xe0>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d003      	beq.n	800c966 <TIM_OC3_SetConfig+0x66>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a20      	ldr	r2, [pc, #128]	; (800c9e4 <TIM_OC3_SetConfig+0xe4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d10d      	bne.n	800c982 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c96c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	021b      	lsls	r3, r3, #8
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	4313      	orrs	r3, r2
 800c978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a16      	ldr	r2, [pc, #88]	; (800c9e0 <TIM_OC3_SetConfig+0xe0>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d003      	beq.n	800c992 <TIM_OC3_SetConfig+0x92>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a15      	ldr	r2, [pc, #84]	; (800c9e4 <TIM_OC3_SetConfig+0xe4>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d113      	bne.n	800c9ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	011b      	lsls	r3, r3, #4
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	621a      	str	r2, [r3, #32]
}
 800c9d4:	bf00      	nop
 800c9d6:	371c      	adds	r7, #28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	40010000 	.word	0x40010000
 800c9e4:	40010400 	.word	0x40010400

0800c9e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a1b      	ldr	r3, [r3, #32]
 800c9f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	021b      	lsls	r3, r3, #8
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	031b      	lsls	r3, r3, #12
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a12      	ldr	r2, [pc, #72]	; (800ca8c <TIM_OC4_SetConfig+0xa4>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d003      	beq.n	800ca50 <TIM_OC4_SetConfig+0x68>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a11      	ldr	r2, [pc, #68]	; (800ca90 <TIM_OC4_SetConfig+0xa8>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d109      	bne.n	800ca64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	019b      	lsls	r3, r3, #6
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	621a      	str	r2, [r3, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	40010000 	.word	0x40010000
 800ca90:	40010400 	.word	0x40010400

0800ca94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6a1b      	ldr	r3, [r3, #32]
 800caa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6a1b      	ldr	r3, [r3, #32]
 800caaa:	f023 0201 	bic.w	r2, r3, #1
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cabe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	011b      	lsls	r3, r3, #4
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f023 030a 	bic.w	r3, r3, #10
 800cad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	621a      	str	r2, [r3, #32]
}
 800cae6:	bf00      	nop
 800cae8:	371c      	adds	r7, #28
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b087      	sub	sp, #28
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	f023 0210 	bic.w	r2, r3, #16
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6a1b      	ldr	r3, [r3, #32]
 800cb14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	031b      	lsls	r3, r3, #12
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	011b      	lsls	r3, r3, #4
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	697a      	ldr	r2, [r7, #20]
 800cb3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	621a      	str	r2, [r3, #32]
}
 800cb46:	bf00      	nop
 800cb48:	371c      	adds	r7, #28
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	f043 0307 	orr.w	r3, r3, #7
 800cb74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	609a      	str	r2, [r3, #8]
}
 800cb7c:	bf00      	nop
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	021a      	lsls	r2, r3, #8
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	431a      	orrs	r2, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	609a      	str	r2, [r3, #8]
}
 800cbbc:	bf00      	nop
 800cbbe:	371c      	adds	r7, #28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	f003 031f 	and.w	r3, r3, #31
 800cbda:	2201      	movs	r2, #1
 800cbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6a1a      	ldr	r2, [r3, #32]
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	43db      	mvns	r3, r3
 800cbea:	401a      	ands	r2, r3
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6a1a      	ldr	r2, [r3, #32]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	f003 031f 	and.w	r3, r3, #31
 800cbfa:	6879      	ldr	r1, [r7, #4]
 800cbfc:	fa01 f303 	lsl.w	r3, r1, r3
 800cc00:	431a      	orrs	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	621a      	str	r2, [r3, #32]
}
 800cc06:	bf00      	nop
 800cc08:	371c      	adds	r7, #28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
	...

0800cc14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d101      	bne.n	800cc2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e05a      	b.n	800cce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a21      	ldr	r2, [pc, #132]	; (800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d022      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc78:	d01d      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a1d      	ldr	r2, [pc, #116]	; (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d018      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a1b      	ldr	r2, [pc, #108]	; (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d013      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a1a      	ldr	r2, [pc, #104]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d00e      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a18      	ldr	r2, [pc, #96]	; (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d009      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a17      	ldr	r2, [pc, #92]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d004      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a15      	ldr	r2, [pc, #84]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d10c      	bne.n	800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	40010000 	.word	0x40010000
 800ccf4:	40000400 	.word	0x40000400
 800ccf8:	40000800 	.word	0x40000800
 800ccfc:	40000c00 	.word	0x40000c00
 800cd00:	40010400 	.word	0x40010400
 800cd04:	40014000 	.word	0x40014000
 800cd08:	40001800 	.word	0x40001800

0800cd0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d101      	bne.n	800cd28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd24:	2302      	movs	r3, #2
 800cd26:	e03d      	b.n	800cda4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	69db      	ldr	r3, [r3, #28]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdb8:	bf00      	nop
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdd8:	b084      	sub	sp, #16
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b084      	sub	sp, #16
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	f107 001c 	add.w	r0, r7, #28
 800cde6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d122      	bne.n	800ce36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ce04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ce18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d105      	bne.n	800ce2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f001 fb16 	bl	800e45c <USB_CoreReset>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]
 800ce34:	e01a      	b.n	800ce6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f001 fb0a 	bl	800e45c <USB_CoreReset>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ce4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	639a      	str	r2, [r3, #56]	; 0x38
 800ce5e:	e005      	b.n	800ce6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d10b      	bne.n	800ce8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f043 0206 	orr.w	r2, r3, #6
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	f043 0220 	orr.w	r2, r3, #32
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce96:	b004      	add	sp, #16
 800ce98:	4770      	bx	lr
	...

0800ce9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	4613      	mov	r3, r2
 800cea8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ceaa:	79fb      	ldrb	r3, [r7, #7]
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d165      	bne.n	800cf7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	4a41      	ldr	r2, [pc, #260]	; (800cfb8 <USB_SetTurnaroundTime+0x11c>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d906      	bls.n	800cec6 <USB_SetTurnaroundTime+0x2a>
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	4a40      	ldr	r2, [pc, #256]	; (800cfbc <USB_SetTurnaroundTime+0x120>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d202      	bcs.n	800cec6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cec0:	230f      	movs	r3, #15
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	e062      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	4a3c      	ldr	r2, [pc, #240]	; (800cfbc <USB_SetTurnaroundTime+0x120>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d306      	bcc.n	800cedc <USB_SetTurnaroundTime+0x40>
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	4a3b      	ldr	r2, [pc, #236]	; (800cfc0 <USB_SetTurnaroundTime+0x124>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d202      	bcs.n	800cedc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ced6:	230e      	movs	r3, #14
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	e057      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	4a38      	ldr	r2, [pc, #224]	; (800cfc0 <USB_SetTurnaroundTime+0x124>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d306      	bcc.n	800cef2 <USB_SetTurnaroundTime+0x56>
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	4a37      	ldr	r2, [pc, #220]	; (800cfc4 <USB_SetTurnaroundTime+0x128>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d202      	bcs.n	800cef2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ceec:	230d      	movs	r3, #13
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	e04c      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	4a33      	ldr	r2, [pc, #204]	; (800cfc4 <USB_SetTurnaroundTime+0x128>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d306      	bcc.n	800cf08 <USB_SetTurnaroundTime+0x6c>
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	4a32      	ldr	r2, [pc, #200]	; (800cfc8 <USB_SetTurnaroundTime+0x12c>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d802      	bhi.n	800cf08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cf02:	230c      	movs	r3, #12
 800cf04:	617b      	str	r3, [r7, #20]
 800cf06:	e041      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	4a2f      	ldr	r2, [pc, #188]	; (800cfc8 <USB_SetTurnaroundTime+0x12c>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d906      	bls.n	800cf1e <USB_SetTurnaroundTime+0x82>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	4a2e      	ldr	r2, [pc, #184]	; (800cfcc <USB_SetTurnaroundTime+0x130>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d802      	bhi.n	800cf1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf18:	230b      	movs	r3, #11
 800cf1a:	617b      	str	r3, [r7, #20]
 800cf1c:	e036      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	4a2a      	ldr	r2, [pc, #168]	; (800cfcc <USB_SetTurnaroundTime+0x130>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d906      	bls.n	800cf34 <USB_SetTurnaroundTime+0x98>
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	4a29      	ldr	r2, [pc, #164]	; (800cfd0 <USB_SetTurnaroundTime+0x134>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d802      	bhi.n	800cf34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf2e:	230a      	movs	r3, #10
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	e02b      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	4a26      	ldr	r2, [pc, #152]	; (800cfd0 <USB_SetTurnaroundTime+0x134>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d906      	bls.n	800cf4a <USB_SetTurnaroundTime+0xae>
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	4a25      	ldr	r2, [pc, #148]	; (800cfd4 <USB_SetTurnaroundTime+0x138>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d202      	bcs.n	800cf4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf44:	2309      	movs	r3, #9
 800cf46:	617b      	str	r3, [r7, #20]
 800cf48:	e020      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	4a21      	ldr	r2, [pc, #132]	; (800cfd4 <USB_SetTurnaroundTime+0x138>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d306      	bcc.n	800cf60 <USB_SetTurnaroundTime+0xc4>
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	4a20      	ldr	r2, [pc, #128]	; (800cfd8 <USB_SetTurnaroundTime+0x13c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d802      	bhi.n	800cf60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf5a:	2308      	movs	r3, #8
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	e015      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	4a1d      	ldr	r2, [pc, #116]	; (800cfd8 <USB_SetTurnaroundTime+0x13c>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d906      	bls.n	800cf76 <USB_SetTurnaroundTime+0xda>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	4a1c      	ldr	r2, [pc, #112]	; (800cfdc <USB_SetTurnaroundTime+0x140>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d202      	bcs.n	800cf76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf70:	2307      	movs	r3, #7
 800cf72:	617b      	str	r3, [r7, #20]
 800cf74:	e00a      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf76:	2306      	movs	r3, #6
 800cf78:	617b      	str	r3, [r7, #20]
 800cf7a:	e007      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d102      	bne.n	800cf88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cf82:	2309      	movs	r3, #9
 800cf84:	617b      	str	r3, [r7, #20]
 800cf86:	e001      	b.n	800cf8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf88:	2309      	movs	r3, #9
 800cf8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	029b      	lsls	r3, r3, #10
 800cfa0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	00d8acbf 	.word	0x00d8acbf
 800cfbc:	00e4e1c0 	.word	0x00e4e1c0
 800cfc0:	00f42400 	.word	0x00f42400
 800cfc4:	01067380 	.word	0x01067380
 800cfc8:	011a499f 	.word	0x011a499f
 800cfcc:	01312cff 	.word	0x01312cff
 800cfd0:	014ca43f 	.word	0x014ca43f
 800cfd4:	016e3600 	.word	0x016e3600
 800cfd8:	01a6ab1f 	.word	0x01a6ab1f
 800cfdc:	01e84800 	.word	0x01e84800

0800cfe0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	f043 0201 	orr.w	r2, r3, #1
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	370c      	adds	r7, #12
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d002:	b480      	push	{r7}
 800d004:	b083      	sub	sp, #12
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	f023 0201 	bic.w	r2, r3, #1
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d040:	78fb      	ldrb	r3, [r7, #3]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d115      	bne.n	800d072 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d052:	2001      	movs	r0, #1
 800d054:	f7f7 fb52 	bl	80046fc <HAL_Delay>
      ms++;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3301      	adds	r3, #1
 800d05c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f001 f96c 	bl	800e33c <USB_GetMode>
 800d064:	4603      	mov	r3, r0
 800d066:	2b01      	cmp	r3, #1
 800d068:	d01e      	beq.n	800d0a8 <USB_SetCurrentMode+0x84>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2b31      	cmp	r3, #49	; 0x31
 800d06e:	d9f0      	bls.n	800d052 <USB_SetCurrentMode+0x2e>
 800d070:	e01a      	b.n	800d0a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d115      	bne.n	800d0a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d084:	2001      	movs	r0, #1
 800d086:	f7f7 fb39 	bl	80046fc <HAL_Delay>
      ms++;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	3301      	adds	r3, #1
 800d08e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 f953 	bl	800e33c <USB_GetMode>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d005      	beq.n	800d0a8 <USB_SetCurrentMode+0x84>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b31      	cmp	r3, #49	; 0x31
 800d0a0:	d9f0      	bls.n	800d084 <USB_SetCurrentMode+0x60>
 800d0a2:	e001      	b.n	800d0a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e005      	b.n	800d0b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2b32      	cmp	r3, #50	; 0x32
 800d0ac:	d101      	bne.n	800d0b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e000      	b.n	800d0b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0bc:	b084      	sub	sp, #16
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b086      	sub	sp, #24
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d0ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	613b      	str	r3, [r7, #16]
 800d0da:	e009      	b.n	800d0f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	3340      	adds	r3, #64	; 0x40
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	613b      	str	r3, [r7, #16]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	2b0e      	cmp	r3, #14
 800d0f4:	d9f2      	bls.n	800d0dc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d11c      	bne.n	800d136 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d10a:	f043 0302 	orr.w	r3, r3, #2
 800d10e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d114:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e005      	b.n	800d142 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d148:	461a      	mov	r2, r3
 800d14a:	2300      	movs	r3, #0
 800d14c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d154:	4619      	mov	r1, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15c:	461a      	mov	r2, r3
 800d15e:	680b      	ldr	r3, [r1, #0]
 800d160:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	2b01      	cmp	r3, #1
 800d166:	d10c      	bne.n	800d182 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d104      	bne.n	800d178 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d16e:	2100      	movs	r1, #0
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f945 	bl	800d400 <USB_SetDevSpeed>
 800d176:	e008      	b.n	800d18a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d178:	2101      	movs	r1, #1
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f940 	bl	800d400 <USB_SetDevSpeed>
 800d180:	e003      	b.n	800d18a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d182:	2103      	movs	r1, #3
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f93b 	bl	800d400 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d18a:	2110      	movs	r1, #16
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f8f3 	bl	800d378 <USB_FlushTxFifo>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d001      	beq.n	800d19c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f90f 	bl	800d3c0 <USB_FlushRxFifo>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	613b      	str	r3, [r7, #16]
 800d1d4:	e043      	b.n	800d25e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	015a      	lsls	r2, r3, #5
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	4413      	add	r3, r2
 800d1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1ec:	d118      	bne.n	800d220 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10a      	bne.n	800d20a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d200:	461a      	mov	r2, r3
 800d202:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	e013      	b.n	800d232 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d216:	461a      	mov	r2, r3
 800d218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	e008      	b.n	800d232 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d22c:	461a      	mov	r2, r3
 800d22e:	2300      	movs	r3, #0
 800d230:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d23e:	461a      	mov	r2, r3
 800d240:	2300      	movs	r3, #0
 800d242:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	015a      	lsls	r2, r3, #5
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4413      	add	r3, r2
 800d24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d250:	461a      	mov	r2, r3
 800d252:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	3301      	adds	r3, #1
 800d25c:	613b      	str	r3, [r7, #16]
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	429a      	cmp	r2, r3
 800d264:	d3b7      	bcc.n	800d1d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d266:	2300      	movs	r3, #0
 800d268:	613b      	str	r3, [r7, #16]
 800d26a:	e043      	b.n	800d2f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	015a      	lsls	r2, r3, #5
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	4413      	add	r3, r2
 800d274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d27e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d282:	d118      	bne.n	800d2b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d296:	461a      	mov	r2, r3
 800d298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	e013      	b.n	800d2c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	015a      	lsls	r2, r3, #5
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	e008      	b.n	800d2c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	015a      	lsls	r2, r3, #5
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	4413      	add	r3, r2
 800d2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	015a      	lsls	r2, r3, #5
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	613b      	str	r3, [r7, #16]
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d3b7      	bcc.n	800d26c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d30a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d30e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d31c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	2b00      	cmp	r3, #0
 800d322:	d105      	bne.n	800d330 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	f043 0210 	orr.w	r2, r3, #16
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	699a      	ldr	r2, [r3, #24]
 800d334:	4b0f      	ldr	r3, [pc, #60]	; (800d374 <USB_DevInit+0x2b8>)
 800d336:	4313      	orrs	r3, r2
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d005      	beq.n	800d34e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	699b      	ldr	r3, [r3, #24]
 800d346:	f043 0208 	orr.w	r2, r3, #8
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d350:	2b01      	cmp	r3, #1
 800d352:	d107      	bne.n	800d364 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d35c:	f043 0304 	orr.w	r3, r3, #4
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d364:	7dfb      	ldrb	r3, [r7, #23]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d370:	b004      	add	sp, #16
 800d372:	4770      	bx	lr
 800d374:	803c3800 	.word	0x803c3800

0800d378 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	019b      	lsls	r3, r3, #6
 800d38a:	f043 0220 	orr.w	r2, r3, #32
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3301      	adds	r3, #1
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	4a08      	ldr	r2, [pc, #32]	; (800d3bc <USB_FlushTxFifo+0x44>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d901      	bls.n	800d3a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	e006      	b.n	800d3b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	d0f1      	beq.n	800d392 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	00030d40 	.word	0x00030d40

0800d3c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2210      	movs	r2, #16
 800d3d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	4a08      	ldr	r2, [pc, #32]	; (800d3fc <USB_FlushRxFifo+0x3c>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d901      	bls.n	800d3e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e006      	b.n	800d3f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	f003 0310 	and.w	r3, r3, #16
 800d3ea:	2b10      	cmp	r3, #16
 800d3ec:	d0f1      	beq.n	800d3d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	00030d40 	.word	0x00030d40

0800d400 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	460b      	mov	r3, r1
 800d40a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	78fb      	ldrb	r3, [r7, #3]
 800d41a:	68f9      	ldr	r1, [r7, #12]
 800d41c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d420:	4313      	orrs	r3, r2
 800d422:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d432:	b480      	push	{r7}
 800d434:	b087      	sub	sp, #28
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f003 0306 	and.w	r3, r3, #6
 800d44a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d102      	bne.n	800d458 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d452:	2300      	movs	r3, #0
 800d454:	75fb      	strb	r3, [r7, #23]
 800d456:	e00a      	b.n	800d46e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d002      	beq.n	800d464 <USB_GetDevSpeed+0x32>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b06      	cmp	r3, #6
 800d462:	d102      	bne.n	800d46a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d464:	2302      	movs	r3, #2
 800d466:	75fb      	strb	r3, [r7, #23]
 800d468:	e001      	b.n	800d46e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d46a:	230f      	movs	r3, #15
 800d46c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d470:	4618      	mov	r0, r3
 800d472:	371c      	adds	r7, #28
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	785b      	ldrb	r3, [r3, #1]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d13a      	bne.n	800d50e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d49e:	69da      	ldr	r2, [r3, #28]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	f003 030f 	and.w	r3, r3, #15
 800d4a8:	2101      	movs	r1, #1
 800d4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	68f9      	ldr	r1, [r7, #12]
 800d4b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	015a      	lsls	r2, r3, #5
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d155      	bne.n	800d57c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	78db      	ldrb	r3, [r3, #3]
 800d4ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	059b      	lsls	r3, r3, #22
 800d4f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	0151      	lsls	r1, r2, #5
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	440a      	add	r2, r1
 800d4fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	e036      	b.n	800d57c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d514:	69da      	ldr	r2, [r3, #28]
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	f003 030f 	and.w	r3, r3, #15
 800d51e:	2101      	movs	r1, #1
 800d520:	fa01 f303 	lsl.w	r3, r1, r3
 800d524:	041b      	lsls	r3, r3, #16
 800d526:	68f9      	ldr	r1, [r7, #12]
 800d528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d52c:	4313      	orrs	r3, r2
 800d52e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	015a      	lsls	r2, r3, #5
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	4413      	add	r3, r2
 800d538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d11a      	bne.n	800d57c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	015a      	lsls	r2, r3, #5
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	4413      	add	r3, r2
 800d54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	78db      	ldrb	r3, [r3, #3]
 800d560:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d562:	430b      	orrs	r3, r1
 800d564:	4313      	orrs	r3, r2
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	0151      	lsls	r1, r2, #5
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	440a      	add	r2, r1
 800d56e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d57a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
	...

0800d58c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	785b      	ldrb	r3, [r3, #1]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d161      	bne.n	800d66c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	015a      	lsls	r2, r3, #5
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5be:	d11f      	bne.n	800d600 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	0151      	lsls	r1, r2, #5
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	440a      	add	r2, r1
 800d5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	0151      	lsls	r1, r2, #5
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	440a      	add	r2, r1
 800d5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	f003 030f 	and.w	r3, r3, #15
 800d610:	2101      	movs	r1, #1
 800d612:	fa01 f303 	lsl.w	r3, r1, r3
 800d616:	b29b      	uxth	r3, r3
 800d618:	43db      	mvns	r3, r3
 800d61a:	68f9      	ldr	r1, [r7, #12]
 800d61c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d620:	4013      	ands	r3, r2
 800d622:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d62a:	69da      	ldr	r2, [r3, #28]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	f003 030f 	and.w	r3, r3, #15
 800d634:	2101      	movs	r1, #1
 800d636:	fa01 f303 	lsl.w	r3, r1, r3
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	43db      	mvns	r3, r3
 800d63e:	68f9      	ldr	r1, [r7, #12]
 800d640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d644:	4013      	ands	r3, r2
 800d646:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	015a      	lsls	r2, r3, #5
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4413      	add	r3, r2
 800d650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	0159      	lsls	r1, r3, #5
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	440b      	add	r3, r1
 800d65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d662:	4619      	mov	r1, r3
 800d664:	4b35      	ldr	r3, [pc, #212]	; (800d73c <USB_DeactivateEndpoint+0x1b0>)
 800d666:	4013      	ands	r3, r2
 800d668:	600b      	str	r3, [r1, #0]
 800d66a:	e060      	b.n	800d72e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	015a      	lsls	r2, r3, #5
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	4413      	add	r3, r2
 800d674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d67e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d682:	d11f      	bne.n	800d6c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	015a      	lsls	r2, r3, #5
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	4413      	add	r3, r2
 800d68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	0151      	lsls	r1, r2, #5
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	440a      	add	r2, r1
 800d69a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d69e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d6a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	015a      	lsls	r2, r3, #5
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	0151      	lsls	r1, r2, #5
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	440a      	add	r2, r1
 800d6ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	f003 030f 	and.w	r3, r3, #15
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6da:	041b      	lsls	r3, r3, #16
 800d6dc:	43db      	mvns	r3, r3
 800d6de:	68f9      	ldr	r1, [r7, #12]
 800d6e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ee:	69da      	ldr	r2, [r3, #28]
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	f003 030f 	and.w	r3, r3, #15
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d6fe:	041b      	lsls	r3, r3, #16
 800d700:	43db      	mvns	r3, r3
 800d702:	68f9      	ldr	r1, [r7, #12]
 800d704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d708:	4013      	ands	r3, r2
 800d70a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4413      	add	r3, r2
 800d714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	0159      	lsls	r1, r3, #5
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	440b      	add	r3, r1
 800d722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d726:	4619      	mov	r1, r3
 800d728:	4b05      	ldr	r3, [pc, #20]	; (800d740 <USB_DeactivateEndpoint+0x1b4>)
 800d72a:	4013      	ands	r3, r2
 800d72c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	ec337800 	.word	0xec337800
 800d740:	eff37800 	.word	0xeff37800

0800d744 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	; 0x28
 800d748:	af02      	add	r7, sp, #8
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	785b      	ldrb	r3, [r3, #1]
 800d760:	2b01      	cmp	r3, #1
 800d762:	f040 815c 	bne.w	800da1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	695b      	ldr	r3, [r3, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d132      	bne.n	800d7d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	69ba      	ldr	r2, [r7, #24]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	69fa      	ldr	r2, [r7, #28]
 800d782:	440a      	add	r2, r1
 800d784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d788:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d78c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	015a      	lsls	r2, r3, #5
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	4413      	add	r3, r2
 800d79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	69ba      	ldr	r2, [r7, #24]
 800d7a2:	0151      	lsls	r1, r2, #5
 800d7a4:	69fa      	ldr	r2, [r7, #28]
 800d7a6:	440a      	add	r2, r1
 800d7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	015a      	lsls	r2, r3, #5
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	69ba      	ldr	r2, [r7, #24]
 800d7c2:	0151      	lsls	r1, r2, #5
 800d7c4:	69fa      	ldr	r2, [r7, #28]
 800d7c6:	440a      	add	r2, r1
 800d7c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7cc:	0cdb      	lsrs	r3, r3, #19
 800d7ce:	04db      	lsls	r3, r3, #19
 800d7d0:	6113      	str	r3, [r2, #16]
 800d7d2:	e074      	b.n	800d8be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	015a      	lsls	r2, r3, #5
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	4413      	add	r3, r2
 800d7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	69ba      	ldr	r2, [r7, #24]
 800d7e4:	0151      	lsls	r1, r2, #5
 800d7e6:	69fa      	ldr	r2, [r7, #28]
 800d7e8:	440a      	add	r2, r1
 800d7ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ee:	0cdb      	lsrs	r3, r3, #19
 800d7f0:	04db      	lsls	r3, r3, #19
 800d7f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	69ba      	ldr	r2, [r7, #24]
 800d804:	0151      	lsls	r1, r2, #5
 800d806:	69fa      	ldr	r2, [r7, #28]
 800d808:	440a      	add	r2, r1
 800d80a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d80e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d812:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	015a      	lsls	r2, r3, #5
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	4413      	add	r3, r2
 800d820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d824:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	6959      	ldr	r1, [r3, #20]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	440b      	add	r3, r1
 800d830:	1e59      	subs	r1, r3, #1
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	fbb1 f3f3 	udiv	r3, r1, r3
 800d83a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d83c:	4b9d      	ldr	r3, [pc, #628]	; (800dab4 <USB_EPStartXfer+0x370>)
 800d83e:	400b      	ands	r3, r1
 800d840:	69b9      	ldr	r1, [r7, #24]
 800d842:	0148      	lsls	r0, r1, #5
 800d844:	69f9      	ldr	r1, [r7, #28]
 800d846:	4401      	add	r1, r0
 800d848:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d84c:	4313      	orrs	r3, r2
 800d84e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	015a      	lsls	r2, r3, #5
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	4413      	add	r3, r2
 800d858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85c:	691a      	ldr	r2, [r3, #16]
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d866:	69b9      	ldr	r1, [r7, #24]
 800d868:	0148      	lsls	r0, r1, #5
 800d86a:	69f9      	ldr	r1, [r7, #28]
 800d86c:	4401      	add	r1, r0
 800d86e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d872:	4313      	orrs	r3, r2
 800d874:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	78db      	ldrb	r3, [r3, #3]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d11f      	bne.n	800d8be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	4413      	add	r3, r2
 800d886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	0151      	lsls	r1, r2, #5
 800d890:	69fa      	ldr	r2, [r7, #28]
 800d892:	440a      	add	r2, r1
 800d894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d898:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d89c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	015a      	lsls	r2, r3, #5
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	0151      	lsls	r1, r2, #5
 800d8b0:	69fa      	ldr	r2, [r7, #28]
 800d8b2:	440a      	add	r2, r1
 800d8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d8be:	79fb      	ldrb	r3, [r7, #7]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d14b      	bne.n	800d95c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d8:	461a      	mov	r2, r3
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	78db      	ldrb	r3, [r3, #3]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d128      	bne.n	800d93a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d110      	bne.n	800d91a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	015a      	lsls	r2, r3, #5
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	4413      	add	r3, r2
 800d900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	69ba      	ldr	r2, [r7, #24]
 800d908:	0151      	lsls	r1, r2, #5
 800d90a:	69fa      	ldr	r2, [r7, #28]
 800d90c:	440a      	add	r2, r1
 800d90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	e00f      	b.n	800d93a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	4413      	add	r3, r2
 800d922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	0151      	lsls	r1, r2, #5
 800d92c:	69fa      	ldr	r2, [r7, #28]
 800d92e:	440a      	add	r2, r1
 800d930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d938:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	015a      	lsls	r2, r3, #5
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	4413      	add	r3, r2
 800d942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	69ba      	ldr	r2, [r7, #24]
 800d94a:	0151      	lsls	r1, r2, #5
 800d94c:	69fa      	ldr	r2, [r7, #28]
 800d94e:	440a      	add	r2, r1
 800d950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d954:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d958:	6013      	str	r3, [r2, #0]
 800d95a:	e12f      	b.n	800dbbc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	69ba      	ldr	r2, [r7, #24]
 800d96c:	0151      	lsls	r1, r2, #5
 800d96e:	69fa      	ldr	r2, [r7, #28]
 800d970:	440a      	add	r2, r1
 800d972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d97a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	78db      	ldrb	r3, [r3, #3]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d015      	beq.n	800d9b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	695b      	ldr	r3, [r3, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f000 8117 	beq.w	800dbbc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	f003 030f 	and.w	r3, r3, #15
 800d99e:	2101      	movs	r1, #1
 800d9a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d9a4:	69f9      	ldr	r1, [r7, #28]
 800d9a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	634b      	str	r3, [r1, #52]	; 0x34
 800d9ae:	e105      	b.n	800dbbc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d110      	bne.n	800d9e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	015a      	lsls	r2, r3, #5
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	69ba      	ldr	r2, [r7, #24]
 800d9d0:	0151      	lsls	r1, r2, #5
 800d9d2:	69fa      	ldr	r2, [r7, #28]
 800d9d4:	440a      	add	r2, r1
 800d9d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	e00f      	b.n	800da02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	015a      	lsls	r2, r3, #5
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	69ba      	ldr	r2, [r7, #24]
 800d9f2:	0151      	lsls	r1, r2, #5
 800d9f4:	69fa      	ldr	r2, [r7, #28]
 800d9f6:	440a      	add	r2, r1
 800d9f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	68d9      	ldr	r1, [r3, #12]
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	781a      	ldrb	r2, [r3, #0]
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	b298      	uxth	r0, r3
 800da10:	79fb      	ldrb	r3, [r7, #7]
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	4603      	mov	r3, r0
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 fa2b 	bl	800de72 <USB_WritePacket>
 800da1c:	e0ce      	b.n	800dbbc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	015a      	lsls	r2, r3, #5
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	4413      	add	r3, r2
 800da26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	0151      	lsls	r1, r2, #5
 800da30:	69fa      	ldr	r2, [r7, #28]
 800da32:	440a      	add	r2, r1
 800da34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da38:	0cdb      	lsrs	r3, r3, #19
 800da3a:	04db      	lsls	r3, r3, #19
 800da3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	69fa      	ldr	r2, [r7, #28]
 800da52:	440a      	add	r2, r1
 800da54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d126      	bne.n	800dab8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	4413      	add	r3, r2
 800da72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da80:	69b9      	ldr	r1, [r7, #24]
 800da82:	0148      	lsls	r0, r1, #5
 800da84:	69f9      	ldr	r1, [r7, #28]
 800da86:	4401      	add	r1, r0
 800da88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da8c:	4313      	orrs	r3, r2
 800da8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	015a      	lsls	r2, r3, #5
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	4413      	add	r3, r2
 800da98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	0151      	lsls	r1, r2, #5
 800daa2:	69fa      	ldr	r2, [r7, #28]
 800daa4:	440a      	add	r2, r1
 800daa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800daae:	6113      	str	r3, [r2, #16]
 800dab0:	e036      	b.n	800db20 <USB_EPStartXfer+0x3dc>
 800dab2:	bf00      	nop
 800dab4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	695a      	ldr	r2, [r3, #20]
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	4413      	add	r3, r2
 800dac2:	1e5a      	subs	r2, r3, #1
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dacc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	015a      	lsls	r2, r3, #5
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	4413      	add	r3, r2
 800dad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dada:	691a      	ldr	r2, [r3, #16]
 800dadc:	8afb      	ldrh	r3, [r7, #22]
 800dade:	04d9      	lsls	r1, r3, #19
 800dae0:	4b39      	ldr	r3, [pc, #228]	; (800dbc8 <USB_EPStartXfer+0x484>)
 800dae2:	400b      	ands	r3, r1
 800dae4:	69b9      	ldr	r1, [r7, #24]
 800dae6:	0148      	lsls	r0, r1, #5
 800dae8:	69f9      	ldr	r1, [r7, #28]
 800daea:	4401      	add	r1, r0
 800daec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800daf0:	4313      	orrs	r3, r2
 800daf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db00:	691a      	ldr	r2, [r3, #16]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	8af9      	ldrh	r1, [r7, #22]
 800db08:	fb01 f303 	mul.w	r3, r1, r3
 800db0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db10:	69b9      	ldr	r1, [r7, #24]
 800db12:	0148      	lsls	r0, r1, #5
 800db14:	69f9      	ldr	r1, [r7, #28]
 800db16:	4401      	add	r1, r0
 800db18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db1c:	4313      	orrs	r3, r2
 800db1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d10d      	bne.n	800db42 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d009      	beq.n	800db42 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	68d9      	ldr	r1, [r3, #12]
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db3e:	460a      	mov	r2, r1
 800db40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	78db      	ldrb	r3, [r3, #3]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d128      	bne.n	800db9c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db56:	2b00      	cmp	r3, #0
 800db58:	d110      	bne.n	800db7c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	015a      	lsls	r2, r3, #5
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	4413      	add	r3, r2
 800db62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	0151      	lsls	r1, r2, #5
 800db6c:	69fa      	ldr	r2, [r7, #28]
 800db6e:	440a      	add	r2, r1
 800db70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	e00f      	b.n	800db9c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	4413      	add	r3, r2
 800db84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	69ba      	ldr	r2, [r7, #24]
 800db8c:	0151      	lsls	r1, r2, #5
 800db8e:	69fa      	ldr	r2, [r7, #28]
 800db90:	440a      	add	r2, r1
 800db92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	015a      	lsls	r2, r3, #5
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	4413      	add	r3, r2
 800dba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	69ba      	ldr	r2, [r7, #24]
 800dbac:	0151      	lsls	r1, r2, #5
 800dbae:	69fa      	ldr	r2, [r7, #28]
 800dbb0:	440a      	add	r2, r1
 800dbb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	1ff80000 	.word	0x1ff80000

0800dbcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	785b      	ldrb	r3, [r3, #1]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	f040 80cd 	bne.w	800dd88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d132      	bne.n	800dc5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	015a      	lsls	r2, r3, #5
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	693a      	ldr	r2, [r7, #16]
 800dc06:	0151      	lsls	r1, r2, #5
 800dc08:	697a      	ldr	r2, [r7, #20]
 800dc0a:	440a      	add	r2, r1
 800dc0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	015a      	lsls	r2, r3, #5
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	4413      	add	r3, r2
 800dc22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	0151      	lsls	r1, r2, #5
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	440a      	add	r2, r1
 800dc30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	015a      	lsls	r2, r3, #5
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	4413      	add	r3, r2
 800dc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	0151      	lsls	r1, r2, #5
 800dc4c:	697a      	ldr	r2, [r7, #20]
 800dc4e:	440a      	add	r2, r1
 800dc50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc54:	0cdb      	lsrs	r3, r3, #19
 800dc56:	04db      	lsls	r3, r3, #19
 800dc58:	6113      	str	r3, [r2, #16]
 800dc5a:	e04e      	b.n	800dcfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	015a      	lsls	r2, r3, #5
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	4413      	add	r3, r2
 800dc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	0151      	lsls	r1, r2, #5
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	440a      	add	r2, r1
 800dc72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc76:	0cdb      	lsrs	r3, r3, #19
 800dc78:	04db      	lsls	r3, r3, #19
 800dc7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	0151      	lsls	r1, r2, #5
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	440a      	add	r2, r1
 800dc92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	695a      	ldr	r2, [r3, #20]
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d903      	bls.n	800dcb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	689a      	ldr	r2, [r3, #8]
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	0151      	lsls	r1, r2, #5
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	440a      	add	r2, r1
 800dcca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce0:	691a      	ldr	r2, [r3, #16]
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	695b      	ldr	r3, [r3, #20]
 800dce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcea:	6939      	ldr	r1, [r7, #16]
 800dcec:	0148      	lsls	r0, r1, #5
 800dcee:	6979      	ldr	r1, [r7, #20]
 800dcf0:	4401      	add	r1, r0
 800dcf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d11e      	bne.n	800dd3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d009      	beq.n	800dd1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	015a      	lsls	r2, r3, #5
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	4413      	add	r3, r2
 800dd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd14:	461a      	mov	r2, r3
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	015a      	lsls	r2, r3, #5
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	4413      	add	r3, r2
 800dd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	0151      	lsls	r1, r2, #5
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	440a      	add	r2, r1
 800dd32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd3a:	6013      	str	r3, [r2, #0]
 800dd3c:	e092      	b.n	800de64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	693a      	ldr	r2, [r7, #16]
 800dd4e:	0151      	lsls	r1, r2, #5
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	440a      	add	r2, r1
 800dd54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d07e      	beq.n	800de64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	f003 030f 	and.w	r3, r3, #15
 800dd76:	2101      	movs	r1, #1
 800dd78:	fa01 f303 	lsl.w	r3, r1, r3
 800dd7c:	6979      	ldr	r1, [r7, #20]
 800dd7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd82:	4313      	orrs	r3, r2
 800dd84:	634b      	str	r3, [r1, #52]	; 0x34
 800dd86:	e06d      	b.n	800de64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	015a      	lsls	r2, r3, #5
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	4413      	add	r3, r2
 800dd90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	0151      	lsls	r1, r2, #5
 800dd9a:	697a      	ldr	r2, [r7, #20]
 800dd9c:	440a      	add	r2, r1
 800dd9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dda2:	0cdb      	lsrs	r3, r3, #19
 800dda4:	04db      	lsls	r3, r3, #19
 800dda6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	0151      	lsls	r1, r2, #5
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	440a      	add	r2, r1
 800ddbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ddc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ddca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d003      	beq.n	800dddc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	689a      	ldr	r2, [r3, #8]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	015a      	lsls	r2, r3, #5
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	4413      	add	r3, r2
 800dde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	693a      	ldr	r2, [r7, #16]
 800ddec:	0151      	lsls	r1, r2, #5
 800ddee:	697a      	ldr	r2, [r7, #20]
 800ddf0:	440a      	add	r2, r1
 800ddf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	015a      	lsls	r2, r3, #5
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	4413      	add	r3, r2
 800de04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de08:	691a      	ldr	r2, [r3, #16]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de12:	6939      	ldr	r1, [r7, #16]
 800de14:	0148      	lsls	r0, r1, #5
 800de16:	6979      	ldr	r1, [r7, #20]
 800de18:	4401      	add	r1, r0
 800de1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800de1e:	4313      	orrs	r3, r2
 800de20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d10d      	bne.n	800de44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d009      	beq.n	800de44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	68d9      	ldr	r1, [r3, #12]
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de40:	460a      	mov	r2, r1
 800de42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	015a      	lsls	r2, r3, #5
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	4413      	add	r3, r2
 800de4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	693a      	ldr	r2, [r7, #16]
 800de54:	0151      	lsls	r1, r2, #5
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	440a      	add	r2, r1
 800de5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	371c      	adds	r7, #28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800de72:	b480      	push	{r7}
 800de74:	b089      	sub	sp, #36	; 0x24
 800de76:	af00      	add	r7, sp, #0
 800de78:	60f8      	str	r0, [r7, #12]
 800de7a:	60b9      	str	r1, [r7, #8]
 800de7c:	4611      	mov	r1, r2
 800de7e:	461a      	mov	r2, r3
 800de80:	460b      	mov	r3, r1
 800de82:	71fb      	strb	r3, [r7, #7]
 800de84:	4613      	mov	r3, r2
 800de86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800de90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de94:	2b00      	cmp	r3, #0
 800de96:	d123      	bne.n	800dee0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800de98:	88bb      	ldrh	r3, [r7, #4]
 800de9a:	3303      	adds	r3, #3
 800de9c:	089b      	lsrs	r3, r3, #2
 800de9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dea0:	2300      	movs	r3, #0
 800dea2:	61bb      	str	r3, [r7, #24]
 800dea4:	e018      	b.n	800ded8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	031a      	lsls	r2, r3, #12
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	4413      	add	r3, r2
 800deae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deb2:	461a      	mov	r2, r3
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	3301      	adds	r3, #1
 800debe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	3301      	adds	r3, #1
 800dec4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	3301      	adds	r3, #1
 800deca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	3301      	adds	r3, #1
 800ded0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	3301      	adds	r3, #1
 800ded6:	61bb      	str	r3, [r7, #24]
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d3e2      	bcc.n	800dea6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3724      	adds	r7, #36	; 0x24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800deee:	b480      	push	{r7}
 800def0:	b08b      	sub	sp, #44	; 0x2c
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	4613      	mov	r3, r2
 800defa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df04:	88fb      	ldrh	r3, [r7, #6]
 800df06:	089b      	lsrs	r3, r3, #2
 800df08:	b29b      	uxth	r3, r3
 800df0a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df0c:	88fb      	ldrh	r3, [r7, #6]
 800df0e:	f003 0303 	and.w	r3, r3, #3
 800df12:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df14:	2300      	movs	r3, #0
 800df16:	623b      	str	r3, [r7, #32]
 800df18:	e014      	b.n	800df44 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	601a      	str	r2, [r3, #0]
    pDest++;
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	3301      	adds	r3, #1
 800df2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	3301      	adds	r3, #1
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	3301      	adds	r3, #1
 800df36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	3301      	adds	r3, #1
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800df3e:	6a3b      	ldr	r3, [r7, #32]
 800df40:	3301      	adds	r3, #1
 800df42:	623b      	str	r3, [r7, #32]
 800df44:	6a3a      	ldr	r2, [r7, #32]
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d3e6      	bcc.n	800df1a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800df4c:	8bfb      	ldrh	r3, [r7, #30]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d01e      	beq.n	800df90 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800df52:	2300      	movs	r3, #0
 800df54:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df5c:	461a      	mov	r2, r3
 800df5e:	f107 0310 	add.w	r3, r7, #16
 800df62:	6812      	ldr	r2, [r2, #0]
 800df64:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	fa22 f303 	lsr.w	r3, r2, r3
 800df72:	b2da      	uxtb	r2, r3
 800df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df76:	701a      	strb	r2, [r3, #0]
      i++;
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	3301      	adds	r3, #1
 800df7c:	623b      	str	r3, [r7, #32]
      pDest++;
 800df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df80:	3301      	adds	r3, #1
 800df82:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800df84:	8bfb      	ldrh	r3, [r7, #30]
 800df86:	3b01      	subs	r3, #1
 800df88:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800df8a:	8bfb      	ldrh	r3, [r7, #30]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1ea      	bne.n	800df66 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df92:	4618      	mov	r0, r3
 800df94:	372c      	adds	r7, #44	; 0x2c
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b085      	sub	sp, #20
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
 800dfa6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d12c      	bne.n	800e014 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	015a      	lsls	r2, r3, #5
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	db12      	blt.n	800dff2 <USB_EPSetStall+0x54>
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00f      	beq.n	800dff2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	015a      	lsls	r2, r3, #5
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	4413      	add	r3, r2
 800dfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	0151      	lsls	r1, r2, #5
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	440a      	add	r2, r1
 800dfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dff0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	015a      	lsls	r2, r3, #5
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	4413      	add	r3, r2
 800dffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	0151      	lsls	r1, r2, #5
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	440a      	add	r2, r1
 800e008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e00c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	e02b      	b.n	800e06c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	015a      	lsls	r2, r3, #5
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	4413      	add	r3, r2
 800e01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	db12      	blt.n	800e04c <USB_EPSetStall+0xae>
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00f      	beq.n	800e04c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	015a      	lsls	r2, r3, #5
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4413      	add	r3, r2
 800e034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	68ba      	ldr	r2, [r7, #8]
 800e03c:	0151      	lsls	r1, r2, #5
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	440a      	add	r2, r1
 800e042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e046:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e04a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	0151      	lsls	r1, r2, #5
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	440a      	add	r2, r1
 800e062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e06a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3714      	adds	r7, #20
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b085      	sub	sp, #20
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	785b      	ldrb	r3, [r3, #1]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d128      	bne.n	800e0e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	015a      	lsls	r2, r3, #5
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	4413      	add	r3, r2
 800e09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	0151      	lsls	r1, r2, #5
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	440a      	add	r2, r1
 800e0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e0b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	78db      	ldrb	r3, [r3, #3]
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d003      	beq.n	800e0c6 <USB_EPClearStall+0x4c>
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	78db      	ldrb	r3, [r3, #3]
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d138      	bne.n	800e138 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	015a      	lsls	r2, r3, #5
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	0151      	lsls	r1, r2, #5
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	440a      	add	r2, r1
 800e0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	e027      	b.n	800e138 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	015a      	lsls	r2, r3, #5
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	0151      	lsls	r1, r2, #5
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	440a      	add	r2, r1
 800e0fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e106:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	78db      	ldrb	r3, [r3, #3]
 800e10c:	2b03      	cmp	r3, #3
 800e10e:	d003      	beq.n	800e118 <USB_EPClearStall+0x9e>
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	78db      	ldrb	r3, [r3, #3]
 800e114:	2b02      	cmp	r3, #2
 800e116:	d10f      	bne.n	800e138 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	015a      	lsls	r2, r3, #5
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4413      	add	r3, r2
 800e120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	0151      	lsls	r1, r2, #5
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	440a      	add	r2, r1
 800e12e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e136:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e146:	b480      	push	{r7}
 800e148:	b085      	sub	sp, #20
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
 800e14e:	460b      	mov	r3, r1
 800e150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e164:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e168:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	78fb      	ldrb	r3, [r7, #3]
 800e174:	011b      	lsls	r3, r3, #4
 800e176:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e17a:	68f9      	ldr	r1, [r7, #12]
 800e17c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e180:	4313      	orrs	r3, r2
 800e182:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e192:	b480      	push	{r7}
 800e194:	b085      	sub	sp, #20
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1ac:	f023 0303 	bic.w	r3, r3, #3
 800e1b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1c0:	f023 0302 	bic.w	r3, r3, #2
 800e1c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1ee:	f023 0303 	bic.w	r3, r3, #3
 800e1f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e202:	f043 0302 	orr.w	r3, r3, #2
 800e206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e216:	b480      	push	{r7}
 800e218:	b085      	sub	sp, #20
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	4013      	ands	r3, r2
 800e22c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e22e:	68fb      	ldr	r3, [r7, #12]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	4013      	ands	r3, r2
 800e25e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	0c1b      	lsrs	r3, r3, #16
}
 800e264:	4618      	mov	r0, r3
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	4013      	ands	r3, r2
 800e292:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	b29b      	uxth	r3, r3
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e2b4:	78fb      	ldrb	r3, [r7, #3]
 800e2b6:	015a      	lsls	r2, r3, #5
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2d2:	68bb      	ldr	r3, [r7, #8]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b087      	sub	sp, #28
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e302:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e304:	78fb      	ldrb	r3, [r7, #3]
 800e306:	f003 030f 	and.w	r3, r3, #15
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	fa22 f303 	lsr.w	r3, r2, r3
 800e310:	01db      	lsls	r3, r3, #7
 800e312:	b2db      	uxtb	r3, r3
 800e314:	693a      	ldr	r2, [r7, #16]
 800e316:	4313      	orrs	r3, r2
 800e318:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e31a:	78fb      	ldrb	r3, [r7, #3]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	4013      	ands	r3, r2
 800e32c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e32e:	68bb      	ldr	r3, [r7, #8]
}
 800e330:	4618      	mov	r0, r3
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	695b      	ldr	r3, [r3, #20]
 800e348:	f003 0301 	and.w	r3, r3, #1
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e376:	f023 0307 	bic.w	r3, r3, #7
 800e37a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e38a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e38e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e390:	2300      	movs	r3, #0
}
 800e392:	4618      	mov	r0, r3
 800e394:	3714      	adds	r7, #20
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
	...

0800e3a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b087      	sub	sp, #28
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	333c      	adds	r3, #60	; 0x3c
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	4a26      	ldr	r2, [pc, #152]	; (800e458 <USB_EP0_OutStart+0xb8>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d90a      	bls.n	800e3da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3d4:	d101      	bne.n	800e3da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e037      	b.n	800e44a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e408:	f043 0318 	orr.w	r3, r3, #24
 800e40c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e41c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e420:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e422:	7afb      	ldrb	r3, [r7, #11]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d10f      	bne.n	800e448 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e42e:	461a      	mov	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e442:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	371c      	adds	r7, #28
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	4f54300a 	.word	0x4f54300a

0800e45c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e464:	2300      	movs	r3, #0
 800e466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3301      	adds	r3, #1
 800e46c:	60fb      	str	r3, [r7, #12]
 800e46e:	4a13      	ldr	r2, [pc, #76]	; (800e4bc <USB_CoreReset+0x60>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d901      	bls.n	800e478 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800e474:	2303      	movs	r3, #3
 800e476:	e01a      	b.n	800e4ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	daf3      	bge.n	800e468 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e480:	2300      	movs	r3, #0
 800e482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	691b      	ldr	r3, [r3, #16]
 800e488:	f043 0201 	orr.w	r2, r3, #1
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3301      	adds	r3, #1
 800e494:	60fb      	str	r3, [r7, #12]
 800e496:	4a09      	ldr	r2, [pc, #36]	; (800e4bc <USB_CoreReset+0x60>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d901      	bls.n	800e4a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800e49c:	2303      	movs	r3, #3
 800e49e:	e006      	b.n	800e4ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	f003 0301 	and.w	r3, r3, #1
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d0f1      	beq.n	800e490 <USB_CoreReset+0x34>

  return HAL_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	00030d40 	.word	0x00030d40

0800e4c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e4cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e4d0:	f002 fa5e 	bl	8010990 <USBD_static_malloc>
 800e4d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d105      	bne.n	800e4e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	e066      	b.n	800e5b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	7c1b      	ldrb	r3, [r3, #16]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d119      	bne.n	800e52c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4fc:	2202      	movs	r2, #2
 800e4fe:	2181      	movs	r1, #129	; 0x81
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f002 f8d4 	bl	80106ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2201      	movs	r2, #1
 800e50a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e50c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e510:	2202      	movs	r2, #2
 800e512:	2101      	movs	r1, #1
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f002 f8ca 	bl	80106ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2210      	movs	r2, #16
 800e526:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e52a:	e016      	b.n	800e55a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e52c:	2340      	movs	r3, #64	; 0x40
 800e52e:	2202      	movs	r2, #2
 800e530:	2181      	movs	r1, #129	; 0x81
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f002 f8bb 	bl	80106ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e53e:	2340      	movs	r3, #64	; 0x40
 800e540:	2202      	movs	r2, #2
 800e542:	2101      	movs	r1, #1
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f002 f8b2 	bl	80106ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2210      	movs	r2, #16
 800e556:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e55a:	2308      	movs	r3, #8
 800e55c:	2203      	movs	r2, #3
 800e55e:	2182      	movs	r1, #130	; 0x82
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f002 f8a4 	bl	80106ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2201      	movs	r2, #1
 800e56a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	7c1b      	ldrb	r3, [r3, #16]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d109      	bne.n	800e5a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e59a:	2101      	movs	r1, #1
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f002 f975 	bl	801088c <USBD_LL_PrepareReceive>
 800e5a2:	e007      	b.n	800e5b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5aa:	2340      	movs	r3, #64	; 0x40
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f002 f96c 	bl	801088c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b082      	sub	sp, #8
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e5ca:	2181      	movs	r1, #129	; 0x81
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f002 f894 	bl	80106fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e5d8:	2101      	movs	r1, #1
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f002 f88d 	bl	80106fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e5e8:	2182      	movs	r1, #130	; 0x82
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f002 f885 	bl	80106fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00e      	beq.n	800e628 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e61a:	4618      	mov	r0, r3
 800e61c:	f002 f9c6 	bl	80109ac <USBD_static_free>
    pdev->pClassData = NULL;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e646:	2300      	movs	r3, #0
 800e648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e64a:	2300      	movs	r3, #0
 800e64c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d101      	bne.n	800e65c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e658:	2303      	movs	r3, #3
 800e65a:	e0af      	b.n	800e7bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e664:	2b00      	cmp	r3, #0
 800e666:	d03f      	beq.n	800e6e8 <USBD_CDC_Setup+0xb4>
 800e668:	2b20      	cmp	r3, #32
 800e66a:	f040 809f 	bne.w	800e7ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	88db      	ldrh	r3, [r3, #6]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d02e      	beq.n	800e6d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	b25b      	sxtb	r3, r3
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	da16      	bge.n	800e6ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e68c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	88d2      	ldrh	r2, [r2, #6]
 800e692:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	88db      	ldrh	r3, [r3, #6]
 800e698:	2b07      	cmp	r3, #7
 800e69a:	bf28      	it	cs
 800e69c:	2307      	movcs	r3, #7
 800e69e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	89fa      	ldrh	r2, [r7, #14]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f001 fb43 	bl	800fd32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e6ac:	e085      	b.n	800e7ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	785a      	ldrb	r2, [r3, #1]
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	88db      	ldrh	r3, [r3, #6]
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e6c4:	6939      	ldr	r1, [r7, #16]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	88db      	ldrh	r3, [r3, #6]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f001 fb5c 	bl	800fd8a <USBD_CtlPrepareRx>
      break;
 800e6d2:	e072      	b.n	800e7ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	7850      	ldrb	r0, [r2, #1]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	4798      	blx	r3
      break;
 800e6e6:	e068      	b.n	800e7ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	785b      	ldrb	r3, [r3, #1]
 800e6ec:	2b0b      	cmp	r3, #11
 800e6ee:	d852      	bhi.n	800e796 <USBD_CDC_Setup+0x162>
 800e6f0:	a201      	add	r2, pc, #4	; (adr r2, 800e6f8 <USBD_CDC_Setup+0xc4>)
 800e6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f6:	bf00      	nop
 800e6f8:	0800e729 	.word	0x0800e729
 800e6fc:	0800e7a5 	.word	0x0800e7a5
 800e700:	0800e797 	.word	0x0800e797
 800e704:	0800e797 	.word	0x0800e797
 800e708:	0800e797 	.word	0x0800e797
 800e70c:	0800e797 	.word	0x0800e797
 800e710:	0800e797 	.word	0x0800e797
 800e714:	0800e797 	.word	0x0800e797
 800e718:	0800e797 	.word	0x0800e797
 800e71c:	0800e797 	.word	0x0800e797
 800e720:	0800e753 	.word	0x0800e753
 800e724:	0800e77d 	.word	0x0800e77d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b03      	cmp	r3, #3
 800e732:	d107      	bne.n	800e744 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e734:	f107 030a 	add.w	r3, r7, #10
 800e738:	2202      	movs	r2, #2
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f001 faf8 	bl	800fd32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e742:	e032      	b.n	800e7aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f001 fa82 	bl	800fc50 <USBD_CtlError>
            ret = USBD_FAIL;
 800e74c:	2303      	movs	r3, #3
 800e74e:	75fb      	strb	r3, [r7, #23]
          break;
 800e750:	e02b      	b.n	800e7aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d107      	bne.n	800e76e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e75e:	f107 030d 	add.w	r3, r7, #13
 800e762:	2201      	movs	r2, #1
 800e764:	4619      	mov	r1, r3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f001 fae3 	bl	800fd32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e76c:	e01d      	b.n	800e7aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f001 fa6d 	bl	800fc50 <USBD_CtlError>
            ret = USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	75fb      	strb	r3, [r7, #23]
          break;
 800e77a:	e016      	b.n	800e7aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b03      	cmp	r3, #3
 800e786:	d00f      	beq.n	800e7a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f001 fa60 	bl	800fc50 <USBD_CtlError>
            ret = USBD_FAIL;
 800e790:	2303      	movs	r3, #3
 800e792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e794:	e008      	b.n	800e7a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f001 fa59 	bl	800fc50 <USBD_CtlError>
          ret = USBD_FAIL;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e7a2:	e002      	b.n	800e7aa <USBD_CDC_Setup+0x176>
          break;
 800e7a4:	bf00      	nop
 800e7a6:	e008      	b.n	800e7ba <USBD_CDC_Setup+0x186>
          break;
 800e7a8:	bf00      	nop
      }
      break;
 800e7aa:	e006      	b.n	800e7ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f001 fa4e 	bl	800fc50 <USBD_CtlError>
      ret = USBD_FAIL;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800e7b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800e7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d101      	bne.n	800e7e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e04f      	b.n	800e886 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e7ee:	78fa      	ldrb	r2, [r7, #3]
 800e7f0:	6879      	ldr	r1, [r7, #4]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	4413      	add	r3, r2
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	440b      	add	r3, r1
 800e7fc:	3318      	adds	r3, #24
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d029      	beq.n	800e858 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e804:	78fa      	ldrb	r2, [r7, #3]
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	4613      	mov	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4413      	add	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	440b      	add	r3, r1
 800e812:	3318      	adds	r3, #24
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	78f9      	ldrb	r1, [r7, #3]
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	460b      	mov	r3, r1
 800e81c:	00db      	lsls	r3, r3, #3
 800e81e:	1a5b      	subs	r3, r3, r1
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	4403      	add	r3, r0
 800e824:	3344      	adds	r3, #68	; 0x44
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	fbb2 f1f3 	udiv	r1, r2, r3
 800e82c:	fb03 f301 	mul.w	r3, r3, r1
 800e830:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e832:	2b00      	cmp	r3, #0
 800e834:	d110      	bne.n	800e858 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e836:	78fa      	ldrb	r2, [r7, #3]
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	4613      	mov	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4413      	add	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	440b      	add	r3, r1
 800e844:	3318      	adds	r3, #24
 800e846:	2200      	movs	r2, #0
 800e848:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e84a:	78f9      	ldrb	r1, [r7, #3]
 800e84c:	2300      	movs	r3, #0
 800e84e:	2200      	movs	r2, #0
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f001 fffa 	bl	801084a <USBD_LL_Transmit>
 800e856:	e015      	b.n	800e884 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e880:	78fa      	ldrb	r2, [r7, #3]
 800e882:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b084      	sub	sp, #16
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
 800e896:	460b      	mov	r3, r1
 800e898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8ac:	2303      	movs	r3, #3
 800e8ae:	e015      	b.n	800e8dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f002 f80a 	bl	80108ce <USBD_LL_GetRxDataSize>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d101      	bne.n	800e8fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e8fa:	2303      	movs	r3, #3
 800e8fc:	e01b      	b.n	800e936 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d015      	beq.n	800e934 <USBD_CDC_EP0_RxReady+0x50>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e90e:	2bff      	cmp	r3, #255	; 0xff
 800e910:	d010      	beq.n	800e934 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e920:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e928:	b292      	uxth	r2, r2
 800e92a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	22ff      	movs	r2, #255	; 0xff
 800e930:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
	...

0800e940 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2243      	movs	r2, #67	; 0x43
 800e94c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e94e:	4b03      	ldr	r3, [pc, #12]	; (800e95c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e950:	4618      	mov	r0, r3
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr
 800e95c:	20000094 	.word	0x20000094

0800e960 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2243      	movs	r2, #67	; 0x43
 800e96c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e96e:	4b03      	ldr	r3, [pc, #12]	; (800e97c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e970:	4618      	mov	r0, r3
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	20000050 	.word	0x20000050

0800e980 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2243      	movs	r2, #67	; 0x43
 800e98c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e98e:	4b03      	ldr	r3, [pc, #12]	; (800e99c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e990:	4618      	mov	r0, r3
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr
 800e99c:	200000d8 	.word	0x200000d8

0800e9a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	220a      	movs	r2, #10
 800e9ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e9ae:	4b03      	ldr	r3, [pc, #12]	; (800e9bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	2000000c 	.word	0x2000000c

0800e9c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e004      	b.n	800e9de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	683a      	ldr	r2, [r7, #0]
 800e9d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b087      	sub	sp, #28
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	60f8      	str	r0, [r7, #12]
 800e9f2:	60b9      	str	r1, [r7, #8]
 800e9f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea04:	2303      	movs	r3, #3
 800ea06:	e008      	b.n	800ea1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	371c      	adds	r7, #28
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea26:	b480      	push	{r7}
 800ea28:	b085      	sub	sp, #20
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d101      	bne.n	800ea42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	e004      	b.n	800ea4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d101      	bne.n	800ea7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea76:	2303      	movs	r3, #3
 800ea78:	e01a      	b.n	800eab0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d114      	bne.n	800eaae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eaa2:	2181      	movs	r1, #129	; 0x81
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f001 fed0 	bl	801084a <USBD_LL_Transmit>

    ret = USBD_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eaae:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d101      	bne.n	800ead6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e016      	b.n	800eb04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	7c1b      	ldrb	r3, [r3, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d109      	bne.n	800eaf2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eae8:	2101      	movs	r1, #1
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f001 fece 	bl	801088c <USBD_LL_PrepareReceive>
 800eaf0:	e007      	b.n	800eb02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eaf8:	2340      	movs	r3, #64	; 0x40
 800eafa:	2101      	movs	r1, #1
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f001 fec5 	bl	801088c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b086      	sub	sp, #24
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	4613      	mov	r3, r2
 800eb18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb20:	2303      	movs	r3, #3
 800eb22:	e01f      	b.n	800eb64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d003      	beq.n	800eb4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	79fa      	ldrb	r2, [r7, #7]
 800eb56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f001 fd41 	bl	80105e0 <USBD_LL_Init>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3718      	adds	r7, #24
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb76:	2300      	movs	r3, #0
 800eb78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e016      	b.n	800ebb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00b      	beq.n	800ebb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba0:	f107 020e 	add.w	r2, r7, #14
 800eba4:	4610      	mov	r0, r2
 800eba6:	4798      	blx	r3
 800eba8:	4602      	mov	r2, r0
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b082      	sub	sp, #8
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f001 fd58 	bl	8010678 <USBD_LL_Start>
 800ebc8:	4603      	mov	r3, r0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d009      	beq.n	800ec16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	78fa      	ldrb	r2, [r7, #3]
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	4798      	blx	r3
 800ec12:	4603      	mov	r3, r0
 800ec14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	78fa      	ldrb	r2, [r7, #3]
 800ec40:	4611      	mov	r1, r2
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	4798      	blx	r3
  }

  return USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec60:	6839      	ldr	r1, [r7, #0]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 ffba 	bl	800fbdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec76:	461a      	mov	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec84:	f003 031f 	and.w	r3, r3, #31
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d01a      	beq.n	800ecc2 <USBD_LL_SetupStage+0x72>
 800ec8c:	2b02      	cmp	r3, #2
 800ec8e:	d822      	bhi.n	800ecd6 <USBD_LL_SetupStage+0x86>
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d002      	beq.n	800ec9a <USBD_LL_SetupStage+0x4a>
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d00a      	beq.n	800ecae <USBD_LL_SetupStage+0x5e>
 800ec98:	e01d      	b.n	800ecd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eca0:	4619      	mov	r1, r3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 fa62 	bl	800f16c <USBD_StdDevReq>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ecac:	e020      	b.n	800ecf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fac6 	bl	800f248 <USBD_StdItfReq>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc0:	e016      	b.n	800ecf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 fb05 	bl	800f2da <USBD_StdEPReq>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecd4:	e00c      	b.n	800ecf0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	4619      	mov	r1, r3
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f001 fd27 	bl	8010738 <USBD_LL_StallEP>
 800ecea:	4603      	mov	r3, r0
 800ecec:	73fb      	strb	r3, [r7, #15]
      break;
 800ecee:	bf00      	nop
  }

  return ret;
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b086      	sub	sp, #24
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	460b      	mov	r3, r1
 800ed04:	607a      	str	r2, [r7, #4]
 800ed06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed08:	7afb      	ldrb	r3, [r7, #11]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d138      	bne.n	800ed80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ed14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed1c:	2b03      	cmp	r3, #3
 800ed1e:	d14a      	bne.n	800edb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	689a      	ldr	r2, [r3, #8]
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d913      	bls.n	800ed54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	1ad2      	subs	r2, r2, r3
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	68da      	ldr	r2, [r3, #12]
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	4293      	cmp	r3, r2
 800ed44:	bf28      	it	cs
 800ed46:	4613      	movcs	r3, r2
 800ed48:	461a      	mov	r2, r3
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f001 f839 	bl	800fdc4 <USBD_CtlContinueRx>
 800ed52:	e030      	b.n	800edb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b03      	cmp	r3, #3
 800ed5e:	d10b      	bne.n	800ed78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f001 f834 	bl	800fde6 <USBD_CtlSendStatus>
 800ed7e:	e01a      	b.n	800edb6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d114      	bne.n	800edb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed92:	699b      	ldr	r3, [r3, #24]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00e      	beq.n	800edb6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	7afa      	ldrb	r2, [r7, #11]
 800eda2:	4611      	mov	r1, r2
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	4798      	blx	r3
 800eda8:	4603      	mov	r3, r0
 800edaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800edac:	7dfb      	ldrb	r3, [r7, #23]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
 800edb4:	e000      	b.n	800edb8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800edb6:	2300      	movs	r3, #0
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	460b      	mov	r3, r1
 800edca:	607a      	str	r2, [r7, #4]
 800edcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800edce:	7afb      	ldrb	r3, [r7, #11]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d16b      	bne.n	800eeac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	3314      	adds	r3, #20
 800edd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d156      	bne.n	800ee92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	429a      	cmp	r2, r3
 800edee:	d914      	bls.n	800ee1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	689a      	ldr	r2, [r3, #8]
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	1ad2      	subs	r2, r2, r3
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	461a      	mov	r2, r3
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f000 ffae 	bl	800fd68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	2200      	movs	r2, #0
 800ee10:	2100      	movs	r1, #0
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f001 fd3a 	bl	801088c <USBD_LL_PrepareReceive>
 800ee18:	e03b      	b.n	800ee92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	68da      	ldr	r2, [r3, #12]
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d11c      	bne.n	800ee60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	685a      	ldr	r2, [r3, #4]
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d316      	bcc.n	800ee60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	685a      	ldr	r2, [r3, #4]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d20f      	bcs.n	800ee60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee40:	2200      	movs	r2, #0
 800ee42:	2100      	movs	r1, #0
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f000 ff8f 	bl	800fd68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee52:	2300      	movs	r3, #0
 800ee54:	2200      	movs	r2, #0
 800ee56:	2100      	movs	r1, #0
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f001 fd17 	bl	801088c <USBD_LL_PrepareReceive>
 800ee5e:	e018      	b.n	800ee92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d10b      	bne.n	800ee84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d005      	beq.n	800ee84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee84:	2180      	movs	r1, #128	; 0x80
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f001 fc56 	bl	8010738 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f000 ffbd 	bl	800fe0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d122      	bne.n	800eee2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f7ff fe98 	bl	800ebd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eeaa:	e01a      	b.n	800eee2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d114      	bne.n	800eee2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eebe:	695b      	ldr	r3, [r3, #20]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00e      	beq.n	800eee2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	7afa      	ldrb	r2, [r7, #11]
 800eece:	4611      	mov	r1, r2
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	4798      	blx	r3
 800eed4:	4603      	mov	r3, r0
 800eed6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eed8:	7dfb      	ldrb	r3, [r7, #23]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d001      	beq.n	800eee2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800eede:	7dfb      	ldrb	r3, [r7, #23]
 800eee0:	e000      	b.n	800eee4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800eee2:	2300      	movs	r3, #0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d101      	bne.n	800ef20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	e02f      	b.n	800ef80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00f      	beq.n	800ef4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6852      	ldr	r2, [r2, #4]
 800ef42:	b2d2      	uxtb	r2, r2
 800ef44:	4611      	mov	r1, r2
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef4a:	2340      	movs	r3, #64	; 0x40
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f001 fbac 	bl	80106ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2240      	movs	r2, #64	; 0x40
 800ef62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef66:	2340      	movs	r3, #64	; 0x40
 800ef68:	2200      	movs	r2, #0
 800ef6a:	2180      	movs	r1, #128	; 0x80
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f001 fb9e 	bl	80106ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2240      	movs	r2, #64	; 0x40
 800ef7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	78fa      	ldrb	r2, [r7, #3]
 800ef98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2204      	movs	r2, #4
 800efc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	2b04      	cmp	r3, #4
 800efe6:	d106      	bne.n	800eff6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f016:	2303      	movs	r3, #3
 800f018:	e012      	b.n	800f040 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f020:	b2db      	uxtb	r3, r3
 800f022:	2b03      	cmp	r3, #3
 800f024:	d10b      	bne.n	800f03e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d005      	beq.n	800f03e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f038:	69db      	ldr	r3, [r3, #28]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d101      	bne.n	800f062 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f05e:	2303      	movs	r3, #3
 800f060:	e014      	b.n	800f08c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d10d      	bne.n	800f08a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d007      	beq.n	800f08a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	78fa      	ldrb	r2, [r7, #3]
 800f084:	4611      	mov	r1, r2
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	e014      	b.n	800f0d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b03      	cmp	r3, #3
 800f0b8:	d10d      	bne.n	800f0d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d007      	beq.n	800f0d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ce:	78fa      	ldrb	r2, [r7, #3]
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0d6:	2300      	movs	r3, #0
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	370c      	adds	r7, #12
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b082      	sub	sp, #8
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2201      	movs	r2, #1
 800f102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d009      	beq.n	800f124 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	6852      	ldr	r2, [r2, #4]
 800f11c:	b2d2      	uxtb	r2, r2
 800f11e:	4611      	mov	r1, r2
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	4798      	blx	r3
  }

  return USBD_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f12e:	b480      	push	{r7}
 800f130:	b087      	sub	sp, #28
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	3301      	adds	r3, #1
 800f144:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f14c:	8a3b      	ldrh	r3, [r7, #16]
 800f14e:	021b      	lsls	r3, r3, #8
 800f150:	b21a      	sxth	r2, r3
 800f152:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f156:	4313      	orrs	r3, r2
 800f158:	b21b      	sxth	r3, r3
 800f15a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f15c:	89fb      	ldrh	r3, [r7, #14]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	371c      	adds	r7, #28
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
	...

0800f16c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f182:	2b40      	cmp	r3, #64	; 0x40
 800f184:	d005      	beq.n	800f192 <USBD_StdDevReq+0x26>
 800f186:	2b40      	cmp	r3, #64	; 0x40
 800f188:	d853      	bhi.n	800f232 <USBD_StdDevReq+0xc6>
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00b      	beq.n	800f1a6 <USBD_StdDevReq+0x3a>
 800f18e:	2b20      	cmp	r3, #32
 800f190:	d14f      	bne.n	800f232 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	4798      	blx	r3
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1a4:	e04a      	b.n	800f23c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	785b      	ldrb	r3, [r3, #1]
 800f1aa:	2b09      	cmp	r3, #9
 800f1ac:	d83b      	bhi.n	800f226 <USBD_StdDevReq+0xba>
 800f1ae:	a201      	add	r2, pc, #4	; (adr r2, 800f1b4 <USBD_StdDevReq+0x48>)
 800f1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1b4:	0800f209 	.word	0x0800f209
 800f1b8:	0800f21d 	.word	0x0800f21d
 800f1bc:	0800f227 	.word	0x0800f227
 800f1c0:	0800f213 	.word	0x0800f213
 800f1c4:	0800f227 	.word	0x0800f227
 800f1c8:	0800f1e7 	.word	0x0800f1e7
 800f1cc:	0800f1dd 	.word	0x0800f1dd
 800f1d0:	0800f227 	.word	0x0800f227
 800f1d4:	0800f1ff 	.word	0x0800f1ff
 800f1d8:	0800f1f1 	.word	0x0800f1f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1dc:	6839      	ldr	r1, [r7, #0]
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 f9de 	bl	800f5a0 <USBD_GetDescriptor>
          break;
 800f1e4:	e024      	b.n	800f230 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 fb6d 	bl	800f8c8 <USBD_SetAddress>
          break;
 800f1ee:	e01f      	b.n	800f230 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fbac 	bl	800f950 <USBD_SetConfig>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73fb      	strb	r3, [r7, #15]
          break;
 800f1fc:	e018      	b.n	800f230 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fc4b 	bl	800fa9c <USBD_GetConfig>
          break;
 800f206:	e013      	b.n	800f230 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fc7c 	bl	800fb08 <USBD_GetStatus>
          break;
 800f210:	e00e      	b.n	800f230 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f212:	6839      	ldr	r1, [r7, #0]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fcab 	bl	800fb70 <USBD_SetFeature>
          break;
 800f21a:	e009      	b.n	800f230 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 fcba 	bl	800fb98 <USBD_ClrFeature>
          break;
 800f224:	e004      	b.n	800f230 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f226:	6839      	ldr	r1, [r7, #0]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 fd11 	bl	800fc50 <USBD_CtlError>
          break;
 800f22e:	bf00      	nop
      }
      break;
 800f230:	e004      	b.n	800f23c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 fd0b 	bl	800fc50 <USBD_CtlError>
      break;
 800f23a:	bf00      	nop
  }

  return ret;
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop

0800f248 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f25e:	2b40      	cmp	r3, #64	; 0x40
 800f260:	d005      	beq.n	800f26e <USBD_StdItfReq+0x26>
 800f262:	2b40      	cmp	r3, #64	; 0x40
 800f264:	d82f      	bhi.n	800f2c6 <USBD_StdItfReq+0x7e>
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <USBD_StdItfReq+0x26>
 800f26a:	2b20      	cmp	r3, #32
 800f26c:	d12b      	bne.n	800f2c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f274:	b2db      	uxtb	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d81d      	bhi.n	800f2b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	889b      	ldrh	r3, [r3, #4]
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b01      	cmp	r3, #1
 800f284:	d813      	bhi.n	800f2ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	6839      	ldr	r1, [r7, #0]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	4798      	blx	r3
 800f294:	4603      	mov	r3, r0
 800f296:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	88db      	ldrh	r3, [r3, #6]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d110      	bne.n	800f2c2 <USBD_StdItfReq+0x7a>
 800f2a0:	7bfb      	ldrb	r3, [r7, #15]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10d      	bne.n	800f2c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 fd9d 	bl	800fde6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f2ac:	e009      	b.n	800f2c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fccd 	bl	800fc50 <USBD_CtlError>
          break;
 800f2b6:	e004      	b.n	800f2c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fcc8 	bl	800fc50 <USBD_CtlError>
          break;
 800f2c0:	e000      	b.n	800f2c4 <USBD_StdItfReq+0x7c>
          break;
 800f2c2:	bf00      	nop
      }
      break;
 800f2c4:	e004      	b.n	800f2d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f2c6:	6839      	ldr	r1, [r7, #0]
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 fcc1 	bl	800fc50 <USBD_CtlError>
      break;
 800f2ce:	bf00      	nop
  }

  return ret;
 800f2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b084      	sub	sp, #16
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	889b      	ldrh	r3, [r3, #4]
 800f2ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2f6:	2b40      	cmp	r3, #64	; 0x40
 800f2f8:	d007      	beq.n	800f30a <USBD_StdEPReq+0x30>
 800f2fa:	2b40      	cmp	r3, #64	; 0x40
 800f2fc:	f200 8145 	bhi.w	800f58a <USBD_StdEPReq+0x2b0>
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00c      	beq.n	800f31e <USBD_StdEPReq+0x44>
 800f304:	2b20      	cmp	r3, #32
 800f306:	f040 8140 	bne.w	800f58a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	4798      	blx	r3
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]
      break;
 800f31c:	e13a      	b.n	800f594 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	785b      	ldrb	r3, [r3, #1]
 800f322:	2b03      	cmp	r3, #3
 800f324:	d007      	beq.n	800f336 <USBD_StdEPReq+0x5c>
 800f326:	2b03      	cmp	r3, #3
 800f328:	f300 8129 	bgt.w	800f57e <USBD_StdEPReq+0x2a4>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d07f      	beq.n	800f430 <USBD_StdEPReq+0x156>
 800f330:	2b01      	cmp	r3, #1
 800f332:	d03c      	beq.n	800f3ae <USBD_StdEPReq+0xd4>
 800f334:	e123      	b.n	800f57e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d002      	beq.n	800f348 <USBD_StdEPReq+0x6e>
 800f342:	2b03      	cmp	r3, #3
 800f344:	d016      	beq.n	800f374 <USBD_StdEPReq+0x9a>
 800f346:	e02c      	b.n	800f3a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f348:	7bbb      	ldrb	r3, [r7, #14]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00d      	beq.n	800f36a <USBD_StdEPReq+0x90>
 800f34e:	7bbb      	ldrb	r3, [r7, #14]
 800f350:	2b80      	cmp	r3, #128	; 0x80
 800f352:	d00a      	beq.n	800f36a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f001 f9ed 	bl	8010738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f35e:	2180      	movs	r1, #128	; 0x80
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f001 f9e9 	bl	8010738 <USBD_LL_StallEP>
 800f366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f368:	e020      	b.n	800f3ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 fc6f 	bl	800fc50 <USBD_CtlError>
              break;
 800f372:	e01b      	b.n	800f3ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	885b      	ldrh	r3, [r3, #2]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d10e      	bne.n	800f39a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00b      	beq.n	800f39a <USBD_StdEPReq+0xc0>
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	2b80      	cmp	r3, #128	; 0x80
 800f386:	d008      	beq.n	800f39a <USBD_StdEPReq+0xc0>
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	88db      	ldrh	r3, [r3, #6]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d104      	bne.n	800f39a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f390:	7bbb      	ldrb	r3, [r7, #14]
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f001 f9cf 	bl	8010738 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 fd23 	bl	800fde6 <USBD_CtlSendStatus>

              break;
 800f3a0:	e004      	b.n	800f3ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f3a2:	6839      	ldr	r1, [r7, #0]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 fc53 	bl	800fc50 <USBD_CtlError>
              break;
 800f3aa:	bf00      	nop
          }
          break;
 800f3ac:	e0ec      	b.n	800f588 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d002      	beq.n	800f3c0 <USBD_StdEPReq+0xe6>
 800f3ba:	2b03      	cmp	r3, #3
 800f3bc:	d016      	beq.n	800f3ec <USBD_StdEPReq+0x112>
 800f3be:	e030      	b.n	800f422 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3c0:	7bbb      	ldrb	r3, [r7, #14]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00d      	beq.n	800f3e2 <USBD_StdEPReq+0x108>
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
 800f3c8:	2b80      	cmp	r3, #128	; 0x80
 800f3ca:	d00a      	beq.n	800f3e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f001 f9b1 	bl	8010738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3d6:	2180      	movs	r1, #128	; 0x80
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 f9ad 	bl	8010738 <USBD_LL_StallEP>
 800f3de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3e0:	e025      	b.n	800f42e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fc33 	bl	800fc50 <USBD_CtlError>
              break;
 800f3ea:	e020      	b.n	800f42e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	885b      	ldrh	r3, [r3, #2]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d11b      	bne.n	800f42c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3f4:	7bbb      	ldrb	r3, [r7, #14]
 800f3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d004      	beq.n	800f408 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3fe:	7bbb      	ldrb	r3, [r7, #14]
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f001 f9b7 	bl	8010776 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fcec 	bl	800fde6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	4798      	blx	r3
 800f41c:	4603      	mov	r3, r0
 800f41e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f420:	e004      	b.n	800f42c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f422:	6839      	ldr	r1, [r7, #0]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fc13 	bl	800fc50 <USBD_CtlError>
              break;
 800f42a:	e000      	b.n	800f42e <USBD_StdEPReq+0x154>
              break;
 800f42c:	bf00      	nop
          }
          break;
 800f42e:	e0ab      	b.n	800f588 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b02      	cmp	r3, #2
 800f43a:	d002      	beq.n	800f442 <USBD_StdEPReq+0x168>
 800f43c:	2b03      	cmp	r3, #3
 800f43e:	d032      	beq.n	800f4a6 <USBD_StdEPReq+0x1cc>
 800f440:	e097      	b.n	800f572 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f442:	7bbb      	ldrb	r3, [r7, #14]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d007      	beq.n	800f458 <USBD_StdEPReq+0x17e>
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	2b80      	cmp	r3, #128	; 0x80
 800f44c:	d004      	beq.n	800f458 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f44e:	6839      	ldr	r1, [r7, #0]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 fbfd 	bl	800fc50 <USBD_CtlError>
                break;
 800f456:	e091      	b.n	800f57c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	da0b      	bge.n	800f478 <USBD_StdEPReq+0x19e>
 800f460:	7bbb      	ldrb	r3, [r7, #14]
 800f462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	3310      	adds	r3, #16
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4413      	add	r3, r2
 800f474:	3304      	adds	r3, #4
 800f476:	e00b      	b.n	800f490 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f478:	7bbb      	ldrb	r3, [r7, #14]
 800f47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f47e:	4613      	mov	r3, r2
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	4413      	add	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	4413      	add	r3, r2
 800f48e:	3304      	adds	r3, #4
 800f490:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2202      	movs	r2, #2
 800f49c:	4619      	mov	r1, r3
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fc47 	bl	800fd32 <USBD_CtlSendData>
              break;
 800f4a4:	e06a      	b.n	800f57c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	da11      	bge.n	800f4d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4ae:	7bbb      	ldrb	r3, [r7, #14]
 800f4b0:	f003 020f 	and.w	r2, r3, #15
 800f4b4:	6879      	ldr	r1, [r7, #4]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	440b      	add	r3, r1
 800f4c0:	3324      	adds	r3, #36	; 0x24
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d117      	bne.n	800f4f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 fbc0 	bl	800fc50 <USBD_CtlError>
                  break;
 800f4d0:	e054      	b.n	800f57c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4d2:	7bbb      	ldrb	r3, [r7, #14]
 800f4d4:	f003 020f 	and.w	r2, r3, #15
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	4613      	mov	r3, r2
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	4413      	add	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	440b      	add	r3, r1
 800f4e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4e8:	881b      	ldrh	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d104      	bne.n	800f4f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fbad 	bl	800fc50 <USBD_CtlError>
                  break;
 800f4f6:	e041      	b.n	800f57c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	da0b      	bge.n	800f518 <USBD_StdEPReq+0x23e>
 800f500:	7bbb      	ldrb	r3, [r7, #14]
 800f502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f506:	4613      	mov	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4413      	add	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	3310      	adds	r3, #16
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	4413      	add	r3, r2
 800f514:	3304      	adds	r3, #4
 800f516:	e00b      	b.n	800f530 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f51e:	4613      	mov	r3, r2
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4413      	add	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	4413      	add	r3, r2
 800f52e:	3304      	adds	r3, #4
 800f530:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f532:	7bbb      	ldrb	r3, [r7, #14]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d002      	beq.n	800f53e <USBD_StdEPReq+0x264>
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	2b80      	cmp	r3, #128	; 0x80
 800f53c:	d103      	bne.n	800f546 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2200      	movs	r2, #0
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	e00e      	b.n	800f564 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f546:	7bbb      	ldrb	r3, [r7, #14]
 800f548:	4619      	mov	r1, r3
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f001 f932 	bl	80107b4 <USBD_LL_IsStallEP>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d003      	beq.n	800f55e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	2201      	movs	r2, #1
 800f55a:	601a      	str	r2, [r3, #0]
 800f55c:	e002      	b.n	800f564 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2200      	movs	r2, #0
 800f562:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2202      	movs	r2, #2
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fbe1 	bl	800fd32 <USBD_CtlSendData>
              break;
 800f570:	e004      	b.n	800f57c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fb6b 	bl	800fc50 <USBD_CtlError>
              break;
 800f57a:	bf00      	nop
          }
          break;
 800f57c:	e004      	b.n	800f588 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fb65 	bl	800fc50 <USBD_CtlError>
          break;
 800f586:	bf00      	nop
      }
      break;
 800f588:	e004      	b.n	800f594 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fb5f 	bl	800fc50 <USBD_CtlError>
      break;
 800f592:	bf00      	nop
  }

  return ret;
 800f594:	7bfb      	ldrb	r3, [r7, #15]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
	...

0800f5a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	885b      	ldrh	r3, [r3, #2]
 800f5ba:	0a1b      	lsrs	r3, r3, #8
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	2b0e      	cmp	r3, #14
 800f5c2:	f200 8152 	bhi.w	800f86a <USBD_GetDescriptor+0x2ca>
 800f5c6:	a201      	add	r2, pc, #4	; (adr r2, 800f5cc <USBD_GetDescriptor+0x2c>)
 800f5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5cc:	0800f63d 	.word	0x0800f63d
 800f5d0:	0800f655 	.word	0x0800f655
 800f5d4:	0800f695 	.word	0x0800f695
 800f5d8:	0800f86b 	.word	0x0800f86b
 800f5dc:	0800f86b 	.word	0x0800f86b
 800f5e0:	0800f80b 	.word	0x0800f80b
 800f5e4:	0800f837 	.word	0x0800f837
 800f5e8:	0800f86b 	.word	0x0800f86b
 800f5ec:	0800f86b 	.word	0x0800f86b
 800f5f0:	0800f86b 	.word	0x0800f86b
 800f5f4:	0800f86b 	.word	0x0800f86b
 800f5f8:	0800f86b 	.word	0x0800f86b
 800f5fc:	0800f86b 	.word	0x0800f86b
 800f600:	0800f86b 	.word	0x0800f86b
 800f604:	0800f609 	.word	0x0800f609
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f60e:	69db      	ldr	r3, [r3, #28]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00b      	beq.n	800f62c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f61a:	69db      	ldr	r3, [r3, #28]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	7c12      	ldrb	r2, [r2, #16]
 800f620:	f107 0108 	add.w	r1, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f62a:	e126      	b.n	800f87a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fb0e 	bl	800fc50 <USBD_CtlError>
        err++;
 800f634:	7afb      	ldrb	r3, [r7, #11]
 800f636:	3301      	adds	r3, #1
 800f638:	72fb      	strb	r3, [r7, #11]
      break;
 800f63a:	e11e      	b.n	800f87a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	7c12      	ldrb	r2, [r2, #16]
 800f648:	f107 0108 	add.w	r1, r7, #8
 800f64c:	4610      	mov	r0, r2
 800f64e:	4798      	blx	r3
 800f650:	60f8      	str	r0, [r7, #12]
      break;
 800f652:	e112      	b.n	800f87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	7c1b      	ldrb	r3, [r3, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10d      	bne.n	800f678 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f664:	f107 0208 	add.w	r2, r7, #8
 800f668:	4610      	mov	r0, r2
 800f66a:	4798      	blx	r3
 800f66c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3301      	adds	r3, #1
 800f672:	2202      	movs	r2, #2
 800f674:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f676:	e100      	b.n	800f87a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f680:	f107 0208 	add.w	r2, r7, #8
 800f684:	4610      	mov	r0, r2
 800f686:	4798      	blx	r3
 800f688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	3301      	adds	r3, #1
 800f68e:	2202      	movs	r2, #2
 800f690:	701a      	strb	r2, [r3, #0]
      break;
 800f692:	e0f2      	b.n	800f87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	885b      	ldrh	r3, [r3, #2]
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b05      	cmp	r3, #5
 800f69c:	f200 80ac 	bhi.w	800f7f8 <USBD_GetDescriptor+0x258>
 800f6a0:	a201      	add	r2, pc, #4	; (adr r2, 800f6a8 <USBD_GetDescriptor+0x108>)
 800f6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a6:	bf00      	nop
 800f6a8:	0800f6c1 	.word	0x0800f6c1
 800f6ac:	0800f6f5 	.word	0x0800f6f5
 800f6b0:	0800f729 	.word	0x0800f729
 800f6b4:	0800f75d 	.word	0x0800f75d
 800f6b8:	0800f791 	.word	0x0800f791
 800f6bc:	0800f7c5 	.word	0x0800f7c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00b      	beq.n	800f6e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	7c12      	ldrb	r2, [r2, #16]
 800f6d8:	f107 0108 	add.w	r1, r7, #8
 800f6dc:	4610      	mov	r0, r2
 800f6de:	4798      	blx	r3
 800f6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6e2:	e091      	b.n	800f808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fab2 	bl	800fc50 <USBD_CtlError>
            err++;
 800f6ec:	7afb      	ldrb	r3, [r7, #11]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6f2:	e089      	b.n	800f808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00b      	beq.n	800f718 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	7c12      	ldrb	r2, [r2, #16]
 800f70c:	f107 0108 	add.w	r1, r7, #8
 800f710:	4610      	mov	r0, r2
 800f712:	4798      	blx	r3
 800f714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f716:	e077      	b.n	800f808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fa98 	bl	800fc50 <USBD_CtlError>
            err++;
 800f720:	7afb      	ldrb	r3, [r7, #11]
 800f722:	3301      	adds	r3, #1
 800f724:	72fb      	strb	r3, [r7, #11]
          break;
 800f726:	e06f      	b.n	800f808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	7c12      	ldrb	r2, [r2, #16]
 800f740:	f107 0108 	add.w	r1, r7, #8
 800f744:	4610      	mov	r0, r2
 800f746:	4798      	blx	r3
 800f748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74a:	e05d      	b.n	800f808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fa7e 	bl	800fc50 <USBD_CtlError>
            err++;
 800f754:	7afb      	ldrb	r3, [r7, #11]
 800f756:	3301      	adds	r3, #1
 800f758:	72fb      	strb	r3, [r7, #11]
          break;
 800f75a:	e055      	b.n	800f808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	7c12      	ldrb	r2, [r2, #16]
 800f774:	f107 0108 	add.w	r1, r7, #8
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f77e:	e043      	b.n	800f808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fa64 	bl	800fc50 <USBD_CtlError>
            err++;
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	3301      	adds	r3, #1
 800f78c:	72fb      	strb	r3, [r7, #11]
          break;
 800f78e:	e03b      	b.n	800f808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	7c12      	ldrb	r2, [r2, #16]
 800f7a8:	f107 0108 	add.w	r1, r7, #8
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	4798      	blx	r3
 800f7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7b2:	e029      	b.n	800f808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa4a 	bl	800fc50 <USBD_CtlError>
            err++;
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7c2:	e021      	b.n	800f808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	7c12      	ldrb	r2, [r2, #16]
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7e6:	e00f      	b.n	800f808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa30 	bl	800fc50 <USBD_CtlError>
            err++;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7f6:	e007      	b.n	800f808 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7f8:	6839      	ldr	r1, [r7, #0]
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fa28 	bl	800fc50 <USBD_CtlError>
          err++;
 800f800:	7afb      	ldrb	r3, [r7, #11]
 800f802:	3301      	adds	r3, #1
 800f804:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f806:	bf00      	nop
      }
      break;
 800f808:	e037      	b.n	800f87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	7c1b      	ldrb	r3, [r3, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d109      	bne.n	800f826 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f81a:	f107 0208 	add.w	r2, r7, #8
 800f81e:	4610      	mov	r0, r2
 800f820:	4798      	blx	r3
 800f822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f824:	e029      	b.n	800f87a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fa11 	bl	800fc50 <USBD_CtlError>
        err++;
 800f82e:	7afb      	ldrb	r3, [r7, #11]
 800f830:	3301      	adds	r3, #1
 800f832:	72fb      	strb	r3, [r7, #11]
      break;
 800f834:	e021      	b.n	800f87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	7c1b      	ldrb	r3, [r3, #16]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d10d      	bne.n	800f85a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f846:	f107 0208 	add.w	r2, r7, #8
 800f84a:	4610      	mov	r0, r2
 800f84c:	4798      	blx	r3
 800f84e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	3301      	adds	r3, #1
 800f854:	2207      	movs	r2, #7
 800f856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f858:	e00f      	b.n	800f87a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f85a:	6839      	ldr	r1, [r7, #0]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f9f7 	bl	800fc50 <USBD_CtlError>
        err++;
 800f862:	7afb      	ldrb	r3, [r7, #11]
 800f864:	3301      	adds	r3, #1
 800f866:	72fb      	strb	r3, [r7, #11]
      break;
 800f868:	e007      	b.n	800f87a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f86a:	6839      	ldr	r1, [r7, #0]
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f9ef 	bl	800fc50 <USBD_CtlError>
      err++;
 800f872:	7afb      	ldrb	r3, [r7, #11]
 800f874:	3301      	adds	r3, #1
 800f876:	72fb      	strb	r3, [r7, #11]
      break;
 800f878:	bf00      	nop
  }

  if (err != 0U)
 800f87a:	7afb      	ldrb	r3, [r7, #11]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d11e      	bne.n	800f8be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	88db      	ldrh	r3, [r3, #6]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d016      	beq.n	800f8b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f888:	893b      	ldrh	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00e      	beq.n	800f8ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	88da      	ldrh	r2, [r3, #6]
 800f892:	893b      	ldrh	r3, [r7, #8]
 800f894:	4293      	cmp	r3, r2
 800f896:	bf28      	it	cs
 800f898:	4613      	movcs	r3, r2
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f89e:	893b      	ldrh	r3, [r7, #8]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68f9      	ldr	r1, [r7, #12]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 fa44 	bl	800fd32 <USBD_CtlSendData>
 800f8aa:	e009      	b.n	800f8c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f8ac:	6839      	ldr	r1, [r7, #0]
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f9ce 	bl	800fc50 <USBD_CtlError>
 800f8b4:	e004      	b.n	800f8c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 fa95 	bl	800fde6 <USBD_CtlSendStatus>
 800f8bc:	e000      	b.n	800f8c0 <USBD_GetDescriptor+0x320>
    return;
 800f8be:	bf00      	nop
  }
}
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop

0800f8c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	889b      	ldrh	r3, [r3, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d131      	bne.n	800f93e <USBD_SetAddress+0x76>
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	88db      	ldrh	r3, [r3, #6]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d12d      	bne.n	800f93e <USBD_SetAddress+0x76>
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	885b      	ldrh	r3, [r3, #2]
 800f8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800f8e8:	d829      	bhi.n	800f93e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	885b      	ldrh	r3, [r3, #2]
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	d104      	bne.n	800f90c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f902:	6839      	ldr	r1, [r7, #0]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f9a3 	bl	800fc50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f90a:	e01d      	b.n	800f948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	7bfa      	ldrb	r2, [r7, #15]
 800f910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f914:	7bfb      	ldrb	r3, [r7, #15]
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 ff77 	bl	801080c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fa61 	bl	800fde6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f924:	7bfb      	ldrb	r3, [r7, #15]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d004      	beq.n	800f934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2202      	movs	r2, #2
 800f92e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f932:	e009      	b.n	800f948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f93c:	e004      	b.n	800f948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f93e:	6839      	ldr	r1, [r7, #0]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 f985 	bl	800fc50 <USBD_CtlError>
  }
}
 800f946:	bf00      	nop
 800f948:	bf00      	nop
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	885b      	ldrh	r3, [r3, #2]
 800f962:	b2da      	uxtb	r2, r3
 800f964:	4b4c      	ldr	r3, [pc, #304]	; (800fa98 <USBD_SetConfig+0x148>)
 800f966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f968:	4b4b      	ldr	r3, [pc, #300]	; (800fa98 <USBD_SetConfig+0x148>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d905      	bls.n	800f97c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f96c 	bl	800fc50 <USBD_CtlError>
    return USBD_FAIL;
 800f978:	2303      	movs	r3, #3
 800f97a:	e088      	b.n	800fa8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f982:	b2db      	uxtb	r3, r3
 800f984:	2b02      	cmp	r3, #2
 800f986:	d002      	beq.n	800f98e <USBD_SetConfig+0x3e>
 800f988:	2b03      	cmp	r3, #3
 800f98a:	d025      	beq.n	800f9d8 <USBD_SetConfig+0x88>
 800f98c:	e071      	b.n	800fa72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f98e:	4b42      	ldr	r3, [pc, #264]	; (800fa98 <USBD_SetConfig+0x148>)
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d01c      	beq.n	800f9d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f996:	4b40      	ldr	r3, [pc, #256]	; (800fa98 <USBD_SetConfig+0x148>)
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	461a      	mov	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9a0:	4b3d      	ldr	r3, [pc, #244]	; (800fa98 <USBD_SetConfig+0x148>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff f91e 	bl	800ebe8 <USBD_SetClassConfig>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d004      	beq.n	800f9c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f949 	bl	800fc50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9be:	e065      	b.n	800fa8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fa10 	bl	800fde6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2203      	movs	r2, #3
 800f9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f9ce:	e05d      	b.n	800fa8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 fa08 	bl	800fde6 <USBD_CtlSendStatus>
      break;
 800f9d6:	e059      	b.n	800fa8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9d8:	4b2f      	ldr	r3, [pc, #188]	; (800fa98 <USBD_SetConfig+0x148>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d112      	bne.n	800fa06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f9e8:	4b2b      	ldr	r3, [pc, #172]	; (800fa98 <USBD_SetConfig+0x148>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9f2:	4b29      	ldr	r3, [pc, #164]	; (800fa98 <USBD_SetConfig+0x148>)
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff f911 	bl	800ec20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 f9f1 	bl	800fde6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa04:	e042      	b.n	800fa8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fa06:	4b24      	ldr	r3, [pc, #144]	; (800fa98 <USBD_SetConfig+0x148>)
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d02a      	beq.n	800fa6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f7ff f8ff 	bl	800ec20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa22:	4b1d      	ldr	r3, [pc, #116]	; (800fa98 <USBD_SetConfig+0x148>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa2c:	4b1a      	ldr	r3, [pc, #104]	; (800fa98 <USBD_SetConfig+0x148>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f7ff f8d8 	bl	800ebe8 <USBD_SetClassConfig>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00f      	beq.n	800fa62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f903 	bl	800fc50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	4619      	mov	r1, r3
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7ff f8e4 	bl	800ec20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2202      	movs	r2, #2
 800fa5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa60:	e014      	b.n	800fa8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f9bf 	bl	800fde6 <USBD_CtlSendStatus>
      break;
 800fa68:	e010      	b.n	800fa8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 f9bb 	bl	800fde6 <USBD_CtlSendStatus>
      break;
 800fa70:	e00c      	b.n	800fa8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f8eb 	bl	800fc50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa7a:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <USBD_SetConfig+0x148>)
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	4619      	mov	r1, r3
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7ff f8cd 	bl	800ec20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa86:	2303      	movs	r3, #3
 800fa88:	73fb      	strb	r3, [r7, #15]
      break;
 800fa8a:	bf00      	nop
  }

  return ret;
 800fa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	20000214 	.word	0x20000214

0800fa9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	88db      	ldrh	r3, [r3, #6]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d004      	beq.n	800fab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800faae:	6839      	ldr	r1, [r7, #0]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f8cd 	bl	800fc50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fab6:	e023      	b.n	800fb00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	dc02      	bgt.n	800faca <USBD_GetConfig+0x2e>
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dc03      	bgt.n	800fad0 <USBD_GetConfig+0x34>
 800fac8:	e015      	b.n	800faf6 <USBD_GetConfig+0x5a>
 800faca:	2b03      	cmp	r3, #3
 800facc:	d00b      	beq.n	800fae6 <USBD_GetConfig+0x4a>
 800face:	e012      	b.n	800faf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	3308      	adds	r3, #8
 800fada:	2201      	movs	r2, #1
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 f927 	bl	800fd32 <USBD_CtlSendData>
        break;
 800fae4:	e00c      	b.n	800fb00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	3304      	adds	r3, #4
 800faea:	2201      	movs	r2, #1
 800faec:	4619      	mov	r1, r3
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 f91f 	bl	800fd32 <USBD_CtlSendData>
        break;
 800faf4:	e004      	b.n	800fb00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800faf6:	6839      	ldr	r1, [r7, #0]
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f000 f8a9 	bl	800fc50 <USBD_CtlError>
        break;
 800fafe:	bf00      	nop
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	d81e      	bhi.n	800fb5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	88db      	ldrh	r3, [r3, #6]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d004      	beq.n	800fb32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb28:	6839      	ldr	r1, [r7, #0]
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 f890 	bl	800fc50 <USBD_CtlError>
        break;
 800fb30:	e01a      	b.n	800fb68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d005      	beq.n	800fb4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	f043 0202 	orr.w	r2, r3, #2
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	330c      	adds	r3, #12
 800fb52:	2202      	movs	r2, #2
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 f8eb 	bl	800fd32 <USBD_CtlSendData>
      break;
 800fb5c:	e004      	b.n	800fb68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f875 	bl	800fc50 <USBD_CtlError>
      break;
 800fb66:	bf00      	nop
  }
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	885b      	ldrh	r3, [r3, #2]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d106      	bne.n	800fb90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2201      	movs	r2, #1
 800fb86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f92b 	bl	800fde6 <USBD_CtlSendStatus>
  }
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d80b      	bhi.n	800fbc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	885b      	ldrh	r3, [r3, #2]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d10c      	bne.n	800fbd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 f910 	bl	800fde6 <USBD_CtlSendStatus>
      }
      break;
 800fbc6:	e004      	b.n	800fbd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f840 	bl	800fc50 <USBD_CtlError>
      break;
 800fbd0:	e000      	b.n	800fbd4 <USBD_ClrFeature+0x3c>
      break;
 800fbd2:	bf00      	nop
  }
}
 800fbd4:	bf00      	nop
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	781a      	ldrb	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	781a      	ldrb	r2, [r3, #0]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7ff fa91 	bl	800f12e <SWAPBYTE>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	461a      	mov	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3301      	adds	r3, #1
 800fc18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f7ff fa84 	bl	800f12e <SWAPBYTE>
 800fc26:	4603      	mov	r3, r0
 800fc28:	461a      	mov	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	3301      	adds	r3, #1
 800fc32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	3301      	adds	r3, #1
 800fc38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f7ff fa77 	bl	800f12e <SWAPBYTE>
 800fc40:	4603      	mov	r3, r0
 800fc42:	461a      	mov	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	80da      	strh	r2, [r3, #6]
}
 800fc48:	bf00      	nop
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc5a:	2180      	movs	r1, #128	; 0x80
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fd6b 	bl	8010738 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc62:	2100      	movs	r1, #0
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 fd67 	bl	8010738 <USBD_LL_StallEP>
}
 800fc6a:	bf00      	nop
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b086      	sub	sp, #24
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60f8      	str	r0, [r7, #12]
 800fc7a:	60b9      	str	r1, [r7, #8]
 800fc7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d036      	beq.n	800fcf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc8c:	6938      	ldr	r0, [r7, #16]
 800fc8e:	f000 f836 	bl	800fcfe <USBD_GetLen>
 800fc92:	4603      	mov	r3, r0
 800fc94:	3301      	adds	r3, #1
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fca0:	7dfb      	ldrb	r3, [r7, #23]
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	4413      	add	r3, r2
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	7812      	ldrb	r2, [r2, #0]
 800fcaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcac:	7dfb      	ldrb	r3, [r7, #23]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fcb2:	7dfb      	ldrb	r3, [r7, #23]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	2203      	movs	r2, #3
 800fcba:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcbc:	7dfb      	ldrb	r3, [r7, #23]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcc2:	e013      	b.n	800fcec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	4413      	add	r3, r2
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	7812      	ldrb	r2, [r2, #0]
 800fcce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	613b      	str	r3, [r7, #16]
    idx++;
 800fcd6:	7dfb      	ldrb	r3, [r7, #23]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	4413      	add	r3, r2
 800fce2:	2200      	movs	r2, #0
 800fce4:	701a      	strb	r2, [r3, #0]
    idx++;
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	3301      	adds	r3, #1
 800fcea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1e7      	bne.n	800fcc4 <USBD_GetString+0x52>
 800fcf4:	e000      	b.n	800fcf8 <USBD_GetString+0x86>
    return;
 800fcf6:	bf00      	nop
  }
}
 800fcf8:	3718      	adds	r7, #24
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcfe:	b480      	push	{r7}
 800fd00:	b085      	sub	sp, #20
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd06:	2300      	movs	r3, #0
 800fd08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd0e:	e005      	b.n	800fd1c <USBD_GetLen+0x1e>
  {
    len++;
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
 800fd12:	3301      	adds	r3, #1
 800fd14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d1f5      	bne.n	800fd10 <USBD_GetLen+0x12>
  }

  return len;
 800fd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b084      	sub	sp, #16
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	60b9      	str	r1, [r7, #8]
 800fd3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2202      	movs	r2, #2
 800fd42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68ba      	ldr	r2, [r7, #8]
 800fd56:	2100      	movs	r1, #0
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f000 fd76 	bl	801084a <USBD_LL_Transmit>

  return USBD_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3710      	adds	r7, #16
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68ba      	ldr	r2, [r7, #8]
 800fd78:	2100      	movs	r1, #0
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f000 fd65 	bl	801084a <USBD_LL_Transmit>

  return USBD_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	60f8      	str	r0, [r7, #12]
 800fd92:	60b9      	str	r1, [r7, #8]
 800fd94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2203      	movs	r2, #3
 800fd9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f000 fd69 	bl	801088c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f000 fd58 	bl	801088c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2204      	movs	r2, #4
 800fdf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 fd24 	bl	801084a <USBD_LL_Transmit>

  return USBD_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2205      	movs	r2, #5
 800fe18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	2200      	movs	r2, #0
 800fe20:	2100      	movs	r1, #0
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fd32 	bl	801088c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe28:	2300      	movs	r3, #0
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
	...

0800fe34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4912      	ldr	r1, [pc, #72]	; (800fe84 <MX_USB_DEVICE_Init+0x50>)
 800fe3c:	4812      	ldr	r0, [pc, #72]	; (800fe88 <MX_USB_DEVICE_Init+0x54>)
 800fe3e:	f7fe fe65 	bl	800eb0c <USBD_Init>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fe48:	f7f1 faa8 	bl	800139c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fe4c:	490f      	ldr	r1, [pc, #60]	; (800fe8c <MX_USB_DEVICE_Init+0x58>)
 800fe4e:	480e      	ldr	r0, [pc, #56]	; (800fe88 <MX_USB_DEVICE_Init+0x54>)
 800fe50:	f7fe fe8c 	bl	800eb6c <USBD_RegisterClass>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d001      	beq.n	800fe5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fe5a:	f7f1 fa9f 	bl	800139c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fe5e:	490c      	ldr	r1, [pc, #48]	; (800fe90 <MX_USB_DEVICE_Init+0x5c>)
 800fe60:	4809      	ldr	r0, [pc, #36]	; (800fe88 <MX_USB_DEVICE_Init+0x54>)
 800fe62:	f7fe fdad 	bl	800e9c0 <USBD_CDC_RegisterInterface>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fe6c:	f7f1 fa96 	bl	800139c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe70:	4805      	ldr	r0, [pc, #20]	; (800fe88 <MX_USB_DEVICE_Init+0x54>)
 800fe72:	f7fe fea2 	bl	800ebba <USBD_Start>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe7c:	f7f1 fa8e 	bl	800139c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe80:	bf00      	nop
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20000130 	.word	0x20000130
 800fe88:	2000131c 	.word	0x2000131c
 800fe8c:	20000018 	.word	0x20000018
 800fe90:	2000011c 	.word	0x2000011c

0800fe94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4905      	ldr	r1, [pc, #20]	; (800feb0 <CDC_Init_FS+0x1c>)
 800fe9c:	4805      	ldr	r0, [pc, #20]	; (800feb4 <CDC_Init_FS+0x20>)
 800fe9e:	f7fe fda4 	bl	800e9ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fea2:	4905      	ldr	r1, [pc, #20]	; (800feb8 <CDC_Init_FS+0x24>)
 800fea4:	4803      	ldr	r0, [pc, #12]	; (800feb4 <CDC_Init_FS+0x20>)
 800fea6:	f7fe fdbe 	bl	800ea26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800feaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800feac:	4618      	mov	r0, r3
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	20001dec 	.word	0x20001dec
 800feb4:	2000131c 	.word	0x2000131c
 800feb8:	200015ec 	.word	0x200015ec

0800febc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800febc:	b480      	push	{r7}
 800febe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	4603      	mov	r3, r0
 800fed4:	6039      	str	r1, [r7, #0]
 800fed6:	71fb      	strb	r3, [r7, #7]
 800fed8:	4613      	mov	r3, r2
 800feda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	2b23      	cmp	r3, #35	; 0x23
 800fee0:	f200 808c 	bhi.w	800fffc <CDC_Control_FS+0x130>
 800fee4:	a201      	add	r2, pc, #4	; (adr r2, 800feec <CDC_Control_FS+0x20>)
 800fee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feea:	bf00      	nop
 800feec:	0800fffd 	.word	0x0800fffd
 800fef0:	0800fffd 	.word	0x0800fffd
 800fef4:	0800fffd 	.word	0x0800fffd
 800fef8:	0800fffd 	.word	0x0800fffd
 800fefc:	0800fffd 	.word	0x0800fffd
 800ff00:	0800fffd 	.word	0x0800fffd
 800ff04:	0800fffd 	.word	0x0800fffd
 800ff08:	0800fffd 	.word	0x0800fffd
 800ff0c:	0800fffd 	.word	0x0800fffd
 800ff10:	0800fffd 	.word	0x0800fffd
 800ff14:	0800fffd 	.word	0x0800fffd
 800ff18:	0800fffd 	.word	0x0800fffd
 800ff1c:	0800fffd 	.word	0x0800fffd
 800ff20:	0800fffd 	.word	0x0800fffd
 800ff24:	0800fffd 	.word	0x0800fffd
 800ff28:	0800fffd 	.word	0x0800fffd
 800ff2c:	0800fffd 	.word	0x0800fffd
 800ff30:	0800fffd 	.word	0x0800fffd
 800ff34:	0800fffd 	.word	0x0800fffd
 800ff38:	0800fffd 	.word	0x0800fffd
 800ff3c:	0800fffd 	.word	0x0800fffd
 800ff40:	0800fffd 	.word	0x0800fffd
 800ff44:	0800fffd 	.word	0x0800fffd
 800ff48:	0800fffd 	.word	0x0800fffd
 800ff4c:	0800fffd 	.word	0x0800fffd
 800ff50:	0800fffd 	.word	0x0800fffd
 800ff54:	0800fffd 	.word	0x0800fffd
 800ff58:	0800fffd 	.word	0x0800fffd
 800ff5c:	0800fffd 	.word	0x0800fffd
 800ff60:	0800fffd 	.word	0x0800fffd
 800ff64:	0800fffd 	.word	0x0800fffd
 800ff68:	0800fffd 	.word	0x0800fffd
 800ff6c:	0800ff7d 	.word	0x0800ff7d
 800ff70:	0800ffb7 	.word	0x0800ffb7
 800ff74:	0800fffd 	.word	0x0800fffd
 800ff78:	0800fffd 	.word	0x0800fffd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	USB_VCP_Parameters[0] = pbuf[0];
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	781a      	ldrb	r2, [r3, #0]
 800ff80:	4b22      	ldr	r3, [pc, #136]	; (801000c <CDC_Control_FS+0x140>)
 800ff82:	701a      	strb	r2, [r3, #0]
    	USB_VCP_Parameters[1] = pbuf[1];
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	785a      	ldrb	r2, [r3, #1]
 800ff88:	4b20      	ldr	r3, [pc, #128]	; (801000c <CDC_Control_FS+0x140>)
 800ff8a:	705a      	strb	r2, [r3, #1]
    	USB_VCP_Parameters[2] = pbuf[2];
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	789a      	ldrb	r2, [r3, #2]
 800ff90:	4b1e      	ldr	r3, [pc, #120]	; (801000c <CDC_Control_FS+0x140>)
 800ff92:	709a      	strb	r2, [r3, #2]
    	USB_VCP_Parameters[3] = pbuf[3];
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	78da      	ldrb	r2, [r3, #3]
 800ff98:	4b1c      	ldr	r3, [pc, #112]	; (801000c <CDC_Control_FS+0x140>)
 800ff9a:	70da      	strb	r2, [r3, #3]
    	USB_VCP_Parameters[4] = pbuf[4];
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	791a      	ldrb	r2, [r3, #4]
 800ffa0:	4b1a      	ldr	r3, [pc, #104]	; (801000c <CDC_Control_FS+0x140>)
 800ffa2:	711a      	strb	r2, [r3, #4]
    	USB_VCP_Parameters[5] = pbuf[5];
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	795a      	ldrb	r2, [r3, #5]
 800ffa8:	4b18      	ldr	r3, [pc, #96]	; (801000c <CDC_Control_FS+0x140>)
 800ffaa:	715a      	strb	r2, [r3, #5]
    	USB_VCP_Parameters[6] = pbuf[6];
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	799a      	ldrb	r2, [r3, #6]
 800ffb0:	4b16      	ldr	r3, [pc, #88]	; (801000c <CDC_Control_FS+0x140>)
 800ffb2:	719a      	strb	r2, [r3, #6]
    break;
 800ffb4:	e023      	b.n	800fffe <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = USB_VCP_Parameters[0];
 800ffb6:	4b15      	ldr	r3, [pc, #84]	; (801000c <CDC_Control_FS+0x140>)
 800ffb8:	781a      	ldrb	r2, [r3, #0]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = USB_VCP_Parameters[1];
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	4a12      	ldr	r2, [pc, #72]	; (801000c <CDC_Control_FS+0x140>)
 800ffc4:	7852      	ldrb	r2, [r2, #1]
 800ffc6:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = USB_VCP_Parameters[2];
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	3302      	adds	r3, #2
 800ffcc:	4a0f      	ldr	r2, [pc, #60]	; (801000c <CDC_Control_FS+0x140>)
 800ffce:	7892      	ldrb	r2, [r2, #2]
 800ffd0:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = USB_VCP_Parameters[3];
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	3303      	adds	r3, #3
 800ffd6:	4a0d      	ldr	r2, [pc, #52]	; (801000c <CDC_Control_FS+0x140>)
 800ffd8:	78d2      	ldrb	r2, [r2, #3]
 800ffda:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = USB_VCP_Parameters[4];
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	3304      	adds	r3, #4
 800ffe0:	4a0a      	ldr	r2, [pc, #40]	; (801000c <CDC_Control_FS+0x140>)
 800ffe2:	7912      	ldrb	r2, [r2, #4]
 800ffe4:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = USB_VCP_Parameters[5];
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	3305      	adds	r3, #5
 800ffea:	4a08      	ldr	r2, [pc, #32]	; (801000c <CDC_Control_FS+0x140>)
 800ffec:	7952      	ldrb	r2, [r2, #5]
 800ffee:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = USB_VCP_Parameters[6];
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	3306      	adds	r3, #6
 800fff4:	4a05      	ldr	r2, [pc, #20]	; (801000c <CDC_Control_FS+0x140>)
 800fff6:	7992      	ldrb	r2, [r2, #6]
 800fff8:	701a      	strb	r2, [r3, #0]
    break;
 800fffa:	e000      	b.n	800fffe <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fffc:	bf00      	nop
  }

  return (USBD_OK);
 800fffe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010000:	4618      	mov	r0, r3
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	20000440 	.word	0x20000440

08010010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801001a:	6879      	ldr	r1, [r7, #4]
 801001c:	4808      	ldr	r0, [pc, #32]	; (8010040 <CDC_Receive_FS+0x30>)
 801001e:	f7fe fd02 	bl	800ea26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010022:	4807      	ldr	r0, [pc, #28]	; (8010040 <CDC_Receive_FS+0x30>)
 8010024:	f7fe fd48 	bl	800eab8 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4619      	mov	r1, r3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7f2 faa9 	bl	8002588 <PDM_USB_Process>

  return (USBD_OK);
 8010036:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	2000131c 	.word	0x2000131c

08010044 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	460b      	mov	r3, r1
 801004e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010054:	4b0d      	ldr	r3, [pc, #52]	; (801008c <CDC_Transmit_FS+0x48>)
 8010056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801005a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010066:	2301      	movs	r3, #1
 8010068:	e00b      	b.n	8010082 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801006a:	887b      	ldrh	r3, [r7, #2]
 801006c:	461a      	mov	r2, r3
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	4806      	ldr	r0, [pc, #24]	; (801008c <CDC_Transmit_FS+0x48>)
 8010072:	f7fe fcba 	bl	800e9ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010076:	4805      	ldr	r0, [pc, #20]	; (801008c <CDC_Transmit_FS+0x48>)
 8010078:	f7fe fcee 	bl	800ea58 <USBD_CDC_TransmitPacket>
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	2000131c 	.word	0x2000131c

08010090 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010090:	b480      	push	{r7}
 8010092:	b087      	sub	sp, #28
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	4613      	mov	r3, r2
 801009c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801009e:	2300      	movs	r3, #0
 80100a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	371c      	adds	r7, #28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
	...

080100b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b083      	sub	sp, #12
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	4603      	mov	r3, r0
 80100bc:	6039      	str	r1, [r7, #0]
 80100be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	2212      	movs	r2, #18
 80100c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100c6:	4b03      	ldr	r3, [pc, #12]	; (80100d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr
 80100d4:	20000150 	.word	0x20000150

080100d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	4603      	mov	r3, r0
 80100e0:	6039      	str	r1, [r7, #0]
 80100e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	2204      	movs	r2, #4
 80100e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100ea:	4b03      	ldr	r3, [pc, #12]	; (80100f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	20000170 	.word	0x20000170

080100fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	4603      	mov	r3, r0
 8010104:	6039      	str	r1, [r7, #0]
 8010106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010108:	79fb      	ldrb	r3, [r7, #7]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d105      	bne.n	801011a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	4907      	ldr	r1, [pc, #28]	; (8010130 <USBD_FS_ProductStrDescriptor+0x34>)
 8010112:	4808      	ldr	r0, [pc, #32]	; (8010134 <USBD_FS_ProductStrDescriptor+0x38>)
 8010114:	f7ff fdad 	bl	800fc72 <USBD_GetString>
 8010118:	e004      	b.n	8010124 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	4904      	ldr	r1, [pc, #16]	; (8010130 <USBD_FS_ProductStrDescriptor+0x34>)
 801011e:	4805      	ldr	r0, [pc, #20]	; (8010134 <USBD_FS_ProductStrDescriptor+0x38>)
 8010120:	f7ff fda7 	bl	800fc72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010124:	4b02      	ldr	r3, [pc, #8]	; (8010130 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010126:	4618      	mov	r0, r3
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	200025ec 	.word	0x200025ec
 8010134:	08010c44 	.word	0x08010c44

08010138 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	4603      	mov	r3, r0
 8010140:	6039      	str	r1, [r7, #0]
 8010142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010144:	683a      	ldr	r2, [r7, #0]
 8010146:	4904      	ldr	r1, [pc, #16]	; (8010158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010148:	4804      	ldr	r0, [pc, #16]	; (801015c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801014a:	f7ff fd92 	bl	800fc72 <USBD_GetString>
  return USBD_StrDesc;
 801014e:	4b02      	ldr	r3, [pc, #8]	; (8010158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010150:	4618      	mov	r0, r3
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	200025ec 	.word	0x200025ec
 801015c:	08010c5c 	.word	0x08010c5c

08010160 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	4603      	mov	r3, r0
 8010168:	6039      	str	r1, [r7, #0]
 801016a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	221a      	movs	r2, #26
 8010170:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010172:	f000 f855 	bl	8010220 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010176:	4b02      	ldr	r3, [pc, #8]	; (8010180 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010178:	4618      	mov	r0, r3
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	20000174 	.word	0x20000174

08010184 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	4603      	mov	r3, r0
 801018c:	6039      	str	r1, [r7, #0]
 801018e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010190:	79fb      	ldrb	r3, [r7, #7]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d105      	bne.n	80101a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010196:	683a      	ldr	r2, [r7, #0]
 8010198:	4907      	ldr	r1, [pc, #28]	; (80101b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801019a:	4808      	ldr	r0, [pc, #32]	; (80101bc <USBD_FS_ConfigStrDescriptor+0x38>)
 801019c:	f7ff fd69 	bl	800fc72 <USBD_GetString>
 80101a0:	e004      	b.n	80101ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101a2:	683a      	ldr	r2, [r7, #0]
 80101a4:	4904      	ldr	r1, [pc, #16]	; (80101b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101a6:	4805      	ldr	r0, [pc, #20]	; (80101bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80101a8:	f7ff fd63 	bl	800fc72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101ac:	4b02      	ldr	r3, [pc, #8]	; (80101b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	200025ec 	.word	0x200025ec
 80101bc:	08010c70 	.word	0x08010c70

080101c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	4603      	mov	r3, r0
 80101c8:	6039      	str	r1, [r7, #0]
 80101ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d105      	bne.n	80101de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	4907      	ldr	r1, [pc, #28]	; (80101f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101d6:	4808      	ldr	r0, [pc, #32]	; (80101f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101d8:	f7ff fd4b 	bl	800fc72 <USBD_GetString>
 80101dc:	e004      	b.n	80101e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101de:	683a      	ldr	r2, [r7, #0]
 80101e0:	4904      	ldr	r1, [pc, #16]	; (80101f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101e2:	4805      	ldr	r0, [pc, #20]	; (80101f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101e4:	f7ff fd45 	bl	800fc72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101e8:	4b02      	ldr	r3, [pc, #8]	; (80101f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	200025ec 	.word	0x200025ec
 80101f8:	08010c7c 	.word	0x08010c7c

080101fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	220c      	movs	r2, #12
 801020c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801020e:	4b03      	ldr	r3, [pc, #12]	; (801021c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010210:	4618      	mov	r0, r3
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	20000164 	.word	0x20000164

08010220 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b084      	sub	sp, #16
 8010224:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010226:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <Get_SerialNum+0x44>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801022c:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <Get_SerialNum+0x48>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010232:	4b0e      	ldr	r3, [pc, #56]	; (801026c <Get_SerialNum+0x4c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4413      	add	r3, r2
 801023e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d009      	beq.n	801025a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010246:	2208      	movs	r2, #8
 8010248:	4909      	ldr	r1, [pc, #36]	; (8010270 <Get_SerialNum+0x50>)
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f000 f814 	bl	8010278 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010250:	2204      	movs	r2, #4
 8010252:	4908      	ldr	r1, [pc, #32]	; (8010274 <Get_SerialNum+0x54>)
 8010254:	68b8      	ldr	r0, [r7, #8]
 8010256:	f000 f80f 	bl	8010278 <IntToUnicode>
  }
}
 801025a:	bf00      	nop
 801025c:	3710      	adds	r7, #16
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	1fff7a10 	.word	0x1fff7a10
 8010268:	1fff7a14 	.word	0x1fff7a14
 801026c:	1fff7a18 	.word	0x1fff7a18
 8010270:	20000176 	.word	0x20000176
 8010274:	20000186 	.word	0x20000186

08010278 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010278:	b480      	push	{r7}
 801027a:	b087      	sub	sp, #28
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	4613      	mov	r3, r2
 8010284:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801028a:	2300      	movs	r3, #0
 801028c:	75fb      	strb	r3, [r7, #23]
 801028e:	e027      	b.n	80102e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	0f1b      	lsrs	r3, r3, #28
 8010294:	2b09      	cmp	r3, #9
 8010296:	d80b      	bhi.n	80102b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	0f1b      	lsrs	r3, r3, #28
 801029c:	b2da      	uxtb	r2, r3
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	005b      	lsls	r3, r3, #1
 80102a2:	4619      	mov	r1, r3
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	440b      	add	r3, r1
 80102a8:	3230      	adds	r2, #48	; 0x30
 80102aa:	b2d2      	uxtb	r2, r2
 80102ac:	701a      	strb	r2, [r3, #0]
 80102ae:	e00a      	b.n	80102c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	0f1b      	lsrs	r3, r3, #28
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	4619      	mov	r1, r3
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	440b      	add	r3, r1
 80102c0:	3237      	adds	r2, #55	; 0x37
 80102c2:	b2d2      	uxtb	r2, r2
 80102c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	011b      	lsls	r3, r3, #4
 80102ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	005b      	lsls	r3, r3, #1
 80102d0:	3301      	adds	r3, #1
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	4413      	add	r3, r2
 80102d6:	2200      	movs	r2, #0
 80102d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102da:	7dfb      	ldrb	r3, [r7, #23]
 80102dc:	3301      	adds	r3, #1
 80102de:	75fb      	strb	r3, [r7, #23]
 80102e0:	7dfa      	ldrb	r2, [r7, #23]
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d3d3      	bcc.n	8010290 <IntToUnicode+0x18>
  }
}
 80102e8:	bf00      	nop
 80102ea:	bf00      	nop
 80102ec:	371c      	adds	r7, #28
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
	...

080102f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b0a0      	sub	sp, #128	; 0x80
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010300:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010304:	2200      	movs	r2, #0
 8010306:	601a      	str	r2, [r3, #0]
 8010308:	605a      	str	r2, [r3, #4]
 801030a:	609a      	str	r2, [r3, #8]
 801030c:	60da      	str	r2, [r3, #12]
 801030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010310:	f107 0310 	add.w	r3, r7, #16
 8010314:	225c      	movs	r2, #92	; 0x5c
 8010316:	2100      	movs	r1, #0
 8010318:	4618      	mov	r0, r3
 801031a:	f000 fbb7 	bl	8010a8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010326:	d161      	bne.n	80103ec <HAL_PCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010328:	f44f 7380 	mov.w	r3, #256	; 0x100
 801032c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 801032e:	2304      	movs	r3, #4
 8010330:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8010332:	2360      	movs	r3, #96	; 0x60
 8010334:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8010336:	2302      	movs	r3, #2
 8010338:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 801033a:	2304      	movs	r3, #4
 801033c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 801033e:	2301      	movs	r3, #1
 8010340:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8010342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010346:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010348:	f107 0310 	add.w	r3, r7, #16
 801034c:	4618      	mov	r0, r3
 801034e:	f7fa fd17 	bl	800ad80 <HAL_RCCEx_PeriphCLKConfig>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8010358:	f7f1 f820 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801035c:	2300      	movs	r3, #0
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	4b24      	ldr	r3, [pc, #144]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 8010362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010364:	4a23      	ldr	r2, [pc, #140]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 8010366:	f043 0301 	orr.w	r3, r3, #1
 801036a:	6313      	str	r3, [r2, #48]	; 0x30
 801036c:	4b21      	ldr	r3, [pc, #132]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 801036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010370:	f003 0301 	and.w	r3, r3, #1
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010378:	f44f 7300 	mov.w	r3, #512	; 0x200
 801037c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801037e:	2300      	movs	r3, #0
 8010380:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010382:	2300      	movs	r3, #0
 8010384:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010386:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801038a:	4619      	mov	r1, r3
 801038c:	481a      	ldr	r0, [pc, #104]	; (80103f8 <HAL_PCD_MspInit+0x100>)
 801038e:	f7f6 fa3b 	bl	8006808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010392:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010396:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010398:	2302      	movs	r3, #2
 801039a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801039c:	2300      	movs	r3, #0
 801039e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80103a0:	2303      	movs	r3, #3
 80103a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80103a4:	230a      	movs	r3, #10
 80103a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80103ac:	4619      	mov	r1, r3
 80103ae:	4812      	ldr	r0, [pc, #72]	; (80103f8 <HAL_PCD_MspInit+0x100>)
 80103b0:	f7f6 fa2a 	bl	8006808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103b4:	4b0f      	ldr	r3, [pc, #60]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 80103b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103b8:	4a0e      	ldr	r2, [pc, #56]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 80103ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103be:	6353      	str	r3, [r2, #52]	; 0x34
 80103c0:	2300      	movs	r3, #0
 80103c2:	60bb      	str	r3, [r7, #8]
 80103c4:	4b0b      	ldr	r3, [pc, #44]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 80103c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103c8:	4a0a      	ldr	r2, [pc, #40]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 80103ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103ce:	6453      	str	r3, [r2, #68]	; 0x44
 80103d0:	4b08      	ldr	r3, [pc, #32]	; (80103f4 <HAL_PCD_MspInit+0xfc>)
 80103d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103d8:	60bb      	str	r3, [r7, #8]
 80103da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103dc:	2200      	movs	r2, #0
 80103de:	2100      	movs	r1, #0
 80103e0:	2043      	movs	r0, #67	; 0x43
 80103e2:	f7f5 fdd2 	bl	8005f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103e6:	2043      	movs	r0, #67	; 0x43
 80103e8:	f7f5 fdeb 	bl	8005fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103ec:	bf00      	nop
 80103ee:	3780      	adds	r7, #128	; 0x80
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	40023800 	.word	0x40023800
 80103f8:	40020000 	.word	0x40020000

080103fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7fe fc1c 	bl	800ec50 <USBD_LL_SetupStage>
}
 8010418:	bf00      	nop
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	460b      	mov	r3, r1
 801042a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010432:	78fa      	ldrb	r2, [r7, #3]
 8010434:	6879      	ldr	r1, [r7, #4]
 8010436:	4613      	mov	r3, r2
 8010438:	00db      	lsls	r3, r3, #3
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	440b      	add	r3, r1
 8010440:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	78fb      	ldrb	r3, [r7, #3]
 8010448:	4619      	mov	r1, r3
 801044a:	f7fe fc56 	bl	800ecfa <USBD_LL_DataOutStage>
}
 801044e:	bf00      	nop
 8010450:	3708      	adds	r7, #8
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}

08010456 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	460b      	mov	r3, r1
 8010460:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010468:	78fa      	ldrb	r2, [r7, #3]
 801046a:	6879      	ldr	r1, [r7, #4]
 801046c:	4613      	mov	r3, r2
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	1a9b      	subs	r3, r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	440b      	add	r3, r1
 8010476:	3348      	adds	r3, #72	; 0x48
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	78fb      	ldrb	r3, [r7, #3]
 801047c:	4619      	mov	r1, r3
 801047e:	f7fe fc9f 	bl	800edc0 <USBD_LL_DataInStage>
}
 8010482:	bf00      	nop
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010498:	4618      	mov	r0, r3
 801049a:	f7fe fdb3 	bl	800f004 <USBD_LL_SOF>
}
 801049e:	bf00      	nop
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104ae:	2301      	movs	r3, #1
 80104b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d102      	bne.n	80104c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80104ba:	2300      	movs	r3, #0
 80104bc:	73fb      	strb	r3, [r7, #15]
 80104be:	e008      	b.n	80104d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d102      	bne.n	80104ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80104c8:	2301      	movs	r3, #1
 80104ca:	73fb      	strb	r3, [r7, #15]
 80104cc:	e001      	b.n	80104d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80104ce:	f7f0 ff65 	bl	800139c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104d8:	7bfa      	ldrb	r2, [r7, #15]
 80104da:	4611      	mov	r1, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fe fd53 	bl	800ef88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7fe fcff 	bl	800eeec <USBD_LL_Reset>
}
 80104ee:	bf00      	nop
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
	...

080104f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010506:	4618      	mov	r0, r3
 8010508:	f7fe fd4e 	bl	800efa8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	6812      	ldr	r2, [r2, #0]
 801051a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801051e:	f043 0301 	orr.w	r3, r3, #1
 8010522:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6a1b      	ldr	r3, [r3, #32]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d005      	beq.n	8010538 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <HAL_PCD_SuspendCallback+0x48>)
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	4a03      	ldr	r2, [pc, #12]	; (8010540 <HAL_PCD_SuspendCallback+0x48>)
 8010532:	f043 0306 	orr.w	r3, r3, #6
 8010536:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010538:	bf00      	nop
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	e000ed00 	.word	0xe000ed00

08010544 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010552:	4618      	mov	r0, r3
 8010554:	f7fe fd3e 	bl	800efd4 <USBD_LL_Resume>
}
 8010558:	bf00      	nop
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	460b      	mov	r3, r1
 801056a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010572:	78fa      	ldrb	r2, [r7, #3]
 8010574:	4611      	mov	r1, r2
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe fd8c 	bl	800f094 <USBD_LL_IsoOUTIncomplete>
}
 801057c:	bf00      	nop
 801057e:	3708      	adds	r7, #8
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010596:	78fa      	ldrb	r2, [r7, #3]
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fd54 	bl	800f048 <USBD_LL_IsoINIncomplete>
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe fd92 	bl	800f0e0 <USBD_LL_DevConnected>
}
 80105bc:	bf00      	nop
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fe fd8f 	bl	800f0f6 <USBD_LL_DevDisconnected>
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d13c      	bne.n	801066a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80105f0:	4a20      	ldr	r2, [pc, #128]	; (8010674 <USBD_LL_Init+0x94>)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4a1e      	ldr	r2, [pc, #120]	; (8010674 <USBD_LL_Init+0x94>)
 80105fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010600:	4b1c      	ldr	r3, [pc, #112]	; (8010674 <USBD_LL_Init+0x94>)
 8010602:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010606:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010608:	4b1a      	ldr	r3, [pc, #104]	; (8010674 <USBD_LL_Init+0x94>)
 801060a:	2206      	movs	r2, #6
 801060c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801060e:	4b19      	ldr	r3, [pc, #100]	; (8010674 <USBD_LL_Init+0x94>)
 8010610:	2202      	movs	r2, #2
 8010612:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010614:	4b17      	ldr	r3, [pc, #92]	; (8010674 <USBD_LL_Init+0x94>)
 8010616:	2200      	movs	r2, #0
 8010618:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801061a:	4b16      	ldr	r3, [pc, #88]	; (8010674 <USBD_LL_Init+0x94>)
 801061c:	2202      	movs	r2, #2
 801061e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010620:	4b14      	ldr	r3, [pc, #80]	; (8010674 <USBD_LL_Init+0x94>)
 8010622:	2200      	movs	r2, #0
 8010624:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010626:	4b13      	ldr	r3, [pc, #76]	; (8010674 <USBD_LL_Init+0x94>)
 8010628:	2200      	movs	r2, #0
 801062a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801062c:	4b11      	ldr	r3, [pc, #68]	; (8010674 <USBD_LL_Init+0x94>)
 801062e:	2200      	movs	r2, #0
 8010630:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010632:	4b10      	ldr	r3, [pc, #64]	; (8010674 <USBD_LL_Init+0x94>)
 8010634:	2201      	movs	r2, #1
 8010636:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010638:	4b0e      	ldr	r3, [pc, #56]	; (8010674 <USBD_LL_Init+0x94>)
 801063a:	2200      	movs	r2, #0
 801063c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801063e:	480d      	ldr	r0, [pc, #52]	; (8010674 <USBD_LL_Init+0x94>)
 8010640:	f7f9 f878 	bl	8009734 <HAL_PCD_Init>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801064a:	f7f0 fea7 	bl	800139c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801064e:	2180      	movs	r1, #128	; 0x80
 8010650:	4808      	ldr	r0, [pc, #32]	; (8010674 <USBD_LL_Init+0x94>)
 8010652:	f7fa fa0a 	bl	800aa6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010656:	2240      	movs	r2, #64	; 0x40
 8010658:	2100      	movs	r1, #0
 801065a:	4806      	ldr	r0, [pc, #24]	; (8010674 <USBD_LL_Init+0x94>)
 801065c:	f7fa f9be 	bl	800a9dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010660:	2280      	movs	r2, #128	; 0x80
 8010662:	2101      	movs	r1, #1
 8010664:	4803      	ldr	r0, [pc, #12]	; (8010674 <USBD_LL_Init+0x94>)
 8010666:	f7fa f9b9 	bl	800a9dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	200027ec 	.word	0x200027ec

08010678 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010684:	2300      	movs	r3, #0
 8010686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801068e:	4618      	mov	r0, r3
 8010690:	f7f9 f974 	bl	800997c <HAL_PCD_Start>
 8010694:	4603      	mov	r3, r0
 8010696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010698:	7bfb      	ldrb	r3, [r7, #15]
 801069a:	4618      	mov	r0, r3
 801069c:	f000 f990 	bl	80109c0 <USBD_Get_USB_Status>
 80106a0:	4603      	mov	r3, r0
 80106a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3710      	adds	r7, #16
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}

080106ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106ae:	b580      	push	{r7, lr}
 80106b0:	b084      	sub	sp, #16
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
 80106b6:	4608      	mov	r0, r1
 80106b8:	4611      	mov	r1, r2
 80106ba:	461a      	mov	r2, r3
 80106bc:	4603      	mov	r3, r0
 80106be:	70fb      	strb	r3, [r7, #3]
 80106c0:	460b      	mov	r3, r1
 80106c2:	70bb      	strb	r3, [r7, #2]
 80106c4:	4613      	mov	r3, r2
 80106c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c8:	2300      	movs	r3, #0
 80106ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106cc:	2300      	movs	r3, #0
 80106ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106d6:	78bb      	ldrb	r3, [r7, #2]
 80106d8:	883a      	ldrh	r2, [r7, #0]
 80106da:	78f9      	ldrb	r1, [r7, #3]
 80106dc:	f7f9 fd85 	bl	800a1ea <HAL_PCD_EP_Open>
 80106e0:	4603      	mov	r3, r0
 80106e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
 80106e6:	4618      	mov	r0, r3
 80106e8:	f000 f96a 	bl	80109c0 <USBD_Get_USB_Status>
 80106ec:	4603      	mov	r3, r0
 80106ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	460b      	mov	r3, r1
 8010704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010706:	2300      	movs	r3, #0
 8010708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801070a:	2300      	movs	r3, #0
 801070c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010714:	78fa      	ldrb	r2, [r7, #3]
 8010716:	4611      	mov	r1, r2
 8010718:	4618      	mov	r0, r3
 801071a:	f7f9 fdce 	bl	800a2ba <HAL_PCD_EP_Close>
 801071e:	4603      	mov	r3, r0
 8010720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010722:	7bfb      	ldrb	r3, [r7, #15]
 8010724:	4618      	mov	r0, r3
 8010726:	f000 f94b 	bl	80109c0 <USBD_Get_USB_Status>
 801072a:	4603      	mov	r3, r0
 801072c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801072e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	460b      	mov	r3, r1
 8010742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010744:	2300      	movs	r3, #0
 8010746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010752:	78fa      	ldrb	r2, [r7, #3]
 8010754:	4611      	mov	r1, r2
 8010756:	4618      	mov	r0, r3
 8010758:	f7f9 fea6 	bl	800a4a8 <HAL_PCD_EP_SetStall>
 801075c:	4603      	mov	r3, r0
 801075e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	4618      	mov	r0, r3
 8010764:	f000 f92c 	bl	80109c0 <USBD_Get_USB_Status>
 8010768:	4603      	mov	r3, r0
 801076a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801076c:	7bbb      	ldrb	r3, [r7, #14]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b084      	sub	sp, #16
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	460b      	mov	r3, r1
 8010780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010782:	2300      	movs	r3, #0
 8010784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010786:	2300      	movs	r3, #0
 8010788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010790:	78fa      	ldrb	r2, [r7, #3]
 8010792:	4611      	mov	r1, r2
 8010794:	4618      	mov	r0, r3
 8010796:	f7f9 feeb 	bl	800a570 <HAL_PCD_EP_ClrStall>
 801079a:	4603      	mov	r3, r0
 801079c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801079e:	7bfb      	ldrb	r3, [r7, #15]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 f90d 	bl	80109c0 <USBD_Get_USB_Status>
 80107a6:	4603      	mov	r3, r0
 80107a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	460b      	mov	r3, r1
 80107be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80107c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	da0b      	bge.n	80107e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107d0:	78fb      	ldrb	r3, [r7, #3]
 80107d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107d6:	68f9      	ldr	r1, [r7, #12]
 80107d8:	4613      	mov	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	1a9b      	subs	r3, r3, r2
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	440b      	add	r3, r1
 80107e2:	333e      	adds	r3, #62	; 0x3e
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	e00b      	b.n	8010800 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107ee:	68f9      	ldr	r1, [r7, #12]
 80107f0:	4613      	mov	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	1a9b      	subs	r3, r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	440b      	add	r3, r1
 80107fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010800:	4618      	mov	r0, r3
 8010802:	3714      	adds	r7, #20
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	460b      	mov	r3, r1
 8010816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010826:	78fa      	ldrb	r2, [r7, #3]
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f7f9 fcb8 	bl	800a1a0 <HAL_PCD_SetAddress>
 8010830:	4603      	mov	r3, r0
 8010832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010834:	7bfb      	ldrb	r3, [r7, #15]
 8010836:	4618      	mov	r0, r3
 8010838:	f000 f8c2 	bl	80109c0 <USBD_Get_USB_Status>
 801083c:	4603      	mov	r3, r0
 801083e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010840:	7bbb      	ldrb	r3, [r7, #14]
}
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b086      	sub	sp, #24
 801084e:	af00      	add	r7, sp, #0
 8010850:	60f8      	str	r0, [r7, #12]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
 8010856:	460b      	mov	r3, r1
 8010858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801085a:	2300      	movs	r3, #0
 801085c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801085e:	2300      	movs	r3, #0
 8010860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010868:	7af9      	ldrb	r1, [r7, #11]
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	f7f9 fdd1 	bl	800a414 <HAL_PCD_EP_Transmit>
 8010872:	4603      	mov	r3, r0
 8010874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010876:	7dfb      	ldrb	r3, [r7, #23]
 8010878:	4618      	mov	r0, r3
 801087a:	f000 f8a1 	bl	80109c0 <USBD_Get_USB_Status>
 801087e:	4603      	mov	r3, r0
 8010880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010882:	7dbb      	ldrb	r3, [r7, #22]
}
 8010884:	4618      	mov	r0, r3
 8010886:	3718      	adds	r7, #24
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	607a      	str	r2, [r7, #4]
 8010896:	603b      	str	r3, [r7, #0]
 8010898:	460b      	mov	r3, r1
 801089a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801089c:	2300      	movs	r3, #0
 801089e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a0:	2300      	movs	r3, #0
 80108a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80108aa:	7af9      	ldrb	r1, [r7, #11]
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	f7f9 fd4d 	bl	800a34e <HAL_PCD_EP_Receive>
 80108b4:	4603      	mov	r3, r0
 80108b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108b8:	7dfb      	ldrb	r3, [r7, #23]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 f880 	bl	80109c0 <USBD_Get_USB_Status>
 80108c0:	4603      	mov	r3, r0
 80108c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3718      	adds	r7, #24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b082      	sub	sp, #8
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
 80108d6:	460b      	mov	r3, r1
 80108d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108e0:	78fa      	ldrb	r2, [r7, #3]
 80108e2:	4611      	mov	r1, r2
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7f9 fd7d 	bl	800a3e4 <HAL_PCD_EP_GetRxCount>
 80108ea:	4603      	mov	r3, r0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	460b      	mov	r3, r1
 80108fe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010900:	78fb      	ldrb	r3, [r7, #3]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d002      	beq.n	801090c <HAL_PCDEx_LPM_Callback+0x18>
 8010906:	2b01      	cmp	r3, #1
 8010908:	d01f      	beq.n	801094a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801090a:	e03b      	b.n	8010984 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6a1b      	ldr	r3, [r3, #32]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d007      	beq.n	8010924 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8010914:	f7ef fedc 	bl	80006d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010918:	4b1c      	ldr	r3, [pc, #112]	; (801098c <HAL_PCDEx_LPM_Callback+0x98>)
 801091a:	691b      	ldr	r3, [r3, #16]
 801091c:	4a1b      	ldr	r2, [pc, #108]	; (801098c <HAL_PCDEx_LPM_Callback+0x98>)
 801091e:	f023 0306 	bic.w	r3, r3, #6
 8010922:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	6812      	ldr	r2, [r2, #0]
 8010932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010936:	f023 0301 	bic.w	r3, r3, #1
 801093a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010942:	4618      	mov	r0, r3
 8010944:	f7fe fb46 	bl	800efd4 <USBD_LL_Resume>
    break;
 8010948:	e01c      	b.n	8010984 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6812      	ldr	r2, [r2, #0]
 8010958:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801095c:	f043 0301 	orr.w	r3, r3, #1
 8010960:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fb1d 	bl	800efa8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a1b      	ldr	r3, [r3, #32]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d005      	beq.n	8010982 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010976:	4b05      	ldr	r3, [pc, #20]	; (801098c <HAL_PCDEx_LPM_Callback+0x98>)
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	4a04      	ldr	r2, [pc, #16]	; (801098c <HAL_PCDEx_LPM_Callback+0x98>)
 801097c:	f043 0306 	orr.w	r3, r3, #6
 8010980:	6113      	str	r3, [r2, #16]
    break;
 8010982:	bf00      	nop
}
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	e000ed00 	.word	0xe000ed00

08010990 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010998:	4b03      	ldr	r3, [pc, #12]	; (80109a8 <USBD_static_malloc+0x18>)
}
 801099a:	4618      	mov	r0, r3
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	20000218 	.word	0x20000218

080109ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b083      	sub	sp, #12
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]

}
 80109b4:	bf00      	nop
 80109b6:	370c      	adds	r7, #12
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr

080109c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	4603      	mov	r3, r0
 80109c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80109ce:	79fb      	ldrb	r3, [r7, #7]
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	d817      	bhi.n	8010a04 <USBD_Get_USB_Status+0x44>
 80109d4:	a201      	add	r2, pc, #4	; (adr r2, 80109dc <USBD_Get_USB_Status+0x1c>)
 80109d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109da:	bf00      	nop
 80109dc:	080109ed 	.word	0x080109ed
 80109e0:	080109f3 	.word	0x080109f3
 80109e4:	080109f9 	.word	0x080109f9
 80109e8:	080109ff 	.word	0x080109ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80109ec:	2300      	movs	r3, #0
 80109ee:	73fb      	strb	r3, [r7, #15]
    break;
 80109f0:	e00b      	b.n	8010a0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109f2:	2303      	movs	r3, #3
 80109f4:	73fb      	strb	r3, [r7, #15]
    break;
 80109f6:	e008      	b.n	8010a0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109f8:	2301      	movs	r3, #1
 80109fa:	73fb      	strb	r3, [r7, #15]
    break;
 80109fc:	e005      	b.n	8010a0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109fe:	2303      	movs	r3, #3
 8010a00:	73fb      	strb	r3, [r7, #15]
    break;
 8010a02:	e002      	b.n	8010a0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010a04:	2303      	movs	r3, #3
 8010a06:	73fb      	strb	r3, [r7, #15]
    break;
 8010a08:	bf00      	nop
  }
  return usb_status;
 8010a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3714      	adds	r7, #20
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <__errno>:
 8010a18:	4b01      	ldr	r3, [pc, #4]	; (8010a20 <__errno+0x8>)
 8010a1a:	6818      	ldr	r0, [r3, #0]
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	20000190 	.word	0x20000190

08010a24 <__libc_init_array>:
 8010a24:	b570      	push	{r4, r5, r6, lr}
 8010a26:	4d0d      	ldr	r5, [pc, #52]	; (8010a5c <__libc_init_array+0x38>)
 8010a28:	4c0d      	ldr	r4, [pc, #52]	; (8010a60 <__libc_init_array+0x3c>)
 8010a2a:	1b64      	subs	r4, r4, r5
 8010a2c:	10a4      	asrs	r4, r4, #2
 8010a2e:	2600      	movs	r6, #0
 8010a30:	42a6      	cmp	r6, r4
 8010a32:	d109      	bne.n	8010a48 <__libc_init_array+0x24>
 8010a34:	4d0b      	ldr	r5, [pc, #44]	; (8010a64 <__libc_init_array+0x40>)
 8010a36:	4c0c      	ldr	r4, [pc, #48]	; (8010a68 <__libc_init_array+0x44>)
 8010a38:	f000 f8f8 	bl	8010c2c <_init>
 8010a3c:	1b64      	subs	r4, r4, r5
 8010a3e:	10a4      	asrs	r4, r4, #2
 8010a40:	2600      	movs	r6, #0
 8010a42:	42a6      	cmp	r6, r4
 8010a44:	d105      	bne.n	8010a52 <__libc_init_array+0x2e>
 8010a46:	bd70      	pop	{r4, r5, r6, pc}
 8010a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a4c:	4798      	blx	r3
 8010a4e:	3601      	adds	r6, #1
 8010a50:	e7ee      	b.n	8010a30 <__libc_init_array+0xc>
 8010a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a56:	4798      	blx	r3
 8010a58:	3601      	adds	r6, #1
 8010a5a:	e7f2      	b.n	8010a42 <__libc_init_array+0x1e>
 8010a5c:	08010cb4 	.word	0x08010cb4
 8010a60:	08010cb4 	.word	0x08010cb4
 8010a64:	08010cb4 	.word	0x08010cb4
 8010a68:	08010cb8 	.word	0x08010cb8

08010a6c <malloc>:
 8010a6c:	4b02      	ldr	r3, [pc, #8]	; (8010a78 <malloc+0xc>)
 8010a6e:	4601      	mov	r1, r0
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	f000 b863 	b.w	8010b3c <_malloc_r>
 8010a76:	bf00      	nop
 8010a78:	20000190 	.word	0x20000190

08010a7c <free>:
 8010a7c:	4b02      	ldr	r3, [pc, #8]	; (8010a88 <free+0xc>)
 8010a7e:	4601      	mov	r1, r0
 8010a80:	6818      	ldr	r0, [r3, #0]
 8010a82:	f000 b80b 	b.w	8010a9c <_free_r>
 8010a86:	bf00      	nop
 8010a88:	20000190 	.word	0x20000190

08010a8c <memset>:
 8010a8c:	4402      	add	r2, r0
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d100      	bne.n	8010a96 <memset+0xa>
 8010a94:	4770      	bx	lr
 8010a96:	f803 1b01 	strb.w	r1, [r3], #1
 8010a9a:	e7f9      	b.n	8010a90 <memset+0x4>

08010a9c <_free_r>:
 8010a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a9e:	2900      	cmp	r1, #0
 8010aa0:	d048      	beq.n	8010b34 <_free_r+0x98>
 8010aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aa6:	9001      	str	r0, [sp, #4]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8010aae:	bfb8      	it	lt
 8010ab0:	18e4      	addlt	r4, r4, r3
 8010ab2:	f000 f8ad 	bl	8010c10 <__malloc_lock>
 8010ab6:	4a20      	ldr	r2, [pc, #128]	; (8010b38 <_free_r+0x9c>)
 8010ab8:	9801      	ldr	r0, [sp, #4]
 8010aba:	6813      	ldr	r3, [r2, #0]
 8010abc:	4615      	mov	r5, r2
 8010abe:	b933      	cbnz	r3, 8010ace <_free_r+0x32>
 8010ac0:	6063      	str	r3, [r4, #4]
 8010ac2:	6014      	str	r4, [r2, #0]
 8010ac4:	b003      	add	sp, #12
 8010ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aca:	f000 b8a7 	b.w	8010c1c <__malloc_unlock>
 8010ace:	42a3      	cmp	r3, r4
 8010ad0:	d90b      	bls.n	8010aea <_free_r+0x4e>
 8010ad2:	6821      	ldr	r1, [r4, #0]
 8010ad4:	1862      	adds	r2, r4, r1
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	bf04      	itt	eq
 8010ada:	681a      	ldreq	r2, [r3, #0]
 8010adc:	685b      	ldreq	r3, [r3, #4]
 8010ade:	6063      	str	r3, [r4, #4]
 8010ae0:	bf04      	itt	eq
 8010ae2:	1852      	addeq	r2, r2, r1
 8010ae4:	6022      	streq	r2, [r4, #0]
 8010ae6:	602c      	str	r4, [r5, #0]
 8010ae8:	e7ec      	b.n	8010ac4 <_free_r+0x28>
 8010aea:	461a      	mov	r2, r3
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	b10b      	cbz	r3, 8010af4 <_free_r+0x58>
 8010af0:	42a3      	cmp	r3, r4
 8010af2:	d9fa      	bls.n	8010aea <_free_r+0x4e>
 8010af4:	6811      	ldr	r1, [r2, #0]
 8010af6:	1855      	adds	r5, r2, r1
 8010af8:	42a5      	cmp	r5, r4
 8010afa:	d10b      	bne.n	8010b14 <_free_r+0x78>
 8010afc:	6824      	ldr	r4, [r4, #0]
 8010afe:	4421      	add	r1, r4
 8010b00:	1854      	adds	r4, r2, r1
 8010b02:	42a3      	cmp	r3, r4
 8010b04:	6011      	str	r1, [r2, #0]
 8010b06:	d1dd      	bne.n	8010ac4 <_free_r+0x28>
 8010b08:	681c      	ldr	r4, [r3, #0]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	6053      	str	r3, [r2, #4]
 8010b0e:	4421      	add	r1, r4
 8010b10:	6011      	str	r1, [r2, #0]
 8010b12:	e7d7      	b.n	8010ac4 <_free_r+0x28>
 8010b14:	d902      	bls.n	8010b1c <_free_r+0x80>
 8010b16:	230c      	movs	r3, #12
 8010b18:	6003      	str	r3, [r0, #0]
 8010b1a:	e7d3      	b.n	8010ac4 <_free_r+0x28>
 8010b1c:	6825      	ldr	r5, [r4, #0]
 8010b1e:	1961      	adds	r1, r4, r5
 8010b20:	428b      	cmp	r3, r1
 8010b22:	bf04      	itt	eq
 8010b24:	6819      	ldreq	r1, [r3, #0]
 8010b26:	685b      	ldreq	r3, [r3, #4]
 8010b28:	6063      	str	r3, [r4, #4]
 8010b2a:	bf04      	itt	eq
 8010b2c:	1949      	addeq	r1, r1, r5
 8010b2e:	6021      	streq	r1, [r4, #0]
 8010b30:	6054      	str	r4, [r2, #4]
 8010b32:	e7c7      	b.n	8010ac4 <_free_r+0x28>
 8010b34:	b003      	add	sp, #12
 8010b36:	bd30      	pop	{r4, r5, pc}
 8010b38:	20000438 	.word	0x20000438

08010b3c <_malloc_r>:
 8010b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3e:	1ccd      	adds	r5, r1, #3
 8010b40:	f025 0503 	bic.w	r5, r5, #3
 8010b44:	3508      	adds	r5, #8
 8010b46:	2d0c      	cmp	r5, #12
 8010b48:	bf38      	it	cc
 8010b4a:	250c      	movcc	r5, #12
 8010b4c:	2d00      	cmp	r5, #0
 8010b4e:	4606      	mov	r6, r0
 8010b50:	db01      	blt.n	8010b56 <_malloc_r+0x1a>
 8010b52:	42a9      	cmp	r1, r5
 8010b54:	d903      	bls.n	8010b5e <_malloc_r+0x22>
 8010b56:	230c      	movs	r3, #12
 8010b58:	6033      	str	r3, [r6, #0]
 8010b5a:	2000      	movs	r0, #0
 8010b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b5e:	f000 f857 	bl	8010c10 <__malloc_lock>
 8010b62:	4921      	ldr	r1, [pc, #132]	; (8010be8 <_malloc_r+0xac>)
 8010b64:	680a      	ldr	r2, [r1, #0]
 8010b66:	4614      	mov	r4, r2
 8010b68:	b99c      	cbnz	r4, 8010b92 <_malloc_r+0x56>
 8010b6a:	4f20      	ldr	r7, [pc, #128]	; (8010bec <_malloc_r+0xb0>)
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	b923      	cbnz	r3, 8010b7a <_malloc_r+0x3e>
 8010b70:	4621      	mov	r1, r4
 8010b72:	4630      	mov	r0, r6
 8010b74:	f000 f83c 	bl	8010bf0 <_sbrk_r>
 8010b78:	6038      	str	r0, [r7, #0]
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	f000 f837 	bl	8010bf0 <_sbrk_r>
 8010b82:	1c43      	adds	r3, r0, #1
 8010b84:	d123      	bne.n	8010bce <_malloc_r+0x92>
 8010b86:	230c      	movs	r3, #12
 8010b88:	6033      	str	r3, [r6, #0]
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f000 f846 	bl	8010c1c <__malloc_unlock>
 8010b90:	e7e3      	b.n	8010b5a <_malloc_r+0x1e>
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	1b5b      	subs	r3, r3, r5
 8010b96:	d417      	bmi.n	8010bc8 <_malloc_r+0x8c>
 8010b98:	2b0b      	cmp	r3, #11
 8010b9a:	d903      	bls.n	8010ba4 <_malloc_r+0x68>
 8010b9c:	6023      	str	r3, [r4, #0]
 8010b9e:	441c      	add	r4, r3
 8010ba0:	6025      	str	r5, [r4, #0]
 8010ba2:	e004      	b.n	8010bae <_malloc_r+0x72>
 8010ba4:	6863      	ldr	r3, [r4, #4]
 8010ba6:	42a2      	cmp	r2, r4
 8010ba8:	bf0c      	ite	eq
 8010baa:	600b      	streq	r3, [r1, #0]
 8010bac:	6053      	strne	r3, [r2, #4]
 8010bae:	4630      	mov	r0, r6
 8010bb0:	f000 f834 	bl	8010c1c <__malloc_unlock>
 8010bb4:	f104 000b 	add.w	r0, r4, #11
 8010bb8:	1d23      	adds	r3, r4, #4
 8010bba:	f020 0007 	bic.w	r0, r0, #7
 8010bbe:	1ac2      	subs	r2, r0, r3
 8010bc0:	d0cc      	beq.n	8010b5c <_malloc_r+0x20>
 8010bc2:	1a1b      	subs	r3, r3, r0
 8010bc4:	50a3      	str	r3, [r4, r2]
 8010bc6:	e7c9      	b.n	8010b5c <_malloc_r+0x20>
 8010bc8:	4622      	mov	r2, r4
 8010bca:	6864      	ldr	r4, [r4, #4]
 8010bcc:	e7cc      	b.n	8010b68 <_malloc_r+0x2c>
 8010bce:	1cc4      	adds	r4, r0, #3
 8010bd0:	f024 0403 	bic.w	r4, r4, #3
 8010bd4:	42a0      	cmp	r0, r4
 8010bd6:	d0e3      	beq.n	8010ba0 <_malloc_r+0x64>
 8010bd8:	1a21      	subs	r1, r4, r0
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f000 f808 	bl	8010bf0 <_sbrk_r>
 8010be0:	3001      	adds	r0, #1
 8010be2:	d1dd      	bne.n	8010ba0 <_malloc_r+0x64>
 8010be4:	e7cf      	b.n	8010b86 <_malloc_r+0x4a>
 8010be6:	bf00      	nop
 8010be8:	20000438 	.word	0x20000438
 8010bec:	2000043c 	.word	0x2000043c

08010bf0 <_sbrk_r>:
 8010bf0:	b538      	push	{r3, r4, r5, lr}
 8010bf2:	4d06      	ldr	r5, [pc, #24]	; (8010c0c <_sbrk_r+0x1c>)
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	4608      	mov	r0, r1
 8010bfa:	602b      	str	r3, [r5, #0]
 8010bfc:	f7f3 fc9a 	bl	8004534 <_sbrk>
 8010c00:	1c43      	adds	r3, r0, #1
 8010c02:	d102      	bne.n	8010c0a <_sbrk_r+0x1a>
 8010c04:	682b      	ldr	r3, [r5, #0]
 8010c06:	b103      	cbz	r3, 8010c0a <_sbrk_r+0x1a>
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	20002bf4 	.word	0x20002bf4

08010c10 <__malloc_lock>:
 8010c10:	4801      	ldr	r0, [pc, #4]	; (8010c18 <__malloc_lock+0x8>)
 8010c12:	f000 b809 	b.w	8010c28 <__retarget_lock_acquire_recursive>
 8010c16:	bf00      	nop
 8010c18:	20002bfc 	.word	0x20002bfc

08010c1c <__malloc_unlock>:
 8010c1c:	4801      	ldr	r0, [pc, #4]	; (8010c24 <__malloc_unlock+0x8>)
 8010c1e:	f000 b804 	b.w	8010c2a <__retarget_lock_release_recursive>
 8010c22:	bf00      	nop
 8010c24:	20002bfc 	.word	0x20002bfc

08010c28 <__retarget_lock_acquire_recursive>:
 8010c28:	4770      	bx	lr

08010c2a <__retarget_lock_release_recursive>:
 8010c2a:	4770      	bx	lr

08010c2c <_init>:
 8010c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2e:	bf00      	nop
 8010c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c32:	bc08      	pop	{r3}
 8010c34:	469e      	mov	lr, r3
 8010c36:	4770      	bx	lr

08010c38 <_fini>:
 8010c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c3a:	bf00      	nop
 8010c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c3e:	bc08      	pop	{r3}
 8010c40:	469e      	mov	lr, r3
 8010c42:	4770      	bx	lr

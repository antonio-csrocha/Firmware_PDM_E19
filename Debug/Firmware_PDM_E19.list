
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800eccc  0800eccc  0001eccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed34  0800ed34  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed34  0800ed34  0001ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed3c  0800ed3c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed3c  0800ed3c  0001ed3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed40  0800ed40  0001ed40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ed44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002250  20000160  0800eea4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  200023b0  0800eea4  000223b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e97  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dcf  00000000  00000000  00042027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00046df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  00048780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293f2  00000000  00000000  00049ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243e4  00000000  00000000  000732c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e67bf  00000000  00000000  000976a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017de65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  0017deb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000160 	.word	0x20000160
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800ecb4 	.word	0x0800ecb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000164 	.word	0x20000164
 8000200:	0800ecb4 	.word	0x0800ecb4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f003 fb1a 	bl	8003b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f894 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fd54 	bl	8000fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fd2a 	bl	8000f70 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f900 	bl	8000720 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000520:	f000 f98a 	bl	8000838 <MX_ADC2_Init>
  MX_TIM7_Init();
 8000524:	f000 fc4e 	bl	8000dc4 <MX_TIM7_Init>
  MX_CAN1_Init();
 8000528:	f000 fa10 	bl	800094c <MX_CAN1_Init>
  MX_TIM1_Init();
 800052c:	f000 fa86 	bl	8000a3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000530:	f000 fb24 	bl	8000b7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000534:	f000 fb98 	bl	8000c68 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000538:	f000 fc78 	bl	8000e2c <MX_TIM8_Init>
  MX_I2C1_Init();
 800053c:	f000 fa50 	bl	80009e0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000540:	f00d fd0c 	bl	800df5c <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000544:	f000 fa38 	bl	80009b8 <MX_CRC_Init>
  MX_TIM6_Init();
 8000548:	f000 fc06 	bl	8000d58 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 800054c:	492f      	ldr	r1, [pc, #188]	; (800060c <main+0x104>)
 800054e:	4830      	ldr	r0, [pc, #192]	; (8000610 <main+0x108>)
 8000550:	f000 ff80 	bl	8001454 <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(flagReading[1] == Data_Read_Ready)
 8000554:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <main+0x10c>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <main+0x5a>
		  PDM_Data_Conversion(&htim6);
 800055c:	482e      	ldr	r0, [pc, #184]	; (8000618 <main+0x110>)
 800055e:	f002 fc27 	bl	8002db0 <PDM_Data_Conversion>

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg10Hz >= DATA_FREQ_10HZ)
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <main+0x114>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800056a:	d306      	bcc.n	800057a <main+0x72>
	  {
		  accMsg10Hz = 0;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0x114>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 8000572:	2101      	movs	r1, #1
 8000574:	4826      	ldr	r0, [pc, #152]	; (8000610 <main+0x108>)
 8000576:	f000 fe85 	bl	8001284 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg25Hz >= DATA_FREQ_25HZ)
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0x118>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000582:	d306      	bcc.n	8000592 <main+0x8a>
	  {
		  accMsg25Hz = 0;
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <main+0x118>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 800058a:	2102      	movs	r1, #2
 800058c:	4820      	ldr	r0, [pc, #128]	; (8000610 <main+0x108>)
 800058e:	f000 fe79 	bl	8001284 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg50Hz >= DATA_FREQ_50HZ)
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x11c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2bc7      	cmp	r3, #199	; 0xc7
 8000598:	d906      	bls.n	80005a8 <main+0xa0>
	  {
		  accMsg50Hz = 0;
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <main+0x11c>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 80005a0:	2103      	movs	r1, #3
 80005a2:	481b      	ldr	r0, [pc, #108]	; (8000610 <main+0x108>)
 80005a4:	f000 fe6e 	bl	8001284 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg80Hz >= DATA_FREQ_80HZ)
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0x120>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b7c      	cmp	r3, #124	; 0x7c
 80005ae:	d906      	bls.n	80005be <main+0xb6>
	  {
		  accMsg80Hz = 0;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0x120>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 80005b6:	2104      	movs	r1, #4
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <main+0x108>)
 80005ba:	f000 fe63 	bl	8001284 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg100Hz >= DATA_FREQ_100HZ)
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <main+0x124>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b63      	cmp	r3, #99	; 0x63
 80005c4:	d906      	bls.n	80005d4 <main+0xcc>
	  {
		  accMsg100Hz = 0;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0x124>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 80005cc:	2105      	movs	r1, #5
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <main+0x108>)
 80005d0:	f000 fe58 	bl	8001284 <PDM_CAN_Transmit_Data>
	  }

	  //Checks if USB accumulator is above time threshold
	  if((accUsbData >= DATA_FREQ_USB) && (usbConnectedFlag == 1))
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0x128>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005dc:	d3ba      	bcc.n	8000554 <main+0x4c>
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0x12c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d1b6      	bne.n	8000554 <main+0x4c>
	  {
		  accUsbData = 0;
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0x128>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]

		  //If connected, send data channels via USB
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0x130>)
 80005f2:	f005 fcd9 	bl	8005fa8 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d102      	bne.n	8000602 <main+0xfa>
			  PDM_USB_Transmit_Data();
 80005fc:	f000 ffaa 	bl	8001554 <PDM_USB_Transmit_Data>
 8000600:	e7a8      	b.n	8000554 <main+0x4c>
		  //If disconnected reset flag
		  else
			  usbConnectedFlag = 0;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <main+0x12c>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
	  if(flagReading[1] == Data_Read_Ready)
 8000608:	e7a4      	b.n	8000554 <main+0x4c>
 800060a:	bf00      	nop
 800060c:	200002fc 	.word	0x200002fc
 8000610:	200002cc 	.word	0x200002cc
 8000614:	2000060c 	.word	0x2000060c
 8000618:	20000428 	.word	0x20000428
 800061c:	20000734 	.word	0x20000734
 8000620:	20000738 	.word	0x20000738
 8000624:	2000073c 	.word	0x2000073c
 8000628:	20000740 	.word	0x20000740
 800062c:	20000744 	.word	0x20000744
 8000630:	20000748 	.word	0x20000748
 8000634:	20000550 	.word	0x20000550
 8000638:	40020000 	.word	0x40020000

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00e fa2c 	bl	800eaa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <SystemClock_Config+0xdc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <SystemClock_Config+0xdc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xdc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <SystemClock_Config+0xe0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a25      	ldr	r2, [pc, #148]	; (800071c <SystemClock_Config+0xe0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006b0:	23b4      	movs	r3, #180	; 0xb4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 fc47 	bl	8008f58 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 fd92 	bl	80011f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d4:	f007 fd90 	bl	80081f8 <HAL_PWREx_EnableOverDrive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006de:	f000 fd8b 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2105      	movs	r1, #5
 8000700:	4618      	mov	r0, r3
 8000702:	f007 fdc9 	bl	8008298 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800070c:	f000 fd74 	bl	80011f8 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <MX_ADC1_Init+0x108>)
 8000734:	4a3d      	ldr	r2, [pc, #244]	; (800082c <MX_ADC1_Init+0x10c>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000738:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MX_ADC1_Init+0x108>)
 800073a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MX_ADC1_Init+0x108>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <MX_ADC1_Init+0x108>)
 8000748:	2201      	movs	r2, #1
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MX_ADC1_Init+0x108>)
 800074e:	2201      	movs	r2, #1
 8000750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <MX_ADC1_Init+0x108>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <MX_ADC1_Init+0x108>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <MX_ADC1_Init+0x108>)
 8000762:	4a33      	ldr	r2, [pc, #204]	; (8000830 <MX_ADC1_Init+0x110>)
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MX_ADC1_Init+0x108>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <MX_ADC1_Init+0x108>)
 800076e:	2205      	movs	r2, #5
 8000770:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_ADC1_Init+0x108>)
 8000774:	2201      	movs	r2, #1
 8000776:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_ADC1_Init+0x108>)
 800077c:	2201      	movs	r2, #1
 800077e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000780:	4829      	ldr	r0, [pc, #164]	; (8000828 <MX_ADC1_Init+0x108>)
 8000782:	f003 fa75 	bl	8003c70 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 fd34 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000790:	2305      	movs	r3, #5
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000798:	2307      	movs	r3, #7
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4821      	ldr	r0, [pc, #132]	; (8000828 <MX_ADC1_Init+0x108>)
 80007a2:	f003 fbd7 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 fd24 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b0:	2306      	movs	r3, #6
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	481a      	ldr	r0, [pc, #104]	; (8000828 <MX_ADC1_Init+0x108>)
 80007be:	f003 fbc9 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c8:	f000 fd16 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007cc:	2307      	movs	r3, #7
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_ADC1_Init+0x108>)
 80007da:	f003 fbbb 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007e4:	f000 fd08 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007e8:	230e      	movs	r3, #14
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_ADC1_Init+0x108>)
 80007f6:	f003 fbad 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000800:	f000 fcfa 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_ADC1_Init+0x114>)
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_ADC1_Init+0x108>)
 8000812:	f003 fb9f 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800081c:	f000 fcec 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000017c 	.word	0x2000017c
 800082c:	40012000 	.word	0x40012000
 8000830:	0f000001 	.word	0x0f000001
 8000834:	10000012 	.word	0x10000012

08000838 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800084a:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <MX_ADC2_Init+0x108>)
 800084c:	4a3d      	ldr	r2, [pc, #244]	; (8000944 <MX_ADC2_Init+0x10c>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000850:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_ADC2_Init+0x108>)
 8000852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000856:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	4b39      	ldr	r3, [pc, #228]	; (8000940 <MX_ADC2_Init+0x108>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_ADC2_Init+0x108>)
 8000860:	2201      	movs	r2, #1
 8000862:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <MX_ADC2_Init+0x108>)
 8000866:	2201      	movs	r2, #1
 8000868:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_ADC2_Init+0x108>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <MX_ADC2_Init+0x108>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <MX_ADC2_Init+0x108>)
 800087a:	4a33      	ldr	r2, [pc, #204]	; (8000948 <MX_ADC2_Init+0x110>)
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <MX_ADC2_Init+0x108>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_ADC2_Init+0x108>)
 8000886:	2205      	movs	r2, #5
 8000888:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_ADC2_Init+0x108>)
 800088c:	2201      	movs	r2, #1
 800088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_ADC2_Init+0x108>)
 8000894:	2201      	movs	r2, #1
 8000896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000898:	4829      	ldr	r0, [pc, #164]	; (8000940 <MX_ADC2_Init+0x108>)
 800089a:	f003 f9e9 	bl	8003c70 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 fca8 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4821      	ldr	r0, [pc, #132]	; (8000940 <MX_ADC2_Init+0x108>)
 80008ba:	f003 fb4b 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008c4:	f000 fc98 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	481a      	ldr	r0, [pc, #104]	; (8000940 <MX_ADC2_Init+0x108>)
 80008d6:	f003 fb3d 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80008e0:	f000 fc8a 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008e8:	2303      	movs	r3, #3
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4813      	ldr	r0, [pc, #76]	; (8000940 <MX_ADC2_Init+0x108>)
 80008f2:	f003 fb2f 	bl	8003f54 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80008fc:	f000 fc7c 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000900:	2303      	movs	r3, #3
 8000902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_ADC2_Init+0x108>)
 800090e:	f003 fb21 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000918:	f000 fc6e 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800091c:	2304      	movs	r3, #4
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000920:	2305      	movs	r3, #5
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_ADC2_Init+0x108>)
 800092a:	f003 fb13 	bl	8003f54 <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000934:	f000 fc60 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200001c4 	.word	0x200001c4
 8000944:	40012100 	.word	0x40012100
 8000948:	0f000001 	.word	0x0f000001

0800094c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_CAN1_Init+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000958:	2205      	movs	r2, #5
 800095a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_CAN1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000964:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000968:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_CAN1_Init+0x64>)
 800096c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000970:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_CAN1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_CAN1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_CAN1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_CAN1_Init+0x64>)
 800099e:	f003 fd89 	bl	80044b4 <HAL_CAN_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009a8:	f000 fc26 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200002cc 	.word	0x200002cc
 80009b4:	40006400 	.word	0x40006400

080009b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_CRC_Init+0x20>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <MX_CRC_Init+0x24>)
 80009c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_CRC_Init+0x20>)
 80009c4:	f004 fcdb 	bl	800537e <HAL_CRC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009ce:	f000 fc13 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200002f4 	.word	0x200002f4
 80009dc:	40023000 	.word	0x40023000

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_I2C1_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x58>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a1e:	f005 fb27 	bl	8006070 <HAL_I2C_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a28:	f000 fbe6 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200002fc 	.word	0x200002fc
 8000a34:	40005400 	.word	0x40005400
 8000a38:	00061a80 	.word	0x00061a80

08000a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	; 0x58
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2220      	movs	r2, #32
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00e f817 	bl	800eaa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7a:	4b3e      	ldr	r3, [pc, #248]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000a7c:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <MX_TIM1_Init+0x13c>)
 8000a7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 8000a80:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000a82:	f240 7207 	movw	r2, #1799	; 0x707
 8000a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa8:	4832      	ldr	r0, [pc, #200]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000aaa:	f008 fcf3 	bl	8009494 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ab4:	f000 fba0 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	482b      	ldr	r0, [pc, #172]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000ac6:	f009 f8bf 	bl	8009c48 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ad0:	f000 fb92 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad4:	4827      	ldr	r0, [pc, #156]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000ad6:	f008 fdcc 	bl	8009672 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ae0:	f000 fb8a 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000af0:	4619      	mov	r1, r3
 8000af2:	4820      	ldr	r0, [pc, #128]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000af4:	f009 fd62 	bl	800a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000afe:	f000 fb7b 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	220c      	movs	r2, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	4814      	ldr	r0, [pc, #80]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000b24:	f008 ffce 	bl	8009ac4 <HAL_TIM_PWM_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b2e:	f000 fb63 	bl	80011f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000b56:	f009 fdad 	bl	800a6b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b60:	f000 fb4a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM1_Init+0x138>)
 8000b66:	f002 fe43 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3758      	adds	r7, #88	; 0x58
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000350 	.word	0x20000350
 8000b78:	40010000 	.word	0x40010000

08000b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bb6:	f240 3283 	movw	r2, #899	; 0x383
 8000bba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000bc2:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd6:	4823      	ldr	r0, [pc, #140]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bd8:	f008 fc5c 	bl	8009494 <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000be2:	f000 fb09 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481c      	ldr	r0, [pc, #112]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000bf4:	f009 f828 	bl	8009c48 <HAL_TIM_ConfigClockSource>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bfe:	f000 fafb 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000c04:	f008 fd35 	bl	8009672 <HAL_TIM_PWM_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c0e:	f000 faf3 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4810      	ldr	r0, [pc, #64]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000c22:	f009 fccb 	bl	800a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c2c:	f000 fae4 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2208      	movs	r2, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000c48:	f008 ff3c 	bl	8009ac4 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c52:	f000 fad1 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MX_TIM2_Init+0xe8>)
 8000c58:	f002 fdca 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000398 	.word	0x20000398

08000c68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000c9a:	4a2e      	ldr	r2, [pc, #184]	; (8000d54 <MX_TIM3_Init+0xec>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000ca0:	f240 3283 	movw	r2, #899	; 0x383
 8000ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000cae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc0:	4823      	ldr	r0, [pc, #140]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000cc2:	f008 fbe7 	bl	8009494 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ccc:	f000 fa94 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481c      	ldr	r0, [pc, #112]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000cde:	f008 ffb3 	bl	8009c48 <HAL_TIM_ConfigClockSource>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ce8:	f000 fa86 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cec:	4818      	ldr	r0, [pc, #96]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000cee:	f008 fcc0 	bl	8009672 <HAL_TIM_PWM_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000cf8:	f000 fa7e 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000d0c:	f009 fc56 	bl	800a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d16:	f000 fa6f 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000d32:	f008 fec7 	bl	8009ac4 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d3c:	f000 fa5c 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <MX_TIM3_Init+0xe8>)
 8000d42:	f002 fd55 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 8000d46:	bf00      	nop
 8000d48:	3738      	adds	r7, #56	; 0x38
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200003e0 	.word	0x200003e0
 8000d54:	40000400 	.word	0x40000400

08000d58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <MX_TIM6_Init+0x68>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000d6e:	2259      	movs	r2, #89	; 0x59
 8000d70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000d7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000d88:	f008 fb84 	bl	8009494 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d92:	f000 fa31 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_TIM6_Init+0x64>)
 8000da4:	f009 fc0a 	bl	800a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000dae:	f000 fa23 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000428 	.word	0x20000428
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <MX_TIM7_Init+0x64>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000dda:	2259      	movs	r2, #89	; 0x59
 8000ddc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000de6:	2263      	movs	r2, #99	; 0x63
 8000de8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000df2:	f008 fb4f 	bl	8009494 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000dfc:	f000 f9fc 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_TIM7_Init+0x60>)
 8000e0e:	f009 fbd5 	bl	800a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000e18:	f000 f9ee 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000470 	.word	0x20000470
 8000e28:	40001400 	.word	0x40001400

08000e2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f00d fe1f 	bl	800eaa8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e6c:	4a3f      	ldr	r2, [pc, #252]	; (8000f6c <MX_TIM8_Init+0x140>)
 8000e6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e72:	f240 7207 	movw	r2, #1799	; 0x707
 8000e76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e98:	4833      	ldr	r0, [pc, #204]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000e9a:	f008 fafb 	bl	8009494 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000ea4:	f000 f9a8 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	482c      	ldr	r0, [pc, #176]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000eb6:	f008 fec7 	bl	8009c48 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000ec0:	f000 f99a 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000ec6:	f008 fbd4 	bl	8009672 <HAL_TIM_PWM_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000ed0:	f000 f992 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000edc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4821      	ldr	r0, [pc, #132]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000ee4:	f009 fb6a 	bl	800a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000eee:	f000 f983 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef2:	2360      	movs	r3, #96	; 0x60
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2204      	movs	r2, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000f18:	f008 fdd4 	bl	8009ac4 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000f22:	f000 f969 	bl	80011f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000f4a:	f009 fbb3 	bl	800a6b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000f54:	f000 f950 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_TIM8_Init+0x13c>)
 8000f5a:	f002 fc49 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 8000f5e:	bf00      	nop
 8000f60:	3758      	adds	r7, #88	; 0x58
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200004b8 	.word	0x200004b8
 8000f6c:	40010400 	.word	0x40010400

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_DMA_Init+0x4c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <MX_DMA_Init+0x4c>)
 8000f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_DMA_Init+0x4c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2038      	movs	r0, #56	; 0x38
 8000f98:	f004 f9ad 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f9c:	2038      	movs	r0, #56	; 0x38
 8000f9e:	f004 f9c6 	bl	800532e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	203a      	movs	r0, #58	; 0x3a
 8000fa8:	f004 f9a5 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fac:	203a      	movs	r0, #58	; 0x3a
 8000fae:	f004 f9be 	bl	800532e <HAL_NVIC_EnableIRQ>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <MX_GPIO_Init+0x21c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a7f      	ldr	r2, [pc, #508]	; (80011dc <MX_GPIO_Init+0x21c>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <MX_GPIO_Init+0x21c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	4b79      	ldr	r3, [pc, #484]	; (80011dc <MX_GPIO_Init+0x21c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a78      	ldr	r2, [pc, #480]	; (80011dc <MX_GPIO_Init+0x21c>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b76      	ldr	r3, [pc, #472]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b72      	ldr	r3, [pc, #456]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a71      	ldr	r2, [pc, #452]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b6b      	ldr	r3, [pc, #428]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a6a      	ldr	r2, [pc, #424]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b68      	ldr	r3, [pc, #416]	; (80011dc <MX_GPIO_Init+0x21c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b64      	ldr	r3, [pc, #400]	; (80011dc <MX_GPIO_Init+0x21c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a63      	ldr	r2, [pc, #396]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b61      	ldr	r3, [pc, #388]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a5c      	ldr	r2, [pc, #368]	; (80011dc <MX_GPIO_Init+0x21c>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b5a      	ldr	r3, [pc, #360]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b56      	ldr	r3, [pc, #344]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <MX_GPIO_Init+0x21c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <MX_GPIO_Init+0x21c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <MX_GPIO_Init+0x21c>)
 80010a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <MX_GPIO_Init+0x21c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	213c      	movs	r1, #60	; 0x3c
 80010ba:	4849      	ldr	r0, [pc, #292]	; (80011e0 <MX_GPIO_Init+0x220>)
 80010bc:	f004 ff8c 	bl	8005fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80010c6:	4847      	ldr	r0, [pc, #284]	; (80011e4 <MX_GPIO_Init+0x224>)
 80010c8:	f004 ff86 	bl	8005fd8 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80010d2:	4845      	ldr	r0, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x228>)
 80010d4:	f004 ff80 	bl	8005fd8 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 80010d8:	233c      	movs	r3, #60	; 0x3c
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010dc:	2311      	movs	r3, #17
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	483c      	ldr	r0, [pc, #240]	; (80011e0 <MX_GPIO_Init+0x220>)
 80010f0:	f004 fcd2 	bl	8005a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 80010f4:	230f      	movs	r3, #15
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4838      	ldr	r0, [pc, #224]	; (80011ec <MX_GPIO_Init+0x22c>)
 800110a:	f004 fcc5 	bl	8005a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800110e:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001114:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4832      	ldr	r0, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x230>)
 8001126:	f004 fcb7 	bl	8005a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800112a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001130:	2311      	movs	r3, #17
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4828      	ldr	r0, [pc, #160]	; (80011e4 <MX_GPIO_Init+0x224>)
 8001144:	f004 fca8 	bl	8005a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001148:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800114e:	2311      	movs	r3, #17
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4821      	ldr	r0, [pc, #132]	; (80011e8 <MX_GPIO_Init+0x228>)
 8001162:	f004 fc99 	bl	8005a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 8001166:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800116c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	481d      	ldr	r0, [pc, #116]	; (80011f4 <MX_GPIO_Init+0x234>)
 800117e:	f004 fc8b 	bl	8005a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	2006      	movs	r0, #6
 8001188:	f004 f8b5 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800118c:	2006      	movs	r0, #6
 800118e:	f004 f8ce 	bl	800532e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2101      	movs	r1, #1
 8001196:	2007      	movs	r0, #7
 8001198:	f004 f8ad 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800119c:	2007      	movs	r0, #7
 800119e:	f004 f8c6 	bl	800532e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	2008      	movs	r0, #8
 80011a8:	f004 f8a5 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011ac:	2008      	movs	r0, #8
 80011ae:	f004 f8be 	bl	800532e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	2009      	movs	r0, #9
 80011b8:	f004 f89d 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011bc:	2009      	movs	r0, #9
 80011be:	f004 f8b6 	bl	800532e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2101      	movs	r1, #1
 80011c6:	200a      	movs	r0, #10
 80011c8:	f004 f895 	bl	80052f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011cc:	200a      	movs	r0, #10
 80011ce:	f004 f8ae 	bl	800532e <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, uint8_t can_baud_rate)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f003 fa4a 	bl	80046aa <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	if(can_baud_rate == CAN_Disable)
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <PDM_CAN_Init+0x1c>
	{
		return HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	e02b      	b.n	8001278 <PDM_CAN_Init+0x74>
	}
	else if(can_baud_rate == CAN_125kbps)
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d103      	bne.n	800122e <PDM_CAN_Init+0x2a>
	{
		hcan->Init.Prescaler = 40;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2228      	movs	r2, #40	; 0x28
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	e013      	b.n	8001256 <PDM_CAN_Init+0x52>
	}

	else if(can_baud_rate == CAN_250kbps)
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d103      	bne.n	800123c <PDM_CAN_Init+0x38>
	{
		hcan->Init.Prescaler = 20;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2214      	movs	r2, #20
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	e00c      	b.n	8001256 <PDM_CAN_Init+0x52>
	}

	else if(can_baud_rate == CAN_500kbps)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d103      	bne.n	800124a <PDM_CAN_Init+0x46>
	{
		hcan->Init.Prescaler = 10;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	220a      	movs	r2, #10
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	e005      	b.n	8001256 <PDM_CAN_Init+0x52>
	}

	else if(can_baud_rate == CAN_1000kbps)
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d102      	bne.n	8001256 <PDM_CAN_Init+0x52>
	{
		hcan->Init.Prescaler = 5;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2205      	movs	r2, #5
 8001254:	605a      	str	r2, [r3, #4]
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f003 f92c 	bl	80044b4 <HAL_CAN_Init>

	//Initialize receive callbacks if there is at least one PWM CAN enabled
	if((pwmPinStatus & 0xF0) != 0x00)
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <PDM_CAN_Init+0x7c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <PDM_CAN_Init+0x6c>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001268:	2102      	movs	r1, #2
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f003 fcef 	bl	8004c4e <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f003 fa3d 	bl	80046f0 <HAL_CAN_Start>
 8001276:	4603      	mov	r3, r0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000060e 	.word	0x2000060e

08001284 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

	//Selects CAN transmission ID based on data transmission frequency
	switch(data_freq)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	3b01      	subs	r3, #1
 8001298:	2b04      	cmp	r3, #4
 800129a:	d821      	bhi.n	80012e0 <PDM_CAN_Transmit_Data+0x5c>
 800129c:	a201      	add	r2, pc, #4	; (adr r2, 80012a4 <PDM_CAN_Transmit_Data+0x20>)
 800129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a2:	bf00      	nop
 80012a4:	080012d9 	.word	0x080012d9
 80012a8:	080012d1 	.word	0x080012d1
 80012ac:	080012c9 	.word	0x080012c9
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012b9 	.word	0x080012b9
	{
	case Data_Freq_100Hz:
		canTxMessage.ExtId = 0x1E35C003;
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012ba:	4a59      	ldr	r2, [pc, #356]	; (8001420 <PDM_CAN_Transmit_Data+0x19c>)
 80012bc:	605a      	str	r2, [r3, #4]
		break;
 80012be:	e011      	b.n	80012e4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_80Hz:
		canTxMessage.ExtId = 0x1E35C004;
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012c2:	4a58      	ldr	r2, [pc, #352]	; (8001424 <PDM_CAN_Transmit_Data+0x1a0>)
 80012c4:	605a      	str	r2, [r3, #4]
		break;
 80012c6:	e00d      	b.n	80012e4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_50Hz:
		canTxMessage.ExtId = 0x1E35C005;
 80012c8:	4b54      	ldr	r3, [pc, #336]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012ca:	4a57      	ldr	r2, [pc, #348]	; (8001428 <PDM_CAN_Transmit_Data+0x1a4>)
 80012cc:	605a      	str	r2, [r3, #4]
		break;
 80012ce:	e009      	b.n	80012e4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_25Hz:
		canTxMessage.ExtId = 0x1E35C005;
 80012d0:	4b52      	ldr	r3, [pc, #328]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012d2:	4a55      	ldr	r2, [pc, #340]	; (8001428 <PDM_CAN_Transmit_Data+0x1a4>)
 80012d4:	605a      	str	r2, [r3, #4]
		break;
 80012d6:	e005      	b.n	80012e4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_10Hz:
		canTxMessage.ExtId = 0x1E35C006;
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012da:	4a54      	ldr	r2, [pc, #336]	; (800142c <PDM_CAN_Transmit_Data+0x1a8>)
 80012dc:	605a      	str	r2, [r3, #4]
		break;
 80012de:	e001      	b.n	80012e4 <PDM_CAN_Transmit_Data+0x60>
	default:
		return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e096      	b.n	8001412 <PDM_CAN_Transmit_Data+0x18e>
	}

	//Prepares transmission header
	canTxMessage.DLC = 0;
 80012e4:	4b4d      	ldr	r3, [pc, #308]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
	canTxMessage.IDE = CAN_ID_EXT;
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012ec:	2204      	movs	r2, #4
 80012ee:	609a      	str	r2, [r3, #8]
	canTxMessage.RTR = CAN_RTR_DATA;
 80012f0:	4b4a      	ldr	r3, [pc, #296]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
	canTxMessage.TransmitGlobalTime = DISABLE;
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	73bb      	strb	r3, [r7, #14]
 8001300:	e068      	b.n	80013d4 <PDM_CAN_Transmit_Data+0x150>
	{
		//Place data and ID inside transmission buffer if the data has the same frequency as selected
		if(dataFreqBuffer[i] == data_freq)
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <PDM_CAN_Transmit_Data+0x1ac>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	429a      	cmp	r2, r3
 800130c:	d141      	bne.n	8001392 <PDM_CAN_Transmit_Data+0x10e>
		{
			canTxData[canTxMessage.DLC]		 = dataIdBuffer[i] >> 8;
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	4a48      	ldr	r2, [pc, #288]	; (8001434 <PDM_CAN_Transmit_Data+0x1b0>)
 8001312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b40      	ldr	r3, [pc, #256]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	b2d1      	uxtb	r1, r2
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 8001322:	54d1      	strb	r1, [r2, r3]
			canTxData[canTxMessage.DLC + 1] |= dataIdBuffer[i] & 0xFF;
 8001324:	4b3d      	ldr	r3, [pc, #244]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	3301      	adds	r3, #1
 800132a:	4a43      	ldr	r2, [pc, #268]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	b25a      	sxtb	r2, r3
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	4940      	ldr	r1, [pc, #256]	; (8001434 <PDM_CAN_Transmit_Data+0x1b0>)
 8001334:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25a      	sxtb	r2, r3
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	3301      	adds	r3, #1
 8001344:	b2d1      	uxtb	r1, r2
 8001346:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 8001348:	54d1      	strb	r1, [r2, r3]
			canTxData[canTxMessage.DLC + 2]  = dataBuffer[i] >> 8;
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	4a3b      	ldr	r2, [pc, #236]	; (800143c <PDM_CAN_Transmit_Data+0x1b8>)
 800134e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	3302      	adds	r3, #2
 800135c:	b2d1      	uxtb	r1, r2
 800135e:	4a36      	ldr	r2, [pc, #216]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 8001360:	54d1      	strb	r1, [r2, r3]
			canTxData[canTxMessage.DLC + 3] |= dataBuffer[i] & 0xFF;
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	3303      	adds	r3, #3
 8001368:	4a33      	ldr	r2, [pc, #204]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	b25a      	sxtb	r2, r3
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	4932      	ldr	r1, [pc, #200]	; (800143c <PDM_CAN_Transmit_Data+0x1b8>)
 8001372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b25a      	sxtb	r2, r3
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	3303      	adds	r3, #3
 8001382:	b2d1      	uxtb	r1, r2
 8001384:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 8001386:	54d1      	strb	r1, [r2, r3]

			canTxMessage.DLC += 4;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	3304      	adds	r3, #4
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 8001390:	6113      	str	r3, [r2, #16]
		}

		//Sends transmission buffer if it's full
		if(canTxMessage.DLC == 8)
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d119      	bne.n	80013ce <PDM_CAN_Transmit_Data+0x14a>
		{
			ret_val = HAL_CAN_AddTxMessage(hcan, &canTxMessage, canTxData, &canTxMailbox);
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <PDM_CAN_Transmit_Data+0x1bc>)
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 800139e:	491f      	ldr	r1, [pc, #124]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f003 fa32 	bl	800480a <HAL_CAN_AddTxMessage>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]

			//Wait Transmission finish
			for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80013aa:	2300      	movs	r3, #0
 80013ac:	737b      	strb	r3, [r7, #13]
 80013ae:	e002      	b.n	80013b6 <PDM_CAN_Transmit_Data+0x132>
 80013b0:	7b7b      	ldrb	r3, [r7, #13]
 80013b2:	3301      	adds	r3, #1
 80013b4:	737b      	strb	r3, [r7, #13]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f003 fb02 	bl	80049c0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d002      	beq.n	80013c8 <PDM_CAN_Transmit_Data+0x144>
 80013c2:	7b7b      	ldrb	r3, [r7, #13]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d9f3      	bls.n	80013b0 <PDM_CAN_Transmit_Data+0x12c>

			canTxMessage.DLC = 0;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73bb      	strb	r3, [r7, #14]
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	2b1d      	cmp	r3, #29
 80013d8:	d993      	bls.n	8001302 <PDM_CAN_Transmit_Data+0x7e>
		}
	}

	//If there is only one data channel not sent, send it alone
	if(canTxMessage.DLC == 4)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d116      	bne.n	8001410 <PDM_CAN_Transmit_Data+0x18c>
	{
		ret_val = HAL_CAN_AddTxMessage(hcan, &canTxMessage, canTxData, &canTxMailbox);
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <PDM_CAN_Transmit_Data+0x1bc>)
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <PDM_CAN_Transmit_Data+0x1b4>)
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <PDM_CAN_Transmit_Data+0x198>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f003 fa0e 	bl	800480a <HAL_CAN_AddTxMessage>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80013f2:	2300      	movs	r3, #0
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	e002      	b.n	80013fe <PDM_CAN_Transmit_Data+0x17a>
 80013f8:	7b3b      	ldrb	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	733b      	strb	r3, [r7, #12]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f003 fade 	bl	80049c0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b03      	cmp	r3, #3
 8001408:	d002      	beq.n	8001410 <PDM_CAN_Transmit_Data+0x18c>
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d9f3      	bls.n	80013f8 <PDM_CAN_Transmit_Data+0x174>
	}

	return ret_val;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000538 	.word	0x20000538
 8001420:	1e35c003 	.word	0x1e35c003
 8001424:	1e35c004 	.word	0x1e35c004
 8001428:	1e35c005 	.word	0x1e35c005
 800142c:	1e35c006 	.word	0x1e35c006
 8001430:	2000055c 	.word	0x2000055c
 8001434:	200005b8 	.word	0x200005b8
 8001438:	20000510 	.word	0x20000510
 800143c:	2000057c 	.word	0x2000057c
 8001440:	20000518 	.word	0x20000518

08001444 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	return;
 8001448:	bf00      	nop
}
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	//Sets all outputs to zero
	Output_Reset_State();
 800145e:	f000 fbdd 	bl	8001c1c <Output_Reset_State>

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 8001462:	f000 fb11 	bl	8001a88 <PDM_Hard_Code_Config>
	//Loads both normal output and PWM output parameters
//	Output_Cfg_Load_From_EEPROM(hi2c);
//	PWM_Output_Cfg_Load_From_EEPROM(hi2c);

	//Initializes each PWM able output
	PDM_PWM_Init(hcan, &pwmOutStruct[0], 0, EEPROM_PWM1_CFG1_ADDRESS);
 8001466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146a:	2200      	movs	r2, #0
 800146c:	4926      	ldr	r1, [pc, #152]	; (8001508 <PDM_Init+0xb4>)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fe4c 	bl	800210c <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[1], 1, EEPROM_PWM2_CFG1_ADDRESS);
 8001474:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001478:	2201      	movs	r2, #1
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <PDM_Init+0xb8>)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fe45 	bl	800210c <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[2], 2, EEPROM_PWM3_CFG1_ADDRESS);
 8001482:	f643 63fc 	movw	r3, #16124	; 0x3efc
 8001486:	2202      	movs	r2, #2
 8001488:	4921      	ldr	r1, [pc, #132]	; (8001510 <PDM_Init+0xbc>)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fe3e 	bl	800210c <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[3], 3, EEPROM_PWM4_CFG1_ADDRESS);
 8001490:	f645 53fa 	movw	r3, #24058	; 0x5dfa
 8001494:	2203      	movs	r2, #3
 8001496:	491f      	ldr	r1, [pc, #124]	; (8001514 <PDM_Init+0xc0>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fe37 	bl	800210c <PDM_PWM_Init>

	//Checks input pin levels
	PDM_Input_Process();
 800149e:	f000 fc4b 	bl	8001d38 <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, canBaudRate);
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <PDM_Init+0xc4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff feab 	bl	8001204 <PDM_CAN_Init>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 80014ae:	2300      	movs	r3, #0
 80014b0:	81fb      	strh	r3, [r7, #14]
 80014b2:	e009      	b.n	80014c8 <PDM_Init+0x74>
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	89fa      	ldrh	r2, [r7, #14]
 80014b8:	0052      	lsls	r2, r2, #1
 80014ba:	b291      	uxth	r1, r2
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <PDM_Init+0xc8>)
 80014be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	3301      	adds	r3, #1
 80014c6:	81fb      	strh	r3, [r7, #14]
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	2b1d      	cmp	r3, #29
 80014cc:	d9f2      	bls.n	80014b4 <PDM_Init+0x60>

	//Sets outputs based on input levels
	PDM_Output_Process();
 80014ce:	f000 fd33 	bl	8001f38 <PDM_Output_Process>

	//Starts Multisense data conversion
	flagReading[0] = Data_Read_Ready;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <PDM_Init+0xcc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
	flagReading[1] = Data_Read_Ready;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <PDM_Init+0xcc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	705a      	strb	r2, [r3, #1]
	PDM_Data_Conversion(&htim6);
 80014de:	4811      	ldr	r0, [pc, #68]	; (8001524 <PDM_Init+0xd0>)
 80014e0:	f001 fc66 	bl	8002db0 <PDM_Data_Conversion>

	//Initializes timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[5], 5);
 80014e4:	2205      	movs	r2, #5
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <PDM_Init+0xd4>)
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <PDM_Init+0xd8>)
 80014ea:	f002 fc05 	bl	8003cf8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 5);
 80014ee:	2205      	movs	r2, #5
 80014f0:	490f      	ldr	r1, [pc, #60]	; (8001530 <PDM_Init+0xdc>)
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <PDM_Init+0xe0>)
 80014f4:	f002 fc00 	bl	8003cf8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <PDM_Init+0xe4>)
 80014fa:	f008 f81b 	bl	8009534 <HAL_TIM_Base_Start_IT>

	return;
 80014fe:	bf00      	nop
}
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200006d4 	.word	0x200006d4
 800150c:	200006ec 	.word	0x200006ec
 8001510:	20000704 	.word	0x20000704
 8001514:	2000071c 	.word	0x2000071c
 8001518:	20000504 	.word	0x20000504
 800151c:	200005b8 	.word	0x200005b8
 8001520:	2000060c 	.word	0x2000060c
 8001524:	20000428 	.word	0x20000428
 8001528:	200005fe 	.word	0x200005fe
 800152c:	2000017c 	.word	0x2000017c
 8001530:	200005f4 	.word	0x200005f4
 8001534:	200001c4 	.word	0x200001c4
 8001538:	20000470 	.word	0x20000470

0800153c <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
	return;
 8001548:	bf00      	nop
}
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <PDM_USB_Transmit_Data>:

//Sends data channels via USB
void PDM_USB_Transmit_Data()
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	return;
 8001558:	bf00      	nop
}
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PDM_PWM_Map_Load_From_EEPROM>:

HAL_StatusTypeDef PDM_PWM_Map_Load_From_EEPROM(I2C_HandleTypeDef* hi2c, PWM_Control_Struct* pwm_struct, uint16_t mem_address)
{
 8001562:	b590      	push	{r4, r7, lr}
 8001564:	f6ad 7dac 	subw	sp, sp, #4012	; 0xfac
 8001568:	af04      	add	r7, sp, #16
 800156a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800156e:	f6a3 738c 	subw	r3, r3, #3980	; 0xf8c
 8001572:	6018      	str	r0, [r3, #0]
 8001574:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001578:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800157c:	6019      	str	r1, [r3, #0]
 800157e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001582:	f6a3 7392 	subw	r3, r3, #3986	; 0xf92
 8001586:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[EEPROM_PWM_CFG_MAX_SIZE];
	uint16_t bufferAddress = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90
	HAL_StatusTypeDef retVal = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3f8f 	strb.w	r3, [r7, #3983]	; 0xf8f

	if(pwm_struct->outputType != OutType_Map)
 8001594:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001598:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	789b      	ldrb	r3, [r3, #2]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d002      	beq.n	80015aa <PDM_PWM_Map_Load_From_EEPROM+0x48>
		return retVal;
 80015a4:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	; 0xf8f
 80015a8:	e268      	b.n	8001a7c <PDM_PWM_Map_Load_From_EEPROM+0x51a>

	retVal = HAL_I2C_Mem_Read(hi2c, EEPROM_I2C_ADDRESS, mem_address, 2, buffer, sizeof(buffer), EEPROM_TIMEOUT);
 80015aa:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80015ae:	f6a3 7392 	subw	r3, r3, #3986	; 0xf92
 80015b2:	881a      	ldrh	r2, [r3, #0]
 80015b4:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80015b8:	f6a3 708c 	subw	r0, r3, #3980	; 0xf8c
 80015bc:	230a      	movs	r3, #10
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	f640 737f 	movw	r3, #3967	; 0xf7f
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2302      	movs	r3, #2
 80015ce:	21a0      	movs	r1, #160	; 0xa0
 80015d0:	6800      	ldr	r0, [r0, #0]
 80015d2:	f004 fe91 	bl	80062f8 <HAL_I2C_Mem_Read>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f887 3f8f 	strb.w	r3, [r7, #3983]	; 0xf8f

	if(pwm_struct->pwmMapStruct != NULL)
 80015dc:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80015e0:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 823e 	beq.w	8001a6a <PDM_PWM_Map_Load_From_EEPROM+0x508>
	{
		pwm_struct->pwmMapStruct->mapLengths[0] = buffer[0];
 80015ee:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80015f2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80015fe:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	731a      	strb	r2, [r3, #12]
		pwm_struct->pwmMapStruct->mapLengths[1] = buffer[1];
 8001606:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800160a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001616:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 800161a:	7852      	ldrb	r2, [r2, #1]
 800161c:	735a      	strb	r2, [r3, #13]

		bufferAddress += 2;
 800161e:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001622:	3302      	adds	r3, #2
 8001624:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

		if((pwm_struct->pwmMapStruct->mapLengths[0] > PWM_TABLE_MAX_SIZE)
 8001628:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800162c:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	7b1b      	ldrb	r3, [r3, #12]
 8001636:	2b10      	cmp	r3, #16
 8001638:	d808      	bhi.n	800164c <PDM_PWM_Map_Load_From_EEPROM+0xea>
				|| (pwm_struct->pwmMapStruct->mapLengths[1] > PWM_TABLE_MAX_SIZE))
 800163a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800163e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	7b5b      	ldrb	r3, [r3, #13]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d906      	bls.n	800165a <PDM_PWM_Map_Load_From_EEPROM+0xf8>
			pwm_struct->outputType = OutType_Error;
 800164c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001650:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2204      	movs	r2, #4
 8001658:	709a      	strb	r2, [r3, #2]

		if(pwm_struct->outputType == OutType_Map)
 800165a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800165e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	2b02      	cmp	r3, #2
 8001668:	f040 80a4 	bne.w	80017b4 <PDM_PWM_Map_Load_From_EEPROM+0x252>
		{
			pwm_struct->pwmMapStruct->dutyCycleMap = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(uint16_t*));
 800166c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001670:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	7b1b      	ldrb	r3, [r3, #12]
 800167a:	009a      	lsls	r2, r3, #2
 800167c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001680:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695c      	ldr	r4, [r3, #20]
 8001688:	4610      	mov	r0, r2
 800168a:	f00d f9fd 	bl	800ea88 <malloc>
 800168e:	4603      	mov	r3, r0
 8001690:	61e3      	str	r3, [r4, #28]
			pwm_struct->pwmMapStruct->commandVarStep[0] = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(int16_t));
 8001692:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001696:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	7b1b      	ldrb	r3, [r3, #12]
 80016a0:	005a      	lsls	r2, r3, #1
 80016a2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016a6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695c      	ldr	r4, [r3, #20]
 80016ae:	4610      	mov	r0, r2
 80016b0:	f00d f9ea 	bl	800ea88 <malloc>
 80016b4:	4603      	mov	r3, r0
 80016b6:	6163      	str	r3, [r4, #20]
			pwm_struct->pwmMapStruct->commandVarStep[1] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(int16_t));
 80016b8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016bc:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	7b5b      	ldrb	r3, [r3, #13]
 80016c6:	005a      	lsls	r2, r3, #1
 80016c8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016cc:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695c      	ldr	r4, [r3, #20]
 80016d4:	4610      	mov	r0, r2
 80016d6:	f00d f9d7 	bl	800ea88 <malloc>
 80016da:	4603      	mov	r3, r0
 80016dc:	61a3      	str	r3, [r4, #24]

			if((pwm_struct->pwmMapStruct->dutyCycleMap == NULL)
 80016de:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016e2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d011      	beq.n	8001714 <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[0] == NULL)
 80016f0:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016f4:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d008      	beq.n	8001714 <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[1] == NULL))
 8001702:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001706:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d106      	bne.n	8001722 <PDM_PWM_Map_Load_From_EEPROM+0x1c0>
				pwm_struct->outputType = OutType_Error;
 8001714:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001718:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2204      	movs	r2, #4
 8001720:	709a      	strb	r2, [r3, #2]

			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3f97 	strb.w	r3, [r7, #3991]	; 0xf97
 8001728:	e031      	b.n	800178e <PDM_PWM_Map_Load_From_EEPROM+0x22c>
			{
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(uint16_t));
 800172a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800172e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	7b5b      	ldrb	r3, [r3, #13]
 8001738:	0059      	lsls	r1, r3, #1
 800173a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800173e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18d4      	adds	r4, r2, r3
 8001750:	4608      	mov	r0, r1
 8001752:	f00d f999 	bl	800ea88 <malloc>
 8001756:	4603      	mov	r3, r0
 8001758:	6023      	str	r3, [r4, #0]

				if(pwm_struct->pwmMapStruct->dutyCycleMap[i] == NULL)
 800175a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800175e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <PDM_PWM_Map_Load_From_EEPROM+0x222>
					pwm_struct->outputType = OutType_Error;
 8001776:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800177a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2204      	movs	r2, #4
 8001782:	709a      	strb	r2, [r3, #2]
			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 8001784:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 8001788:	3301      	adds	r3, #1
 800178a:	f887 3f97 	strb.w	r3, [r7, #3991]	; 0xf97
 800178e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001792:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	f897 2f97 	ldrb.w	r2, [r7, #3991]	; 0xf97
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <PDM_PWM_Map_Load_From_EEPROM+0x252>
 80017a4:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017a8:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d0ba      	beq.n	800172a <PDM_PWM_Map_Load_From_EEPROM+0x1c8>
			}
		}

		if(pwm_struct->outputType == OutType_Map)
 80017b4:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017b8:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f040 8159 	bne.w	8001a78 <PDM_PWM_Map_Load_From_EEPROM+0x516>
		{
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3f96 	strb.w	r3, [r7, #3990]	; 0xf96
 80017cc:	e045      	b.n	800185a <PDM_PWM_Map_Load_From_EEPROM+0x2f8>
			{
				pwm_struct->pwmMapStruct->commandVarStep[0][i]  = buffer[(i * 2) + bufferAddress] << 8;
 80017ce:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 80017d2:	005a      	lsls	r2, r3, #1
 80017d4:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80017d8:	4413      	add	r3, r2
 80017da:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80017de:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	0219      	lsls	r1, r3, #8
 80017e6:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017ea:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	b20a      	sxth	r2, r1
 80017fe:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[0][i] |= buffer[(i * 2) + 1 + bufferAddress];
 8001800:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001804:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	f9b3 1000 	ldrsh.w	r1, [r3]
 800181a:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001826:	4413      	add	r3, r2
 8001828:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 800182c:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	b21a      	sxth	r2, r3
 8001834:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001838:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	6958      	ldr	r0, [r3, #20]
 8001842:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4403      	add	r3, r0
 800184a:	430a      	orrs	r2, r1
 800184c:	b212      	sxth	r2, r2
 800184e:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8001850:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001854:	3301      	adds	r3, #1
 8001856:	f887 3f96 	strb.w	r3, [r7, #3990]	; 0xf96
 800185a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800185e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	7b1b      	ldrb	r3, [r3, #12]
 8001868:	f897 2f96 	ldrb.w	r2, [r7, #3990]	; 0xf96
 800186c:	429a      	cmp	r2, r3
 800186e:	d3ae      	bcc.n	80017ce <PDM_PWM_Map_Load_From_EEPROM+0x26c>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[0] * 2;
 8001870:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001874:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	7b1b      	ldrb	r3, [r3, #12]
 800187e:	b29b      	uxth	r3, r3
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001888:	4413      	add	r3, r2
 800188a:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3f95 	strb.w	r3, [r7, #3989]	; 0xf95
 8001894:	e045      	b.n	8001922 <PDM_PWM_Map_Load_From_EEPROM+0x3c0>
			{
				pwm_struct->pwmMapStruct->commandVarStep[1][i]  = buffer[(i * 2) + bufferAddress] << 8;
 8001896:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 800189a:	005a      	lsls	r2, r3, #1
 800189c:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80018a0:	4413      	add	r3, r2
 80018a2:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80018a6:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	0219      	lsls	r1, r3, #8
 80018ae:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018b2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	b20a      	sxth	r2, r1
 80018c6:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[1][i] |= buffer[(i * 2) + 1 + bufferAddress];
 80018c8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018cc:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80018e2:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80018ee:	4413      	add	r3, r2
 80018f0:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80018f4:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001900:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	6998      	ldr	r0, [r3, #24]
 800190a:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4403      	add	r3, r0
 8001912:	430a      	orrs	r2, r1
 8001914:	b212      	sxth	r2, r2
 8001916:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 8001918:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 800191c:	3301      	adds	r3, #1
 800191e:	f887 3f95 	strb.w	r3, [r7, #3989]	; 0xf95
 8001922:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001926:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	7b5b      	ldrb	r3, [r3, #13]
 8001930:	f897 2f95 	ldrb.w	r2, [r7, #3989]	; 0xf95
 8001934:	429a      	cmp	r2, r3
 8001936:	d3ae      	bcc.n	8001896 <PDM_PWM_Map_Load_From_EEPROM+0x334>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[1] * 2;
 8001938:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800193c:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	7b5b      	ldrb	r3, [r3, #13]
 8001946:	b29b      	uxth	r3, r3
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001950:	4413      	add	r3, r2
 8001952:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3f94 	strb.w	r3, [r7, #3988]	; 0xf94
 800195c:	e078      	b.n	8001a50 <PDM_PWM_Map_Load_From_EEPROM+0x4ee>
			{
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3f93 	strb.w	r3, [r7, #3987]	; 0xf93
 8001964:	e064      	b.n	8001a30 <PDM_PWM_Map_Load_From_EEPROM+0x4ce>
				{
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y]  = buffer[(((10 * x) + y) * 2) + bufferAddress] << 8;
 8001966:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	461a      	mov	r2, r3
 8001974:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001978:	4413      	add	r3, r2
 800197a:	005a      	lsls	r2, r3, #1
 800197c:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001980:	4413      	add	r3, r2
 8001982:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001986:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	b29a      	uxth	r2, r3
 800198e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001992:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	69d9      	ldr	r1, [r3, #28]
 800199c:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	440b      	add	r3, r1
 80019ae:	0212      	lsls	r2, r2, #8
 80019b0:	b292      	uxth	r2, r2
 80019b2:	801a      	strh	r2, [r3, #0]
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y] |= buffer[(((10 * x) + y) * 2) + 1 + bufferAddress];
 80019b4:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80019b8:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	8819      	ldrh	r1, [r3, #0]
 80019d6:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	461a      	mov	r2, r3
 80019e4:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 80019e8:	4413      	add	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80019f2:	4413      	add	r3, r2
 80019f4:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80019f8:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a04:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	69d8      	ldr	r0, [r3, #28]
 8001a0e:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4403      	add	r3, r0
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4403      	add	r3, r0
 8001a20:	430a      	orrs	r2, r1
 8001a22:	b292      	uxth	r2, r2
 8001a24:	801a      	strh	r2, [r3, #0]
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001a26:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f887 3f93 	strb.w	r3, [r7, #3987]	; 0xf93
 8001a30:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a34:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	7b5b      	ldrb	r3, [r3, #13]
 8001a3e:	f897 2f93 	ldrb.w	r2, [r7, #3987]	; 0xf93
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d38f      	bcc.n	8001966 <PDM_PWM_Map_Load_From_EEPROM+0x404>
			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001a46:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f887 3f94 	strb.w	r3, [r7, #3988]	; 0xf94
 8001a50:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a54:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	7b1b      	ldrb	r3, [r3, #12]
 8001a5e:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001a62:	429a      	cmp	r2, r3
 8001a64:	f4ff af7b 	bcc.w	800195e <PDM_PWM_Map_Load_From_EEPROM+0x3fc>
 8001a68:	e006      	b.n	8001a78 <PDM_PWM_Map_Load_From_EEPROM+0x516>
			}
		}
	}

	else
		pwm_struct->outputType = OutType_Error;
 8001a6a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a6e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	709a      	strb	r2, [r3, #2]

	return retVal;
 8001a78:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	; 0xf8f
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f607 779c 	addw	r7, r7, #3996	; 0xf9c
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
	...

08001a88 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config()
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	outputStruct[0].inputEnable[0] = 0x0011;
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001a8e:	2211      	movs	r2, #17
 8001a90:	801a      	strh	r2, [r3, #0]
	outputStruct[0].inputLevels[0] = 0x0000;
 8001a92:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	809a      	strh	r2, [r3, #4]
	outputStruct[0].inputEnable[1] = 0x0018;
 8001a98:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001a9a:	2218      	movs	r2, #24
 8001a9c:	805a      	strh	r2, [r3, #2]
	outputStruct[0].inputLevels[1] = 0x0000;
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].outputType = OutType_Preset;
 8001aa4:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	709a      	strb	r2, [r3, #2]
	pwmOutStruct[0].presetEnable[0] = 0x0001;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].presetInputs[0] = 0x0000;
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	815a      	strh	r2, [r3, #10]
	pwmOutStruct[0].presetDutyCycle[0] = 1000;
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001abc:	81da      	strh	r2, [r3, #14]
	pwmOutStruct[0].presetEnable[1] = 0x0001;
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	811a      	strh	r2, [r3, #8]
	pwmOutStruct[0].presetInputs[1] = 0x0000;
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	819a      	strh	r2, [r3, #12]
	pwmOutStruct[0].presetDutyCycle[1] = 800;
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001acc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ad0:	821a      	strh	r2, [r3, #16]


	outputStruct[1].inputEnable[0] = 0x0016;
 8001ad2:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001ad4:	2216      	movs	r2, #22
 8001ad6:	819a      	strh	r2, [r3, #12]
	outputStruct[1].inputLevels[0] = 0x0002;
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001ada:	2202      	movs	r2, #2
 8001adc:	821a      	strh	r2, [r3, #16]
	pwmOutStruct[1].outputType = OutType_Preset;
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	769a      	strb	r2, [r3, #26]
	pwmOutStruct[1].presetEnable[0] = 0x0004;
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	83da      	strh	r2, [r3, #30]
	pwmOutStruct[1].presetInputs[0] = 0x0000;
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	845a      	strh	r2, [r3, #34]	; 0x22
	pwmOutStruct[1].presetDutyCycle[0] = 1000;
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af6:	84da      	strh	r2, [r3, #38]	; 0x26

	outputStruct[2].inputEnable[0] = 0x0016;
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001afa:	2216      	movs	r2, #22
 8001afc:	831a      	strh	r2, [r3, #24]
	outputStruct[2].inputLevels[0] = 0x0002;
 8001afe:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	839a      	strh	r2, [r3, #28]
	pwmOutStruct[2].outputType = OutType_Preset;
 8001b04:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	pwmOutStruct[2].presetEnable[0] = 0x0004;
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	86da      	strh	r2, [r3, #54]	; 0x36
	pwmOutStruct[2].presetInputs[0] = 0x0000;
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	875a      	strh	r2, [r3, #58]	; 0x3a
	pwmOutStruct[2].presetDutyCycle[0] = 1000;
 8001b18:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1e:	87da      	strh	r2, [r3, #62]	; 0x3e

	outputStruct[3].inputEnable[0] = 0x0016;
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b22:	2216      	movs	r2, #22
 8001b24:	849a      	strh	r2, [r3, #36]	; 0x24
	outputStruct[3].inputLevels[0] = 0x0002;
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	851a      	strh	r2, [r3, #40]	; 0x28
	pwmOutStruct[3].outputType = OutType_Preset;
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	pwmOutStruct[3].presetEnable[0] = 0x0004;
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b36:	2204      	movs	r2, #4
 8001b38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	pwmOutStruct[3].presetInputs[0] = 0x0000;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	pwmOutStruct[3].presetDutyCycle[0] = 1000;
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <PDM_Hard_Code_Config+0x190>)
 8001b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	outputStruct[4].inputEnable[0] = 0x0010;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b50:	2210      	movs	r2, #16
 8001b52:	861a      	strh	r2, [r3, #48]	; 0x30
	outputStruct[4].inputLevels[0] = 0x0000;
 8001b54:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	869a      	strh	r2, [r3, #52]	; 0x34

	outputStruct[5].inputEnable[0] = 0x0010;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
	outputStruct[5].inputLevels[0] = 0x0000;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	outputStruct[6].inputEnable[0] = 0x0010;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	outputStruct[6].inputLevels[0] = 0x0000;
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	outputStruct[7].inputEnable[0] = 0x0008;
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	outputStruct[7].inputLevels[0] = 0x0000;
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	outputStruct[8].inputEnable[0] = 0x0010;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	outputStruct[8].inputLevels[0] = 0x0000;
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	outputStruct[9].inputEnable[0] = 0x0010;
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	outputStruct[9].inputLevels[0] = 0x0000;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	outputStruct[10].inputEnable[0] = 0x0010;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001baa:	2210      	movs	r2, #16
 8001bac:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	outputStruct[10].inputLevels[0] = 0x0000;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	outputStruct[11].inputEnable[0] = 0x001A;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bba:	221a      	movs	r2, #26
 8001bbc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	outputStruct[11].inputLevels[0] = 0x0000;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

	outputStruct[12].inputEnable[0] = 0x0008;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bca:	2208      	movs	r2, #8
 8001bcc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	outputStruct[12].inputLevels[0] = 0x0000;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	outputStruct[13].inputEnable[0] = 0x0010;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bda:	2210      	movs	r2, #16
 8001bdc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	outputStruct[13].inputLevels[0] = 0x0000;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	outputStruct[14].inputEnable[0] = 0x0010;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bea:	2210      	movs	r2, #16
 8001bec:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	outputStruct[14].inputLevels[0] = 0x0000;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	outputStruct[15].inputEnable[0] = 0x0010;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	outputStruct[15].inputLevels[0] = 0x0000;
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <PDM_Hard_Code_Config+0x18c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	return;
 8001c08:	bf00      	nop
}
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000614 	.word	0x20000614
 8001c18:	200006d4 	.word	0x200006d4

08001c1c <Output_Reset_State>:

static void Output_Reset_State()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	e00e      	b.n	8001c46 <Output_Reset_State+0x2a>
		memset(&outputStruct[i], '\0', sizeof(Output_Control_Struct));
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4a3a      	ldr	r2, [pc, #232]	; (8001d1c <Output_Reset_State+0x100>)
 8001c34:	4413      	add	r3, r2
 8001c36:	220c      	movs	r2, #12
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00c ff34 	bl	800eaa8 <memset>
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	3301      	adds	r3, #1
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d9ed      	bls.n	8001c28 <Output_Reset_State+0xc>

	//Starts PWM timers
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c4c:	210c      	movs	r1, #12
 8001c4e:	4834      	ldr	r0, [pc, #208]	; (8001d20 <Output_Reset_State+0x104>)
 8001c50:	f007 fd68 	bl	8009724 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001c54:	2104      	movs	r1, #4
 8001c56:	4833      	ldr	r0, [pc, #204]	; (8001d24 <Output_Reset_State+0x108>)
 8001c58:	f008 fbf6 	bl	800a448 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	4832      	ldr	r0, [pc, #200]	; (8001d28 <Output_Reset_State+0x10c>)
 8001c60:	f007 fd60 	bl	8009724 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c64:	210c      	movs	r1, #12
 8001c66:	4831      	ldr	r0, [pc, #196]	; (8001d2c <Output_Reset_State+0x110>)
 8001c68:	f007 fd5c 	bl	8009724 <HAL_TIM_PWM_Start>

	//Zeroes all the PWM outputs duty cycles
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <Output_Reset_State+0x104>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <Output_Reset_State+0x108>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <Output_Reset_State+0x10c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <Output_Reset_State+0x110>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

	//Sets all normal outputs to zero
	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c92:	4827      	ldr	r0, [pc, #156]	; (8001d30 <Output_Reset_State+0x114>)
 8001c94:	f004 f9a0 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9e:	4824      	ldr	r0, [pc, #144]	; (8001d30 <Output_Reset_State+0x114>)
 8001ca0:	f004 f99a 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001caa:	4821      	ldr	r0, [pc, #132]	; (8001d30 <Output_Reset_State+0x114>)
 8001cac:	f004 f994 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb6:	481e      	ldr	r0, [pc, #120]	; (8001d30 <Output_Reset_State+0x114>)
 8001cb8:	f004 f98e 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <Output_Reset_State+0x114>)
 8001cc4:	f004 f988 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4818      	ldr	r0, [pc, #96]	; (8001d30 <Output_Reset_State+0x114>)
 8001cd0:	f004 f982 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cda:	4815      	ldr	r0, [pc, #84]	; (8001d30 <Output_Reset_State+0x114>)
 8001cdc:	f004 f97c 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <Output_Reset_State+0x114>)
 8001ce8:	f004 f976 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4810      	ldr	r0, [pc, #64]	; (8001d34 <Output_Reset_State+0x118>)
 8001cf2:	f004 f971 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <Output_Reset_State+0x118>)
 8001cfc:	f004 f96c 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2120      	movs	r1, #32
 8001d04:	480b      	ldr	r0, [pc, #44]	; (8001d34 <Output_Reset_State+0x118>)
 8001d06:	f004 f967 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <Output_Reset_State+0x118>)
 8001d10:	f004 f962 	bl	8005fd8 <HAL_GPIO_WritePin>

	return;
 8001d14:	bf00      	nop
}
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000614 	.word	0x20000614
 8001d20:	200003e0 	.word	0x200003e0
 8001d24:	200004b8 	.word	0x200004b8
 8001d28:	20000398 	.word	0x20000398
 8001d2c:	20000350 	.word	0x20000350
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021800 	.word	0x40021800

08001d38 <PDM_Input_Process>:

#include <pdm.h>

//Process input pin levels
void PDM_Input_Process()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	inputLevels = 0x0000;
 8001d3c:	4b7a      	ldr	r3, [pc, #488]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]

	inputLevels  =  HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 8001d42:	2101      	movs	r1, #1
 8001d44:	4879      	ldr	r0, [pc, #484]	; (8001f2c <PDM_Input_Process+0x1f4>)
 8001d46:	f004 f92f 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d50:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 8001d52:	2102      	movs	r1, #2
 8001d54:	4875      	ldr	r0, [pc, #468]	; (8001f2c <PDM_Input_Process+0x1f4>)
 8001d56:	f004 f927 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	4b71      	ldr	r3, [pc, #452]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b6e      	ldr	r3, [pc, #440]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d6e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8001d70:	2104      	movs	r1, #4
 8001d72:	486e      	ldr	r0, [pc, #440]	; (8001f2c <PDM_Input_Process+0x1f4>)
 8001d74:	f004 f918 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d8c:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8001d8e:	2108      	movs	r1, #8
 8001d90:	4866      	ldr	r0, [pc, #408]	; (8001f2c <PDM_Input_Process+0x1f4>)
 8001d92:	f004 f909 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001daa:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8001dac:	2110      	movs	r1, #16
 8001dae:	4860      	ldr	r0, [pc, #384]	; (8001f30 <PDM_Input_Process+0x1f8>)
 8001db0:	f004 f8fa 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001dc8:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4858      	ldr	r0, [pc, #352]	; (8001f30 <PDM_Input_Process+0x1f8>)
 8001dce:	f004 f8eb 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001de6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 8001de8:	2140      	movs	r1, #64	; 0x40
 8001dea:	4852      	ldr	r0, [pc, #328]	; (8001f34 <PDM_Input_Process+0x1fc>)
 8001dec:	f004 f8dc 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001df0:	4603      	mov	r3, r0
 8001df2:	019b      	lsls	r3, r3, #6
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e04:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	484a      	ldr	r0, [pc, #296]	; (8001f34 <PDM_Input_Process+0x1fc>)
 8001e0a:	f004 f8cd 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	01db      	lsls	r3, r3, #7
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e22:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 8001e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e28:	4842      	ldr	r0, [pc, #264]	; (8001f34 <PDM_Input_Process+0x1fc>)
 8001e2a:	f004 f8bd 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e42:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 8001e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e48:	483a      	ldr	r0, [pc, #232]	; (8001f34 <PDM_Input_Process+0x1fc>)
 8001e4a:	f004 f8ad 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e62:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 8001e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e68:	4832      	ldr	r0, [pc, #200]	; (8001f34 <PDM_Input_Process+0x1fc>)
 8001e6a:	f004 f89d 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e82:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 8001e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e88:	482a      	ldr	r0, [pc, #168]	; (8001f34 <PDM_Input_Process+0x1fc>)
 8001e8a:	f004 f88d 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	02db      	lsls	r3, r3, #11
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001ea2:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8001ea4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea8:	4821      	ldr	r0, [pc, #132]	; (8001f30 <PDM_Input_Process+0x1f8>)
 8001eaa:	f004 f87d 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	031b      	lsls	r3, r3, #12
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001ec2:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8001ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec8:	4819      	ldr	r0, [pc, #100]	; (8001f30 <PDM_Input_Process+0x1f8>)
 8001eca:	f004 f86d 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	035b      	lsls	r3, r3, #13
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001ee2:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 8001ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ee8:	4811      	ldr	r0, [pc, #68]	; (8001f30 <PDM_Input_Process+0x1f8>)
 8001eea:	f004 f85d 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	039b      	lsls	r3, r3, #14
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001f02:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8001f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f08:	4809      	ldr	r0, [pc, #36]	; (8001f30 <PDM_Input_Process+0x1f8>)
 8001f0a:	f004 f84d 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	03db      	lsls	r3, r3, #15
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b01      	ldr	r3, [pc, #4]	; (8001f28 <PDM_Input_Process+0x1f0>)
 8001f22:	801a      	strh	r2, [r3, #0]

	return;
 8001f24:	bf00      	nop
}
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000610 	.word	0x20000610
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020800 	.word	0x40020800

08001f38 <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
	GPIO_PinState output_levels[NBR_OF_OUTPUTS];

	//Process input conditions and safety flags for each output
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
 8001f42:	e061      	b.n	8002008 <PDM_Output_Process+0xd0>
	{
		if((((flagDriverSafety >> i) & 0x01) == 0)
 8001f44:	4b68      	ldr	r3, [pc, #416]	; (80020e8 <PDM_Output_Process+0x1b0>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	fa42 f303 	asr.w	r3, r2, r3
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d14e      	bne.n	8001ff6 <PDM_Output_Process+0xbe>
				&& (__PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[0], outputStruct[i].inputLevels[0])
 8001f58:	7dfa      	ldrb	r2, [r7, #23]
 8001f5a:	4964      	ldr	r1, [pc, #400]	; (80020ec <PDM_Output_Process+0x1b4>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3304      	adds	r3, #4
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <PDM_Output_Process+0x1b8>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	4053      	eors	r3, r2
 8001f70:	b299      	uxth	r1, r3
 8001f72:	7dfa      	ldrb	r2, [r7, #23]
 8001f74:	485d      	ldr	r0, [pc, #372]	; (80020ec <PDM_Output_Process+0x1b4>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4403      	add	r3, r0
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	400b      	ands	r3, r1
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <PDM_Output_Process+0x66>
 8001f8a:	7dfa      	ldrb	r2, [r7, #23]
 8001f8c:	4957      	ldr	r1, [pc, #348]	; (80020ec <PDM_Output_Process+0x1b4>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d124      	bne.n	8001fe8 <PDM_Output_Process+0xb0>
				||  __PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[1], outputStruct[i].inputLevels[1])))
 8001f9e:	7dfa      	ldrb	r2, [r7, #23]
 8001fa0:	4952      	ldr	r1, [pc, #328]	; (80020ec <PDM_Output_Process+0x1b4>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3306      	adds	r3, #6
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <PDM_Output_Process+0x1b8>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4053      	eors	r3, r2
 8001fb6:	b299      	uxth	r1, r3
 8001fb8:	7dfa      	ldrb	r2, [r7, #23]
 8001fba:	484c      	ldr	r0, [pc, #304]	; (80020ec <PDM_Output_Process+0x1b4>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4403      	add	r3, r0
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	400b      	ands	r3, r1
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d111      	bne.n	8001ff6 <PDM_Output_Process+0xbe>
 8001fd2:	7dfa      	ldrb	r2, [r7, #23]
 8001fd4:	4945      	ldr	r1, [pc, #276]	; (80020ec <PDM_Output_Process+0x1b4>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <PDM_Output_Process+0xbe>
			output_levels[i] = GPIO_PIN_SET;
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	3318      	adds	r3, #24
 8001fec:	443b      	add	r3, r7
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001ff4:	e005      	b.n	8002002 <PDM_Output_Process+0xca>
		else
			output_levels[i] = GPIO_PIN_RESET;
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	443b      	add	r3, r7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	3301      	adds	r3, #1
 8002006:	75fb      	strb	r3, [r7, #23]
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b0f      	cmp	r3, #15
 800200c:	d99a      	bls.n	8001f44 <PDM_Output_Process+0xc>
	}

	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_levels[4]);
 800200e:	7a3b      	ldrb	r3, [r7, #8]
 8002010:	461a      	mov	r2, r3
 8002012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002016:	4837      	ldr	r0, [pc, #220]	; (80020f4 <PDM_Output_Process+0x1bc>)
 8002018:	f003 ffde 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_levels[5]);
 800201c:	7a7b      	ldrb	r3, [r7, #9]
 800201e:	461a      	mov	r2, r3
 8002020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002024:	4833      	ldr	r0, [pc, #204]	; (80020f4 <PDM_Output_Process+0x1bc>)
 8002026:	f003 ffd7 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_levels[6]);
 800202a:	7abb      	ldrb	r3, [r7, #10]
 800202c:	461a      	mov	r2, r3
 800202e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002032:	4830      	ldr	r0, [pc, #192]	; (80020f4 <PDM_Output_Process+0x1bc>)
 8002034:	f003 ffd0 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_levels[7]);
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	461a      	mov	r2, r3
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	482c      	ldr	r0, [pc, #176]	; (80020f4 <PDM_Output_Process+0x1bc>)
 8002042:	f003 ffc9 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_levels[8]);
 8002046:	7b3b      	ldrb	r3, [r7, #12]
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204e:	4829      	ldr	r0, [pc, #164]	; (80020f4 <PDM_Output_Process+0x1bc>)
 8002050:	f003 ffc2 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_levels[9]);
 8002054:	7b7b      	ldrb	r3, [r7, #13]
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800205c:	4825      	ldr	r0, [pc, #148]	; (80020f4 <PDM_Output_Process+0x1bc>)
 800205e:	f003 ffbb 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_levels[10]);
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	461a      	mov	r2, r3
 8002066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206a:	4822      	ldr	r0, [pc, #136]	; (80020f4 <PDM_Output_Process+0x1bc>)
 800206c:	f003 ffb4 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_levels[11]);
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	461a      	mov	r2, r3
 8002074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <PDM_Output_Process+0x1bc>)
 800207a:	f003 ffad 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_levels[12]);
 800207e:	7c3b      	ldrb	r3, [r7, #16]
 8002080:	461a      	mov	r2, r3
 8002082:	2108      	movs	r1, #8
 8002084:	481c      	ldr	r0, [pc, #112]	; (80020f8 <PDM_Output_Process+0x1c0>)
 8002086:	f003 ffa7 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_levels[13]);
 800208a:	7c7b      	ldrb	r3, [r7, #17]
 800208c:	461a      	mov	r2, r3
 800208e:	2104      	movs	r1, #4
 8002090:	4819      	ldr	r0, [pc, #100]	; (80020f8 <PDM_Output_Process+0x1c0>)
 8002092:	f003 ffa1 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_levels[14]);
 8002096:	7cbb      	ldrb	r3, [r7, #18]
 8002098:	461a      	mov	r2, r3
 800209a:	2120      	movs	r1, #32
 800209c:	4816      	ldr	r0, [pc, #88]	; (80020f8 <PDM_Output_Process+0x1c0>)
 800209e:	f003 ff9b 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_levels[15]);
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	461a      	mov	r2, r3
 80020a6:	2110      	movs	r1, #16
 80020a8:	4813      	ldr	r0, [pc, #76]	; (80020f8 <PDM_Output_Process+0x1c0>)
 80020aa:	f003 ff95 	bl	8005fd8 <HAL_GPIO_WritePin>
	PDM_PWM_Output_Process(&pwmOutStruct[0], 0, output_levels[0]);
 80020ae:	793b      	ldrb	r3, [r7, #4]
 80020b0:	461a      	mov	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	4811      	ldr	r0, [pc, #68]	; (80020fc <PDM_Output_Process+0x1c4>)
 80020b6:	f000 f8db 	bl	8002270 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[1], 1, output_levels[1]);
 80020ba:	797b      	ldrb	r3, [r7, #5]
 80020bc:	461a      	mov	r2, r3
 80020be:	2101      	movs	r1, #1
 80020c0:	480f      	ldr	r0, [pc, #60]	; (8002100 <PDM_Output_Process+0x1c8>)
 80020c2:	f000 f8d5 	bl	8002270 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[2], 2, output_levels[2]);
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	461a      	mov	r2, r3
 80020ca:	2102      	movs	r1, #2
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <PDM_Output_Process+0x1cc>)
 80020ce:	f000 f8cf 	bl	8002270 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[3], 3, output_levels[3]);
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	461a      	mov	r2, r3
 80020d6:	2103      	movs	r1, #3
 80020d8:	480b      	ldr	r0, [pc, #44]	; (8002108 <PDM_Output_Process+0x1d0>)
 80020da:	f000 f8c9 	bl	8002270 <PDM_PWM_Output_Process>

	return;
 80020de:	bf00      	nop
}
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000608 	.word	0x20000608
 80020ec:	20000614 	.word	0x20000614
 80020f0:	20000610 	.word	0x20000610
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40021800 	.word	0x40021800
 80020fc:	200006d4 	.word	0x200006d4
 8002100:	200006ec 	.word	0x200006ec
 8002104:	20000704 	.word	0x20000704
 8002108:	2000071c 	.word	0x2000071c

0800210c <PDM_PWM_Init>:
static void PWM_DeAlloc(PWM_Control_Struct *pwm_struct);
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct);

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number, uint16_t mem_address)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	460b      	mov	r3, r1
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	4613      	mov	r3, r2
 8002120:	80bb      	strh	r3, [r7, #4]
	TIM_HandleTypeDef* htim;
	uint16_t timChannel;
	uint16_t prescaler;

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	dataIdBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (pwmPinStatus >> pwm_out_number) & 0x01;
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	331a      	adds	r3, #26
 8002126:	4a49      	ldr	r2, [pc, #292]	; (800224c <PDM_PWM_Init+0x140>)
 8002128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800212c:	b21a      	sxth	r2, r3
 800212e:	4b48      	ldr	r3, [pc, #288]	; (8002250 <PDM_PWM_Init+0x144>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	fa41 f303 	asr.w	r3, r1, r3
 800213a:	b21b      	sxth	r3, r3
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b21a      	sxth	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	331a      	adds	r3, #26
 800214a:	b291      	uxth	r1, r2
 800214c:	4a3f      	ldr	r2, [pc, #252]	; (800224c <PDM_PWM_Init+0x140>)
 800214e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d873      	bhi.n	8002240 <PDM_PWM_Init+0x134>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <PDM_PWM_Init+0x54>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	0800217b 	.word	0x0800217b
 8002168:	08002185 	.word	0x08002185
 800216c:	0800218f 	.word	0x0800218f
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <PDM_PWM_Init+0x148>)
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	230c      	movs	r3, #12
 8002176:	827b      	strh	r3, [r7, #18]
 8002178:	e00d      	b.n	8002196 <PDM_PWM_Init+0x8a>
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <PDM_PWM_Init+0x14c>)
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	2304      	movs	r3, #4
 8002180:	827b      	strh	r3, [r7, #18]
 8002182:	e008      	b.n	8002196 <PDM_PWM_Init+0x8a>
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <PDM_PWM_Init+0x150>)
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	2308      	movs	r3, #8
 800218a:	827b      	strh	r3, [r7, #18]
 800218c:	e003      	b.n	8002196 <PDM_PWM_Init+0x8a>
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <PDM_PWM_Init+0x154>)
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	230c      	movs	r3, #12
 8002194:	827b      	strh	r3, [r7, #18]
 8002196:	bf00      	nop

	if(pwm_struct->pwmFrequency == 0)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	889b      	ldrh	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <PDM_PWM_Init+0x9c>
		pwm_struct->pwmFrequency = PWM_FREQ_100HZ;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f240 3283 	movw	r2, #899	; 0x383
 80021a6:	809a      	strh	r2, [r3, #4]

	//Sets the PWM frequency
	if((htim->Instance == TIM1) || (htim->Instance == TIM8))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <PDM_PWM_Init+0x158>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <PDM_PWM_Init+0xb0>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <PDM_PWM_Init+0x15c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d106      	bne.n	80021ca <PDM_PWM_Init+0xbe>
		prescaler = (pwm_struct->pwmFrequency * 2) + 1;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	889b      	ldrh	r3, [r3, #4]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	823b      	strh	r3, [r7, #16]
 80021c8:	e002      	b.n	80021d0 <PDM_PWM_Init+0xc4>
	else
		prescaler = pwm_struct->pwmFrequency;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	823b      	strh	r3, [r7, #16]

	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	8a3a      	ldrh	r2, [r7, #16]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28

	//Zero the duty cycle
	pwm_struct->dutyCycle = 0;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, timChannel, 0);
 80021de:	8a7b      	ldrh	r3, [r7, #18]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <PDM_PWM_Init+0xe2>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
 80021ec:	e013      	b.n	8002216 <PDM_PWM_Init+0x10a>
 80021ee:	8a7b      	ldrh	r3, [r7, #18]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d104      	bne.n	80021fe <PDM_PWM_Init+0xf2>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	6393      	str	r3, [r2, #56]	; 0x38
 80021fc:	e00b      	b.n	8002216 <PDM_PWM_Init+0x10a>
 80021fe:	8a7b      	ldrh	r3, [r7, #18]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d104      	bne.n	800220e <PDM_PWM_Init+0x102>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2300      	movs	r3, #0
 800220a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800220c:	e003      	b.n	8002216 <PDM_PWM_Init+0x10a>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	6413      	str	r3, [r2, #64]	; 0x40

	//Deallocates all pointers
	PWM_DeAlloc(pwm_struct);
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f000 f8f0 	bl	80023fc <PWM_DeAlloc>

	//Configures 3D map or Artificial Neural Network
	if(pwm_struct->outputType == OutType_Map)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	789b      	ldrb	r3, [r3, #2]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d105      	bne.n	8002230 <PDM_PWM_Init+0x124>
		PDM_PWM_Map_Load_From_EEPROM(&hi2c1, pwm_struct, mem_address);
 8002224:	88bb      	ldrh	r3, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4810      	ldr	r0, [pc, #64]	; (800226c <PDM_PWM_Init+0x160>)
 800222c:	f7ff f999 	bl	8001562 <PDM_PWM_Map_Load_From_EEPROM>

	//Deallocates all pointers if there is any allocation problem
	if(pwm_struct->outputType == OutType_Error)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	789b      	ldrb	r3, [r3, #2]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d105      	bne.n	8002244 <PDM_PWM_Init+0x138>
		PWM_DeAlloc(pwm_struct);
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f000 f8df 	bl	80023fc <PWM_DeAlloc>

	return;
 800223e:	e001      	b.n	8002244 <PDM_PWM_Init+0x138>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <PDM_PWM_Init+0x13a>
	return;
 8002244:	bf00      	nop
}
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200005b8 	.word	0x200005b8
 8002250:	2000060e 	.word	0x2000060e
 8002254:	200003e0 	.word	0x200003e0
 8002258:	200004b8 	.word	0x200004b8
 800225c:	20000398 	.word	0x20000398
 8002260:	20000350 	.word	0x20000350
 8002264:	40010000 	.word	0x40010000
 8002268:	40010400 	.word	0x40010400
 800226c:	200002fc 	.word	0x200002fc

08002270 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number, GPIO_PinState output_level)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	70bb      	strb	r3, [r7, #2]
	TIM_HandleTypeDef* htim;
	uint16_t timChannel;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2b03      	cmp	r3, #3
 8002284:	f200 80a7 	bhi.w	80023d6 <PDM_PWM_Output_Process+0x166>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <PDM_PWM_Output_Process+0x20>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022ab 	.word	0x080022ab
 8002298:	080022b5 	.word	0x080022b5
 800229c:	080022bf 	.word	0x080022bf
 80022a0:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <PDM_PWM_Output_Process+0x170>)
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	230c      	movs	r3, #12
 80022a6:	817b      	strh	r3, [r7, #10]
 80022a8:	e00d      	b.n	80022c6 <PDM_PWM_Output_Process+0x56>
 80022aa:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <PDM_PWM_Output_Process+0x174>)
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2304      	movs	r3, #4
 80022b0:	817b      	strh	r3, [r7, #10]
 80022b2:	e008      	b.n	80022c6 <PDM_PWM_Output_Process+0x56>
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <PDM_PWM_Output_Process+0x178>)
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	2308      	movs	r3, #8
 80022ba:	817b      	strh	r3, [r7, #10]
 80022bc:	e003      	b.n	80022c6 <PDM_PWM_Output_Process+0x56>
 80022be:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <PDM_PWM_Output_Process+0x17c>)
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	230c      	movs	r3, #12
 80022c4:	817b      	strh	r3, [r7, #10]
 80022c6:	bf00      	nop

	if((output_level == GPIO_PIN_SET)
 80022c8:	78bb      	ldrb	r3, [r7, #2]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d153      	bne.n	8002376 <PDM_PWM_Output_Process+0x106>
			&& (((flagDriverSafety >> pwm_out_number) & 0x01) == 0)
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <PDM_PWM_Output_Process+0x180>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	fa42 f303 	asr.w	r3, r2, r3
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d149      	bne.n	8002376 <PDM_PWM_Output_Process+0x106>
			&& (pwm_struct->outputType != OutType_Error))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	789b      	ldrb	r3, [r3, #2]
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d045      	beq.n	8002376 <PDM_PWM_Output_Process+0x106>
	{
		//Sets duty cycle to 100% if the output is set as standard
		if(pwm_struct->outputType == OutType_Standard)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	789b      	ldrb	r3, [r3, #2]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <PDM_PWM_Output_Process+0x8c>
			pwm_struct->dutyCycle = 1000;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022f8:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 80022fa:	e040      	b.n	800237e <PDM_PWM_Output_Process+0x10e>

		//Checks if the inputs match the first PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[0], pwm_struct->presetInputs[0]))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	895a      	ldrh	r2, [r3, #10]
 8002300:	4b3c      	ldr	r3, [pc, #240]	; (80023f4 <PDM_PWM_Output_Process+0x184>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	4053      	eors	r3, r2
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	88db      	ldrh	r3, [r3, #6]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <PDM_PWM_Output_Process+0xb6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	88db      	ldrh	r3, [r3, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <PDM_PWM_Output_Process+0xb6>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[0];
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	89da      	ldrh	r2, [r3, #14]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e026      	b.n	8002374 <PDM_PWM_Output_Process+0x104>

		//Checks if the inputs match the second PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[1], pwm_struct->presetInputs[1]))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	899a      	ldrh	r2, [r3, #12]
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <PDM_PWM_Output_Process+0x184>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	4053      	eors	r3, r2
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	891b      	ldrh	r3, [r3, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <PDM_PWM_Output_Process+0xe0>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	891b      	ldrh	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <PDM_PWM_Output_Process+0xe0>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[1];
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	8a1a      	ldrh	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	e011      	b.n	8002374 <PDM_PWM_Output_Process+0x104>

		//Sets duty cycle based on the 3D map if enabled
		else if((&pwm_struct->pwmMapStruct != NULL) && (pwm_struct->outputType == OutType_Map))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3314      	adds	r3, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <PDM_PWM_Output_Process+0x10e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	789b      	ldrb	r3, [r3, #2]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d10e      	bne.n	800237e <PDM_PWM_Output_Process+0x10e>
			pwm_struct->dutyCycle = PWM_Map_Duty_Cycle_Set(pwm_struct->pwmMapStruct);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f8b2 	bl	80024ce <PWM_Map_Duty_Cycle_Set>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002372:	e004      	b.n	800237e <PDM_PWM_Output_Process+0x10e>
 8002374:	e003      	b.n	800237e <PDM_PWM_Output_Process+0x10e>
	}

	else
		pwm_struct->dutyCycle = 0;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	e000      	b.n	8002380 <PDM_PWM_Output_Process+0x110>
		if(pwm_struct->outputType == OutType_Standard)
 800237e:	bf00      	nop

	__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 8002380:	897b      	ldrh	r3, [r7, #10]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <PDM_PWM_Output_Process+0x122>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	635a      	str	r2, [r3, #52]	; 0x34
 8002390:	e019      	b.n	80023c6 <PDM_PWM_Output_Process+0x156>
 8002392:	897b      	ldrh	r3, [r7, #10]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d106      	bne.n	80023a6 <PDM_PWM_Output_Process+0x136>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8819      	ldrh	r1, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	460b      	mov	r3, r1
 80023a2:	6393      	str	r3, [r2, #56]	; 0x38
 80023a4:	e00f      	b.n	80023c6 <PDM_PWM_Output_Process+0x156>
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d106      	bne.n	80023ba <PDM_PWM_Output_Process+0x14a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8819      	ldrh	r1, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80023b8:	e005      	b.n	80023c6 <PDM_PWM_Output_Process+0x156>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8819      	ldrh	r1, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	460b      	mov	r3, r1
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	dataBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->dutyCycle;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	331a      	adds	r3, #26
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	8811      	ldrh	r1, [r2, #0]
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <PDM_PWM_Output_Process+0x188>)
 80023d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 80023d4:	e000      	b.n	80023d8 <PDM_PWM_Output_Process+0x168>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80023d6:	bf00      	nop
}
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200003e0 	.word	0x200003e0
 80023e4:	200004b8 	.word	0x200004b8
 80023e8:	20000398 	.word	0x20000398
 80023ec:	20000350 	.word	0x20000350
 80023f0:	20000608 	.word	0x20000608
 80023f4:	20000610 	.word	0x20000610
 80023f8:	2000057c 	.word	0x2000057c

080023fc <PWM_DeAlloc>:

static void PWM_DeAlloc(PWM_Control_Struct *pwm_struct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	if(pwm_struct->pwmMapStruct != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05c      	beq.n	80024c6 <PWM_DeAlloc+0xca>
	{
		if(pwm_struct->pwmMapStruct->commandVarStep[0] != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <PWM_DeAlloc+0x2e>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[0]);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4618      	mov	r0, r3
 800241e:	f00c fb3b 	bl	800ea98 <free>
			pwm_struct->pwmMapStruct->commandVarStep[0] = NULL;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
		}

		if(pwm_struct->pwmMapStruct->commandVarStep[1] != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <PWM_DeAlloc+0x4c>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[1]);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4618      	mov	r0, r3
 800243c:	f00c fb2c 	bl	800ea98 <free>
			pwm_struct->pwmMapStruct->commandVarStep[1] = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
		}

		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e01d      	b.n	800248a <PWM_DeAlloc+0x8e>
		{
			if(pwm_struct->pwmMapStruct->dutyCycleMap[i] != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d011      	beq.n	8002484 <PWM_DeAlloc+0x88>
			{
				free(pwm_struct->pwmMapStruct->dutyCycleMap[i]);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f00c fb12 	bl	800ea98 <free>
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = NULL;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	3301      	adds	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	7b1b      	ldrb	r3, [r3, #12]
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3db      	bcc.n	800244e <PWM_DeAlloc+0x52>
			}
		}

		if(pwm_struct->pwmMapStruct->dutyCycleMap != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <PWM_DeAlloc+0xb8>
		{
			free(pwm_struct->pwmMapStruct->dutyCycleMap);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00c faf6 	bl	800ea98 <free>
			pwm_struct->pwmMapStruct->dutyCycleMap = NULL;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	61da      	str	r2, [r3, #28]
		}

		free(pwm_struct->pwmMapStruct);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00c faed 	bl	800ea98 <free>
		pwm_struct->pwmMapStruct = NULL;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
	}

//	pwm_struct->outputType = OutType_Preset;

	return;
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
}
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <PWM_Map_Duty_Cycle_Set>:

//Sets PWM output duty cycle using its command variables
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct)
{
 80024ce:	b4b0      	push	{r4, r5, r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	uint16_t retVal = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	81fb      	strh	r3, [r7, #14]

	//Checks if both command variables out of the column and line limits and attributes the map's closest corner value
	if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dc0e      	bgt.n	800250a <PWM_Map_Duty_Cycle_Set+0x3c>
		&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dc05      	bgt.n	800250a <PWM_Map_Duty_Cycle_Set+0x3c>

		retVal = pwm_map_struct->dutyCycleMap[0][0];
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	81fb      	strh	r3, [r7, #14]
 8002508:	e37e      	b.n	8002c08 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6959      	ldr	r1, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7b1b      	ldrb	r3, [r3, #12]
 8002518:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800251c:	3b01      	subs	r3, #1
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	440b      	add	r3, r1
 8002522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002526:	429a      	cmp	r2, r3
 8002528:	db15      	blt.n	8002556 <PWM_Map_Duty_Cycle_Set+0x88>
			 && (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002538:	429a      	cmp	r2, r3
 800253a:	dc0c      	bgt.n	8002556 <PWM_Map_Duty_Cycle_Set+0x88>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][0];
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7b1b      	ldrb	r3, [r3, #12]
 8002544:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002548:	3b01      	subs	r3, #1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	81fb      	strh	r3, [r7, #14]
 8002554:	e358      	b.n	8002c08 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002564:	429a      	cmp	r2, r3
 8002566:	dc1c      	bgt.n	80025a2 <PWM_Map_Duty_Cycle_Set+0xd4>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7b5b      	ldrb	r3, [r3, #13]
 8002576:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800257a:	3b01      	subs	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	429a      	cmp	r2, r3
 8002586:	db0c      	blt.n	80025a2 <PWM_Map_Duty_Cycle_Set+0xd4>

		retVal = pwm_map_struct->dutyCycleMap[0][pwm_map_struct->mapLengths[1] - 1];
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7b5b      	ldrb	r3, [r3, #13]
 8002592:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002596:	3b01      	subs	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	81fb      	strh	r3, [r7, #14]
 80025a0:	e332      	b.n	8002c08 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6959      	ldr	r1, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7b1b      	ldrb	r3, [r3, #12]
 80025b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80025b4:	3b01      	subs	r3, #1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	440b      	add	r3, r1
 80025ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025be:	429a      	cmp	r2, r3
 80025c0:	db23      	blt.n	800260a <PWM_Map_Duty_Cycle_Set+0x13c>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6999      	ldr	r1, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7b5b      	ldrb	r3, [r3, #13]
 80025d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80025d4:	3b01      	subs	r3, #1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025de:	429a      	cmp	r2, r3
 80025e0:	db13      	blt.n	800260a <PWM_Map_Duty_Cycle_Set+0x13c>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][pwm_map_struct->mapLengths[1] - 1];
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7b1b      	ldrb	r3, [r3, #12]
 80025ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ee:	3b01      	subs	r3, #1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7b5b      	ldrb	r3, [r3, #13]
 80025fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80025fe:	3b01      	subs	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	81fb      	strh	r3, [r7, #14]
 8002608:	e2fe      	b.n	8002c08 <PWM_Map_Duty_Cycle_Set+0x73a>

	//Check if the command variable point is outside the lines (y limits) of the 3D map or there is only 1 variable input
	else if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0])
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002618:	429a      	cmp	r2, r3
 800261a:	dd14      	ble.n	8002646 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1])
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6999      	ldr	r1, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7b5b      	ldrb	r3, [r3, #13]
 800262a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800262e:	3b01      	subs	r3, #1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002638:	429a      	cmp	r2, r3
 800263a:	da04      	bge.n	8002646 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->mapLengths[1] == 1))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7b5b      	ldrb	r3, [r3, #13]
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 80c4 	bne.w	80027ce <PWM_Map_Duty_Cycle_Set+0x300>
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002646:	2300      	movs	r3, #0
 8002648:	737b      	strb	r3, [r7, #13]
 800264a:	e0b8      	b.n	80027be <PWM_Map_Duty_Cycle_Set+0x2f0>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6959      	ldr	r1, [r3, #20]
 8002656:	7b7b      	ldrb	r3, [r7, #13]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002660:	429a      	cmp	r2, r3
 8002662:	f2c0 80a9 	blt.w	80027b8 <PWM_Map_Duty_Cycle_Set+0x2ea>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6959      	ldr	r1, [r3, #20]
 8002670:	7b7b      	ldrb	r3, [r7, #13]
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	429a      	cmp	r2, r3
 800267e:	f300 809b 	bgt.w	80027b8 <PWM_Map_Duty_Cycle_Set+0x2ea>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]) || (pwm_map_struct->mapLengths[1] == 1))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002690:	429a      	cmp	r2, r3
 8002692:	dd03      	ble.n	800269c <PWM_Map_Duty_Cycle_Set+0x1ce>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7b5b      	ldrb	r3, [r3, #13]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d13c      	bne.n	8002716 <PWM_Map_Duty_Cycle_Set+0x248>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80026a2:	4619      	mov	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	7b7b      	ldrb	r3, [r7, #13]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b2:	1acb      	subs	r3, r1, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	69d1      	ldr	r1, [r2, #28]
 80026b8:	7b7a      	ldrb	r2, [r7, #13]
 80026ba:	3201      	adds	r2, #1
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	440a      	add	r2, r1
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	8812      	ldrh	r2, [r2, #0]
 80026c4:	4610      	mov	r0, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	69d1      	ldr	r1, [r2, #28]
 80026ca:	7b7a      	ldrb	r2, [r7, #13]
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	440a      	add	r2, r1
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	1a82      	subs	r2, r0, r2
 80026d6:	fb03 f202 	mul.w	r2, r3, r2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6959      	ldr	r1, [r3, #20]
 80026de:	7b7b      	ldrb	r3, [r7, #13]
 80026e0:	3301      	adds	r3, #1
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	440b      	add	r3, r1
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	4618      	mov	r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6959      	ldr	r1, [r3, #20]
 80026f0:	7b7b      	ldrb	r3, [r7, #13]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	440b      	add	r3, r1
 80026f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fa:	1ac3      	subs	r3, r0, r3
 80026fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69d9      	ldr	r1, [r3, #28]
 8002706:	7b7b      	ldrb	r3, [r7, #13]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	4413      	add	r3, r2
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	e050      	b.n	80027b8 <PWM_Map_Duty_Cycle_Set+0x2ea>
																  	   pwm_map_struct->commandVarStep[0][x],
																	   pwm_map_struct->commandVarStep[0][x + 1],
																	   pwm_map_struct->dutyCycleMap[x][0],
																	   pwm_map_struct->dutyCycleMap[x + 1][0]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800271c:	4619      	mov	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	7b7b      	ldrb	r3, [r7, #13]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272c:	1aca      	subs	r2, r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69d9      	ldr	r1, [r3, #28]
 8002732:	7b7b      	ldrb	r3, [r7, #13]
 8002734:	3301      	adds	r3, #1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	6819      	ldr	r1, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7b5b      	ldrb	r3, [r3, #13]
 8002740:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002744:	3b01      	subs	r3, #1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69d9      	ldr	r1, [r3, #28]
 8002752:	7b7b      	ldrb	r3, [r7, #13]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7b5b      	ldrb	r3, [r3, #13]
 800275e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002762:	3b01      	subs	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	440b      	add	r3, r1
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	1ac3      	subs	r3, r0, r3
 800276c:	fb03 f202 	mul.w	r2, r3, r2
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	7b7b      	ldrb	r3, [r7, #13]
 8002776:	3301      	adds	r3, #1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	440b      	add	r3, r1
 800277c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002780:	4618      	mov	r0, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6959      	ldr	r1, [r3, #20]
 8002786:	7b7b      	ldrb	r3, [r7, #13]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002790:	1ac3      	subs	r3, r0, r3
 8002792:	fb92 f3f3 	sdiv	r3, r2, r3
 8002796:	b29a      	uxth	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69d9      	ldr	r1, [r3, #28]
 800279c:	7b7b      	ldrb	r3, [r7, #13]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7b5b      	ldrb	r3, [r3, #13]
 80027a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027ac:	3b01      	subs	r3, #1
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	440b      	add	r3, r1
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	81fb      	strh	r3, [r7, #14]
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 80027b8:	7b7b      	ldrb	r3, [r7, #13]
 80027ba:	3301      	adds	r3, #1
 80027bc:	737b      	strb	r3, [r7, #13]
 80027be:	7b7a      	ldrb	r2, [r7, #13]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7b1b      	ldrb	r3, [r3, #12]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	429a      	cmp	r2, r3
 80027c8:	f6ff af40 	blt.w	800264c <PWM_Map_Duty_Cycle_Set+0x17e>
 80027cc:	e21c      	b.n	8002c08 <PWM_Map_Duty_Cycle_Set+0x73a>
			}
		}
	}

	//Check if the command variable point is outside the columns (x limits) of the 3D map
	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dd10      	ble.n	8002802 <PWM_Map_Duty_Cycle_Set+0x334>
			|| (pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1]))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6959      	ldr	r1, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7b1b      	ldrb	r3, [r3, #12]
 80027ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027f2:	3b01      	subs	r3, #1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f2c0 80c0 	blt.w	8002982 <PWM_Map_Duty_Cycle_Set+0x4b4>
	{
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002802:	2300      	movs	r3, #0
 8002804:	733b      	strb	r3, [r7, #12]
 8002806:	e0b4      	b.n	8002972 <PWM_Map_Duty_Cycle_Set+0x4a4>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6999      	ldr	r1, [r3, #24]
 8002812:	7b3b      	ldrb	r3, [r7, #12]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	440b      	add	r3, r1
 8002818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281c:	429a      	cmp	r2, r3
 800281e:	f2c0 80a5 	blt.w	800296c <PWM_Map_Duty_Cycle_Set+0x49e>
				&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6999      	ldr	r1, [r3, #24]
 800282c:	7b3b      	ldrb	r3, [r7, #12]
 800282e:	3301      	adds	r3, #1
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	440b      	add	r3, r1
 8002834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002838:	429a      	cmp	r2, r3
 800283a:	f300 8097 	bgt.w	800296c <PWM_Map_Duty_Cycle_Set+0x49e>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284c:	429a      	cmp	r2, r3
 800284e:	dc3c      	bgt.n	80028ca <PWM_Map_Duty_Cycle_Set+0x3fc>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002856:	4619      	mov	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	7b3b      	ldrb	r3, [r7, #12]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002866:	1acb      	subs	r3, r1, r3
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	69d2      	ldr	r2, [r2, #28]
 800286c:	6811      	ldr	r1, [r2, #0]
 800286e:	7b3a      	ldrb	r2, [r7, #12]
 8002870:	3201      	adds	r2, #1
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	440a      	add	r2, r1
 8002876:	8812      	ldrh	r2, [r2, #0]
 8002878:	4610      	mov	r0, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	69d2      	ldr	r2, [r2, #28]
 800287e:	6811      	ldr	r1, [r2, #0]
 8002880:	7b3a      	ldrb	r2, [r7, #12]
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	440a      	add	r2, r1
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	1a82      	subs	r2, r0, r2
 800288a:	fb03 f202 	mul.w	r2, r3, r2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6999      	ldr	r1, [r3, #24]
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	3301      	adds	r3, #1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	440b      	add	r3, r1
 800289a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289e:	4618      	mov	r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6999      	ldr	r1, [r3, #24]
 80028a4:	7b3b      	ldrb	r3, [r7, #12]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	440b      	add	r3, r1
 80028aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ae:	1ac3      	subs	r3, r0, r3
 80028b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	81fb      	strh	r3, [r7, #14]
 80028c8:	e050      	b.n	800296c <PWM_Map_Duty_Cycle_Set+0x49e>
																  	   pwm_map_struct->commandVarStep[1][y],
																	   pwm_map_struct->commandVarStep[1][y + 1],
																	   pwm_map_struct->dutyCycleMap[0][y],
																	   pwm_map_struct->dutyCycleMap[0][y + 1]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80028d0:	4619      	mov	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	7b3b      	ldrb	r3, [r7, #12]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e0:	1aca      	subs	r2, r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69d9      	ldr	r1, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7b1b      	ldrb	r3, [r3, #12]
 80028ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ee:	3b01      	subs	r3, #1
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	440b      	add	r3, r1
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69d9      	ldr	r1, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7b1b      	ldrb	r3, [r3, #12]
 800290a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800290e:	3b01      	subs	r3, #1
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	7b3b      	ldrb	r3, [r7, #12]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	1ac3      	subs	r3, r0, r3
 8002920:	fb03 f202 	mul.w	r2, r3, r2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6999      	ldr	r1, [r3, #24]
 8002928:	7b3b      	ldrb	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	440b      	add	r3, r1
 8002930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002934:	4618      	mov	r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	7b3b      	ldrb	r3, [r7, #12]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	440b      	add	r3, r1
 8002940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002944:	1ac3      	subs	r3, r0, r3
 8002946:	fb92 f3f3 	sdiv	r3, r2, r3
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7b1b      	ldrb	r3, [r3, #12]
 8002954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002958:	3b01      	subs	r3, #1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	7b3b      	ldrb	r3, [r7, #12]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	4413      	add	r3, r2
 800296a:	81fb      	strh	r3, [r7, #14]
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 800296c:	7b3b      	ldrb	r3, [r7, #12]
 800296e:	3301      	adds	r3, #1
 8002970:	733b      	strb	r3, [r7, #12]
 8002972:	7b3a      	ldrb	r2, [r7, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7b5b      	ldrb	r3, [r3, #13]
 8002978:	3b01      	subs	r3, #1
 800297a:	429a      	cmp	r2, r3
 800297c:	f6ff af44 	blt.w	8002808 <PWM_Map_Duty_Cycle_Set+0x33a>
 8002980:	e142      	b.n	8002c08 <PWM_Map_Duty_Cycle_Set+0x73a>
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	else
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002982:	2300      	movs	r3, #0
 8002984:	72fb      	strb	r3, [r7, #11]
 8002986:	e138      	b.n	8002bfa <PWM_Map_Duty_Cycle_Set+0x72c>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6959      	ldr	r1, [r3, #20]
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	440b      	add	r3, r1
 8002998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299c:	429a      	cmp	r2, r3
 800299e:	f2c0 8129 	blt.w	8002bf4 <PWM_Map_Duty_Cycle_Set+0x726>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6959      	ldr	r1, [r3, #20]
 80029ac:	7afb      	ldrb	r3, [r7, #11]
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	440b      	add	r3, r1
 80029b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f300 811b 	bgt.w	8002bf4 <PWM_Map_Duty_Cycle_Set+0x726>
			{
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 80029be:	2300      	movs	r3, #0
 80029c0:	72bb      	strb	r3, [r7, #10]
 80029c2:	e110      	b.n	8002be6 <PWM_Map_Duty_Cycle_Set+0x718>
				{
					//Checks if the command variable point is inside the y, y + 1 line
					if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6999      	ldr	r1, [r3, #24]
 80029ce:	7abb      	ldrb	r3, [r7, #10]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f2c0 8101 	blt.w	8002be0 <PWM_Map_Duty_Cycle_Set+0x712>
						&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6999      	ldr	r1, [r3, #24]
 80029e8:	7abb      	ldrb	r3, [r7, #10]
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f300 80f3 	bgt.w	8002be0 <PWM_Map_Duty_Cycle_Set+0x712>
					{
						retVal = __PDM_BILINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002a00:	4619      	mov	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	7abb      	ldrb	r3, [r7, #10]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a10:	1acb      	subs	r3, r1, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a18:	4610      	mov	r0, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6951      	ldr	r1, [r2, #20]
 8002a1e:	7afa      	ldrb	r2, [r7, #11]
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	440a      	add	r2, r1
 8002a24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a28:	1a82      	subs	r2, r0, r2
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	69c8      	ldr	r0, [r1, #28]
 8002a2e:	7af9      	ldrb	r1, [r7, #11]
 8002a30:	3101      	adds	r1, #1
 8002a32:	0089      	lsls	r1, r1, #2
 8002a34:	4401      	add	r1, r0
 8002a36:	6808      	ldr	r0, [r1, #0]
 8002a38:	7ab9      	ldrb	r1, [r7, #10]
 8002a3a:	3101      	adds	r1, #1
 8002a3c:	0049      	lsls	r1, r1, #1
 8002a3e:	4401      	add	r1, r0
 8002a40:	8809      	ldrh	r1, [r1, #0]
 8002a42:	460c      	mov	r4, r1
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	69c8      	ldr	r0, [r1, #28]
 8002a48:	7af9      	ldrb	r1, [r7, #11]
 8002a4a:	0089      	lsls	r1, r1, #2
 8002a4c:	4401      	add	r1, r0
 8002a4e:	6808      	ldr	r0, [r1, #0]
 8002a50:	7ab9      	ldrb	r1, [r7, #10]
 8002a52:	3101      	adds	r1, #1
 8002a54:	0049      	lsls	r1, r1, #1
 8002a56:	4401      	add	r1, r0
 8002a58:	8809      	ldrh	r1, [r1, #0]
 8002a5a:	1a61      	subs	r1, r4, r1
 8002a5c:	fb02 f101 	mul.w	r1, r2, r1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6950      	ldr	r0, [r2, #20]
 8002a64:	7afa      	ldrb	r2, [r7, #11]
 8002a66:	3201      	adds	r2, #1
 8002a68:	0052      	lsls	r2, r2, #1
 8002a6a:	4402      	add	r2, r0
 8002a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a70:	4614      	mov	r4, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6950      	ldr	r0, [r2, #20]
 8002a76:	7afa      	ldrb	r2, [r7, #11]
 8002a78:	0052      	lsls	r2, r2, #1
 8002a7a:	4402      	add	r2, r0
 8002a7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a80:	1aa2      	subs	r2, r4, r2
 8002a82:	fb91 f2f2 	sdiv	r2, r1, r2
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	69c8      	ldr	r0, [r1, #28]
 8002a8a:	7af9      	ldrb	r1, [r7, #11]
 8002a8c:	0089      	lsls	r1, r1, #2
 8002a8e:	4401      	add	r1, r0
 8002a90:	6808      	ldr	r0, [r1, #0]
 8002a92:	7ab9      	ldrb	r1, [r7, #10]
 8002a94:	3101      	adds	r1, #1
 8002a96:	0049      	lsls	r1, r1, #1
 8002a98:	4401      	add	r1, r0
 8002a9a:	8809      	ldrh	r1, [r1, #0]
 8002a9c:	4411      	add	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6950      	ldr	r0, [r2, #20]
 8002aaa:	7afa      	ldrb	r2, [r7, #11]
 8002aac:	0052      	lsls	r2, r2, #1
 8002aae:	4402      	add	r2, r0
 8002ab0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002ab4:	1aa2      	subs	r2, r4, r2
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	69c4      	ldr	r4, [r0, #28]
 8002aba:	7af8      	ldrb	r0, [r7, #11]
 8002abc:	3001      	adds	r0, #1
 8002abe:	0080      	lsls	r0, r0, #2
 8002ac0:	4420      	add	r0, r4
 8002ac2:	6804      	ldr	r4, [r0, #0]
 8002ac4:	7ab8      	ldrb	r0, [r7, #10]
 8002ac6:	0040      	lsls	r0, r0, #1
 8002ac8:	4420      	add	r0, r4
 8002aca:	8800      	ldrh	r0, [r0, #0]
 8002acc:	4605      	mov	r5, r0
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	69c4      	ldr	r4, [r0, #28]
 8002ad2:	7af8      	ldrb	r0, [r7, #11]
 8002ad4:	0080      	lsls	r0, r0, #2
 8002ad6:	4420      	add	r0, r4
 8002ad8:	6804      	ldr	r4, [r0, #0]
 8002ada:	7ab8      	ldrb	r0, [r7, #10]
 8002adc:	0040      	lsls	r0, r0, #1
 8002ade:	4420      	add	r0, r4
 8002ae0:	8800      	ldrh	r0, [r0, #0]
 8002ae2:	1a28      	subs	r0, r5, r0
 8002ae4:	fb02 f000 	mul.w	r0, r2, r0
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6954      	ldr	r4, [r2, #20]
 8002aec:	7afa      	ldrb	r2, [r7, #11]
 8002aee:	3201      	adds	r2, #1
 8002af0:	0052      	lsls	r2, r2, #1
 8002af2:	4422      	add	r2, r4
 8002af4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002af8:	4615      	mov	r5, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6954      	ldr	r4, [r2, #20]
 8002afe:	7afa      	ldrb	r2, [r7, #11]
 8002b00:	0052      	lsls	r2, r2, #1
 8002b02:	4422      	add	r2, r4
 8002b04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002b08:	1aaa      	subs	r2, r5, r2
 8002b0a:	fb90 f2f2 	sdiv	r2, r0, r2
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	69c4      	ldr	r4, [r0, #28]
 8002b12:	7af8      	ldrb	r0, [r7, #11]
 8002b14:	0080      	lsls	r0, r0, #2
 8002b16:	4420      	add	r0, r4
 8002b18:	6804      	ldr	r4, [r0, #0]
 8002b1a:	7ab8      	ldrb	r0, [r7, #10]
 8002b1c:	0040      	lsls	r0, r0, #1
 8002b1e:	4420      	add	r0, r4
 8002b20:	8800      	ldrh	r0, [r0, #0]
 8002b22:	4402      	add	r2, r0
 8002b24:	1a8a      	subs	r2, r1, r2
 8002b26:	fb03 f202 	mul.w	r2, r3, r2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	7abb      	ldrb	r3, [r7, #10]
 8002b30:	3301      	adds	r3, #1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6999      	ldr	r1, [r3, #24]
 8002b40:	7abb      	ldrb	r3, [r7, #10]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	440b      	add	r3, r1
 8002b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4a:	1ac3      	subs	r3, r0, r3
 8002b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6959      	ldr	r1, [r3, #20]
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	440b      	add	r3, r1
 8002b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b68:	1ac3      	subs	r3, r0, r3
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	69c8      	ldr	r0, [r1, #28]
 8002b6e:	7af9      	ldrb	r1, [r7, #11]
 8002b70:	3101      	adds	r1, #1
 8002b72:	0089      	lsls	r1, r1, #2
 8002b74:	4401      	add	r1, r0
 8002b76:	6808      	ldr	r0, [r1, #0]
 8002b78:	7ab9      	ldrb	r1, [r7, #10]
 8002b7a:	0049      	lsls	r1, r1, #1
 8002b7c:	4401      	add	r1, r0
 8002b7e:	8809      	ldrh	r1, [r1, #0]
 8002b80:	460c      	mov	r4, r1
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	69c8      	ldr	r0, [r1, #28]
 8002b86:	7af9      	ldrb	r1, [r7, #11]
 8002b88:	0089      	lsls	r1, r1, #2
 8002b8a:	4401      	add	r1, r0
 8002b8c:	6808      	ldr	r0, [r1, #0]
 8002b8e:	7ab9      	ldrb	r1, [r7, #10]
 8002b90:	0049      	lsls	r1, r1, #1
 8002b92:	4401      	add	r1, r0
 8002b94:	8809      	ldrh	r1, [r1, #0]
 8002b96:	1a61      	subs	r1, r4, r1
 8002b98:	fb03 f101 	mul.w	r1, r3, r1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6958      	ldr	r0, [r3, #20]
 8002ba0:	7afb      	ldrb	r3, [r7, #11]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4403      	add	r3, r0
 8002ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bac:	461c      	mov	r4, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6958      	ldr	r0, [r3, #20]
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4403      	add	r3, r0
 8002bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bbc:	1ae3      	subs	r3, r4, r3
 8002bbe:	fb91 f3f3 	sdiv	r3, r1, r3
 8002bc2:	b299      	uxth	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69d8      	ldr	r0, [r3, #28]
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4403      	add	r3, r0
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	7abb      	ldrb	r3, [r7, #10]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4403      	add	r3, r0
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	440b      	add	r3, r1
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	81fb      	strh	r3, [r7, #14]
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002be0:	7abb      	ldrb	r3, [r7, #10]
 8002be2:	3301      	adds	r3, #1
 8002be4:	72bb      	strb	r3, [r7, #10]
 8002be6:	7aba      	ldrb	r2, [r7, #10]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7b5b      	ldrb	r3, [r3, #13]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	f6ff aee8 	blt.w	80029c4 <PWM_Map_Duty_Cycle_Set+0x4f6>
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	72fb      	strb	r3, [r7, #11]
 8002bfa:	7afa      	ldrb	r2, [r7, #11]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7b1b      	ldrb	r3, [r3, #12]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	429a      	cmp	r2, r3
 8002c04:	f6ff aec0 	blt.w	8002988 <PWM_Map_Duty_Cycle_Set+0x4ba>
				}
			}
		}
	}

	return retVal;
 8002c08:	89fb      	ldrh	r3, [r7, #14]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bcb0      	pop	{r4, r5, r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_CAN_RxFifo0MsgPendingCallback>:
#include "pdm.h"

uint32_t teste = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxMessage, canRxData) == HAL_OK)
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002c20:	2100      	movs	r1, #0
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f001 ff01 	bl	8004a2a <HAL_CAN_GetRxMessage>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002c2e:	f7fe fc09 	bl	8001444 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002c36:	f003 f9e8 	bl	800600a <HAL_GPIO_TogglePin>
	}

	return;
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
}
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000508 	.word	0x20000508
 8002c48:	2000051c 	.word	0x2000051c
 8002c4c:	40021800 	.word	0x40021800

08002c50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 8002c5a:	f7ff f86d 	bl	8001d38 <PDM_Input_Process>

	PDM_Output_Process();
 8002c5e:	f7ff f96b 	bl	8001f38 <PDM_Output_Process>

	return;
 8002c62:	bf00      	nop
}
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a42      	ldr	r2, [pc, #264]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10a      	bne.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		teste++;
 8002c7e:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a40      	ldr	r2, [pc, #256]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c86:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Stop_IT(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f006 fcc3 	bl	8009614 <HAL_TIM_Base_Stop_IT>
		flagReading[1] = Data_Read_Ready;
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
	}

	if(htim->Instance == TIM7)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d16e      	bne.n	8002d7c <HAL_TIM_PeriodElapsedCallback+0x110>
	{
		accMsg10Hz++;
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002ca6:	6013      	str	r3, [r2, #0]
		accMsg25Hz++;
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002cb0:	6013      	str	r3, [r2, #0]
		accMsg50Hz++;
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002cba:	6013      	str	r3, [r2, #0]
		accMsg80Hz++,
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002cc4:	6013      	str	r3, [r2, #0]
		accMsg100Hz++;
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a35      	ldr	r2, [pc, #212]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002cce:	6013      	str	r3, [r2, #0]

		accUsbData++;
 8002cd0:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002cd8:	6013      	str	r3, [r2, #0]

		accOutputFuse[0]++;
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002ce2:	6013      	str	r3, [r2, #0]
		accOutputFuse[1]++;
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a30      	ldr	r2, [pc, #192]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002cec:	6053      	str	r3, [r2, #4]
		accOutputFuse[2]++;
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002cf6:	6093      	str	r3, [r2, #8]
		accOutputFuse[3]++;
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d00:	60d3      	str	r3, [r2, #12]
		accOutputFuse[4]++;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d0a:	6113      	str	r3, [r2, #16]
		accOutputFuse[5]++;
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a26      	ldr	r2, [pc, #152]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d14:	6153      	str	r3, [r2, #20]
		accOutputFuse[6]++;
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d1e:	6193      	str	r3, [r2, #24]
		accOutputFuse[7]++;
 8002d20:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d28:	61d3      	str	r3, [r2, #28]
		accOutputFuse[8]++;
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d32:	6213      	str	r3, [r2, #32]
		accOutputFuse[9]++;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	3301      	adds	r3, #1
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d3c:	6253      	str	r3, [r2, #36]	; 0x24
		accOutputFuse[10]++;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d46:	6293      	str	r3, [r2, #40]	; 0x28
		accOutputFuse[11]++;
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d50:	62d3      	str	r3, [r2, #44]	; 0x2c
		accOutputFuse[12]++;
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d5a:	6313      	str	r3, [r2, #48]	; 0x30
		accOutputFuse[13]++;
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d64:	6353      	str	r3, [r2, #52]	; 0x34
		accOutputFuse[14]++;
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d6e:	6393      	str	r3, [r2, #56]	; 0x38
		accOutputFuse[15]++;
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d78:	63d3      	str	r3, [r2, #60]	; 0x3c
	}

	return;
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
}
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40001000 	.word	0x40001000
 8002d88:	20000500 	.word	0x20000500
 8002d8c:	2000060c 	.word	0x2000060c
 8002d90:	40001400 	.word	0x40001400
 8002d94:	20000734 	.word	0x20000734
 8002d98:	20000738 	.word	0x20000738
 8002d9c:	2000073c 	.word	0x2000073c
 8002da0:	20000740 	.word	0x20000740
 8002da4:	20000744 	.word	0x20000744
 8002da8:	20000748 	.word	0x20000748
 8002dac:	2000074c 	.word	0x2000074c

08002db0 <PDM_Data_Conversion>:


//Reads ADC value and converts into data
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Data_Conversion(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	uint8_t flag_fuse = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef retVal = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	72fb      	strb	r3, [r7, #11]

	flagReading[1] = Data_Read_Waiting;
 8002dc0:	4b9d      	ldr	r3, [pc, #628]	; (8003038 <PDM_Data_Conversion+0x288>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	705a      	strb	r2, [r3, #1]

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(flagReading[0])
 8002dc6:	4b9c      	ldr	r3, [pc, #624]	; (8003038 <PDM_Data_Conversion+0x288>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	3b02      	subs	r3, #2
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	f200 8230 	bhi.w	8003232 <PDM_Data_Conversion+0x482>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <PDM_Data_Conversion+0x28>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002f3b 	.word	0x08002f3b
 8002de0:	080030c9 	.word	0x080030c9
 8002de4:	0800319d 	.word	0x0800319d
	{
	case Data_Read_Current0:

		for(uint8_t i = 0; i < 8; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	73bb      	strb	r3, [r7, #14]
 8002dec:	e081      	b.n	8002ef2 <PDM_Data_Conversion+0x142>
		{
			//Convert ADC into current
			dataBuffer[i * 2] = __PDM_CONVERT_CURRENT(adcBuffer[i]);
 8002dee:	7bbb      	ldrb	r3, [r7, #14]
 8002df0:	4a92      	ldr	r2, [pc, #584]	; (800303c <PDM_Data_Conversion+0x28c>)
 8002df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8002e04:	3b40      	subs	r3, #64	; 0x40
 8002e06:	4a8e      	ldr	r2, [pc, #568]	; (8003040 <PDM_Data_Conversion+0x290>)
 8002e08:	fb82 1203 	smull	r1, r2, r2, r3
 8002e0c:	1192      	asrs	r2, r2, #6
 8002e0e:	17db      	asrs	r3, r3, #31
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	7bbb      	ldrb	r3, [r7, #14]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	b291      	uxth	r1, r2
 8002e18:	4a8a      	ldr	r2, [pc, #552]	; (8003044 <PDM_Data_Conversion+0x294>)
 8002e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[i * 2] <= outputStruct[i * 2].currentThresholds)
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4a88      	ldr	r2, [pc, #544]	; (8003044 <PDM_Data_Conversion+0x294>)
 8002e24:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e28:	7bbb      	ldrb	r3, [r7, #14]
 8002e2a:	005a      	lsls	r2, r3, #1
 8002e2c:	4886      	ldr	r0, [pc, #536]	; (8003048 <PDM_Data_Conversion+0x298>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4403      	add	r3, r0
 8002e38:	3308      	adds	r3, #8
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	d90b      	bls.n	8002e58 <PDM_Data_Conversion+0xa8>
					|| (outputStruct[i * 2].timeoutOutputFuse == 0))
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
 8002e42:	005a      	lsls	r2, r3, #1
 8002e44:	4980      	ldr	r1, [pc, #512]	; (8003048 <PDM_Data_Conversion+0x298>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	330a      	adds	r3, #10
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <PDM_Data_Conversion+0xb6>
				accOutputFuse[i * 2] = 0;
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4a7b      	ldr	r2, [pc, #492]	; (800304c <PDM_Data_Conversion+0x29c>)
 8002e5e:	2100      	movs	r1, #0
 8002e60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002e64:	e020      	b.n	8002ea8 <PDM_Data_Conversion+0xf8>

			else if(accOutputFuse[i * 2] > outputStruct[i * 2].timeoutOutputFuse)
 8002e66:	7bbb      	ldrb	r3, [r7, #14]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4a78      	ldr	r2, [pc, #480]	; (800304c <PDM_Data_Conversion+0x29c>)
 8002e6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	005a      	lsls	r2, r3, #1
 8002e74:	4874      	ldr	r0, [pc, #464]	; (8003048 <PDM_Data_Conversion+0x298>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4403      	add	r3, r0
 8002e80:	330a      	adds	r3, #10
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	4299      	cmp	r1, r3
 8002e86:	d90f      	bls.n	8002ea8 <PDM_Data_Conversion+0xf8>
			{
				flag_fuse = 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << (i * 2);
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	b21a      	sxth	r2, r3
 8002e98:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <PDM_Data_Conversion+0x2a0>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <PDM_Data_Conversion+0x2a0>)
 8002ea6:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 8002ea8:	7bbb      	ldrb	r3, [r7, #14]
 8002eaa:	4a64      	ldr	r2, [pc, #400]	; (800303c <PDM_Data_Conversion+0x28c>)
 8002eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eb0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002eb4:	d20d      	bcs.n	8002ed2 <PDM_Data_Conversion+0x122>
				dataIdBuffer[i * 2] |= 1;
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4a66      	ldr	r2, [pc, #408]	; (8003054 <PDM_Data_Conversion+0x2a4>)
 8002ebc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ec0:	7bbb      	ldrb	r3, [r7, #14]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	b291      	uxth	r1, r2
 8002eca:	4a62      	ldr	r2, [pc, #392]	; (8003054 <PDM_Data_Conversion+0x2a4>)
 8002ecc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ed0:	e00c      	b.n	8002eec <PDM_Data_Conversion+0x13c>
			else
				dataIdBuffer[i * 2] &= 0xFFFE;
 8002ed2:	7bbb      	ldrb	r3, [r7, #14]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	; (8003054 <PDM_Data_Conversion+0x2a4>)
 8002ed8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	b291      	uxth	r1, r2
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	; (8003054 <PDM_Data_Conversion+0x2a4>)
 8002ee8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8002eec:	7bbb      	ldrb	r3, [r7, #14]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	73bb      	strb	r3, [r7, #14]
 8002ef2:	7bbb      	ldrb	r3, [r7, #14]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	f67f af7a 	bls.w	8002dee <PDM_Data_Conversion+0x3e>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002efa:	2201      	movs	r2, #1
 8002efc:	2120      	movs	r1, #32
 8002efe:	4856      	ldr	r0, [pc, #344]	; (8003058 <PDM_Data_Conversion+0x2a8>)
 8002f00:	f003 f86a 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2108      	movs	r1, #8
 8002f08:	4853      	ldr	r0, [pc, #332]	; (8003058 <PDM_Data_Conversion+0x2a8>)
 8002f0a:	f003 f865 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2104      	movs	r1, #4
 8002f12:	4851      	ldr	r0, [pc, #324]	; (8003058 <PDM_Data_Conversion+0x2a8>)
 8002f14:	f003 f860 	bl	8005fd8 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current1;
 8002f18:	4b47      	ldr	r3, [pc, #284]	; (8003038 <PDM_Data_Conversion+0x288>)
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f36:	60da      	str	r2, [r3, #12]

		break;
 8002f38:	e19b      	b.n	8003272 <PDM_Data_Conversion+0x4c2>

	case Data_Read_Current1:

		for(uint8_t i = 0; i < 8; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	737b      	strb	r3, [r7, #13]
 8002f3e:	e09f      	b.n	8003080 <PDM_Data_Conversion+0x2d0>
		{
			//Convert ADC into current
			dataBuffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(adcBuffer[i]);
 8002f40:	7b7b      	ldrb	r3, [r7, #13]
 8002f42:	4a3e      	ldr	r2, [pc, #248]	; (800303c <PDM_Data_Conversion+0x28c>)
 8002f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8002f56:	3b40      	subs	r3, #64	; 0x40
 8002f58:	4a39      	ldr	r2, [pc, #228]	; (8003040 <PDM_Data_Conversion+0x290>)
 8002f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f5e:	1192      	asrs	r2, r2, #6
 8002f60:	17db      	asrs	r3, r3, #31
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	7b7b      	ldrb	r3, [r7, #13]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b291      	uxth	r1, r2
 8002f6c:	4a35      	ldr	r2, [pc, #212]	; (8003044 <PDM_Data_Conversion+0x294>)
 8002f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[(i * 2) + 1] <= outputStruct[(i * 2) + 1].currentThresholds)
 8002f72:	7b7b      	ldrb	r3, [r7, #13]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a32      	ldr	r2, [pc, #200]	; (8003044 <PDM_Data_Conversion+0x294>)
 8002f7a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002f7e:	7b7b      	ldrb	r3, [r7, #13]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	4830      	ldr	r0, [pc, #192]	; (8003048 <PDM_Data_Conversion+0x298>)
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4403      	add	r3, r0
 8002f90:	3308      	adds	r3, #8
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	4299      	cmp	r1, r3
 8002f96:	d90c      	bls.n	8002fb2 <PDM_Data_Conversion+0x202>
					|| (outputStruct[(i * 2) + 1].timeoutOutputFuse == 0))
 8002f98:	7b7b      	ldrb	r3, [r7, #13]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	492a      	ldr	r1, [pc, #168]	; (8003048 <PDM_Data_Conversion+0x298>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	330a      	adds	r3, #10
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <PDM_Data_Conversion+0x212>
				accOutputFuse[(i * 2) + 1] = 0;
 8002fb2:	7b7b      	ldrb	r3, [r7, #13]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <PDM_Data_Conversion+0x29c>)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002fc0:	e023      	b.n	800300a <PDM_Data_Conversion+0x25a>

			else if(accOutputFuse[(i * 2) + 1] > outputStruct[(i * 2) + 1].timeoutOutputFuse)
 8002fc2:	7b7b      	ldrb	r3, [r7, #13]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <PDM_Data_Conversion+0x29c>)
 8002fca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002fce:	7b7b      	ldrb	r3, [r7, #13]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	481c      	ldr	r0, [pc, #112]	; (8003048 <PDM_Data_Conversion+0x298>)
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4403      	add	r3, r0
 8002fe0:	330a      	adds	r3, #10
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	4299      	cmp	r1, r3
 8002fe6:	d910      	bls.n	800300a <PDM_Data_Conversion+0x25a>
			{
				flag_fuse = 1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << ((i * 2) + 1);
 8002fec:	7b7b      	ldrb	r3, [r7, #13]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	b21a      	sxth	r2, r3
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <PDM_Data_Conversion+0x2a0>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	4313      	orrs	r3, r2
 8003002:	b21b      	sxth	r3, r3
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <PDM_Data_Conversion+0x2a0>)
 8003008:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 800300a:	7b7b      	ldrb	r3, [r7, #13]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <PDM_Data_Conversion+0x28c>)
 800300e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003012:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003016:	d221      	bcs.n	800305c <PDM_Data_Conversion+0x2ac>
				dataIdBuffer[(i * 2) + 1] |= 1;
 8003018:	7b7b      	ldrb	r3, [r7, #13]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	3301      	adds	r3, #1
 800301e:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <PDM_Data_Conversion+0x2a4>)
 8003020:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003024:	7b7b      	ldrb	r3, [r7, #13]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	3301      	adds	r3, #1
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	b291      	uxth	r1, r2
 8003030:	4a08      	ldr	r2, [pc, #32]	; (8003054 <PDM_Data_Conversion+0x2a4>)
 8003032:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003036:	e020      	b.n	800307a <PDM_Data_Conversion+0x2ca>
 8003038:	2000060c 	.word	0x2000060c
 800303c:	200005f4 	.word	0x200005f4
 8003040:	10624dd3 	.word	0x10624dd3
 8003044:	2000057c 	.word	0x2000057c
 8003048:	20000614 	.word	0x20000614
 800304c:	2000074c 	.word	0x2000074c
 8003050:	20000608 	.word	0x20000608
 8003054:	200005b8 	.word	0x200005b8
 8003058:	40021000 	.word	0x40021000
			else
				dataIdBuffer[(i * 2) + 1] &= 0xFFFE;
 800305c:	7b7b      	ldrb	r3, [r7, #13]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	3301      	adds	r3, #1
 8003062:	4a90      	ldr	r2, [pc, #576]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 8003064:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003068:	7b7b      	ldrb	r3, [r7, #13]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	3301      	adds	r3, #1
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	b291      	uxth	r1, r2
 8003074:	4a8b      	ldr	r2, [pc, #556]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 8003076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800307a:	7b7b      	ldrb	r3, [r7, #13]
 800307c:	3301      	adds	r3, #1
 800307e:	737b      	strb	r3, [r7, #13]
 8003080:	7b7b      	ldrb	r3, [r7, #13]
 8003082:	2b07      	cmp	r3, #7
 8003084:	f67f af5c 	bls.w	8002f40 <PDM_Data_Conversion+0x190>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	2120      	movs	r1, #32
 800308c:	4886      	ldr	r0, [pc, #536]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 800308e:	f002 ffa3 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003092:	2201      	movs	r2, #1
 8003094:	2108      	movs	r1, #8
 8003096:	4884      	ldr	r0, [pc, #528]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 8003098:	f002 ff9e 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800309c:	2200      	movs	r2, #0
 800309e:	2104      	movs	r1, #4
 80030a0:	4881      	ldr	r0, [pc, #516]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 80030a2:	f002 ff99 	bl	8005fd8 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Temperature;
 80030a6:	4b81      	ldr	r3, [pc, #516]	; (80032ac <PDM_Data_Conversion+0x4fc>)
 80030a8:	2204      	movs	r2, #4
 80030aa:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_TEMP);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80030c4:	60da      	str	r2, [r3, #12]

		break;
 80030c6:	e0d4      	b.n	8003272 <PDM_Data_Conversion+0x4c2>

	case Data_Read_Temperature:

		for(uint8_t i = 0; i < 8; i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	733b      	strb	r3, [r7, #12]
 80030cc:	e043      	b.n	8003156 <PDM_Data_Conversion+0x3a6>
		{
			//Convert ADC into temperature
			dataBuffer[16 + i] = __PDM_CONVERT_TEMPERATURE(adcBuffer[i], adcBuffer[8]);
 80030ce:	7b3b      	ldrb	r3, [r7, #12]
 80030d0:	4a77      	ldr	r2, [pc, #476]	; (80032b0 <PDM_Data_Conversion+0x500>)
 80030d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b75      	ldr	r3, [pc, #468]	; (80032b0 <PDM_Data_Conversion+0x500>)
 80030da:	8a1b      	ldrh	r3, [r3, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f06f 0215 	mvn.w	r2, #21
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	4a72      	ldr	r2, [pc, #456]	; (80032b4 <PDM_Data_Conversion+0x504>)
 80030ea:	fb82 1203 	smull	r1, r2, r2, r3
 80030ee:	1092      	asrs	r2, r2, #2
 80030f0:	17db      	asrs	r3, r3, #31
 80030f2:	1ad2      	subs	r2, r2, r3
 80030f4:	7b3b      	ldrb	r3, [r7, #12]
 80030f6:	3310      	adds	r3, #16
 80030f8:	b291      	uxth	r1, r2
 80030fa:	4a6f      	ldr	r2, [pc, #444]	; (80032b8 <PDM_Data_Conversion+0x508>)
 80030fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((adcBuffer[i] < ADC_THRESHOLD_LOW) || (adcBuffer[i] > ADC_THRESHOLD_HIGH))
 8003100:	7b3b      	ldrb	r3, [r7, #12]
 8003102:	4a6b      	ldr	r2, [pc, #428]	; (80032b0 <PDM_Data_Conversion+0x500>)
 8003104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003108:	2b09      	cmp	r3, #9
 800310a:	d906      	bls.n	800311a <PDM_Data_Conversion+0x36a>
 800310c:	7b3b      	ldrb	r3, [r7, #12]
 800310e:	4a68      	ldr	r2, [pc, #416]	; (80032b0 <PDM_Data_Conversion+0x500>)
 8003110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003114:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003118:	d90d      	bls.n	8003136 <PDM_Data_Conversion+0x386>
				dataIdBuffer[16 + i] |= 1;
 800311a:	7b3b      	ldrb	r3, [r7, #12]
 800311c:	3310      	adds	r3, #16
 800311e:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 8003120:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003124:	7b3b      	ldrb	r3, [r7, #12]
 8003126:	3310      	adds	r3, #16
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	b291      	uxth	r1, r2
 800312e:	4a5d      	ldr	r2, [pc, #372]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 8003130:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003134:	e00c      	b.n	8003150 <PDM_Data_Conversion+0x3a0>
			else
				dataIdBuffer[16 + i] &= 0xFFFE;
 8003136:	7b3b      	ldrb	r3, [r7, #12]
 8003138:	3310      	adds	r3, #16
 800313a:	4a5a      	ldr	r2, [pc, #360]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 800313c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003140:	7b3b      	ldrb	r3, [r7, #12]
 8003142:	3310      	adds	r3, #16
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	b291      	uxth	r1, r2
 800314a:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 800314c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003150:	7b3b      	ldrb	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	733b      	strb	r3, [r7, #12]
 8003156:	7b3b      	ldrb	r3, [r7, #12]
 8003158:	2b07      	cmp	r3, #7
 800315a:	d9b8      	bls.n	80030ce <PDM_Data_Conversion+0x31e>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800315c:	2201      	movs	r2, #1
 800315e:	2120      	movs	r1, #32
 8003160:	4851      	ldr	r0, [pc, #324]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 8003162:	f002 ff39 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003166:	2201      	movs	r2, #1
 8003168:	2108      	movs	r1, #8
 800316a:	484f      	ldr	r0, [pc, #316]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 800316c:	f002 ff34 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003170:	2201      	movs	r2, #1
 8003172:	2104      	movs	r1, #4
 8003174:	484c      	ldr	r0, [pc, #304]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 8003176:	f002 ff2f 	bl	8005fd8 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Voltage;
 800317a:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <PDM_Data_Conversion+0x4fc>)
 800317c:	2205      	movs	r2, #5
 800317e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_VOLT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003198:	60da      	str	r2, [r3, #12]

		break;
 800319a:	e06a      	b.n	8003272 <PDM_Data_Conversion+0x4c2>

	case Data_Read_Voltage:

		//Convert ADC into voltage if the ADC value is valid
		if((adcBuffer[0] < ADC_THRESHOLD_LOW) || (adcBuffer[0] > ADC_THRESHOLD_HIGH))
 800319c:	4b44      	ldr	r3, [pc, #272]	; (80032b0 <PDM_Data_Conversion+0x500>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	d904      	bls.n	80031ae <PDM_Data_Conversion+0x3fe>
 80031a4:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <PDM_Data_Conversion+0x500>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80031ac:	d907      	bls.n	80031be <PDM_Data_Conversion+0x40e>
			dataIdBuffer[24] &= 0xFFFE;
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 80031b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 80031ba:	861a      	strh	r2, [r3, #48]	; 0x30
 80031bc:	e019      	b.n	80031f2 <PDM_Data_Conversion+0x442>
		else
		{
			dataBuffer[24] = __PDM_CONVERT_VOLTAGE(adcBuffer[0], adcBuffer[8]);
 80031be:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <PDM_Data_Conversion+0x500>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <PDM_Data_Conversion+0x500>)
 80031c6:	8a1b      	ldrh	r3, [r3, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	4a3a      	ldr	r2, [pc, #232]	; (80032bc <PDM_Data_Conversion+0x50c>)
 80031d4:	fb82 1203 	smull	r1, r2, r2, r3
 80031d8:	1312      	asrs	r2, r2, #12
 80031da:	17db      	asrs	r3, r3, #31
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <PDM_Data_Conversion+0x508>)
 80031e2:	861a      	strh	r2, [r3, #48]	; 0x30
			dataIdBuffer[24] |= 1;
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 80031e6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <PDM_Data_Conversion+0x4f4>)
 80031f0:	861a      	strh	r2, [r3, #48]	; 0x30
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80031f2:	2201      	movs	r2, #1
 80031f4:	2120      	movs	r1, #32
 80031f6:	482c      	ldr	r0, [pc, #176]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 80031f8:	f002 feee 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2108      	movs	r1, #8
 8003200:	4829      	ldr	r0, [pc, #164]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 8003202:	f002 fee9 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003206:	2200      	movs	r2, #0
 8003208:	2104      	movs	r1, #4
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 800320c:	f002 fee4 	bl	8005fd8 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 8003210:	4b26      	ldr	r3, [pc, #152]	; (80032ac <PDM_Data_Conversion+0x4fc>)
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800322e:	60da      	str	r2, [r3, #12]

		break;
 8003230:	e01f      	b.n	8003272 <PDM_Data_Conversion+0x4c2>

	default:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003232:	2201      	movs	r2, #1
 8003234:	2120      	movs	r1, #32
 8003236:	481c      	ldr	r0, [pc, #112]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 8003238:	f002 fece 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	2108      	movs	r1, #8
 8003240:	4819      	ldr	r0, [pc, #100]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 8003242:	f002 fec9 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003246:	2200      	movs	r2, #0
 8003248:	2104      	movs	r1, #4
 800324a:	4817      	ldr	r0, [pc, #92]	; (80032a8 <PDM_Data_Conversion+0x4f8>)
 800324c:	f002 fec4 	bl	8005fd8 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <PDM_Data_Conversion+0x4fc>)
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800326e:	60da      	str	r2, [r3, #12]

		break;
 8003270:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	dataBuffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(adcBuffer[9]);
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <PDM_Data_Conversion+0x500>)
 8003274:	8a5b      	ldrh	r3, [r3, #18]
 8003276:	015b      	lsls	r3, r3, #5
 8003278:	b29b      	uxth	r3, r3
 800327a:	f5a3 43d9 	sub.w	r3, r3, #27776	; 0x6c80
 800327e:	3b7c      	subs	r3, #124	; 0x7c
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <PDM_Data_Conversion+0x508>)
 8003284:	865a      	strh	r2, [r3, #50]	; 0x32

	//Start readings timer
	retVal = HAL_TIM_Base_Start_IT(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f006 f954 	bl	8009534 <HAL_TIM_Base_Start_IT>
 800328c:	4603      	mov	r3, r0
 800328e:	72fb      	strb	r3, [r7, #11]

	//If there is any virtual fuse tripped
	if(flag_fuse != 0)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <PDM_Data_Conversion+0x4ea>
		PDM_Output_Process();
 8003296:	f7fe fe4f 	bl	8001f38 <PDM_Output_Process>

	return retVal;
 800329a:	7afb      	ldrb	r3, [r7, #11]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200005b8 	.word	0x200005b8
 80032a8:	40021000 	.word	0x40021000
 80032ac:	2000060c 	.word	0x2000060c
 80032b0:	200005f4 	.word	0x200005f4
 80032b4:	66666667 	.word	0x66666667
 80032b8:	2000057c 	.word	0x2000057c
 80032bc:	68db8bad 	.word	0x68db8bad

080032c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_MspInit+0x4c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_MspInit+0x4c>)
 80032d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_MspInit+0x4c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_MspInit+0x4c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_MspInit+0x4c>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_MspInit+0x4c>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_ADC_MspInit+0x1cc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d172      	bne.n	8003418 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a62      	ldr	r2, [pc, #392]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a5b      	ldr	r2, [pc, #364]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003374:	f043 0304 	orr.w	r3, r3, #4
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8003386:	23e0      	movs	r3, #224	; 0xe0
 8003388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800338a:	2303      	movs	r3, #3
 800338c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4852      	ldr	r0, [pc, #328]	; (80034e4 <HAL_ADC_MspInit+0x1d4>)
 800339a:	f002 fb7d 	bl	8005a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 800339e:	2310      	movs	r3, #16
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a2:	2303      	movs	r3, #3
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	4619      	mov	r1, r3
 80033b0:	484d      	ldr	r0, [pc, #308]	; (80034e8 <HAL_ADC_MspInit+0x1d8>)
 80033b2:	f002 fb71 	bl	8005a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033b8:	4a4d      	ldr	r2, [pc, #308]	; (80034f0 <HAL_ADC_MspInit+0x1e0>)
 80033ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c8:	4b48      	ldr	r3, [pc, #288]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033ee:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033fa:	483c      	ldr	r0, [pc, #240]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 80033fc:	f001 ffdc 	bl	80053b8 <HAL_DMA_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003406:	f7fd fef7 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a37      	ldr	r2, [pc, #220]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
 8003410:	4a36      	ldr	r2, [pc, #216]	; (80034ec <HAL_ADC_MspInit+0x1dc>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003416:	e05d      	b.n	80034d4 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <HAL_ADC_MspInit+0x1e4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d158      	bne.n	80034d4 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 800342c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003430:	6453      	str	r3, [r2, #68]	; 0x44
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_ADC_MspInit+0x1d0>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 800345a:	231f      	movs	r3, #31
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345e:	2303      	movs	r3, #3
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	4619      	mov	r1, r3
 800346c:	481d      	ldr	r0, [pc, #116]	; (80034e4 <HAL_ADC_MspInit+0x1d4>)
 800346e:	f002 fb13 	bl	8005a98 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 8003474:	4a21      	ldr	r2, [pc, #132]	; (80034fc <HAL_ADC_MspInit+0x1ec>)
 8003476:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 800347a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 800348e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003492:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 8003496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800349a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 800349e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034a2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 80034a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034aa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80034b8:	480f      	ldr	r0, [pc, #60]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 80034ba:	f001 ff7d 	bl	80053b8 <HAL_DMA_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80034c4:	f7fd fe98 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <HAL_ADC_MspInit+0x1e8>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80034d4:	bf00      	nop
 80034d6:	3730      	adds	r7, #48	; 0x30
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40012000 	.word	0x40012000
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020800 	.word	0x40020800
 80034ec:	2000020c 	.word	0x2000020c
 80034f0:	40026410 	.word	0x40026410
 80034f4:	40012100 	.word	0x40012100
 80034f8:	2000026c 	.word	0x2000026c
 80034fc:	40026440 	.word	0x40026440

08003500 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_CAN_MspInit+0x94>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d134      	bne.n	800358c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_CAN_MspInit+0x98>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_CAN_MspInit+0x98>)
 800352c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_CAN_MspInit+0x98>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_CAN_MspInit+0x98>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a14      	ldr	r2, [pc, #80]	; (8003598 <HAL_CAN_MspInit+0x98>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_CAN_MspInit+0x98>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800355a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800355e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800356c:	2309      	movs	r3, #9
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4619      	mov	r1, r3
 8003576:	4809      	ldr	r0, [pc, #36]	; (800359c <HAL_CAN_MspInit+0x9c>)
 8003578:	f002 fa8e 	bl	8005a98 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	2102      	movs	r1, #2
 8003580:	2014      	movs	r0, #20
 8003582:	f001 feb8 	bl	80052f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003586:	2014      	movs	r0, #20
 8003588:	f001 fed1 	bl	800532e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800358c:	bf00      	nop
 800358e:	3728      	adds	r7, #40	; 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40006400 	.word	0x40006400
 8003598:	40023800 	.word	0x40023800
 800359c:	40020400 	.word	0x40020400

080035a0 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_CAN_MspDeInit+0x38>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10d      	bne.n	80035ce <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_CAN_MspDeInit+0x3c>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_CAN_MspDeInit+0x3c>)
 80035b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80035be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80035c2:	4807      	ldr	r0, [pc, #28]	; (80035e0 <HAL_CAN_MspDeInit+0x40>)
 80035c4:	f002 fbfc 	bl	8005dc0 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80035c8:	2014      	movs	r0, #20
 80035ca:	f001 febe 	bl	800534a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40006400 	.word	0x40006400
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020400 	.word	0x40020400

080035e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <HAL_CRC_MspInit+0x3c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10d      	bne.n	8003612 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_CRC_MspInit+0x40>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_CRC_MspInit+0x40>)
 8003600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <HAL_CRC_MspInit+0x40>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023000 	.word	0x40023000
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_I2C_MspInit+0x84>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d12b      	bne.n	80036a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_I2C_MspInit+0x88>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <HAL_I2C_MspInit+0x88>)
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_I2C_MspInit+0x88>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003666:	23c0      	movs	r3, #192	; 0xc0
 8003668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800366a:	2312      	movs	r3, #18
 800366c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003672:	2303      	movs	r3, #3
 8003674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003676:	2304      	movs	r3, #4
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4619      	mov	r1, r3
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <HAL_I2C_MspInit+0x8c>)
 8003682:	f002 fa09 	bl	8005a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_I2C_MspInit+0x88>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_I2C_MspInit+0x88>)
 8003690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_I2C_MspInit+0x88>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036a2:	bf00      	nop
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40005400 	.word	0x40005400
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020400 	.word	0x40020400

080036b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a44      	ldr	r2, [pc, #272]	; (80037d8 <HAL_TIM_Base_MspInit+0x120>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	4b43      	ldr	r3, [pc, #268]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	4a42      	ldr	r2, [pc, #264]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6453      	str	r3, [r2, #68]	; 0x44
 80036da:	4b40      	ldr	r3, [pc, #256]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80036e6:	e072      	b.n	80037ce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a38      	ldr	r2, [pc, #224]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	69bb      	ldr	r3, [r7, #24]
}
 800370e:	e05e      	b.n	80037ce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a32      	ldr	r2, [pc, #200]	; (80037e0 <HAL_TIM_Base_MspInit+0x128>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]
}
 8003736:	e04a      	b.n	80037ce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a29      	ldr	r2, [pc, #164]	; (80037e4 <HAL_TIM_Base_MspInit+0x12c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d116      	bne.n	8003770 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2100      	movs	r1, #0
 8003762:	2036      	movs	r0, #54	; 0x36
 8003764:	f001 fdc7 	bl	80052f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003768:	2036      	movs	r0, #54	; 0x36
 800376a:	f001 fde0 	bl	800532e <HAL_NVIC_EnableIRQ>
}
 800376e:	e02e      	b.n	80037ce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM7)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_TIM_Base_MspInit+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d116      	bne.n	80037a8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b17      	ldr	r3, [pc, #92]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a16      	ldr	r2, [pc, #88]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	2037      	movs	r0, #55	; 0x37
 800379c:	f001 fdab 	bl	80052f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037a0:	2037      	movs	r0, #55	; 0x37
 80037a2:	f001 fdc4 	bl	800532e <HAL_NVIC_EnableIRQ>
}
 80037a6:	e012      	b.n	80037ce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM8)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <HAL_TIM_Base_MspInit+0x134>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_TIM_Base_MspInit+0x124>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
}
 80037ce:	bf00      	nop
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40001000 	.word	0x40001000
 80037e8:	40001400 	.word	0x40001400
 80037ec:	40010400 	.word	0x40010400

080037f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a49      	ldr	r2, [pc, #292]	; (8003934 <HAL_TIM_MspPostInit+0x144>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d11f      	bne.n	8003852 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	4b48      	ldr	r3, [pc, #288]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a47      	ldr	r2, [pc, #284]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 800381c:	f043 0310 	orr.w	r3, r3, #16
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b45      	ldr	r3, [pc, #276]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 800382e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003834:	2312      	movs	r3, #18
 8003836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383c:	2300      	movs	r3, #0
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003840:	2301      	movs	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	4619      	mov	r1, r3
 800384a:	483c      	ldr	r0, [pc, #240]	; (800393c <HAL_TIM_MspPostInit+0x14c>)
 800384c:	f002 f924 	bl	8005a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003850:	e06b      	b.n	800392a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d11f      	bne.n	800389c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	4b35      	ldr	r3, [pc, #212]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	4a34      	ldr	r2, [pc, #208]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6313      	str	r3, [r2, #48]	; 0x30
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8003878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800387e:	2312      	movs	r3, #18
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800388a:	2301      	movs	r3, #1
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4619      	mov	r1, r3
 8003894:	482a      	ldr	r0, [pc, #168]	; (8003940 <HAL_TIM_MspPostInit+0x150>)
 8003896:	f002 f8ff 	bl	8005a98 <HAL_GPIO_Init>
}
 800389a:	e046      	b.n	800392a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a28      	ldr	r2, [pc, #160]	; (8003944 <HAL_TIM_MspPostInit+0x154>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d11e      	bne.n	80038e4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80038c2:	2302      	movs	r3, #2
 80038c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038c6:	2312      	movs	r3, #18
 80038c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	2300      	movs	r3, #0
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038d2:	2302      	movs	r3, #2
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 80038d6:	f107 031c 	add.w	r3, r7, #28
 80038da:	4619      	mov	r1, r3
 80038dc:	4818      	ldr	r0, [pc, #96]	; (8003940 <HAL_TIM_MspPostInit+0x150>)
 80038de:	f002 f8db 	bl	8005a98 <HAL_GPIO_Init>
}
 80038e2:	e022      	b.n	800392a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <HAL_TIM_MspPostInit+0x158>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d11d      	bne.n	800392a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_TIM_MspPostInit+0x148>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 800390a:	2301      	movs	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800390e:	2312      	movs	r3, #18
 8003910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800391a:	2303      	movs	r3, #3
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 800391e:	f107 031c 	add.w	r3, r7, #28
 8003922:	4619      	mov	r1, r3
 8003924:	4806      	ldr	r0, [pc, #24]	; (8003940 <HAL_TIM_MspPostInit+0x150>)
 8003926:	f002 f8b7 	bl	8005a98 <HAL_GPIO_Init>
}
 800392a:	bf00      	nop
 800392c:	3730      	adds	r7, #48	; 0x30
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	40023800 	.word	0x40023800
 800393c:	40021000 	.word	0x40021000
 8003940:	40020400 	.word	0x40020400
 8003944:	40000400 	.word	0x40000400
 8003948:	40010400 	.word	0x40010400

0800394c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <NMI_Handler+0x4>

08003952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <HardFault_Handler+0x4>

08003958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <MemManage_Handler+0x4>

0800395e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <BusFault_Handler+0x4>

08003964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <UsageFault_Handler+0x4>

0800396a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003998:	f000 f926 	bl	8003be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}

080039a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 80039a4:	2001      	movs	r0, #1
 80039a6:	f002 fb4b 	bl	8006040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}

080039ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 80039b2:	2002      	movs	r0, #2
 80039b4:	f002 fb44 	bl	8006040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}

080039bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 80039c0:	2004      	movs	r0, #4
 80039c2:	f002 fb3d 	bl	8006040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}

080039ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 80039ce:	2008      	movs	r0, #8
 80039d0:	f002 fb36 	bl	8006040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 80039dc:	2010      	movs	r0, #16
 80039de:	f002 fb2f 	bl	8006040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <CAN1_RX0_IRQHandler+0x10>)
 80039ee:	f001 f954 	bl	8004c9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200002cc 	.word	0x200002cc

080039fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <TIM6_DAC_IRQHandler+0x10>)
 8003a02:	f005 ff57 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000428 	.word	0x20000428

08003a10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <TIM7_IRQHandler+0x10>)
 8003a16:	f005 ff4d 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000470 	.word	0x20000470

08003a24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <DMA2_Stream0_IRQHandler+0x10>)
 8003a2a:	f001 fdcb 	bl	80055c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000020c 	.word	0x2000020c

08003a38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DMA2_Stream2_IRQHandler+0x10>)
 8003a3e:	f001 fdc1 	bl	80055c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000026c 	.word	0x2000026c

08003a4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <OTG_FS_IRQHandler+0x10>)
 8003a52:	f003 fa52 	bl	8006efa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20001c74 	.word	0x20001c74

08003a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <_sbrk+0x5c>)
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <_sbrk+0x60>)
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <_sbrk+0x64>)
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <_sbrk+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d207      	bcs.n	8003aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a90:	f00a ffd0 	bl	800ea34 <__errno>
 8003a94:	4603      	mov	r3, r0
 8003a96:	220c      	movs	r2, #12
 8003a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e009      	b.n	8003ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <_sbrk+0x64>)
 8003ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20020000 	.word	0x20020000
 8003ac0:	00004000 	.word	0x00004000
 8003ac4:	2000078c 	.word	0x2000078c
 8003ac8:	200023b0 	.word	0x200023b0

08003acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <SystemInit+0x20>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <SystemInit+0x20>)
 8003ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003af4:	480d      	ldr	r0, [pc, #52]	; (8003b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003af6:	490e      	ldr	r1, [pc, #56]	; (8003b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003af8:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003afc:	e002      	b.n	8003b04 <LoopCopyDataInit>

08003afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b02:	3304      	adds	r3, #4

08003b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b08:	d3f9      	bcc.n	8003afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b0c:	4c0b      	ldr	r4, [pc, #44]	; (8003b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b10:	e001      	b.n	8003b16 <LoopFillZerobss>

08003b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b14:	3204      	adds	r2, #4

08003b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b18:	d3fb      	bcc.n	8003b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b1a:	f7ff ffd7 	bl	8003acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b1e:	f00a ff8f 	bl	800ea40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b22:	f7fc fcf1 	bl	8000508 <main>
  bx  lr    
 8003b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b30:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8003b34:	0800ed44 	.word	0x0800ed44
  ldr r2, =_sbss
 8003b38:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003b3c:	200023b0 	.word	0x200023b0

08003b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b40:	e7fe      	b.n	8003b40 <ADC_IRQHandler>
	...

08003b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <HAL_Init+0x40>)
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_Init+0x40>)
 8003b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_Init+0x40>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f001 fbb7 	bl	80052e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b72:	200f      	movs	r0, #15
 8003b74:	f000 f808 	bl	8003b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b78:	f7ff fba2 	bl	80032c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_InitTick+0x54>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_InitTick+0x58>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fbdd 	bl	8005366 <HAL_SYSTICK_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00e      	b.n	8003bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d80a      	bhi.n	8003bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f001 fb97 	bl	80052f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <HAL_InitTick+0x5c>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	20000008 	.word	0x20000008
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_IncTick+0x20>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x24>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_IncTick+0x24>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000008 	.word	0x20000008
 8003c0c:	20000790 	.word	0x20000790

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000790 	.word	0x20000790

08003c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff ffee 	bl	8003c10 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d005      	beq.n	8003c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_Delay+0x44>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c4e:	bf00      	nop
 8003c50:	f7ff ffde 	bl	8003c10 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d8f7      	bhi.n	8003c50 <HAL_Delay+0x28>
  {
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000008 	.word	0x20000008

08003c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e033      	b.n	8003cee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fb3e 	bl	8003310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d118      	bne.n	8003ce0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cb6:	f023 0302 	bic.w	r3, r3, #2
 8003cba:	f043 0202 	orr.w	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa78 	bl	80041b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cde:	e001      	b.n	8003ce4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_Start_DMA+0x1e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0e9      	b.n	8003eea <HAL_ADC_Start_DMA+0x1f2>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d018      	beq.n	8003d5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d3c:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <HAL_ADC_Start_DMA+0x1fc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6d      	ldr	r2, [pc, #436]	; (8003ef8 <HAL_ADC_Start_DMA+0x200>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9a      	lsrs	r2, r3, #18
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d50:	e002      	b.n	8003d58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f9      	bne.n	8003d52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6c:	d107      	bne.n	8003d7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80a1 	bne.w	8003ed0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003db8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d106      	bne.n	8003ddc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f023 0206 	bic.w	r2, r3, #6
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8003dda:	e002      	b.n	8003de2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dea:	4b44      	ldr	r3, [pc, #272]	; (8003efc <HAL_ADC_Start_DMA+0x204>)
 8003dec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	4a43      	ldr	r2, [pc, #268]	; (8003f00 <HAL_ADC_Start_DMA+0x208>)
 8003df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <HAL_ADC_Start_DMA+0x20c>)
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	4a41      	ldr	r2, [pc, #260]	; (8003f08 <HAL_ADC_Start_DMA+0x210>)
 8003e04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	334c      	adds	r3, #76	; 0x4c
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f001 fb68 	bl	8005514 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d12a      	bne.n	8003ea6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_ADC_Start_DMA+0x214>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d015      	beq.n	8003e86 <HAL_ADC_Start_DMA+0x18e>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <HAL_ADC_Start_DMA+0x218>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d105      	bne.n	8003e70 <HAL_ADC_Start_DMA+0x178>
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_ADC_Start_DMA+0x204>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <HAL_ADC_Start_DMA+0x21c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d136      	bne.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_ADC_Start_DMA+0x204>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d130      	bne.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d129      	bne.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	e020      	b.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_ADC_Start_DMA+0x214>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d11b      	bne.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d114      	bne.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	e00b      	b.n	8003ee8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	431bde83 	.word	0x431bde83
 8003efc:	40012300 	.word	0x40012300
 8003f00:	080043b1 	.word	0x080043b1
 8003f04:	0800446b 	.word	0x0800446b
 8003f08:	08004487 	.word	0x08004487
 8003f0c:	40012000 	.word	0x40012000
 8003f10:	40012100 	.word	0x40012100
 8003f14:	40012200 	.word	0x40012200

08003f18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e113      	b.n	8004198 <HAL_ADC_ConfigChannel+0x244>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	d925      	bls.n	8003fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68d9      	ldr	r1, [r3, #12]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4613      	mov	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	3b1e      	subs	r3, #30
 8003f96:	2207      	movs	r2, #7
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4403      	add	r3, r0
 8003fbe:	3b1e      	subs	r3, #30
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e022      	b.n	8004012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6919      	ldr	r1, [r3, #16]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	400a      	ands	r2, r1
 8003fee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6919      	ldr	r1, [r3, #16]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	4618      	mov	r0, r3
 8004002:	4603      	mov	r3, r0
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4403      	add	r3, r0
 8004008:	409a      	lsls	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b06      	cmp	r3, #6
 8004018:	d824      	bhi.n	8004064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	3b05      	subs	r3, #5
 800402c:	221f      	movs	r2, #31
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43da      	mvns	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	400a      	ands	r2, r1
 800403a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	4618      	mov	r0, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	3b05      	subs	r3, #5
 8004056:	fa00 f203 	lsl.w	r2, r0, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
 8004062:	e04c      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	d824      	bhi.n	80040b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	3b23      	subs	r3, #35	; 0x23
 800407e:	221f      	movs	r2, #31
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43da      	mvns	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	400a      	ands	r2, r1
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	4618      	mov	r0, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	3b23      	subs	r3, #35	; 0x23
 80040a8:	fa00 f203 	lsl.w	r2, r0, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
 80040b4:	e023      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	3b41      	subs	r3, #65	; 0x41
 80040c8:	221f      	movs	r2, #31
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	400a      	ands	r2, r1
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4618      	mov	r0, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	3b41      	subs	r3, #65	; 0x41
 80040f2:	fa00 f203 	lsl.w	r2, r0, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040fe:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_ADC_ConfigChannel+0x250>)
 8004100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a28      	ldr	r2, [pc, #160]	; (80041a8 <HAL_ADC_ConfigChannel+0x254>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d10f      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1d8>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b12      	cmp	r3, #18
 8004112:	d10b      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_ADC_ConfigChannel+0x254>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d12b      	bne.n	800418e <HAL_ADC_ConfigChannel+0x23a>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_ADC_ConfigChannel+0x258>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <HAL_ADC_ConfigChannel+0x1f4>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b11      	cmp	r3, #17
 8004146:	d122      	bne.n	800418e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_ADC_ConfigChannel+0x258>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_ADC_ConfigChannel+0x25c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a11      	ldr	r2, [pc, #68]	; (80041b4 <HAL_ADC_ConfigChannel+0x260>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	0c9a      	lsrs	r2, r3, #18
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004180:	e002      	b.n	8004188 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	3b01      	subs	r3, #1
 8004186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f9      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40012300 	.word	0x40012300
 80041a8:	40012000 	.word	0x40012000
 80041ac:	10000012 	.word	0x10000012
 80041b0:	20000000 	.word	0x20000000
 80041b4:	431bde83 	.word	0x431bde83

080041b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <ADC_Init+0x1f0>)
 80041c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	021a      	lsls	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6899      	ldr	r1, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	4a58      	ldr	r2, [pc, #352]	; (80043ac <ADC_Init+0x1f4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800425e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e00f      	b.n	80042b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0202 	bic.w	r2, r2, #2
 80042c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7e1b      	ldrb	r3, [r3, #24]
 80042d0:	005a      	lsls	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	3b01      	subs	r3, #1
 8004310:	035a      	lsls	r2, r3, #13
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	e007      	b.n	800432c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	3b01      	subs	r3, #1
 8004348:	051a      	lsls	r2, r3, #20
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800436e:	025a      	lsls	r2, r3, #9
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	029a      	lsls	r2, r3, #10
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40012300 	.word	0x40012300
 80043ac:	0f000001 	.word	0x0f000001

080043b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13c      	bne.n	8004444 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d12b      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d127      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004404:	2b00      	cmp	r3, #0
 8004406:	d119      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0220 	bic.w	r2, r2, #32
 8004416:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f043 0201 	orr.w	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fd6b 	bl	8003f18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004442:	e00e      	b.n	8004462 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff fd75 	bl	8003f40 <HAL_ADC_ErrorCallback>
}
 8004456:	e004      	b.n	8004462 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fd57 	bl	8003f2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff fd4a 	bl	8003f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0ed      	b.n	80046a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff f814 	bl	8003500 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e8:	f7ff fb92 	bl	8003c10 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044ee:	e012      	b.n	8004516 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044f0:	f7ff fb8e 	bl	8003c10 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b0a      	cmp	r3, #10
 80044fc:	d90b      	bls.n	8004516 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2205      	movs	r2, #5
 800450e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e0c5      	b.n	80046a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0e5      	beq.n	80044f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0202 	bic.w	r2, r2, #2
 8004532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004534:	f7ff fb6c 	bl	8003c10 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800453a:	e012      	b.n	8004562 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800453c:	f7ff fb68 	bl	8003c10 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b0a      	cmp	r3, #10
 8004548:	d90b      	bls.n	8004562 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2205      	movs	r2, #5
 800455a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e09f      	b.n	80046a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7e1b      	ldrb	r3, [r3, #24]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d108      	bne.n	800458a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e007      	b.n	800459a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7e5b      	ldrb	r3, [r3, #25]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d108      	bne.n	80045b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e007      	b.n	80045c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	7e9b      	ldrb	r3, [r3, #26]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d108      	bne.n	80045de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0220 	orr.w	r2, r2, #32
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e007      	b.n	80045ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0220 	bic.w	r2, r2, #32
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7edb      	ldrb	r3, [r3, #27]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0210 	bic.w	r2, r2, #16
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e007      	b.n	8004618 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0210 	orr.w	r2, r2, #16
 8004616:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7f1b      	ldrb	r3, [r3, #28]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e007      	b.n	8004642 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0208 	bic.w	r2, r2, #8
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	7f5b      	ldrb	r3, [r3, #29]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d108      	bne.n	800465c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0204 	orr.w	r2, r2, #4
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e007      	b.n	800466c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0204 	bic.w	r2, r2, #4
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	1e5a      	subs	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e015      	b.n	80046e8 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f85b 	bl	8004778 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe ff6c 	bl	80035a0 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d6:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d12e      	bne.n	8004762 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471c:	f7ff fa78 	bl	8003c10 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004722:	e012      	b.n	800474a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004724:	f7ff fa74 	bl	8003c10 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b0a      	cmp	r3, #10
 8004730:	d90b      	bls.n	800474a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2205      	movs	r2, #5
 8004742:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e012      	b.n	8004770 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e5      	bne.n	8004724 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e006      	b.n	8004770 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d133      	bne.n	80047f4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800479c:	f7ff fa38 	bl	8003c10 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047a2:	e012      	b.n	80047ca <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047a4:	f7ff fa34 	bl	8003c10 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b0a      	cmp	r3, #10
 80047b0:	d90b      	bls.n	80047ca <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2205      	movs	r2, #5
 80047c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e01b      	b.n	8004802 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0e5      	beq.n	80047a4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0202 	bic.w	r2, r2, #2
 80047e6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e006      	b.n	8004802 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800480a:	b480      	push	{r7}
 800480c:	b089      	sub	sp, #36	; 0x24
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004828:	7ffb      	ldrb	r3, [r7, #31]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d003      	beq.n	8004836 <HAL_CAN_AddTxMessage+0x2c>
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b02      	cmp	r3, #2
 8004832:	f040 80b8 	bne.w	80049a6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a0 	beq.w	8004996 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d907      	bls.n	8004876 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e09e      	b.n	80049b4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004876:	2201      	movs	r2, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	409a      	lsls	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10d      	bne.n	80048a4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6809      	ldr	r1, [r1, #0]
 8004896:	431a      	orrs	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3318      	adds	r3, #24
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	440b      	add	r3, r1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e00f      	b.n	80048c4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80048b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	3318      	adds	r3, #24
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	440b      	add	r3, r1
 80048c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3318      	adds	r3, #24
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	440b      	add	r3, r1
 80048d4:	3304      	adds	r3, #4
 80048d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	7d1b      	ldrb	r3, [r3, #20]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d111      	bne.n	8004904 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3318      	adds	r3, #24
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	3304      	adds	r3, #4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	6811      	ldr	r1, [r2, #0]
 80048f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3318      	adds	r3, #24
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	440b      	add	r3, r1
 8004900:	3304      	adds	r3, #4
 8004902:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3307      	adds	r3, #7
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	061a      	lsls	r2, r3, #24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3306      	adds	r3, #6
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3305      	adds	r3, #5
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	4313      	orrs	r3, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	3204      	adds	r2, #4
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	4610      	mov	r0, r2
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	6811      	ldr	r1, [r2, #0]
 800492c:	ea43 0200 	orr.w	r2, r3, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	440b      	add	r3, r1
 8004936:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800493a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3303      	adds	r3, #3
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	061a      	lsls	r2, r3, #24
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3302      	adds	r3, #2
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3301      	adds	r3, #1
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	4313      	orrs	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	4610      	mov	r0, r2
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	6811      	ldr	r1, [r2, #0]
 8004962:	ea43 0200 	orr.w	r2, r3, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	440b      	add	r3, r1
 800496c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004970:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3318      	adds	r3, #24
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4413      	add	r3, r2
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	6811      	ldr	r1, [r2, #0]
 8004984:	f043 0201 	orr.w	r2, r3, #1
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	3318      	adds	r3, #24
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	440b      	add	r3, r1
 8004990:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e00e      	b.n	80049b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e006      	b.n	80049b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3724      	adds	r7, #36	; 0x24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80049d4:	7afb      	ldrb	r3, [r7, #11]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d002      	beq.n	80049e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80049da:	7afb      	ldrb	r3, [r7, #11]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d11d      	bne.n	8004a1c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d003      	beq.n	8004a4e <HAL_CAN_GetRxMessage+0x24>
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f040 80f3 	bne.w	8004c34 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10e      	bne.n	8004a72 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e0e7      	b.n	8004c42 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d107      	bne.n	8004a90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0d8      	b.n	8004c42 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	331b      	adds	r3, #27
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0204 	and.w	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10c      	bne.n	8004ac8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	331b      	adds	r3, #27
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	4413      	add	r3, r2
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0d5b      	lsrs	r3, r3, #21
 8004abe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e00b      	b.n	8004ae0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	331b      	adds	r3, #27
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	4413      	add	r3, r2
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	08db      	lsrs	r3, r3, #3
 8004ad8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	331b      	adds	r3, #27
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	4413      	add	r3, r2
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0202 	and.w	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	331b      	adds	r3, #27
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	331b      	adds	r3, #27
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	4413      	add	r3, r2
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	331b      	adds	r3, #27
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4413      	add	r3, r2
 8004b32:	3304      	adds	r3, #4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	0a1a      	lsrs	r2, r3, #8
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	0c1a      	lsrs	r2, r3, #16
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	3302      	adds	r3, #2
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0e1a      	lsrs	r2, r3, #24
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	3303      	adds	r3, #3
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	0a1a      	lsrs	r2, r3, #8
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	3305      	adds	r3, #5
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	0c1a      	lsrs	r2, r3, #16
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	3306      	adds	r3, #6
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	0e1a      	lsrs	r2, r3, #24
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	3307      	adds	r3, #7
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0220 	orr.w	r2, r2, #32
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	e007      	b.n	8004c30 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0220 	orr.w	r2, r2, #32
 8004c2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e006      	b.n	8004c42 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d002      	beq.n	8004c6c <HAL_CAN_ActivateNotification+0x1e>
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d109      	bne.n	8004c80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e006      	b.n	8004c8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b08a      	sub	sp, #40	; 0x28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d07c      	beq.n	8004dda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d023      	beq.n	8004d32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f983 	bl	8005008 <HAL_CAN_TxMailbox0CompleteCallback>
 8004d02:	e016      	b.n	8004d32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
 8004d16:	e00c      	b.n	8004d32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	e002      	b.n	8004d32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f989 	bl	8005044 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d024      	beq.n	8004d86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f963 	bl	800501c <HAL_CAN_TxMailbox1CompleteCallback>
 8004d56:	e016      	b.n	8004d86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	e00c      	b.n	8004d86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e002      	b.n	8004d86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f969 	bl	8005058 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d024      	beq.n	8004dda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f943 	bl	8005030 <HAL_CAN_TxMailbox2CompleteCallback>
 8004daa:	e016      	b.n	8004dda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbe:	e00c      	b.n	8004dda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e002      	b.n	8004dda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f949 	bl	800506c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d006      	beq.n	8004e20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2208      	movs	r2, #8
 8004e18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f930 	bl	8005080 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fd feeb 	bl	8002c14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00c      	beq.n	8004e62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2210      	movs	r2, #16
 8004e60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f912 	bl	80050a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8f9 	bl	8005094 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d006      	beq.n	8004ec4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8fc 	bl	80050bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2208      	movs	r2, #8
 8004ede:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8f5 	bl	80050d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07b      	beq.n	8004fe8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d072      	beq.n	8004fe0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	f043 0304 	orr.w	r3, r3, #4
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d043      	beq.n	8004fe0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d03e      	beq.n	8004fe0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d02b      	beq.n	8004fc4 <HAL_CAN_IRQHandler+0x32a>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d82e      	bhi.n	8004fce <HAL_CAN_IRQHandler+0x334>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d022      	beq.n	8004fba <HAL_CAN_IRQHandler+0x320>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d82a      	bhi.n	8004fce <HAL_CAN_IRQHandler+0x334>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d019      	beq.n	8004fb0 <HAL_CAN_IRQHandler+0x316>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d826      	bhi.n	8004fce <HAL_CAN_IRQHandler+0x334>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d010      	beq.n	8004fa6 <HAL_CAN_IRQHandler+0x30c>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d822      	bhi.n	8004fce <HAL_CAN_IRQHandler+0x334>
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d002      	beq.n	8004f92 <HAL_CAN_IRQHandler+0x2f8>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d005      	beq.n	8004f9c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004f90:	e01d      	b.n	8004fce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	f043 0308 	orr.w	r3, r3, #8
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f9a:	e019      	b.n	8004fd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	f043 0310 	orr.w	r3, r3, #16
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fa4:	e014      	b.n	8004fd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	f043 0320 	orr.w	r3, r3, #32
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fae:	e00f      	b.n	8004fd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fb8:	e00a      	b.n	8004fd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fc2:	e005      	b.n	8004fd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fcc:	e000      	b.n	8004fd0 <HAL_CAN_IRQHandler+0x336>
            break;
 8004fce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fde:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f872 	bl	80050e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005000:	bf00      	nop
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005114:	4013      	ands	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	60d3      	str	r3, [r2, #12]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__NVIC_GetPriorityGrouping+0x18>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 0307 	and.w	r3, r3, #7
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db0b      	blt.n	8005186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <__NVIC_EnableIRQ+0x38>)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2001      	movs	r0, #1
 800517e:	fa00 f202 	lsl.w	r2, r0, r2
 8005182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e100 	.word	0xe000e100

08005198 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	db12      	blt.n	80051d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	f003 021f 	and.w	r2, r3, #31
 80051b0:	490a      	ldr	r1, [pc, #40]	; (80051dc <__NVIC_DisableIRQ+0x44>)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	2001      	movs	r0, #1
 80051ba:	fa00 f202 	lsl.w	r2, r0, r2
 80051be:	3320      	adds	r3, #32
 80051c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051c4:	f3bf 8f4f 	dsb	sy
}
 80051c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051ca:	f3bf 8f6f 	isb	sy
}
 80051ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000e100 	.word	0xe000e100

080051e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	6039      	str	r1, [r7, #0]
 80051ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	db0a      	blt.n	800520a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	490c      	ldr	r1, [pc, #48]	; (800522c <__NVIC_SetPriority+0x4c>)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	440b      	add	r3, r1
 8005204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005208:	e00a      	b.n	8005220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4908      	ldr	r1, [pc, #32]	; (8005230 <__NVIC_SetPriority+0x50>)
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	3b04      	subs	r3, #4
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	440b      	add	r3, r1
 800521e:	761a      	strb	r2, [r3, #24]
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000e100 	.word	0xe000e100
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	; 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f1c3 0307 	rsb	r3, r3, #7
 800524e:	2b04      	cmp	r3, #4
 8005250:	bf28      	it	cs
 8005252:	2304      	movcs	r3, #4
 8005254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3304      	adds	r3, #4
 800525a:	2b06      	cmp	r3, #6
 800525c:	d902      	bls.n	8005264 <NVIC_EncodePriority+0x30>
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	3b03      	subs	r3, #3
 8005262:	e000      	b.n	8005266 <NVIC_EncodePriority+0x32>
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43da      	mvns	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	401a      	ands	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800527c:	f04f 31ff 	mov.w	r1, #4294967295
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	43d9      	mvns	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800528c:	4313      	orrs	r3, r2
         );
}
 800528e:	4618      	mov	r0, r3
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ac:	d301      	bcc.n	80052b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ae:	2301      	movs	r3, #1
 80052b0:	e00f      	b.n	80052d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <SysTick_Config+0x40>)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052ba:	210f      	movs	r1, #15
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	f7ff ff8e 	bl	80051e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <SysTick_Config+0x40>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <SysTick_Config+0x40>)
 80052cc:	2207      	movs	r2, #7
 80052ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	e000e010 	.word	0xe000e010

080052e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ff05 	bl	80050f8 <__NVIC_SetPriorityGrouping>
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4603      	mov	r3, r0
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005308:	f7ff ff1a 	bl	8005140 <__NVIC_GetPriorityGrouping>
 800530c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f7ff ff8e 	bl	8005234 <NVIC_EncodePriority>
 8005318:	4602      	mov	r2, r0
 800531a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff5d 	bl	80051e0 <__NVIC_SetPriority>
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	4603      	mov	r3, r0
 8005336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff ff0d 	bl	800515c <__NVIC_EnableIRQ>
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	4603      	mov	r3, r0
 8005352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff ff1d 	bl	8005198 <__NVIC_DisableIRQ>
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ff94 	bl	800529c <SysTick_Config>
 8005374:	4603      	mov	r3, r0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e00e      	b.n	80053ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	795b      	ldrb	r3, [r3, #5]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fe f91f 	bl	80035e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053c4:	f7fe fc24 	bl	8003c10 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e099      	b.n	8005508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f4:	e00f      	b.n	8005416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053f6:	f7fe fc0b 	bl	8003c10 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b05      	cmp	r3, #5
 8005402:	d908      	bls.n	8005416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2203      	movs	r2, #3
 800540e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e078      	b.n	8005508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e8      	bne.n	80053f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4b38      	ldr	r3, [pc, #224]	; (8005510 <HAL_DMA_Init+0x158>)
 8005430:	4013      	ands	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800544e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800545a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b04      	cmp	r3, #4
 800546e:	d107      	bne.n	8005480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	4313      	orrs	r3, r2
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d117      	bne.n	80054da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa6f 	bl	80059a0 <DMA_CheckFifoParam>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054d6:	2301      	movs	r3, #1
 80054d8:	e016      	b.n	8005508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa26 	bl	8005934 <DMA_CalcBaseAndBitshift>
 80054e8:	4603      	mov	r3, r0
 80054ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	223f      	movs	r2, #63	; 0x3f
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	f010803f 	.word	0xf010803f

08005514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_DMA_Start_IT+0x26>
 8005536:	2302      	movs	r3, #2
 8005538:	e040      	b.n	80055bc <HAL_DMA_Start_IT+0xa8>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d12f      	bne.n	80055ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f9b8 	bl	80058d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556c:	223f      	movs	r2, #63	; 0x3f
 800556e:	409a      	lsls	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0216 	orr.w	r2, r2, #22
 8005582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e005      	b.n	80055ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
 80055b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055d0:	4b8e      	ldr	r3, [pc, #568]	; (800580c <HAL_DMA_IRQHandler+0x248>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a8e      	ldr	r2, [pc, #568]	; (8005810 <HAL_DMA_IRQHandler+0x24c>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0a9b      	lsrs	r3, r3, #10
 80055dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ee:	2208      	movs	r2, #8
 80055f0:	409a      	lsls	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01a      	beq.n	8005630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d013      	beq.n	8005630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0204 	bic.w	r2, r2, #4
 8005616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	2208      	movs	r2, #8
 800561e:	409a      	lsls	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	f043 0201 	orr.w	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	2201      	movs	r2, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d012      	beq.n	8005666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005652:	2201      	movs	r2, #1
 8005654:	409a      	lsls	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f043 0202 	orr.w	r2, r3, #2
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566a:	2204      	movs	r2, #4
 800566c:	409a      	lsls	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d012      	beq.n	800569c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005688:	2204      	movs	r2, #4
 800568a:	409a      	lsls	r2, r3
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f043 0204 	orr.w	r2, r3, #4
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a0:	2210      	movs	r2, #16
 80056a2:	409a      	lsls	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d043      	beq.n	8005734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d03c      	beq.n	8005734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056be:	2210      	movs	r2, #16
 80056c0:	409a      	lsls	r2, r3
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d018      	beq.n	8005706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d108      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d024      	beq.n	8005734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
 80056f2:	e01f      	b.n	8005734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	e016      	b.n	8005734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0208 	bic.w	r2, r2, #8
 8005722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005738:	2220      	movs	r2, #32
 800573a:	409a      	lsls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 808f 	beq.w	8005864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8087 	beq.w	8005864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575a:	2220      	movs	r2, #32
 800575c:	409a      	lsls	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b05      	cmp	r3, #5
 800576c:	d136      	bne.n	80057dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0216 	bic.w	r2, r2, #22
 800577c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800578c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <HAL_DMA_IRQHandler+0x1da>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0208 	bic.w	r2, r2, #8
 80057ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b2:	223f      	movs	r2, #63	; 0x3f
 80057b4:	409a      	lsls	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d07e      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
        }
        return;
 80057da:	e079      	b.n	80058d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01d      	beq.n	8005826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10d      	bne.n	8005814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d031      	beq.n	8005864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
 8005808:	e02c      	b.n	8005864 <HAL_DMA_IRQHandler+0x2a0>
 800580a:	bf00      	nop
 800580c:	20000000 	.word	0x20000000
 8005810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d023      	beq.n	8005864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
 8005824:	e01e      	b.n	8005864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10f      	bne.n	8005854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0210 	bic.w	r2, r2, #16
 8005842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005868:	2b00      	cmp	r3, #0
 800586a:	d032      	beq.n	80058d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d022      	beq.n	80058be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2205      	movs	r2, #5
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3301      	adds	r3, #1
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	429a      	cmp	r2, r3
 800589a:	d307      	bcc.n	80058ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f2      	bne.n	8005890 <HAL_DMA_IRQHandler+0x2cc>
 80058aa:	e000      	b.n	80058ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
 80058ce:	e000      	b.n	80058d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80058d0:	bf00      	nop
    }
  }
}
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d108      	bne.n	8005918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005916:	e007      	b.n	8005928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]
}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	3b10      	subs	r3, #16
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <DMA_CalcBaseAndBitshift+0x64>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <DMA_CalcBaseAndBitshift+0x68>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b03      	cmp	r3, #3
 8005960:	d909      	bls.n	8005976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	659a      	str	r2, [r3, #88]	; 0x58
 8005974:	e007      	b.n	8005986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	aaaaaaab 	.word	0xaaaaaaab
 800599c:	0800ed2c 	.word	0x0800ed2c

080059a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d11f      	bne.n	80059fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d856      	bhi.n	8005a6e <DMA_CheckFifoParam+0xce>
 80059c0:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <DMA_CheckFifoParam+0x28>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059d9 	.word	0x080059d9
 80059cc:	080059eb 	.word	0x080059eb
 80059d0:	080059d9 	.word	0x080059d9
 80059d4:	08005a6f 	.word	0x08005a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d046      	beq.n	8005a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e8:	e043      	b.n	8005a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059f2:	d140      	bne.n	8005a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f8:	e03d      	b.n	8005a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a02:	d121      	bne.n	8005a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d837      	bhi.n	8005a7a <DMA_CheckFifoParam+0xda>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <DMA_CheckFifoParam+0x70>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a27 	.word	0x08005a27
 8005a18:	08005a21 	.word	0x08005a21
 8005a1c:	08005a39 	.word	0x08005a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e030      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d025      	beq.n	8005a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a36:	e022      	b.n	8005a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a40:	d11f      	bne.n	8005a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a46:	e01c      	b.n	8005a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d903      	bls.n	8005a56 <DMA_CheckFifoParam+0xb6>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d003      	beq.n	8005a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a54:	e018      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
      break;
 8005a5a:	e015      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e00b      	b.n	8005a86 <DMA_CheckFifoParam+0xe6>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e00a      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      break;
 8005a72:	bf00      	nop
 8005a74:	e008      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      break;
 8005a76:	bf00      	nop
 8005a78:	e006      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e004      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <DMA_CheckFifoParam+0xe8>
      break;
 8005a86:	bf00      	nop
    }
  } 
  
  return status; 
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop

08005a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b089      	sub	sp, #36	; 0x24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e165      	b.n	8005d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	f040 8154 	bne.w	8005d7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d005      	beq.n	8005aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d130      	bne.n	8005b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	2203      	movs	r2, #3
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b20:	2201      	movs	r2, #1
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 0201 	and.w	r2, r3, #1
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d017      	beq.n	8005b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	2203      	movs	r2, #3
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d123      	bne.n	8005bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	08da      	lsrs	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3208      	adds	r2, #8
 8005b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	220f      	movs	r2, #15
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	08da      	lsrs	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3208      	adds	r2, #8
 8005bd6:	69b9      	ldr	r1, [r7, #24]
 8005bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	2203      	movs	r2, #3
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f003 0203 	and.w	r2, r3, #3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80ae 	beq.w	8005d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	4b5d      	ldr	r3, [pc, #372]	; (8005d98 <HAL_GPIO_Init+0x300>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	4a5c      	ldr	r2, [pc, #368]	; (8005d98 <HAL_GPIO_Init+0x300>)
 8005c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c2e:	4b5a      	ldr	r3, [pc, #360]	; (8005d98 <HAL_GPIO_Init+0x300>)
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c3a:	4a58      	ldr	r2, [pc, #352]	; (8005d9c <HAL_GPIO_Init+0x304>)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	3302      	adds	r3, #2
 8005c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	220f      	movs	r2, #15
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a4f      	ldr	r2, [pc, #316]	; (8005da0 <HAL_GPIO_Init+0x308>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d025      	beq.n	8005cb2 <HAL_GPIO_Init+0x21a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a4e      	ldr	r2, [pc, #312]	; (8005da4 <HAL_GPIO_Init+0x30c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01f      	beq.n	8005cae <HAL_GPIO_Init+0x216>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a4d      	ldr	r2, [pc, #308]	; (8005da8 <HAL_GPIO_Init+0x310>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d019      	beq.n	8005caa <HAL_GPIO_Init+0x212>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a4c      	ldr	r2, [pc, #304]	; (8005dac <HAL_GPIO_Init+0x314>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_GPIO_Init+0x20e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a4b      	ldr	r2, [pc, #300]	; (8005db0 <HAL_GPIO_Init+0x318>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00d      	beq.n	8005ca2 <HAL_GPIO_Init+0x20a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a4a      	ldr	r2, [pc, #296]	; (8005db4 <HAL_GPIO_Init+0x31c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <HAL_GPIO_Init+0x206>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a49      	ldr	r2, [pc, #292]	; (8005db8 <HAL_GPIO_Init+0x320>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_GPIO_Init+0x202>
 8005c96:	2306      	movs	r3, #6
 8005c98:	e00c      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005c9a:	2307      	movs	r3, #7
 8005c9c:	e00a      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005c9e:	2305      	movs	r3, #5
 8005ca0:	e008      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	e006      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e004      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e002      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_GPIO_Init+0x21c>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	f002 0203 	and.w	r2, r2, #3
 8005cba:	0092      	lsls	r2, r2, #2
 8005cbc:	4093      	lsls	r3, r2
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cc4:	4935      	ldr	r1, [pc, #212]	; (8005d9c <HAL_GPIO_Init+0x304>)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	3302      	adds	r3, #2
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cd2:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cf6:	4a31      	ldr	r2, [pc, #196]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cfc:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d26:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4013      	ands	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <HAL_GPIO_Init+0x324>)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2b0f      	cmp	r3, #15
 8005d84:	f67f ae96 	bls.w	8005ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	3724      	adds	r7, #36	; 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40013800 	.word	0x40013800
 8005da0:	40020000 	.word	0x40020000
 8005da4:	40020400 	.word	0x40020400
 8005da8:	40020800 	.word	0x40020800
 8005dac:	40020c00 	.word	0x40020c00
 8005db0:	40021000 	.word	0x40021000
 8005db4:	40021400 	.word	0x40021400
 8005db8:	40021800 	.word	0x40021800
 8005dbc:	40013c00 	.word	0x40013c00

08005dc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e0c7      	b.n	8005f6c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ddc:	2201      	movs	r2, #1
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4013      	ands	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	f040 80b7 	bne.w	8005f66 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005df8:	4a62      	ldr	r2, [pc, #392]	; (8005f84 <HAL_GPIO_DeInit+0x1c4>)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	3302      	adds	r3, #2
 8005e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e04:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	220f      	movs	r2, #15
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a5a      	ldr	r2, [pc, #360]	; (8005f88 <HAL_GPIO_DeInit+0x1c8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d025      	beq.n	8005e6e <HAL_GPIO_DeInit+0xae>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a59      	ldr	r2, [pc, #356]	; (8005f8c <HAL_GPIO_DeInit+0x1cc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01f      	beq.n	8005e6a <HAL_GPIO_DeInit+0xaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a58      	ldr	r2, [pc, #352]	; (8005f90 <HAL_GPIO_DeInit+0x1d0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d019      	beq.n	8005e66 <HAL_GPIO_DeInit+0xa6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a57      	ldr	r2, [pc, #348]	; (8005f94 <HAL_GPIO_DeInit+0x1d4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_GPIO_DeInit+0xa2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a56      	ldr	r2, [pc, #344]	; (8005f98 <HAL_GPIO_DeInit+0x1d8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00d      	beq.n	8005e5e <HAL_GPIO_DeInit+0x9e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a55      	ldr	r2, [pc, #340]	; (8005f9c <HAL_GPIO_DeInit+0x1dc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d007      	beq.n	8005e5a <HAL_GPIO_DeInit+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a54      	ldr	r2, [pc, #336]	; (8005fa0 <HAL_GPIO_DeInit+0x1e0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_GPIO_DeInit+0x96>
 8005e52:	2306      	movs	r3, #6
 8005e54:	e00c      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e56:	2307      	movs	r3, #7
 8005e58:	e00a      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e5a:	2305      	movs	r3, #5
 8005e5c:	e008      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	e006      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e62:	2303      	movs	r3, #3
 8005e64:	e004      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e002      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <HAL_GPIO_DeInit+0xb0>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	f002 0203 	and.w	r2, r2, #3
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	4093      	lsls	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d132      	bne.n	8005ee6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e80:	4b48      	ldr	r3, [pc, #288]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	43db      	mvns	r3, r3
 8005e88:	4946      	ldr	r1, [pc, #280]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e8e:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	4943      	ldr	r1, [pc, #268]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e9c:	4b41      	ldr	r3, [pc, #260]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	493f      	ldr	r1, [pc, #252]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005eaa:	4b3e      	ldr	r3, [pc, #248]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	493c      	ldr	r1, [pc, #240]	; (8005fa4 <HAL_GPIO_DeInit+0x1e4>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005ec8:	4a2e      	ldr	r2, [pc, #184]	; (8005f84 <HAL_GPIO_DeInit+0x1c4>)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	089b      	lsrs	r3, r3, #2
 8005ece:	3302      	adds	r3, #2
 8005ed0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	43da      	mvns	r2, r3
 8005ed8:	482a      	ldr	r0, [pc, #168]	; (8005f84 <HAL_GPIO_DeInit+0x1c4>)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	089b      	lsrs	r3, r3, #2
 8005ede:	400a      	ands	r2, r1
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	2103      	movs	r1, #3
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	08da      	lsrs	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3208      	adds	r2, #8
 8005f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	220f      	movs	r2, #15
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43db      	mvns	r3, r3
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	08d2      	lsrs	r2, r2, #3
 8005f1c:	4019      	ands	r1, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3208      	adds	r2, #8
 8005f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	2103      	movs	r1, #3
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	401a      	ands	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	2101      	movs	r1, #1
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	2103      	movs	r1, #3
 8005f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	401a      	ands	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	f67f af34 	bls.w	8005ddc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40013800 	.word	0x40013800
 8005f88:	40020000 	.word	0x40020000
 8005f8c:	40020400 	.word	0x40020400
 8005f90:	40020800 	.word	0x40020800
 8005f94:	40020c00 	.word	0x40020c00
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40021400 	.word	0x40021400
 8005fa0:	40021800 	.word	0x40021800
 8005fa4:	40013c00 	.word	0x40013c00

08005fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	887b      	ldrh	r3, [r7, #2]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	e001      	b.n	8005fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe8:	787b      	ldrb	r3, [r7, #1]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ff4:	e003      	b.n	8005ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	041a      	lsls	r2, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	619a      	str	r2, [r3, #24]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800601c:	887a      	ldrh	r2, [r7, #2]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4013      	ands	r3, r2
 8006022:	041a      	lsls	r2, r3, #16
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	43d9      	mvns	r1, r3
 8006028:	887b      	ldrh	r3, [r7, #2]
 800602a:	400b      	ands	r3, r1
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	619a      	str	r2, [r3, #24]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	4013      	ands	r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d006      	beq.n	8006064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006056:	4a05      	ldr	r2, [pc, #20]	; (800606c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fc fdf6 	bl	8002c50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40013c00 	.word	0x40013c00

08006070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e12b      	b.n	80062da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fd fac6 	bl	8003628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060d4:	f002 f9d2 	bl	800847c <HAL_RCC_GetPCLK1Freq>
 80060d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	4a81      	ldr	r2, [pc, #516]	; (80062e4 <HAL_I2C_Init+0x274>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d807      	bhi.n	80060f4 <HAL_I2C_Init+0x84>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4a80      	ldr	r2, [pc, #512]	; (80062e8 <HAL_I2C_Init+0x278>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bf94      	ite	ls
 80060ec:	2301      	movls	r3, #1
 80060ee:	2300      	movhi	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e006      	b.n	8006102 <HAL_I2C_Init+0x92>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4a7d      	ldr	r2, [pc, #500]	; (80062ec <HAL_I2C_Init+0x27c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	bf94      	ite	ls
 80060fc:	2301      	movls	r3, #1
 80060fe:	2300      	movhi	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0e7      	b.n	80062da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a78      	ldr	r2, [pc, #480]	; (80062f0 <HAL_I2C_Init+0x280>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	0c9b      	lsrs	r3, r3, #18
 8006114:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <HAL_I2C_Init+0x274>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d802      	bhi.n	8006144 <HAL_I2C_Init+0xd4>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3301      	adds	r3, #1
 8006142:	e009      	b.n	8006158 <HAL_I2C_Init+0xe8>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	4a69      	ldr	r2, [pc, #420]	; (80062f4 <HAL_I2C_Init+0x284>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	099b      	lsrs	r3, r3, #6
 8006156:	3301      	adds	r3, #1
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	430b      	orrs	r3, r1
 800615e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800616a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	495c      	ldr	r1, [pc, #368]	; (80062e4 <HAL_I2C_Init+0x274>)
 8006174:	428b      	cmp	r3, r1
 8006176:	d819      	bhi.n	80061ac <HAL_I2C_Init+0x13c>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1e59      	subs	r1, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	fbb1 f3f3 	udiv	r3, r1, r3
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	f640 73fc 	movw	r3, #4092	; 0xffc
 800618c:	400b      	ands	r3, r1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_I2C_Init+0x138>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1e59      	subs	r1, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a0:	3301      	adds	r3, #1
 80061a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a6:	e051      	b.n	800624c <HAL_I2C_Init+0x1dc>
 80061a8:	2304      	movs	r3, #4
 80061aa:	e04f      	b.n	800624c <HAL_I2C_Init+0x1dc>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d111      	bne.n	80061d8 <HAL_I2C_Init+0x168>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	1e58      	subs	r0, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	440b      	add	r3, r1
 80061c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e012      	b.n	80061fe <HAL_I2C_Init+0x18e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1e58      	subs	r0, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	0099      	lsls	r1, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ee:	3301      	adds	r3, #1
 80061f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Init+0x196>
 8006202:	2301      	movs	r3, #1
 8006204:	e022      	b.n	800624c <HAL_I2C_Init+0x1dc>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10e      	bne.n	800622c <HAL_I2C_Init+0x1bc>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1e58      	subs	r0, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6859      	ldr	r1, [r3, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	440b      	add	r3, r1
 800621c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006220:	3301      	adds	r3, #1
 8006222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	e00f      	b.n	800624c <HAL_I2C_Init+0x1dc>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e58      	subs	r0, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	0099      	lsls	r1, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006242:	3301      	adds	r3, #1
 8006244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	6809      	ldr	r1, [r1, #0]
 8006250:	4313      	orrs	r3, r2
 8006252:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800627a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6911      	ldr	r1, [r2, #16]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68d2      	ldr	r2, [r2, #12]
 8006286:	4311      	orrs	r1, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	430b      	orrs	r3, r1
 800628e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	000186a0 	.word	0x000186a0
 80062e8:	001e847f 	.word	0x001e847f
 80062ec:	003d08ff 	.word	0x003d08ff
 80062f0:	431bde83 	.word	0x431bde83
 80062f4:	10624dd3 	.word	0x10624dd3

080062f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	461a      	mov	r2, r3
 8006306:	4603      	mov	r3, r0
 8006308:	817b      	strh	r3, [r7, #10]
 800630a:	460b      	mov	r3, r1
 800630c:	813b      	strh	r3, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006312:	f7fd fc7d 	bl	8003c10 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b20      	cmp	r3, #32
 8006322:	f040 8208 	bne.w	8006736 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	2319      	movs	r3, #25
 800632c:	2201      	movs	r2, #1
 800632e:	497b      	ldr	r1, [pc, #492]	; (800651c <HAL_I2C_Mem_Read+0x224>)
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 faef 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800633c:	2302      	movs	r3, #2
 800633e:	e1fb      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_I2C_Mem_Read+0x56>
 800634a:	2302      	movs	r3, #2
 800634c:	e1f4      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d007      	beq.n	8006374 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2222      	movs	r2, #34	; 0x22
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2240      	movs	r2, #64	; 0x40
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a5b      	ldr	r2, [pc, #364]	; (8006520 <HAL_I2C_Mem_Read+0x228>)
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063b6:	88f8      	ldrh	r0, [r7, #6]
 80063b8:	893a      	ldrh	r2, [r7, #8]
 80063ba:	8979      	ldrh	r1, [r7, #10]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	4603      	mov	r3, r0
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f9bc 	bl	8006744 <I2C_RequestMemoryRead>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e1b0      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d113      	bne.n	8006406 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063de:	2300      	movs	r3, #0
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e184      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	2b01      	cmp	r3, #1
 800640c:	d11b      	bne.n	8006446 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800641c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e164      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644a:	2b02      	cmp	r3, #2
 800644c:	d11b      	bne.n	8006486 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	e144      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800649c:	e138      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	f200 80f1 	bhi.w	800668a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d123      	bne.n	80064f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fb44 	bl	8006b42 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e139      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064f6:	e10b      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d14e      	bne.n	800659e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	2200      	movs	r2, #0
 8006508:	4906      	ldr	r1, [pc, #24]	; (8006524 <HAL_I2C_Mem_Read+0x22c>)
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fa02 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e10e      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
 800651a:	bf00      	nop
 800651c:	00100002 	.word	0x00100002
 8006520:	ffff0000 	.word	0xffff0000
 8006524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800659c:	e0b8      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2200      	movs	r2, #0
 80065a6:	4966      	ldr	r1, [pc, #408]	; (8006740 <HAL_I2C_Mem_Read+0x448>)
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f9b3 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0bf      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	2200      	movs	r2, #0
 8006602:	494f      	ldr	r1, [pc, #316]	; (8006740 <HAL_I2C_Mem_Read+0x448>)
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f985 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e091      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006688:	e042      	b.n	8006710 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 fa57 	bl	8006b42 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e04c      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d118      	bne.n	8006710 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	f47f aec2 	bne.w	800649e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e000      	b.n	8006738 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006736:	2302      	movs	r3, #2
  }
}
 8006738:	4618      	mov	r0, r3
 800673a:	3728      	adds	r7, #40	; 0x28
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	00010004 	.word	0x00010004

08006744 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4603      	mov	r3, r0
 8006754:	817b      	strh	r3, [r7, #10]
 8006756:	460b      	mov	r3, r1
 8006758:	813b      	strh	r3, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800676c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800677c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2200      	movs	r2, #0
 8006786:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f8c2 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a4:	d103      	bne.n	80067ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e0aa      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067b2:	897b      	ldrh	r3, [r7, #10]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	6a3a      	ldr	r2, [r7, #32]
 80067c6:	4952      	ldr	r1, [pc, #328]	; (8006910 <I2C_RequestMemoryRead+0x1cc>)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f8fa 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e097      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f0:	6a39      	ldr	r1, [r7, #32]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f964 	bl	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	2b04      	cmp	r3, #4
 8006804:	d107      	bne.n	8006816 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006814:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e076      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d105      	bne.n	800682c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006820:	893b      	ldrh	r3, [r7, #8]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]
 800682a:	e021      	b.n	8006870 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	b29b      	uxth	r3, r3
 8006832:	b2da      	uxtb	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800683a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683c:	6a39      	ldr	r1, [r7, #32]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 f93e 	bl	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00d      	beq.n	8006866 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	2b04      	cmp	r3, #4
 8006850:	d107      	bne.n	8006862 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006860:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e050      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	6a39      	ldr	r1, [r7, #32]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f923 	bl	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00d      	beq.n	800689c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	2b04      	cmp	r3, #4
 8006886:	d107      	bne.n	8006898 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006896:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e035      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f82b 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00d      	beq.n	80068e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d2:	d103      	bne.n	80068dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e013      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068e0:	897b      	ldrh	r3, [r7, #10]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f043 0301 	orr.w	r3, r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	6a3a      	ldr	r2, [r7, #32]
 80068f4:	4906      	ldr	r1, [pc, #24]	; (8006910 <I2C_RequestMemoryRead+0x1cc>)
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f863 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	00010002 	.word	0x00010002

08006914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006924:	e025      	b.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d021      	beq.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fd f96f 	bl	8003c10 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d116      	bne.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e023      	b.n	80069ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10d      	bne.n	8006998 <I2C_WaitOnFlagUntilTimeout+0x84>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	43da      	mvns	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	e00c      	b.n	80069b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	43da      	mvns	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d0b6      	beq.n	8006926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069d0:	e051      	b.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e0:	d123      	bne.n	8006a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e046      	b.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d021      	beq.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fd f8ed 	bl	8003c10 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d116      	bne.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e020      	b.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10c      	bne.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	43da      	mvns	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	e00b      	b.n	8006ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d18d      	bne.n	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006acc:	e02d      	b.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f88d 	bl	8006bee <I2C_IsAcknowledgeFailed>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e02d      	b.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d021      	beq.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	f7fd f893 	bl	8003c10 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d116      	bne.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f043 0220 	orr.w	r2, r3, #32
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e007      	b.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b34:	2b80      	cmp	r3, #128	; 0x80
 8006b36:	d1ca      	bne.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b4e:	e042      	b.n	8006bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	d119      	bne.n	8006b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f06f 0210 	mvn.w	r2, #16
 8006b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e029      	b.n	8006be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b92:	f7fd f83d 	bl	8003c10 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d116      	bne.n	8006bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e007      	b.n	8006be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d1b5      	bne.n	8006b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c04:	d11b      	bne.n	8006c3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f043 0204 	orr.w	r2, r3, #4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4e:	b08f      	sub	sp, #60	; 0x3c
 8006c50:	af0a      	add	r7, sp, #40	; 0x28
 8006c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e116      	b.n	8006e8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f007 fb99 	bl	800e3b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2203      	movs	r2, #3
 8006c82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f003 fea8 	bl	800a9f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	687e      	ldr	r6, [r7, #4]
 8006caa:	466d      	mov	r5, sp
 8006cac:	f106 0410 	add.w	r4, r6, #16
 8006cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006cc0:	1d33      	adds	r3, r6, #4
 8006cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cc4:	6838      	ldr	r0, [r7, #0]
 8006cc6:	f003 fd80 	bl	800a7ca <USB_CoreInit>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0d7      	b.n	8006e8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f003 fe96 	bl	800aa14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
 8006cec:	e04a      	b.n	8006d84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006cee:	7bfa      	ldrb	r2, [r7, #15]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	333d      	adds	r3, #61	; 0x3d
 8006cfe:	2201      	movs	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d02:	7bfa      	ldrb	r2, [r7, #15]
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	333c      	adds	r3, #60	; 0x3c
 8006d12:	7bfa      	ldrb	r2, [r7, #15]
 8006d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	b298      	uxth	r0, r3
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	3344      	adds	r3, #68	; 0x44
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3340      	adds	r3, #64	; 0x40
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3348      	adds	r3, #72	; 0x48
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	334c      	adds	r3, #76	; 0x4c
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d6a:	7bfa      	ldrb	r2, [r7, #15]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	3354      	adds	r3, #84	; 0x54
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	3301      	adds	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d3af      	bcc.n	8006cee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
 8006d92:	e044      	b.n	8006e1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d94:	7bfa      	ldrb	r2, [r7, #15]
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006daa:	7bfa      	ldrb	r2, [r7, #15]
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006dbc:	7bfa      	ldrb	r2, [r7, #15]
 8006dbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006dc0:	7bfa      	ldrb	r2, [r7, #15]
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dd6:	7bfa      	ldrb	r2, [r7, #15]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006dec:	7bfa      	ldrb	r2, [r7, #15]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e02:	7bfa      	ldrb	r2, [r7, #15]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	73fb      	strb	r3, [r7, #15]
 8006e1e:	7bfa      	ldrb	r2, [r7, #15]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3b5      	bcc.n	8006d94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	687e      	ldr	r6, [r7, #4]
 8006e30:	466d      	mov	r5, sp
 8006e32:	f106 0410 	add.w	r4, r6, #16
 8006e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e42:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e46:	1d33      	adds	r3, r6, #4
 8006e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e4a:	6838      	ldr	r0, [r7, #0]
 8006e4c:	f003 fe2e 	bl	800aaac <USB_DevInit>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e014      	b.n	8006e8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d102      	bne.n	8006e80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f98c 	bl	8008198 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f004 ff70 	bl	800bd6a <USB_DevDisconnect>

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_PCD_Start+0x1c>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e020      	b.n	8006ef2 <HAL_PCD_Start+0x5e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d109      	bne.n	8006ed4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d005      	beq.n	8006ed4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f003 fd79 	bl	800a9d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f004 ff20 	bl	800bd28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006efa:	b590      	push	{r4, r7, lr}
 8006efc:	b08d      	sub	sp, #52	; 0x34
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f004 ffde 	bl	800bed2 <USB_GetMode>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 84b7 	bne.w	800788c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f004 ff42 	bl	800bdac <USB_ReadInterrupts>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 84ad 	beq.w	800788a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	0a1b      	lsrs	r3, r3, #8
 8006f3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f004 ff2f 	bl	800bdac <USB_ReadInterrupts>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d107      	bne.n	8006f68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695a      	ldr	r2, [r3, #20]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f002 0202 	and.w	r2, r2, #2
 8006f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f004 ff1d 	bl	800bdac <USB_ReadInterrupts>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d161      	bne.n	8007040 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0210 	bic.w	r2, r2, #16
 8006f8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	4613      	mov	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	3304      	adds	r3, #4
 8006faa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	0c5b      	lsrs	r3, r3, #17
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d124      	bne.n	8007002 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d035      	beq.n	8007030 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	091b      	lsrs	r3, r3, #4
 8006fcc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6a38      	ldr	r0, [r7, #32]
 8006fd8:	f004 fd54 	bl	800ba84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	091b      	lsrs	r3, r3, #4
 8006fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fe8:	441a      	add	r2, r3
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6a1a      	ldr	r2, [r3, #32]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ffa:	441a      	add	r2, r3
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	621a      	str	r2, [r3, #32]
 8007000:	e016      	b.n	8007030 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	0c5b      	lsrs	r3, r3, #17
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	2b06      	cmp	r3, #6
 800700c:	d110      	bne.n	8007030 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007014:	2208      	movs	r2, #8
 8007016:	4619      	mov	r1, r3
 8007018:	6a38      	ldr	r0, [r7, #32]
 800701a:	f004 fd33 	bl	800ba84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a1a      	ldr	r2, [r3, #32]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800702a:	441a      	add	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0210 	orr.w	r2, r2, #16
 800703e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f004 feb1 	bl	800bdac <USB_ReadInterrupts>
 800704a:	4603      	mov	r3, r0
 800704c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007054:	f040 80a7 	bne.w	80071a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f004 feb6 	bl	800bdd2 <USB_ReadDevAllOutEpInterrupt>
 8007066:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007068:	e099      	b.n	800719e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 808e 	beq.w	8007192 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	4611      	mov	r1, r2
 8007080:	4618      	mov	r0, r3
 8007082:	f004 feda 	bl	800be3a <USB_ReadDevOutEPInterrupt>
 8007086:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	461a      	mov	r2, r3
 80070a0:	2301      	movs	r3, #1
 80070a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80070a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fef0 	bl	8007e8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	2308      	movs	r3, #8
 80070c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80070c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 ffc6 	bl	800805c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	461a      	mov	r2, r3
 80070e8:	2310      	movs	r3, #16
 80070ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d030      	beq.n	8007158 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d109      	bne.n	8007116 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007110:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007114:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007118:	4613      	mov	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	3304      	adds	r3, #4
 800712a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	78db      	ldrb	r3, [r3, #3]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d108      	bne.n	8007146 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2200      	movs	r2, #0
 8007138:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	b2db      	uxtb	r3, r3
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f007 fa69 	bl	800e618 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	461a      	mov	r2, r3
 8007154:	2302      	movs	r3, #2
 8007156:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	461a      	mov	r2, r3
 8007170:	2320      	movs	r3, #32
 8007172:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	461a      	mov	r2, r3
 800718c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007190:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	3301      	adds	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f af62 	bne.w	800706a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f004 fdfe 	bl	800bdac <USB_ReadInterrupts>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071ba:	f040 80db 	bne.w	8007374 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f004 fe1f 	bl	800be06 <USB_ReadDevAllInEpInterrupt>
 80071c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80071ce:	e0cd      	b.n	800736c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 80c2 	beq.w	8007360 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f004 fe45 	bl	800be76 <USB_ReadDevInEPInterrupt>
 80071ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d057      	beq.n	80072a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	2201      	movs	r2, #1
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	43db      	mvns	r3, r3
 8007212:	69f9      	ldr	r1, [r7, #28]
 8007214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007218:	4013      	ands	r3, r2
 800721a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	461a      	mov	r2, r3
 800722a:	2301      	movs	r3, #1
 800722c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d132      	bne.n	800729c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	334c      	adds	r3, #76	; 0x4c
 8007246:	6819      	ldr	r1, [r3, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724c:	4613      	mov	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4403      	add	r3, r0
 8007256:	3348      	adds	r3, #72	; 0x48
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4419      	add	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007260:	4613      	mov	r3, r2
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4403      	add	r3, r0
 800726a:	334c      	adds	r3, #76	; 0x4c
 800726c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d113      	bne.n	800729c <HAL_PCD_IRQHandler+0x3a2>
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007278:	4613      	mov	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	3354      	adds	r3, #84	; 0x54
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d108      	bne.n	800729c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007294:	461a      	mov	r2, r3
 8007296:	2101      	movs	r1, #1
 8007298:	f004 fe4c 	bl	800bf34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f007 f933 	bl	800e50e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	461a      	mov	r2, r3
 80072c0:	2308      	movs	r3, #8
 80072c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	461a      	mov	r2, r3
 80072dc:	2310      	movs	r3, #16
 80072de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	461a      	mov	r2, r3
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d023      	beq.n	800734e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007308:	6a38      	ldr	r0, [r7, #32]
 800730a:	f003 fd2d 	bl	800ad68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	4613      	mov	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	3338      	adds	r3, #56	; 0x38
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	78db      	ldrb	r3, [r3, #3]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d108      	bne.n	800733c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	b2db      	uxtb	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f007 f980 	bl	800e63c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	461a      	mov	r2, r3
 800734a:	2302      	movs	r3, #2
 800734c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fd08 	bl	8007d70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	3301      	adds	r3, #1
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	f47f af2e 	bne.w	80071d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f004 fd17 	bl	800bdac <USB_ReadInterrupts>
 800737e:	4603      	mov	r3, r0
 8007380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007388:	d122      	bne.n	80073d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d108      	bne.n	80073ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 ff14 	bl	80081e0 <HAL_PCDEx_LPM_Callback>
 80073b8:	e002      	b.n	80073c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f007 f91e 	bl	800e5fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80073ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f004 fce9 	bl	800bdac <USB_ReadInterrupts>
 80073da:	4603      	mov	r3, r0
 80073dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e4:	d112      	bne.n	800740c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d102      	bne.n	80073fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f007 f8da 	bl	800e5b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695a      	ldr	r2, [r3, #20]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800740a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f004 fccb 	bl	800bdac <USB_ReadInterrupts>
 8007416:	4603      	mov	r3, r0
 8007418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800741c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007420:	d121      	bne.n	8007466 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007430:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d111      	bne.n	8007460 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	089b      	lsrs	r3, r3, #2
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007456:	2101      	movs	r1, #1
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fec1 	bl	80081e0 <HAL_PCDEx_LPM_Callback>
 800745e:	e002      	b.n	8007466 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f007 f8a5 	bl	800e5b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f004 fc9e 	bl	800bdac <USB_ReadInterrupts>
 8007470:	4603      	mov	r3, r0
 8007472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747a:	f040 80b7 	bne.w	80075ec <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2110      	movs	r1, #16
 8007498:	4618      	mov	r0, r3
 800749a:	f003 fc65 	bl	800ad68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800749e:	2300      	movs	r3, #0
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a2:	e046      	b.n	8007532 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	461a      	mov	r2, r3
 80074b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	461a      	mov	r2, r3
 80074e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800750a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751c:	0151      	lsls	r1, r2, #5
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	440a      	add	r2, r1
 8007522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007526:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800752a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	3301      	adds	r3, #1
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d3b3      	bcc.n	80074a4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800754e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	2b00      	cmp	r3, #0
 8007556:	d016      	beq.n	8007586 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007568:	f043 030b 	orr.w	r3, r3, #11
 800756c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800757e:	f043 030b 	orr.w	r3, r3, #11
 8007582:	6453      	str	r3, [r2, #68]	; 0x44
 8007584:	e015      	b.n	80075b2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007594:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007598:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800759c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ac:	f043 030b 	orr.w	r3, r3, #11
 80075b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075d6:	461a      	mov	r2, r3
 80075d8:	f004 fcac 	bl	800bf34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80075ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f004 fbdb 	bl	800bdac <USB_ReadInterrupts>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007600:	d124      	bne.n	800764c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f004 fc71 	bl	800beee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f003 fc26 	bl	800ae62 <USB_GetDevSpeed>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681c      	ldr	r4, [r3, #0]
 8007622:	f000 ff1f 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 8007626:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	4620      	mov	r0, r4
 8007632:	f003 f92b 	bl	800a88c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f006 ff91 	bl	800e55e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695a      	ldr	r2, [r3, #20]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800764a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f004 fbab 	bl	800bdac <USB_ReadInterrupts>
 8007656:	4603      	mov	r3, r0
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b08      	cmp	r3, #8
 800765e:	d10a      	bne.n	8007676 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f006 ff6e 	bl	800e542 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f002 0208 	and.w	r2, r2, #8
 8007674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f004 fb96 	bl	800bdac <USB_ReadInterrupts>
 8007680:	4603      	mov	r3, r0
 8007682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007686:	2b80      	cmp	r3, #128	; 0x80
 8007688:	d122      	bne.n	80076d0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007696:	2301      	movs	r3, #1
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
 800769a:	e014      	b.n	80076c6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a0:	4613      	mov	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d105      	bne.n	80076c0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fb27 	bl	8007d0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	3301      	adds	r3, #1
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d3e5      	bcc.n	800769c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f004 fb69 	bl	800bdac <USB_ReadInterrupts>
 80076da:	4603      	mov	r3, r0
 80076dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e4:	d13b      	bne.n	800775e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076e6:	2301      	movs	r3, #1
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ea:	e02b      	b.n	8007744 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	3340      	adds	r3, #64	; 0x40
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d115      	bne.n	800773e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007712:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007714:	2b00      	cmp	r3, #0
 8007716:	da12      	bge.n	800773e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800771c:	4613      	mov	r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	333f      	adds	r3, #63	; 0x3f
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007734:	b2db      	uxtb	r3, r3
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fae8 	bl	8007d0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	3301      	adds	r3, #1
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	429a      	cmp	r2, r3
 800774c:	d3ce      	bcc.n	80076ec <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800775c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f004 fb22 	bl	800bdac <USB_ReadInterrupts>
 8007768:	4603      	mov	r3, r0
 800776a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800776e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007772:	d155      	bne.n	8007820 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007774:	2301      	movs	r3, #1
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
 8007778:	e045      	b.n	8007806 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778e:	4613      	mov	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d12e      	bne.n	8007800 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80077a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da2b      	bge.n	8007800 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80077b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d121      	bne.n	8007800 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077fc:	6053      	str	r3, [r2, #4]
            break;
 80077fe:	e007      	b.n	8007810 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	3301      	adds	r3, #1
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780c:	429a      	cmp	r2, r3
 800780e:	d3b4      	bcc.n	800777a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695a      	ldr	r2, [r3, #20]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800781e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f004 fac1 	bl	800bdac <USB_ReadInterrupts>
 800782a:	4603      	mov	r3, r0
 800782c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007834:	d10a      	bne.n	800784c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f006 ff12 	bl	800e660 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800784a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f004 faab 	bl	800bdac <USB_ReadInterrupts>
 8007856:	4603      	mov	r3, r0
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b04      	cmp	r3, #4
 800785e:	d115      	bne.n	800788c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f006 ff02 	bl	800e67c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6859      	ldr	r1, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	430a      	orrs	r2, r1
 8007886:	605a      	str	r2, [r3, #4]
 8007888:	e000      	b.n	800788c <HAL_PCD_IRQHandler+0x992>
      return;
 800788a:	bf00      	nop
    }
  }
}
 800788c:	3734      	adds	r7, #52	; 0x34
 800788e:	46bd      	mov	sp, r7
 8007890:	bd90      	pop	{r4, r7, pc}

08007892 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_PCD_SetAddress+0x1a>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e013      	b.n	80078d4 <HAL_PCD_SetAddress+0x42>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f004 fa09 	bl	800bcdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	70fb      	strb	r3, [r7, #3]
 80078ee:	460b      	mov	r3, r1
 80078f0:	803b      	strh	r3, [r7, #0]
 80078f2:	4613      	mov	r3, r2
 80078f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da0f      	bge.n	8007922 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3338      	adds	r3, #56	; 0x38
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4413      	add	r3, r2
 8007916:	3304      	adds	r3, #4
 8007918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	705a      	strb	r2, [r3, #1]
 8007920:	e00f      	b.n	8007942 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	f003 020f 	and.w	r2, r3, #15
 8007928:	4613      	mov	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	4413      	add	r3, r2
 8007938:	3304      	adds	r3, #4
 800793a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800794e:	883a      	ldrh	r2, [r7, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	78ba      	ldrb	r2, [r7, #2]
 8007958:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d004      	beq.n	800796c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800796c:	78bb      	ldrb	r3, [r7, #2]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d102      	bne.n	8007978 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_PCD_EP_Open+0xaa>
 8007982:	2302      	movs	r3, #2
 8007984:	e00e      	b.n	80079a4 <HAL_PCD_EP_Open+0xc8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68f9      	ldr	r1, [r7, #12]
 8007994:	4618      	mov	r0, r3
 8007996:	f003 fa89 	bl	800aeac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80079a2:	7afb      	ldrb	r3, [r7, #11]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da0f      	bge.n	80079e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	f003 020f 	and.w	r2, r3, #15
 80079c6:	4613      	mov	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	3338      	adds	r3, #56	; 0x38
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	3304      	adds	r3, #4
 80079d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	705a      	strb	r2, [r3, #1]
 80079de:	e00f      	b.n	8007a00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	f003 020f 	and.w	r2, r3, #15
 80079e6:	4613      	mov	r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4413      	add	r3, r2
 80079f6:	3304      	adds	r3, #4
 80079f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_PCD_EP_Close+0x6e>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e00e      	b.n	8007a38 <HAL_PCD_EP_Close+0x8c>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f003 fac7 	bl	800afbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	f003 020f 	and.w	r2, r3, #15
 8007a56:	4613      	mov	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d102      	bne.n	8007a9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6979      	ldr	r1, [r7, #20]
 8007ab4:	f003 fda6 	bl	800b604 <USB_EP0StartXfer>
 8007ab8:	e008      	b.n	8007acc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6979      	ldr	r1, [r7, #20]
 8007ac8:	f003 fb54 	bl	800b174 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	f003 020f 	and.w	r2, r3, #15
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007af8:	681b      	ldr	r3, [r3, #0]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b086      	sub	sp, #24
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	460b      	mov	r3, r1
 8007b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	3338      	adds	r3, #56	; 0x38
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2201      	movs	r2, #1
 8007b44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d102      	bne.n	8007b60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	f003 fd44 	bl	800b604 <USB_EP0StartXfer>
 8007b7c:	e008      	b.n	8007b90 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	f003 faf2 	bl	800b174 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ba6:	78fb      	ldrb	r3, [r7, #3]
 8007ba8:	f003 020f 	and.w	r2, r3, #15
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d901      	bls.n	8007bb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e050      	b.n	8007c5a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da0f      	bge.n	8007be0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	3338      	adds	r3, #56	; 0x38
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	705a      	strb	r2, [r3, #1]
 8007bde:	e00d      	b.n	8007bfc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	4613      	mov	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_PCD_EP_SetStall+0x82>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e01e      	b.n	8007c5a <HAL_PCD_EP_SetStall+0xc0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68f9      	ldr	r1, [r7, #12]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f003 ff82 	bl	800bb34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	b2d9      	uxtb	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f004 f972 	bl	800bf34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	f003 020f 	and.w	r2, r3, #15
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d901      	bls.n	8007c80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e042      	b.n	8007d06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da0f      	bge.n	8007ca8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	f003 020f 	and.w	r2, r3, #15
 8007c8e:	4613      	mov	r3, r2
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	3338      	adds	r3, #56	; 0x38
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	705a      	strb	r2, [r3, #1]
 8007ca6:	e00f      	b.n	8007cc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	f003 020f 	and.w	r2, r3, #15
 8007cae:	4613      	mov	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_PCD_EP_ClrStall+0x86>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e00e      	b.n	8007d06 <HAL_PCD_EP_ClrStall+0xa4>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f003 ff8a 	bl	800bc10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da0c      	bge.n	8007d3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	f003 020f 	and.w	r2, r3, #15
 8007d28:	4613      	mov	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	3338      	adds	r3, #56	; 0x38
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	3304      	adds	r3, #4
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	e00c      	b.n	8007d56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	f003 020f 	and.w	r2, r3, #15
 8007d42:	4613      	mov	r3, r2
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	3304      	adds	r3, #4
 8007d54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f003 fda9 	bl	800b8b4 <USB_EPStopXfer>
 8007d62:	4603      	mov	r3, r0
 8007d64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	4613      	mov	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	3338      	adds	r3, #56	; 0x38
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	4413      	add	r3, r2
 8007d94:	3304      	adds	r3, #4
 8007d96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d901      	bls.n	8007da8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e06c      	b.n	8007e82 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d902      	bls.n	8007dc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	3303      	adds	r3, #3
 8007dc8:	089b      	lsrs	r3, r3, #2
 8007dca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007dcc:	e02b      	b.n	8007e26 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d902      	bls.n	8007dea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	3303      	adds	r3, #3
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6919      	ldr	r1, [r3, #16]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4603      	mov	r3, r0
 8007e08:	6978      	ldr	r0, [r7, #20]
 8007e0a:	f003 fdfd 	bl	800ba08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	441a      	add	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1a      	ldr	r2, [r3, #32]
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	441a      	add	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d809      	bhi.n	8007e50 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d203      	bcs.n	8007e50 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1be      	bne.n	8007dce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d811      	bhi.n	8007e80 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	2201      	movs	r2, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	43db      	mvns	r3, r3
 8007e76:	6939      	ldr	r1, [r7, #16]
 8007e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	333c      	adds	r3, #60	; 0x3c
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d17b      	bne.n	8007fba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d015      	beq.n	8007ef8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	4a61      	ldr	r2, [pc, #388]	; (8008054 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	f240 80b9 	bls.w	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80b3 	beq.w	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef4:	6093      	str	r3, [r2, #8]
 8007ef6:	e0a7      	b.n	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2320      	movs	r3, #32
 8007f12:	6093      	str	r3, [r2, #8]
 8007f14:	e098      	b.n	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 8093 	bne.w	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	4a4b      	ldr	r2, [pc, #300]	; (8008054 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d90f      	bls.n	8007f4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	461a      	mov	r2, r3
 8007f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f46:	6093      	str	r3, [r2, #8]
 8007f48:	e07e      	b.n	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	69da      	ldr	r2, [r3, #28]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	0159      	lsls	r1, r3, #5
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d114      	bne.n	8007fac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f94:	461a      	mov	r2, r3
 8007f96:	2101      	movs	r1, #1
 8007f98:	f003 ffcc 	bl	800bf34 <USB_EP0_OutStart>
 8007f9c:	e006      	b.n	8007fac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f006 fa90 	bl	800e4d8 <HAL_PCD_DataOutStageCallback>
 8007fb8:	e046      	b.n	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	4a26      	ldr	r2, [pc, #152]	; (8008058 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d124      	bne.n	800800c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fde:	6093      	str	r3, [r2, #8]
 8007fe0:	e032      	b.n	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f006 fa67 	bl	800e4d8 <HAL_PCD_DataOutStageCallback>
 800800a:	e01d      	b.n	8008048 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d114      	bne.n	800803c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008034:	461a      	mov	r2, r3
 8008036:	2100      	movs	r1, #0
 8008038:	f003 ff7c 	bl	800bf34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f006 fa48 	bl	800e4d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	4f54300a 	.word	0x4f54300a
 8008058:	4f54310a 	.word	0x4f54310a

0800805c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	333c      	adds	r3, #60	; 0x3c
 8008074:	3304      	adds	r3, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d90e      	bls.n	80080b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008098:	2b00      	cmp	r3, #0
 800809a:	d009      	beq.n	80080b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	461a      	mov	r2, r3
 80080aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f006 f9ff 	bl	800e4b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4a0a      	ldr	r2, [pc, #40]	; (80080e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d90c      	bls.n	80080d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d108      	bne.n	80080d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080d0:	461a      	mov	r2, r3
 80080d2:	2101      	movs	r1, #1
 80080d4:	f003 ff2e 	bl	800bf34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	4f54300a 	.word	0x4f54300a

080080e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
 80080f4:	4613      	mov	r3, r2
 80080f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008106:	883b      	ldrh	r3, [r7, #0]
 8008108:	0419      	lsls	r1, r3, #16
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	430a      	orrs	r2, r1
 8008112:	629a      	str	r2, [r3, #40]	; 0x28
 8008114:	e028      	b.n	8008168 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4413      	add	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
 8008128:	e00d      	b.n	8008146 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	3340      	adds	r3, #64	; 0x40
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	0c1b      	lsrs	r3, r3, #16
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4413      	add	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	3301      	adds	r3, #1
 8008144:	73fb      	strb	r3, [r7, #15]
 8008146:	7bfa      	ldrb	r2, [r7, #15]
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	3b01      	subs	r3, #1
 800814c:	429a      	cmp	r2, r3
 800814e:	d3ec      	bcc.n	800812a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008150:	883b      	ldrh	r3, [r7, #0]
 8008152:	0418      	lsls	r0, r3, #16
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6819      	ldr	r1, [r3, #0]
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	3b01      	subs	r3, #1
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	4302      	orrs	r2, r0
 8008160:	3340      	adds	r3, #64	; 0x40
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	887a      	ldrh	r2, [r7, #2]
 8008188:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ca:	f043 0303 	orr.w	r3, r3, #3
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008202:	2300      	movs	r3, #0
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	4b20      	ldr	r3, [pc, #128]	; (8008288 <HAL_PWREx_EnableOverDrive+0x90>)
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <HAL_PWREx_EnableOverDrive+0x90>)
 800820c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008210:	6413      	str	r3, [r2, #64]	; 0x40
 8008212:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <HAL_PWREx_EnableOverDrive+0x90>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800821e:	4b1b      	ldr	r3, [pc, #108]	; (800828c <HAL_PWREx_EnableOverDrive+0x94>)
 8008220:	2201      	movs	r2, #1
 8008222:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008224:	f7fb fcf4 	bl	8003c10 <HAL_GetTick>
 8008228:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800822a:	e009      	b.n	8008240 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800822c:	f7fb fcf0 	bl	8003c10 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800823a:	d901      	bls.n	8008240 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e01f      	b.n	8008280 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008240:	4b13      	ldr	r3, [pc, #76]	; (8008290 <HAL_PWREx_EnableOverDrive+0x98>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824c:	d1ee      	bne.n	800822c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800824e:	4b11      	ldr	r3, [pc, #68]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008250:	2201      	movs	r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008254:	f7fb fcdc 	bl	8003c10 <HAL_GetTick>
 8008258:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800825a:	e009      	b.n	8008270 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800825c:	f7fb fcd8 	bl	8003c10 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800826a:	d901      	bls.n	8008270 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e007      	b.n	8008280 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <HAL_PWREx_EnableOverDrive+0x98>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800827c:	d1ee      	bne.n	800825c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40023800 	.word	0x40023800
 800828c:	420e0040 	.word	0x420e0040
 8008290:	40007000 	.word	0x40007000
 8008294:	420e0044 	.word	0x420e0044

08008298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0cc      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082ac:	4b68      	ldr	r3, [pc, #416]	; (8008450 <HAL_RCC_ClockConfig+0x1b8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 030f 	and.w	r3, r3, #15
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d90c      	bls.n	80082d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ba:	4b65      	ldr	r3, [pc, #404]	; (8008450 <HAL_RCC_ClockConfig+0x1b8>)
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c2:	4b63      	ldr	r3, [pc, #396]	; (8008450 <HAL_RCC_ClockConfig+0x1b8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d001      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0b8      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d020      	beq.n	8008322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082ec:	4b59      	ldr	r3, [pc, #356]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	4a58      	ldr	r2, [pc, #352]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 80082f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008304:	4b53      	ldr	r3, [pc, #332]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	4a52      	ldr	r2, [pc, #328]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 800830a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800830e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008310:	4b50      	ldr	r3, [pc, #320]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	494d      	ldr	r1, [pc, #308]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 800831e:	4313      	orrs	r3, r2
 8008320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d044      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d107      	bne.n	8008346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008336:	4b47      	ldr	r3, [pc, #284]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d119      	bne.n	8008376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e07f      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	2b02      	cmp	r3, #2
 800834c:	d003      	beq.n	8008356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008352:	2b03      	cmp	r3, #3
 8008354:	d107      	bne.n	8008366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008356:	4b3f      	ldr	r3, [pc, #252]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e06f      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008366:	4b3b      	ldr	r3, [pc, #236]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e067      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f023 0203 	bic.w	r2, r3, #3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	4934      	ldr	r1, [pc, #208]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	4313      	orrs	r3, r2
 8008386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008388:	f7fb fc42 	bl	8003c10 <HAL_GetTick>
 800838c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800838e:	e00a      	b.n	80083a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008390:	f7fb fc3e 	bl	8003c10 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	f241 3288 	movw	r2, #5000	; 0x1388
 800839e:	4293      	cmp	r3, r2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e04f      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a6:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 020c 	and.w	r2, r3, #12
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d1eb      	bne.n	8008390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_RCC_ClockConfig+0x1b8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 030f 	and.w	r3, r3, #15
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d20c      	bcs.n	80083e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c6:	4b22      	ldr	r3, [pc, #136]	; (8008450 <HAL_RCC_ClockConfig+0x1b8>)
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ce:	4b20      	ldr	r3, [pc, #128]	; (8008450 <HAL_RCC_ClockConfig+0x1b8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d001      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e032      	b.n	8008446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083ec:	4b19      	ldr	r3, [pc, #100]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	4916      	ldr	r1, [pc, #88]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d009      	beq.n	800841e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800840a:	4b12      	ldr	r3, [pc, #72]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	490e      	ldr	r1, [pc, #56]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	4313      	orrs	r3, r2
 800841c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800841e:	f000 fb6b 	bl	8008af8 <HAL_RCC_GetSysClockFreq>
 8008422:	4602      	mov	r2, r0
 8008424:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <HAL_RCC_ClockConfig+0x1bc>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	091b      	lsrs	r3, r3, #4
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	490a      	ldr	r1, [pc, #40]	; (8008458 <HAL_RCC_ClockConfig+0x1c0>)
 8008430:	5ccb      	ldrb	r3, [r1, r3]
 8008432:	fa22 f303 	lsr.w	r3, r2, r3
 8008436:	4a09      	ldr	r2, [pc, #36]	; (800845c <HAL_RCC_ClockConfig+0x1c4>)
 8008438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <HAL_RCC_ClockConfig+0x1c8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f7fb fba2 	bl	8003b88 <HAL_InitTick>

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40023c00 	.word	0x40023c00
 8008454:	40023800 	.word	0x40023800
 8008458:	0800ed14 	.word	0x0800ed14
 800845c:	20000000 	.word	0x20000000
 8008460:	20000004 	.word	0x20000004

08008464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <HAL_RCC_GetHCLKFreq+0x14>)
 800846a:	681b      	ldr	r3, [r3, #0]
}
 800846c:	4618      	mov	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000000 	.word	0x20000000

0800847c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008480:	f7ff fff0 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 8008484:	4602      	mov	r2, r0
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	0a9b      	lsrs	r3, r3, #10
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	4903      	ldr	r1, [pc, #12]	; (80084a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008492:	5ccb      	ldrb	r3, [r1, r3]
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	40023800 	.word	0x40023800
 80084a0:	0800ed24 	.word	0x0800ed24

080084a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08c      	sub	sp, #48	; 0x30
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d010      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80084dc:	4b6f      	ldr	r3, [pc, #444]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80084de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ea:	496c      	ldr	r1, [pc, #432]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80084fa:	2301      	movs	r3, #1
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d010      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800850a:	4b64      	ldr	r3, [pc, #400]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800850c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008510:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008518:	4960      	ldr	r1, [pc, #384]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008528:	2301      	movs	r3, #1
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d017      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008538:	4b58      	ldr	r3, [pc, #352]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800853a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800853e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	4955      	ldr	r1, [pc, #340]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008556:	d101      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008558:	2301      	movs	r3, #1
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008564:	2301      	movs	r3, #1
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d017      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008574:	4b49      	ldr	r3, [pc, #292]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800857a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008582:	4946      	ldr	r1, [pc, #280]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008592:	d101      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008594:	2301      	movs	r3, #1
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80085a0:	2301      	movs	r3, #1
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0320 	and.w	r3, r3, #32
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 808a 	beq.w	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	4b39      	ldr	r3, [pc, #228]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	4a38      	ldr	r2, [pc, #224]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80085bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c0:	6413      	str	r3, [r2, #64]	; 0x40
 80085c2:	4b36      	ldr	r3, [pc, #216]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ca:	60bb      	str	r3, [r7, #8]
 80085cc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80085ce:	4b34      	ldr	r3, [pc, #208]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a33      	ldr	r2, [pc, #204]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80085d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085da:	f7fb fb19 	bl	8003c10 <HAL_GetTick>
 80085de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085e0:	e008      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085e2:	f7fb fb15 	bl	8003c10 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d901      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e278      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085f4:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0f0      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008600:	4b26      	ldr	r3, [pc, #152]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008608:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d02f      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008618:	6a3a      	ldr	r2, [r7, #32]
 800861a:	429a      	cmp	r2, r3
 800861c:	d028      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800861e:	4b1f      	ldr	r3, [pc, #124]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008626:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008628:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800862a:	2201      	movs	r2, #1
 800862c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800862e:	4b1d      	ldr	r3, [pc, #116]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008634:	4a19      	ldr	r2, [pc, #100]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800863a:	4b18      	ldr	r3, [pc, #96]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b01      	cmp	r3, #1
 8008644:	d114      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008646:	f7fb fae3 	bl	8003c10 <HAL_GetTick>
 800864a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800864c:	e00a      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800864e:	f7fb fadf 	bl	8003c10 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	f241 3288 	movw	r2, #5000	; 0x1388
 800865c:	4293      	cmp	r3, r2
 800865e:	d901      	bls.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e240      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008664:	4b0d      	ldr	r3, [pc, #52]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0ee      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800867c:	d114      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800868e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008692:	4902      	ldr	r1, [pc, #8]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008694:	4313      	orrs	r3, r2
 8008696:	608b      	str	r3, [r1, #8]
 8008698:	e00c      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800869a:	bf00      	nop
 800869c:	40023800 	.word	0x40023800
 80086a0:	40007000 	.word	0x40007000
 80086a4:	42470e40 	.word	0x42470e40
 80086a8:	4b4a      	ldr	r3, [pc, #296]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	4a49      	ldr	r2, [pc, #292]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80086b2:	6093      	str	r3, [r2, #8]
 80086b4:	4b47      	ldr	r3, [pc, #284]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086c0:	4944      	ldr	r1, [pc, #272]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0310 	and.w	r3, r3, #16
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80086d8:	4b3f      	ldr	r3, [pc, #252]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80086da:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80086e8:	4b3a      	ldr	r3, [pc, #232]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f6:	4937      	ldr	r1, [pc, #220]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800870a:	4b32      	ldr	r3, [pc, #200]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800870c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008710:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008718:	492e      	ldr	r1, [pc, #184]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800871a:	4313      	orrs	r3, r2
 800871c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d011      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800872c:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800872e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008732:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	4926      	ldr	r1, [pc, #152]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800873c:	4313      	orrs	r3, r2
 800873e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800874a:	d101      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800874c:	2301      	movs	r3, #1
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800875c:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800875e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008762:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876a:	491a      	ldr	r1, [pc, #104]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800877a:	2b00      	cmp	r3, #0
 800877c:	d011      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800877e:	4b15      	ldr	r3, [pc, #84]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008784:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878c:	4911      	ldr	r1, [pc, #68]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800878e:	4313      	orrs	r3, r2
 8008790:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800879c:	d101      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800879e:	2301      	movs	r3, #1
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d005      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b0:	f040 80ff 	bne.w	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087b4:	4b09      	ldr	r3, [pc, #36]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087ba:	f7fb fa29 	bl	8003c10 <HAL_GetTick>
 80087be:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087c0:	e00e      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80087c2:	f7fb fa25 	bl	8003c10 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d907      	bls.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e188      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80087d4:	40023800 	.word	0x40023800
 80087d8:	424711e0 	.word	0x424711e0
 80087dc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087e0:	4b7e      	ldr	r3, [pc, #504]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1ea      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008808:	2b00      	cmp	r3, #0
 800880a:	d028      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d124      	bne.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008814:	4b71      	ldr	r3, [pc, #452]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881a:	0c1b      	lsrs	r3, r3, #16
 800881c:	f003 0303 	and.w	r3, r3, #3
 8008820:	3301      	adds	r3, #1
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008826:	4b6d      	ldr	r3, [pc, #436]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	019b      	lsls	r3, r3, #6
 800883e:	431a      	orrs	r2, r3
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	3b01      	subs	r3, #1
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	431a      	orrs	r2, r3
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	061b      	lsls	r3, r3, #24
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	071b      	lsls	r3, r3, #28
 8008856:	4961      	ldr	r1, [pc, #388]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008858:	4313      	orrs	r3, r2
 800885a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008872:	d00a      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800887c:	2b00      	cmp	r3, #0
 800887e:	d035      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008888:	d130      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800888a:	4b54      	ldr	r3, [pc, #336]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800888c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008890:	0c1b      	lsrs	r3, r3, #16
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	3301      	adds	r3, #1
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800889c:	4b4f      	ldr	r3, [pc, #316]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800889e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088a2:	0f1b      	lsrs	r3, r3, #28
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	019b      	lsls	r3, r3, #6
 80088b4:	431a      	orrs	r2, r3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	085b      	lsrs	r3, r3, #1
 80088ba:	3b01      	subs	r3, #1
 80088bc:	041b      	lsls	r3, r3, #16
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	061b      	lsls	r3, r3, #24
 80088c6:	431a      	orrs	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	071b      	lsls	r3, r3, #28
 80088cc:	4943      	ldr	r1, [pc, #268]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088d4:	4b41      	ldr	r3, [pc, #260]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088da:	f023 021f 	bic.w	r2, r3, #31
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	3b01      	subs	r3, #1
 80088e4:	493d      	ldr	r1, [pc, #244]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d029      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008900:	d124      	bne.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008902:	4b36      	ldr	r3, [pc, #216]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008908:	0c1b      	lsrs	r3, r3, #16
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	3301      	adds	r3, #1
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008914:	4b31      	ldr	r3, [pc, #196]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891a:	0f1b      	lsrs	r3, r3, #28
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	019b      	lsls	r3, r3, #6
 800892c:	431a      	orrs	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	3b01      	subs	r3, #1
 8008936:	041b      	lsls	r3, r3, #16
 8008938:	431a      	orrs	r2, r3
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	061b      	lsls	r3, r3, #24
 800893e:	431a      	orrs	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	071b      	lsls	r3, r3, #28
 8008944:	4925      	ldr	r1, [pc, #148]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008954:	2b00      	cmp	r3, #0
 8008956:	d016      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	019b      	lsls	r3, r3, #6
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	085b      	lsrs	r3, r3, #1
 800896a:	3b01      	subs	r3, #1
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	061b      	lsls	r3, r3, #24
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	071b      	lsls	r3, r3, #28
 800897e:	4917      	ldr	r1, [pc, #92]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008980:	4313      	orrs	r3, r2
 8008982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008986:	4b16      	ldr	r3, [pc, #88]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008988:	2201      	movs	r2, #1
 800898a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800898c:	f7fb f940 	bl	8003c10 <HAL_GetTick>
 8008990:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008992:	e008      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008994:	f7fb f93c 	bl	8003c10 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e09f      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	f040 8095 	bne.w	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089ba:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089c0:	f7fb f926 	bl	8003c10 <HAL_GetTick>
 80089c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089c6:	e00f      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80089c8:	f7fb f922 	bl	8003c10 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d908      	bls.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e085      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80089da:	bf00      	nop
 80089dc:	40023800 	.word	0x40023800
 80089e0:	42470068 	.word	0x42470068
 80089e4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089e8:	4b41      	ldr	r3, [pc, #260]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f4:	d0e8      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d02b      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d127      	bne.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008a1e:	4b34      	ldr	r3, [pc, #208]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a24:	0c1b      	lsrs	r3, r3, #16
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	019b      	lsls	r3, r3, #6
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	3b01      	subs	r3, #1
 8008a42:	041b      	lsls	r3, r3, #16
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	061b      	lsls	r3, r3, #24
 8008a4c:	4928      	ldr	r1, [pc, #160]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a54:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	3b01      	subs	r3, #1
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	4922      	ldr	r1, [pc, #136]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01d      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a82:	d118      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a84:	4b1a      	ldr	r3, [pc, #104]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8a:	0e1b      	lsrs	r3, r3, #24
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	019b      	lsls	r3, r3, #6
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	085b      	lsrs	r3, r3, #1
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	061b      	lsls	r3, r3, #24
 8008aae:	4910      	ldr	r1, [pc, #64]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008ab8:	2201      	movs	r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008abc:	f7fb f8a8 	bl	8003c10 <HAL_GetTick>
 8008ac0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008ac4:	f7fb f8a4 	bl	8003c10 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e007      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae2:	d1ef      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3730      	adds	r7, #48	; 0x30
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40023800 	.word	0x40023800
 8008af4:	42470070 	.word	0x42470070

08008af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008afc:	b0ae      	sub	sp, #184	; 0xb8
 8008afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b1e:	4bcb      	ldr	r3, [pc, #812]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 030c 	and.w	r3, r3, #12
 8008b26:	2b0c      	cmp	r3, #12
 8008b28:	f200 8206 	bhi.w	8008f38 <HAL_RCC_GetSysClockFreq+0x440>
 8008b2c:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008b69 	.word	0x08008b69
 8008b38:	08008f39 	.word	0x08008f39
 8008b3c:	08008f39 	.word	0x08008f39
 8008b40:	08008f39 	.word	0x08008f39
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	08008f39 	.word	0x08008f39
 8008b4c:	08008f39 	.word	0x08008f39
 8008b50:	08008f39 	.word	0x08008f39
 8008b54:	08008b79 	.word	0x08008b79
 8008b58:	08008f39 	.word	0x08008f39
 8008b5c:	08008f39 	.word	0x08008f39
 8008b60:	08008f39 	.word	0x08008f39
 8008b64:	08008d69 	.word	0x08008d69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b68:	4bb9      	ldr	r3, [pc, #740]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x358>)
 8008b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008b6e:	e1e7      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b70:	4bb8      	ldr	r3, [pc, #736]	; (8008e54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008b76:	e1e3      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b78:	4bb4      	ldr	r3, [pc, #720]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b84:	4bb1      	ldr	r3, [pc, #708]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d071      	beq.n	8008c74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b90:	4bae      	ldr	r3, [pc, #696]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	099b      	lsrs	r3, r3, #6
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bac:	2300      	movs	r3, #0
 8008bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	462b      	mov	r3, r5
 8008bba:	f04f 0000 	mov.w	r0, #0
 8008bbe:	f04f 0100 	mov.w	r1, #0
 8008bc2:	0159      	lsls	r1, r3, #5
 8008bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bc8:	0150      	lsls	r0, r2, #5
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4621      	mov	r1, r4
 8008bd0:	1a51      	subs	r1, r2, r1
 8008bd2:	6439      	str	r1, [r7, #64]	; 0x40
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8008bda:	647b      	str	r3, [r7, #68]	; 0x44
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008be8:	4649      	mov	r1, r9
 8008bea:	018b      	lsls	r3, r1, #6
 8008bec:	4641      	mov	r1, r8
 8008bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	018a      	lsls	r2, r1, #6
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	1a51      	subs	r1, r2, r1
 8008bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008c10:	4649      	mov	r1, r9
 8008c12:	00cb      	lsls	r3, r1, #3
 8008c14:	4641      	mov	r1, r8
 8008c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	00ca      	lsls	r2, r1, #3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	4622      	mov	r2, r4
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2a:	462b      	mov	r3, r5
 8008c2c:	460a      	mov	r2, r1
 8008c2e:	eb42 0303 	adc.w	r3, r2, r3
 8008c32:	637b      	str	r3, [r7, #52]	; 0x34
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c40:	4629      	mov	r1, r5
 8008c42:	024b      	lsls	r3, r1, #9
 8008c44:	4621      	mov	r1, r4
 8008c46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	024a      	lsls	r2, r1, #9
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008c64:	f7f7 face 	bl	8000204 <__aeabi_uldivmod>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c72:	e067      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c74:	4b75      	ldr	r3, [pc, #468]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	099b      	lsrs	r3, r3, #6
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c8e:	2300      	movs	r3, #0
 8008c90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008c96:	4622      	mov	r2, r4
 8008c98:	462b      	mov	r3, r5
 8008c9a:	f04f 0000 	mov.w	r0, #0
 8008c9e:	f04f 0100 	mov.w	r1, #0
 8008ca2:	0159      	lsls	r1, r3, #5
 8008ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ca8:	0150      	lsls	r0, r2, #5
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4621      	mov	r1, r4
 8008cb0:	1a51      	subs	r1, r2, r1
 8008cb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008cc8:	4649      	mov	r1, r9
 8008cca:	018b      	lsls	r3, r1, #6
 8008ccc:	4641      	mov	r1, r8
 8008cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	018a      	lsls	r2, r1, #6
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cdc:	4649      	mov	r1, r9
 8008cde:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	f04f 0300 	mov.w	r3, #0
 8008cea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cf6:	4692      	mov	sl, r2
 8008cf8:	469b      	mov	fp, r3
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	eb1a 0303 	adds.w	r3, sl, r3
 8008d00:	623b      	str	r3, [r7, #32]
 8008d02:	462b      	mov	r3, r5
 8008d04:	eb4b 0303 	adc.w	r3, fp, r3
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008d16:	4629      	mov	r1, r5
 8008d18:	028b      	lsls	r3, r1, #10
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d20:	4621      	mov	r1, r4
 8008d22:	028a      	lsls	r2, r1, #10
 8008d24:	4610      	mov	r0, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8008d30:	677a      	str	r2, [r7, #116]	; 0x74
 8008d32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008d36:	f7f7 fa65 	bl	8000204 <__aeabi_uldivmod>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4613      	mov	r3, r2
 8008d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d44:	4b41      	ldr	r3, [pc, #260]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	0c1b      	lsrs	r3, r3, #16
 8008d4a:	f003 0303 	and.w	r3, r3, #3
 8008d4e:	3301      	adds	r3, #1
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d66:	e0eb      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d68:	4b38      	ldr	r3, [pc, #224]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d74:	4b35      	ldr	r3, [pc, #212]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d06b      	beq.n	8008e58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d80:	4b32      	ldr	r3, [pc, #200]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	099b      	lsrs	r3, r3, #6
 8008d86:	2200      	movs	r2, #0
 8008d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d92:	663b      	str	r3, [r7, #96]	; 0x60
 8008d94:	2300      	movs	r3, #0
 8008d96:	667b      	str	r3, [r7, #100]	; 0x64
 8008d98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	462b      	mov	r3, r5
 8008da0:	f04f 0000 	mov.w	r0, #0
 8008da4:	f04f 0100 	mov.w	r1, #0
 8008da8:	0159      	lsls	r1, r3, #5
 8008daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dae:	0150      	lsls	r0, r2, #5
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4621      	mov	r1, r4
 8008db6:	1a51      	subs	r1, r2, r1
 8008db8:	61b9      	str	r1, [r7, #24]
 8008dba:	4629      	mov	r1, r5
 8008dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8008dc0:	61fb      	str	r3, [r7, #28]
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008dce:	4659      	mov	r1, fp
 8008dd0:	018b      	lsls	r3, r1, #6
 8008dd2:	4651      	mov	r1, sl
 8008dd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dd8:	4651      	mov	r1, sl
 8008dda:	018a      	lsls	r2, r1, #6
 8008ddc:	4651      	mov	r1, sl
 8008dde:	ebb2 0801 	subs.w	r8, r2, r1
 8008de2:	4659      	mov	r1, fp
 8008de4:	eb63 0901 	sbc.w	r9, r3, r1
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008df4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008df8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	4699      	mov	r9, r3
 8008e00:	4623      	mov	r3, r4
 8008e02:	eb18 0303 	adds.w	r3, r8, r3
 8008e06:	613b      	str	r3, [r7, #16]
 8008e08:	462b      	mov	r3, r5
 8008e0a:	eb49 0303 	adc.w	r3, r9, r3
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	024b      	lsls	r3, r1, #9
 8008e20:	4621      	mov	r1, r4
 8008e22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e26:	4621      	mov	r1, r4
 8008e28:	024a      	lsls	r2, r1, #9
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e32:	2200      	movs	r2, #0
 8008e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008e38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e3c:	f7f7 f9e2 	bl	8000204 <__aeabi_uldivmod>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4613      	mov	r3, r2
 8008e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e4a:	e065      	b.n	8008f18 <HAL_RCC_GetSysClockFreq+0x420>
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	00f42400 	.word	0x00f42400
 8008e54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e58:	4b3d      	ldr	r3, [pc, #244]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x458>)
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	099b      	lsrs	r3, r3, #6
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	4611      	mov	r1, r2
 8008e64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e68:	653b      	str	r3, [r7, #80]	; 0x50
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8008e6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008e72:	4642      	mov	r2, r8
 8008e74:	464b      	mov	r3, r9
 8008e76:	f04f 0000 	mov.w	r0, #0
 8008e7a:	f04f 0100 	mov.w	r1, #0
 8008e7e:	0159      	lsls	r1, r3, #5
 8008e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e84:	0150      	lsls	r0, r2, #5
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4641      	mov	r1, r8
 8008e8c:	1a51      	subs	r1, r2, r1
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	4649      	mov	r1, r9
 8008e92:	eb63 0301 	sbc.w	r3, r3, r1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008ea4:	4659      	mov	r1, fp
 8008ea6:	018b      	lsls	r3, r1, #6
 8008ea8:	4651      	mov	r1, sl
 8008eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008eae:	4651      	mov	r1, sl
 8008eb0:	018a      	lsls	r2, r1, #6
 8008eb2:	4651      	mov	r1, sl
 8008eb4:	1a54      	subs	r4, r2, r1
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	eb63 0501 	sbc.w	r5, r3, r1
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	00eb      	lsls	r3, r5, #3
 8008ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eca:	00e2      	lsls	r2, r4, #3
 8008ecc:	4614      	mov	r4, r2
 8008ece:	461d      	mov	r5, r3
 8008ed0:	4643      	mov	r3, r8
 8008ed2:	18e3      	adds	r3, r4, r3
 8008ed4:	603b      	str	r3, [r7, #0]
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	eb45 0303 	adc.w	r3, r5, r3
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eea:	4629      	mov	r1, r5
 8008eec:	028b      	lsls	r3, r1, #10
 8008eee:	4621      	mov	r1, r4
 8008ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	028a      	lsls	r2, r1, #10
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4619      	mov	r1, r3
 8008efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f00:	2200      	movs	r2, #0
 8008f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f04:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f0a:	f7f7 f97b 	bl	8000204 <__aeabi_uldivmod>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4613      	mov	r3, r2
 8008f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008f18:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x458>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	0f1b      	lsrs	r3, r3, #28
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f36:	e003      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f38:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	37b8      	adds	r7, #184	; 0xb8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f4e:	bf00      	nop
 8008f50:	40023800 	.word	0x40023800
 8008f54:	00f42400 	.word	0x00f42400

08008f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e28d      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 8083 	beq.w	800907e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f78:	4b94      	ldr	r3, [pc, #592]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 030c 	and.w	r3, r3, #12
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d019      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f84:	4b91      	ldr	r3, [pc, #580]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d106      	bne.n	8008f9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f90:	4b8e      	ldr	r3, [pc, #568]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f9e:	4b8b      	ldr	r3, [pc, #556]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008fa6:	2b0c      	cmp	r3, #12
 8008fa8:	d112      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008faa:	4b88      	ldr	r3, [pc, #544]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fb6:	d10b      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fb8:	4b84      	ldr	r3, [pc, #528]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d05b      	beq.n	800907c <HAL_RCC_OscConfig+0x124>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d157      	bne.n	800907c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e25a      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd8:	d106      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x90>
 8008fda:	4b7c      	ldr	r3, [pc, #496]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a7b      	ldr	r2, [pc, #492]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	e01d      	b.n	8009024 <HAL_RCC_OscConfig+0xcc>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ff0:	d10c      	bne.n	800900c <HAL_RCC_OscConfig+0xb4>
 8008ff2:	4b76      	ldr	r3, [pc, #472]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a75      	ldr	r2, [pc, #468]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	4b73      	ldr	r3, [pc, #460]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a72      	ldr	r2, [pc, #456]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e00b      	b.n	8009024 <HAL_RCC_OscConfig+0xcc>
 800900c:	4b6f      	ldr	r3, [pc, #444]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a6e      	ldr	r2, [pc, #440]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	4b6c      	ldr	r3, [pc, #432]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a6b      	ldr	r2, [pc, #428]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800901e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d013      	beq.n	8009054 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902c:	f7fa fdf0 	bl	8003c10 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009034:	f7fa fdec 	bl	8003c10 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b64      	cmp	r3, #100	; 0x64
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e21f      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009046:	4b61      	ldr	r3, [pc, #388]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0xdc>
 8009052:	e014      	b.n	800907e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7fa fddc 	bl	8003c10 <HAL_GetTick>
 8009058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800905c:	f7fa fdd8 	bl	8003c10 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b64      	cmp	r3, #100	; 0x64
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e20b      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800906e:	4b57      	ldr	r3, [pc, #348]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f0      	bne.n	800905c <HAL_RCC_OscConfig+0x104>
 800907a:	e000      	b.n	800907e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800907c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d06f      	beq.n	800916a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800908a:	4b50      	ldr	r3, [pc, #320]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 030c 	and.w	r3, r3, #12
 8009092:	2b00      	cmp	r3, #0
 8009094:	d017      	beq.n	80090c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009096:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d105      	bne.n	80090ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090a2:	4b4a      	ldr	r3, [pc, #296]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ae:	4b47      	ldr	r3, [pc, #284]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090b6:	2b0c      	cmp	r3, #12
 80090b8:	d11c      	bne.n	80090f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ba:	4b44      	ldr	r3, [pc, #272]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d116      	bne.n	80090f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c6:	4b41      	ldr	r3, [pc, #260]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0302 	and.w	r3, r3, #2
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <HAL_RCC_OscConfig+0x186>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d001      	beq.n	80090de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e1d3      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090de:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4937      	ldr	r1, [pc, #220]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090f2:	e03a      	b.n	800916a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090fc:	4b34      	ldr	r3, [pc, #208]	; (80091d0 <HAL_RCC_OscConfig+0x278>)
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009102:	f7fa fd85 	bl	8003c10 <HAL_GetTick>
 8009106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009108:	e008      	b.n	800911c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800910a:	f7fa fd81 	bl	8003c10 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e1b4      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800911c:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009128:	4b28      	ldr	r3, [pc, #160]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	4925      	ldr	r1, [pc, #148]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009138:	4313      	orrs	r3, r2
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	e015      	b.n	800916a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800913e:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <HAL_RCC_OscConfig+0x278>)
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7fa fd64 	bl	8003c10 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800914c:	f7fa fd60 	bl	8003c10 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e193      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800915e:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f0      	bne.n	800914c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d036      	beq.n	80091e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d016      	beq.n	80091ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800917e:	4b15      	ldr	r3, [pc, #84]	; (80091d4 <HAL_RCC_OscConfig+0x27c>)
 8009180:	2201      	movs	r2, #1
 8009182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009184:	f7fa fd44 	bl	8003c10 <HAL_GetTick>
 8009188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800918c:	f7fa fd40 	bl	8003c10 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e173      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800919e:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80091a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0f0      	beq.n	800918c <HAL_RCC_OscConfig+0x234>
 80091aa:	e01b      	b.n	80091e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <HAL_RCC_OscConfig+0x27c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b2:	f7fa fd2d 	bl	8003c10 <HAL_GetTick>
 80091b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b8:	e00e      	b.n	80091d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ba:	f7fa fd29 	bl	8003c10 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d907      	bls.n	80091d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e15c      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
 80091cc:	40023800 	.word	0x40023800
 80091d0:	42470000 	.word	0x42470000
 80091d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d8:	4b8a      	ldr	r3, [pc, #552]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80091da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1ea      	bne.n	80091ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8097 	beq.w	8009320 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091f6:	4b83      	ldr	r3, [pc, #524]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10f      	bne.n	8009222 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009202:	2300      	movs	r3, #0
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	4b7f      	ldr	r3, [pc, #508]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	4a7e      	ldr	r2, [pc, #504]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800920c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009210:	6413      	str	r3, [r2, #64]	; 0x40
 8009212:	4b7c      	ldr	r3, [pc, #496]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800921a:	60bb      	str	r3, [r7, #8]
 800921c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800921e:	2301      	movs	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009222:	4b79      	ldr	r3, [pc, #484]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d118      	bne.n	8009260 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800922e:	4b76      	ldr	r3, [pc, #472]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a75      	ldr	r2, [pc, #468]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800923a:	f7fa fce9 	bl	8003c10 <HAL_GetTick>
 800923e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009240:	e008      	b.n	8009254 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009242:	f7fa fce5 	bl	8003c10 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d901      	bls.n	8009254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e118      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009254:	4b6c      	ldr	r3, [pc, #432]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0f0      	beq.n	8009242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d106      	bne.n	8009276 <HAL_RCC_OscConfig+0x31e>
 8009268:	4b66      	ldr	r3, [pc, #408]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800926a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926c:	4a65      	ldr	r2, [pc, #404]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	6713      	str	r3, [r2, #112]	; 0x70
 8009274:	e01c      	b.n	80092b0 <HAL_RCC_OscConfig+0x358>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b05      	cmp	r3, #5
 800927c:	d10c      	bne.n	8009298 <HAL_RCC_OscConfig+0x340>
 800927e:	4b61      	ldr	r3, [pc, #388]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	4a60      	ldr	r2, [pc, #384]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009284:	f043 0304 	orr.w	r3, r3, #4
 8009288:	6713      	str	r3, [r2, #112]	; 0x70
 800928a:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	4a5d      	ldr	r2, [pc, #372]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009290:	f043 0301 	orr.w	r3, r3, #1
 8009294:	6713      	str	r3, [r2, #112]	; 0x70
 8009296:	e00b      	b.n	80092b0 <HAL_RCC_OscConfig+0x358>
 8009298:	4b5a      	ldr	r3, [pc, #360]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800929a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929c:	4a59      	ldr	r2, [pc, #356]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	6713      	str	r3, [r2, #112]	; 0x70
 80092a4:	4b57      	ldr	r3, [pc, #348]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a56      	ldr	r2, [pc, #344]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80092aa:	f023 0304 	bic.w	r3, r3, #4
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d015      	beq.n	80092e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b8:	f7fa fcaa 	bl	8003c10 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092be:	e00a      	b.n	80092d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092c0:	f7fa fca6 	bl	8003c10 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e0d7      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092d6:	4b4b      	ldr	r3, [pc, #300]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80092d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0ee      	beq.n	80092c0 <HAL_RCC_OscConfig+0x368>
 80092e2:	e014      	b.n	800930e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e4:	f7fa fc94 	bl	8003c10 <HAL_GetTick>
 80092e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ea:	e00a      	b.n	8009302 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ec:	f7fa fc90 	bl	8003c10 <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e0c1      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009302:	4b40      	ldr	r3, [pc, #256]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1ee      	bne.n	80092ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d105      	bne.n	8009320 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009314:	4b3b      	ldr	r3, [pc, #236]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009318:	4a3a      	ldr	r2, [pc, #232]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800931a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800931e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 80ad 	beq.w	8009484 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800932a:	4b36      	ldr	r3, [pc, #216]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 030c 	and.w	r3, r3, #12
 8009332:	2b08      	cmp	r3, #8
 8009334:	d060      	beq.n	80093f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	2b02      	cmp	r3, #2
 800933c:	d145      	bne.n	80093ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800933e:	4b33      	ldr	r3, [pc, #204]	; (800940c <HAL_RCC_OscConfig+0x4b4>)
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7fa fc64 	bl	8003c10 <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800934c:	f7fa fc60 	bl	8003c10 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e093      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800935e:	4b29      	ldr	r3, [pc, #164]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	69da      	ldr	r2, [r3, #28]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	019b      	lsls	r3, r3, #6
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	3b01      	subs	r3, #1
 8009384:	041b      	lsls	r3, r3, #16
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	061b      	lsls	r3, r3, #24
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	071b      	lsls	r3, r3, #28
 8009396:	491b      	ldr	r1, [pc, #108]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009398:	4313      	orrs	r3, r2
 800939a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800939c:	4b1b      	ldr	r3, [pc, #108]	; (800940c <HAL_RCC_OscConfig+0x4b4>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a2:	f7fa fc35 	bl	8003c10 <HAL_GetTick>
 80093a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a8:	e008      	b.n	80093bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093aa:	f7fa fc31 	bl	8003c10 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e064      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0f0      	beq.n	80093aa <HAL_RCC_OscConfig+0x452>
 80093c8:	e05c      	b.n	8009484 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ca:	4b10      	ldr	r3, [pc, #64]	; (800940c <HAL_RCC_OscConfig+0x4b4>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d0:	f7fa fc1e 	bl	8003c10 <HAL_GetTick>
 80093d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d6:	e008      	b.n	80093ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093d8:	f7fa fc1a 	bl	8003c10 <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e04d      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ea:	4b06      	ldr	r3, [pc, #24]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1f0      	bne.n	80093d8 <HAL_RCC_OscConfig+0x480>
 80093f6:	e045      	b.n	8009484 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d107      	bne.n	8009410 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e040      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
 8009404:	40023800 	.word	0x40023800
 8009408:	40007000 	.word	0x40007000
 800940c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009410:	4b1f      	ldr	r3, [pc, #124]	; (8009490 <HAL_RCC_OscConfig+0x538>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d030      	beq.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009428:	429a      	cmp	r2, r3
 800942a:	d129      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009436:	429a      	cmp	r2, r3
 8009438:	d122      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009440:	4013      	ands	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009448:	4293      	cmp	r3, r2
 800944a:	d119      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800945c:	429a      	cmp	r2, r3
 800945e:	d10f      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800946c:	429a      	cmp	r2, r3
 800946e:	d107      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800947c:	429a      	cmp	r2, r3
 800947e:	d001      	beq.n	8009484 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40023800 	.word	0x40023800

08009494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e041      	b.n	800952a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7fa f8fc 	bl	80036b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f000 fca8 	bl	8009e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b01      	cmp	r3, #1
 8009546:	d001      	beq.n	800954c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e04e      	b.n	80095ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a23      	ldr	r2, [pc, #140]	; (80095f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d022      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009576:	d01d      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a1f      	ldr	r2, [pc, #124]	; (80095fc <HAL_TIM_Base_Start_IT+0xc8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d018      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1e      	ldr	r2, [pc, #120]	; (8009600 <HAL_TIM_Base_Start_IT+0xcc>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d013      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a1c      	ldr	r2, [pc, #112]	; (8009604 <HAL_TIM_Base_Start_IT+0xd0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00e      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <HAL_TIM_Base_Start_IT+0xd4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d009      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a19      	ldr	r2, [pc, #100]	; (800960c <HAL_TIM_Base_Start_IT+0xd8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d004      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x80>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a18      	ldr	r2, [pc, #96]	; (8009610 <HAL_TIM_Base_Start_IT+0xdc>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d111      	bne.n	80095d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 0307 	and.w	r3, r3, #7
 80095be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b06      	cmp	r3, #6
 80095c4:	d010      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f042 0201 	orr.w	r2, r2, #1
 80095d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d6:	e007      	b.n	80095e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0201 	orr.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	40010000 	.word	0x40010000
 80095fc:	40000400 	.word	0x40000400
 8009600:	40000800 	.word	0x40000800
 8009604:	40000c00 	.word	0x40000c00
 8009608:	40010400 	.word	0x40010400
 800960c:	40014000 	.word	0x40014000
 8009610:	40001800 	.word	0x40001800

08009614 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 0201 	bic.w	r2, r2, #1
 800962a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a1a      	ldr	r2, [r3, #32]
 8009632:	f241 1311 	movw	r3, #4369	; 0x1111
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10f      	bne.n	800965c <HAL_TIM_Base_Stop_IT+0x48>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a1a      	ldr	r2, [r3, #32]
 8009642:	f240 4344 	movw	r3, #1092	; 0x444
 8009646:	4013      	ands	r3, r2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d107      	bne.n	800965c <HAL_TIM_Base_Stop_IT+0x48>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0201 	bic.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e041      	b.n	8009708 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f839 	bl	8009710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2202      	movs	r2, #2
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f000 fbb9 	bl	8009e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <HAL_TIM_PWM_Start+0x24>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b01      	cmp	r3, #1
 800973e:	bf14      	ite	ne
 8009740:	2301      	movne	r3, #1
 8009742:	2300      	moveq	r3, #0
 8009744:	b2db      	uxtb	r3, r3
 8009746:	e022      	b.n	800978e <HAL_TIM_PWM_Start+0x6a>
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d109      	bne.n	8009762 <HAL_TIM_PWM_Start+0x3e>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b01      	cmp	r3, #1
 8009758:	bf14      	ite	ne
 800975a:	2301      	movne	r3, #1
 800975c:	2300      	moveq	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	e015      	b.n	800978e <HAL_TIM_PWM_Start+0x6a>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b08      	cmp	r3, #8
 8009766:	d109      	bne.n	800977c <HAL_TIM_PWM_Start+0x58>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b01      	cmp	r3, #1
 8009772:	bf14      	ite	ne
 8009774:	2301      	movne	r3, #1
 8009776:	2300      	moveq	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	e008      	b.n	800978e <HAL_TIM_PWM_Start+0x6a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	bf14      	ite	ne
 8009788:	2301      	movne	r3, #1
 800978a:	2300      	moveq	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e07c      	b.n	8009890 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_PWM_Start+0x82>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097a4:	e013      	b.n	80097ce <HAL_TIM_PWM_Start+0xaa>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d104      	bne.n	80097b6 <HAL_TIM_PWM_Start+0x92>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097b4:	e00b      	b.n	80097ce <HAL_TIM_PWM_Start+0xaa>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b08      	cmp	r3, #8
 80097ba:	d104      	bne.n	80097c6 <HAL_TIM_PWM_Start+0xa2>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097c4:	e003      	b.n	80097ce <HAL_TIM_PWM_Start+0xaa>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2201      	movs	r2, #1
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fe10 	bl	800a3fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a2d      	ldr	r2, [pc, #180]	; (8009898 <HAL_TIM_PWM_Start+0x174>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d004      	beq.n	80097f0 <HAL_TIM_PWM_Start+0xcc>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a2c      	ldr	r2, [pc, #176]	; (800989c <HAL_TIM_PWM_Start+0x178>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d101      	bne.n	80097f4 <HAL_TIM_PWM_Start+0xd0>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <HAL_TIM_PWM_Start+0xd2>
 80097f4:	2300      	movs	r3, #0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a22      	ldr	r2, [pc, #136]	; (8009898 <HAL_TIM_PWM_Start+0x174>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d022      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981c:	d01d      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <HAL_TIM_PWM_Start+0x17c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d018      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <HAL_TIM_PWM_Start+0x180>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d013      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a1c      	ldr	r2, [pc, #112]	; (80098a8 <HAL_TIM_PWM_Start+0x184>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d00e      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a16      	ldr	r2, [pc, #88]	; (800989c <HAL_TIM_PWM_Start+0x178>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d009      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a18      	ldr	r2, [pc, #96]	; (80098ac <HAL_TIM_PWM_Start+0x188>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d004      	beq.n	800985a <HAL_TIM_PWM_Start+0x136>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a16      	ldr	r2, [pc, #88]	; (80098b0 <HAL_TIM_PWM_Start+0x18c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d111      	bne.n	800987e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f003 0307 	and.w	r3, r3, #7
 8009864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b06      	cmp	r3, #6
 800986a:	d010      	beq.n	800988e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0201 	orr.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987c:	e007      	b.n	800988e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40010000 	.word	0x40010000
 800989c:	40010400 	.word	0x40010400
 80098a0:	40000400 	.word	0x40000400
 80098a4:	40000800 	.word	0x40000800
 80098a8:	40000c00 	.word	0x40000c00
 80098ac:	40014000 	.word	0x40014000
 80098b0:	40001800 	.word	0x40001800

080098b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d122      	bne.n	8009910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d11b      	bne.n	8009910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0202 	mvn.w	r2, #2
 80098e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa77 	bl	8009dea <HAL_TIM_IC_CaptureCallback>
 80098fc:	e005      	b.n	800990a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa69 	bl	8009dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fa7a 	bl	8009dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d122      	bne.n	8009964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b04      	cmp	r3, #4
 800992a:	d11b      	bne.n	8009964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f06f 0204 	mvn.w	r2, #4
 8009934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2202      	movs	r2, #2
 800993a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa4d 	bl	8009dea <HAL_TIM_IC_CaptureCallback>
 8009950:	e005      	b.n	800995e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa3f 	bl	8009dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fa50 	bl	8009dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	2b08      	cmp	r3, #8
 8009970:	d122      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b08      	cmp	r3, #8
 800997e:	d11b      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f06f 0208 	mvn.w	r2, #8
 8009988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2204      	movs	r2, #4
 800998e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fa23 	bl	8009dea <HAL_TIM_IC_CaptureCallback>
 80099a4:	e005      	b.n	80099b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa15 	bl	8009dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fa26 	bl	8009dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d122      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0310 	and.w	r3, r3, #16
 80099d0:	2b10      	cmp	r3, #16
 80099d2:	d11b      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0210 	mvn.w	r2, #16
 80099dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2208      	movs	r2, #8
 80099e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f9f9 	bl	8009dea <HAL_TIM_IC_CaptureCallback>
 80099f8:	e005      	b.n	8009a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f9eb 	bl	8009dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9fc 	bl	8009dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d10e      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0201 	mvn.w	r2, #1
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7f9 f91a 	bl	8002c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d10e      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a50:	2b80      	cmp	r3, #128	; 0x80
 8009a52:	d107      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fe84 	bl	800a76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6e:	2b40      	cmp	r3, #64	; 0x40
 8009a70:	d10e      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d107      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f9c1 	bl	8009e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d10e      	bne.n	8009abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b20      	cmp	r3, #32
 8009aaa:	d107      	bne.n	8009abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0220 	mvn.w	r2, #32
 8009ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fe4e 	bl	800a758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e0ae      	b.n	8009c40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b0c      	cmp	r3, #12
 8009aee:	f200 809f 	bhi.w	8009c30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b2d 	.word	0x08009b2d
 8009afc:	08009c31 	.word	0x08009c31
 8009b00:	08009c31 	.word	0x08009c31
 8009b04:	08009c31 	.word	0x08009c31
 8009b08:	08009b6d 	.word	0x08009b6d
 8009b0c:	08009c31 	.word	0x08009c31
 8009b10:	08009c31 	.word	0x08009c31
 8009b14:	08009c31 	.word	0x08009c31
 8009b18:	08009baf 	.word	0x08009baf
 8009b1c:	08009c31 	.word	0x08009c31
 8009b20:	08009c31 	.word	0x08009c31
 8009b24:	08009c31 	.word	0x08009c31
 8009b28:	08009bef 	.word	0x08009bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fa18 	bl	8009f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699a      	ldr	r2, [r3, #24]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0208 	orr.w	r2, r2, #8
 8009b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699a      	ldr	r2, [r3, #24]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0204 	bic.w	r2, r2, #4
 8009b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6999      	ldr	r1, [r3, #24]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	691a      	ldr	r2, [r3, #16]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	619a      	str	r2, [r3, #24]
      break;
 8009b6a:	e064      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fa68 	bl	800a048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6999      	ldr	r1, [r3, #24]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	021a      	lsls	r2, r3, #8
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	619a      	str	r2, [r3, #24]
      break;
 8009bac:	e043      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fabd 	bl	800a134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	69da      	ldr	r2, [r3, #28]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f042 0208 	orr.w	r2, r2, #8
 8009bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	69da      	ldr	r2, [r3, #28]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 0204 	bic.w	r2, r2, #4
 8009bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69d9      	ldr	r1, [r3, #28]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	691a      	ldr	r2, [r3, #16]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	61da      	str	r2, [r3, #28]
      break;
 8009bec:	e023      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68b9      	ldr	r1, [r7, #8]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 fb11 	bl	800a21c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69da      	ldr	r2, [r3, #28]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69d9      	ldr	r1, [r3, #28]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	021a      	lsls	r2, r3, #8
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	61da      	str	r2, [r3, #28]
      break;
 8009c2e:	e002      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	75fb      	strb	r3, [r7, #23]
      break;
 8009c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_TIM_ConfigClockSource+0x1c>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e0b4      	b.n	8009dce <HAL_TIM_ConfigClockSource+0x186>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9c:	d03e      	beq.n	8009d1c <HAL_TIM_ConfigClockSource+0xd4>
 8009c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca2:	f200 8087 	bhi.w	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009caa:	f000 8086 	beq.w	8009dba <HAL_TIM_ConfigClockSource+0x172>
 8009cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb2:	d87f      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cb4:	2b70      	cmp	r3, #112	; 0x70
 8009cb6:	d01a      	beq.n	8009cee <HAL_TIM_ConfigClockSource+0xa6>
 8009cb8:	2b70      	cmp	r3, #112	; 0x70
 8009cba:	d87b      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cbc:	2b60      	cmp	r3, #96	; 0x60
 8009cbe:	d050      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x11a>
 8009cc0:	2b60      	cmp	r3, #96	; 0x60
 8009cc2:	d877      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc4:	2b50      	cmp	r3, #80	; 0x50
 8009cc6:	d03c      	beq.n	8009d42 <HAL_TIM_ConfigClockSource+0xfa>
 8009cc8:	2b50      	cmp	r3, #80	; 0x50
 8009cca:	d873      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	d058      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0x13a>
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d86f      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd4:	2b30      	cmp	r3, #48	; 0x30
 8009cd6:	d064      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cd8:	2b30      	cmp	r3, #48	; 0x30
 8009cda:	d86b      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d060      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d867      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d05c      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	d05a      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cec:	e062      	b.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6899      	ldr	r1, [r3, #8]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f000 fb5d 	bl	800a3bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	609a      	str	r2, [r3, #8]
      break;
 8009d1a:	e04f      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	6899      	ldr	r1, [r3, #8]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f000 fb46 	bl	800a3bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d3e:	609a      	str	r2, [r3, #8]
      break;
 8009d40:	e03c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6859      	ldr	r1, [r3, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f000 faba 	bl	800a2c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2150      	movs	r1, #80	; 0x50
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fb13 	bl	800a386 <TIM_ITRx_SetConfig>
      break;
 8009d60:	e02c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6859      	ldr	r1, [r3, #4]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f000 fad9 	bl	800a326 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2160      	movs	r1, #96	; 0x60
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 fb03 	bl	800a386 <TIM_ITRx_SetConfig>
      break;
 8009d80:	e01c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6859      	ldr	r1, [r3, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f000 fa9a 	bl	800a2c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2140      	movs	r1, #64	; 0x40
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 faf3 	bl	800a386 <TIM_ITRx_SetConfig>
      break;
 8009da0:	e00c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	f000 faea 	bl	800a386 <TIM_ITRx_SetConfig>
      break;
 8009db2:	e003      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	73fb      	strb	r3, [r7, #15]
      break;
 8009db8:	e000      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009df2:	bf00      	nop
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e1a:	bf00      	nop
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
	...

08009e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a40      	ldr	r2, [pc, #256]	; (8009f3c <TIM_Base_SetConfig+0x114>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d013      	beq.n	8009e68 <TIM_Base_SetConfig+0x40>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e46:	d00f      	beq.n	8009e68 <TIM_Base_SetConfig+0x40>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a3d      	ldr	r2, [pc, #244]	; (8009f40 <TIM_Base_SetConfig+0x118>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00b      	beq.n	8009e68 <TIM_Base_SetConfig+0x40>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a3c      	ldr	r2, [pc, #240]	; (8009f44 <TIM_Base_SetConfig+0x11c>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d007      	beq.n	8009e68 <TIM_Base_SetConfig+0x40>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a3b      	ldr	r2, [pc, #236]	; (8009f48 <TIM_Base_SetConfig+0x120>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_Base_SetConfig+0x40>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a3a      	ldr	r2, [pc, #232]	; (8009f4c <TIM_Base_SetConfig+0x124>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d108      	bne.n	8009e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a2f      	ldr	r2, [pc, #188]	; (8009f3c <TIM_Base_SetConfig+0x114>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d02b      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e88:	d027      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a2c      	ldr	r2, [pc, #176]	; (8009f40 <TIM_Base_SetConfig+0x118>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d023      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a2b      	ldr	r2, [pc, #172]	; (8009f44 <TIM_Base_SetConfig+0x11c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d01f      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a2a      	ldr	r2, [pc, #168]	; (8009f48 <TIM_Base_SetConfig+0x120>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d01b      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a29      	ldr	r2, [pc, #164]	; (8009f4c <TIM_Base_SetConfig+0x124>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d017      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a28      	ldr	r2, [pc, #160]	; (8009f50 <TIM_Base_SetConfig+0x128>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d013      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a27      	ldr	r2, [pc, #156]	; (8009f54 <TIM_Base_SetConfig+0x12c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00f      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a26      	ldr	r2, [pc, #152]	; (8009f58 <TIM_Base_SetConfig+0x130>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d00b      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a25      	ldr	r2, [pc, #148]	; (8009f5c <TIM_Base_SetConfig+0x134>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d007      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a24      	ldr	r2, [pc, #144]	; (8009f60 <TIM_Base_SetConfig+0x138>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d003      	beq.n	8009eda <TIM_Base_SetConfig+0xb2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a23      	ldr	r2, [pc, #140]	; (8009f64 <TIM_Base_SetConfig+0x13c>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d108      	bne.n	8009eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <TIM_Base_SetConfig+0x114>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d003      	beq.n	8009f20 <TIM_Base_SetConfig+0xf8>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a0c      	ldr	r2, [pc, #48]	; (8009f4c <TIM_Base_SetConfig+0x124>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d103      	bne.n	8009f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	615a      	str	r2, [r3, #20]
}
 8009f2e:	bf00      	nop
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40000400 	.word	0x40000400
 8009f44:	40000800 	.word	0x40000800
 8009f48:	40000c00 	.word	0x40000c00
 8009f4c:	40010400 	.word	0x40010400
 8009f50:	40014000 	.word	0x40014000
 8009f54:	40014400 	.word	0x40014400
 8009f58:	40014800 	.word	0x40014800
 8009f5c:	40001800 	.word	0x40001800
 8009f60:	40001c00 	.word	0x40001c00
 8009f64:	40002000 	.word	0x40002000

08009f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	f023 0201 	bic.w	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f023 0302 	bic.w	r3, r3, #2
 8009fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a20      	ldr	r2, [pc, #128]	; (800a040 <TIM_OC1_SetConfig+0xd8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d003      	beq.n	8009fcc <TIM_OC1_SetConfig+0x64>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1f      	ldr	r2, [pc, #124]	; (800a044 <TIM_OC1_SetConfig+0xdc>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d10c      	bne.n	8009fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f023 0308 	bic.w	r3, r3, #8
 8009fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f023 0304 	bic.w	r3, r3, #4
 8009fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a15      	ldr	r2, [pc, #84]	; (800a040 <TIM_OC1_SetConfig+0xd8>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d003      	beq.n	8009ff6 <TIM_OC1_SetConfig+0x8e>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a14      	ldr	r2, [pc, #80]	; (800a044 <TIM_OC1_SetConfig+0xdc>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d111      	bne.n	800a01a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4313      	orrs	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	621a      	str	r2, [r3, #32]
}
 800a034:	bf00      	nop
 800a036:	371c      	adds	r7, #28
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	40010000 	.word	0x40010000
 800a044:	40010400 	.word	0x40010400

0800a048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0210 	bic.w	r2, r3, #16
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	021b      	lsls	r3, r3, #8
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f023 0320 	bic.w	r3, r3, #32
 800a092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a22      	ldr	r2, [pc, #136]	; (800a12c <TIM_OC2_SetConfig+0xe4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d003      	beq.n	800a0b0 <TIM_OC2_SetConfig+0x68>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a21      	ldr	r2, [pc, #132]	; (800a130 <TIM_OC2_SetConfig+0xe8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d10d      	bne.n	800a0cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	011b      	lsls	r3, r3, #4
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a17      	ldr	r2, [pc, #92]	; (800a12c <TIM_OC2_SetConfig+0xe4>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d003      	beq.n	800a0dc <TIM_OC2_SetConfig+0x94>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a16      	ldr	r2, [pc, #88]	; (800a130 <TIM_OC2_SetConfig+0xe8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d113      	bne.n	800a104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	4313      	orrs	r3, r2
 800a102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	621a      	str	r2, [r3, #32]
}
 800a11e:	bf00      	nop
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40010000 	.word	0x40010000
 800a130:	40010400 	.word	0x40010400

0800a134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a17c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	4313      	orrs	r3, r2
 800a188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a21      	ldr	r2, [pc, #132]	; (800a214 <TIM_OC3_SetConfig+0xe0>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d003      	beq.n	800a19a <TIM_OC3_SetConfig+0x66>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a20      	ldr	r2, [pc, #128]	; (800a218 <TIM_OC3_SetConfig+0xe4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d10d      	bne.n	800a1b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a16      	ldr	r2, [pc, #88]	; (800a214 <TIM_OC3_SetConfig+0xe0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d003      	beq.n	800a1c6 <TIM_OC3_SetConfig+0x92>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a15      	ldr	r2, [pc, #84]	; (800a218 <TIM_OC3_SetConfig+0xe4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d113      	bne.n	800a1ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	011b      	lsls	r3, r3, #4
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	011b      	lsls	r3, r3, #4
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	621a      	str	r2, [r3, #32]
}
 800a208:	bf00      	nop
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400

0800a21c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	031b      	lsls	r3, r3, #12
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	4313      	orrs	r3, r2
 800a272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a12      	ldr	r2, [pc, #72]	; (800a2c0 <TIM_OC4_SetConfig+0xa4>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d003      	beq.n	800a284 <TIM_OC4_SetConfig+0x68>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a11      	ldr	r2, [pc, #68]	; (800a2c4 <TIM_OC4_SetConfig+0xa8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d109      	bne.n	800a298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a28a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	019b      	lsls	r3, r3, #6
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	4313      	orrs	r3, r2
 800a296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	621a      	str	r2, [r3, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40010400 	.word	0x40010400

0800a2c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	f023 0201 	bic.w	r2, r3, #1
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	011b      	lsls	r3, r3, #4
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f023 030a 	bic.w	r3, r3, #10
 800a304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	621a      	str	r2, [r3, #32]
}
 800a31a:	bf00      	nop
 800a31c:	371c      	adds	r7, #28
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a326:	b480      	push	{r7}
 800a328:	b087      	sub	sp, #28
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f023 0210 	bic.w	r2, r3, #16
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	031b      	lsls	r3, r3, #12
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	4313      	orrs	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	621a      	str	r2, [r3, #32]
}
 800a37a:	bf00      	nop
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	f043 0307 	orr.w	r3, r3, #7
 800a3a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	609a      	str	r2, [r3, #8]
}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	021a      	lsls	r2, r3, #8
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	609a      	str	r2, [r3, #8]
}
 800a3f0:	bf00      	nop
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f003 031f 	and.w	r3, r3, #31
 800a40e:	2201      	movs	r2, #1
 800a410:	fa02 f303 	lsl.w	r3, r2, r3
 800a414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1a      	ldr	r2, [r3, #32]
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	43db      	mvns	r3, r3
 800a41e:	401a      	ands	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6a1a      	ldr	r2, [r3, #32]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f003 031f 	and.w	r3, r3, #31
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	fa01 f303 	lsl.w	r3, r1, r3
 800a434:	431a      	orrs	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
	...

0800a448 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <HAL_TIMEx_PWMN_Start+0x24>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b01      	cmp	r3, #1
 800a462:	bf14      	ite	ne
 800a464:	2301      	movne	r3, #1
 800a466:	2300      	moveq	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	e022      	b.n	800a4b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d109      	bne.n	800a486 <HAL_TIMEx_PWMN_Start+0x3e>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	bf14      	ite	ne
 800a47e:	2301      	movne	r3, #1
 800a480:	2300      	moveq	r3, #0
 800a482:	b2db      	uxtb	r3, r3
 800a484:	e015      	b.n	800a4b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d109      	bne.n	800a4a0 <HAL_TIMEx_PWMN_Start+0x58>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b01      	cmp	r3, #1
 800a496:	bf14      	ite	ne
 800a498:	2301      	movne	r3, #1
 800a49a:	2300      	moveq	r3, #0
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	e008      	b.n	800a4b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	bf14      	ite	ne
 800a4ac:	2301      	movne	r3, #1
 800a4ae:	2300      	moveq	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e06d      	b.n	800a596 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d104      	bne.n	800a4ca <HAL_TIMEx_PWMN_Start+0x82>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4c8:	e013      	b.n	800a4f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d104      	bne.n	800a4da <HAL_TIMEx_PWMN_Start+0x92>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4d8:	e00b      	b.n	800a4f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d104      	bne.n	800a4ea <HAL_TIMEx_PWMN_Start+0xa2>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e8:	e003      	b.n	800a4f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f940 	bl	800a780 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a50e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a22      	ldr	r2, [pc, #136]	; (800a5a0 <HAL_TIMEx_PWMN_Start+0x158>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d022      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a522:	d01d      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a1e      	ldr	r2, [pc, #120]	; (800a5a4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d018      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <HAL_TIMEx_PWMN_Start+0x160>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d013      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1b      	ldr	r2, [pc, #108]	; (800a5ac <HAL_TIMEx_PWMN_Start+0x164>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d00e      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a1a      	ldr	r2, [pc, #104]	; (800a5b0 <HAL_TIMEx_PWMN_Start+0x168>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d009      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a18      	ldr	r2, [pc, #96]	; (800a5b4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d004      	beq.n	800a560 <HAL_TIMEx_PWMN_Start+0x118>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a17      	ldr	r2, [pc, #92]	; (800a5b8 <HAL_TIMEx_PWMN_Start+0x170>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d111      	bne.n	800a584 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b06      	cmp	r3, #6
 800a570:	d010      	beq.n	800a594 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f042 0201 	orr.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a582:	e007      	b.n	800a594 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f042 0201 	orr.w	r2, r2, #1
 800a592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	40010000 	.word	0x40010000
 800a5a4:	40000400 	.word	0x40000400
 800a5a8:	40000800 	.word	0x40000800
 800a5ac:	40000c00 	.word	0x40000c00
 800a5b0:	40010400 	.word	0x40010400
 800a5b4:	40014000 	.word	0x40014000
 800a5b8:	40001800 	.word	0x40001800

0800a5bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e05a      	b.n	800a68a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a21      	ldr	r2, [pc, #132]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d022      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a620:	d01d      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d018      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a1b      	ldr	r2, [pc, #108]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d013      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a1a      	ldr	r2, [pc, #104]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d00e      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a18      	ldr	r2, [pc, #96]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d009      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a17      	ldr	r2, [pc, #92]	; (800a6ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d004      	beq.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a15      	ldr	r2, [pc, #84]	; (800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d10c      	bne.n	800a678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40010000 	.word	0x40010000
 800a69c:	40000400 	.word	0x40000400
 800a6a0:	40000800 	.word	0x40000800
 800a6a4:	40000c00 	.word	0x40000c00
 800a6a8:	40010400 	.word	0x40010400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40001800 	.word	0x40001800

0800a6b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d101      	bne.n	800a6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	e03d      	b.n	800a74c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	4313      	orrs	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	2204      	movs	r2, #4
 800a794:	fa02 f303 	lsl.w	r3, r2, r3
 800a798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	43db      	mvns	r3, r3
 800a7a2:	401a      	ands	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a1a      	ldr	r2, [r3, #32]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f003 031f 	and.w	r3, r3, #31
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	621a      	str	r2, [r3, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	f107 001c 	add.w	r0, r7, #28
 800a7d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d122      	bne.n	800a828 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a7f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d105      	bne.n	800a81c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fbe7 	bl	800bff0 <USB_CoreReset>
 800a822:	4603      	mov	r3, r0
 800a824:	73fb      	strb	r3, [r7, #15]
 800a826:	e01a      	b.n	800a85e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 fbdb 	bl	800bff0 <USB_CoreReset>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a848:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	639a      	str	r2, [r3, #56]	; 0x38
 800a850:	e005      	b.n	800a85e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	2b01      	cmp	r3, #1
 800a862:	d10b      	bne.n	800a87c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f043 0206 	orr.w	r2, r3, #6
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f043 0220 	orr.w	r2, r3, #32
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a888:	b004      	add	sp, #16
 800a88a:	4770      	bx	lr

0800a88c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4613      	mov	r3, r2
 800a898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d165      	bne.n	800a96c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4a41      	ldr	r2, [pc, #260]	; (800a9a8 <USB_SetTurnaroundTime+0x11c>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d906      	bls.n	800a8b6 <USB_SetTurnaroundTime+0x2a>
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4a40      	ldr	r2, [pc, #256]	; (800a9ac <USB_SetTurnaroundTime+0x120>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d202      	bcs.n	800a8b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a8b0:	230f      	movs	r3, #15
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	e062      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	4a3c      	ldr	r2, [pc, #240]	; (800a9ac <USB_SetTurnaroundTime+0x120>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d306      	bcc.n	800a8cc <USB_SetTurnaroundTime+0x40>
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	4a3b      	ldr	r2, [pc, #236]	; (800a9b0 <USB_SetTurnaroundTime+0x124>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d202      	bcs.n	800a8cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a8c6:	230e      	movs	r3, #14
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	e057      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	4a38      	ldr	r2, [pc, #224]	; (800a9b0 <USB_SetTurnaroundTime+0x124>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d306      	bcc.n	800a8e2 <USB_SetTurnaroundTime+0x56>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4a37      	ldr	r2, [pc, #220]	; (800a9b4 <USB_SetTurnaroundTime+0x128>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d202      	bcs.n	800a8e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a8dc:	230d      	movs	r3, #13
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	e04c      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	4a33      	ldr	r2, [pc, #204]	; (800a9b4 <USB_SetTurnaroundTime+0x128>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d306      	bcc.n	800a8f8 <USB_SetTurnaroundTime+0x6c>
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	4a32      	ldr	r2, [pc, #200]	; (800a9b8 <USB_SetTurnaroundTime+0x12c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d802      	bhi.n	800a8f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8f2:	230c      	movs	r3, #12
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	e041      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	4a2f      	ldr	r2, [pc, #188]	; (800a9b8 <USB_SetTurnaroundTime+0x12c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d906      	bls.n	800a90e <USB_SetTurnaroundTime+0x82>
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	4a2e      	ldr	r2, [pc, #184]	; (800a9bc <USB_SetTurnaroundTime+0x130>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d802      	bhi.n	800a90e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a908:	230b      	movs	r3, #11
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	e036      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	4a2a      	ldr	r2, [pc, #168]	; (800a9bc <USB_SetTurnaroundTime+0x130>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d906      	bls.n	800a924 <USB_SetTurnaroundTime+0x98>
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	4a29      	ldr	r2, [pc, #164]	; (800a9c0 <USB_SetTurnaroundTime+0x134>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d802      	bhi.n	800a924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a91e:	230a      	movs	r3, #10
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e02b      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <USB_SetTurnaroundTime+0x134>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d906      	bls.n	800a93a <USB_SetTurnaroundTime+0xae>
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4a25      	ldr	r2, [pc, #148]	; (800a9c4 <USB_SetTurnaroundTime+0x138>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d202      	bcs.n	800a93a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a934:	2309      	movs	r3, #9
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e020      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	4a21      	ldr	r2, [pc, #132]	; (800a9c4 <USB_SetTurnaroundTime+0x138>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d306      	bcc.n	800a950 <USB_SetTurnaroundTime+0xc4>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4a20      	ldr	r2, [pc, #128]	; (800a9c8 <USB_SetTurnaroundTime+0x13c>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d802      	bhi.n	800a950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a94a:	2308      	movs	r3, #8
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	e015      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	4a1d      	ldr	r2, [pc, #116]	; (800a9c8 <USB_SetTurnaroundTime+0x13c>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d906      	bls.n	800a966 <USB_SetTurnaroundTime+0xda>
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4a1c      	ldr	r2, [pc, #112]	; (800a9cc <USB_SetTurnaroundTime+0x140>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d202      	bcs.n	800a966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a960:	2307      	movs	r3, #7
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	e00a      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a966:	2306      	movs	r3, #6
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	e007      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d102      	bne.n	800a978 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a972:	2309      	movs	r3, #9
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	e001      	b.n	800a97c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a978:	2309      	movs	r3, #9
 800a97a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	68da      	ldr	r2, [r3, #12]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	029b      	lsls	r3, r3, #10
 800a990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a994:	431a      	orrs	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	00d8acbf 	.word	0x00d8acbf
 800a9ac:	00e4e1c0 	.word	0x00e4e1c0
 800a9b0:	00f42400 	.word	0x00f42400
 800a9b4:	01067380 	.word	0x01067380
 800a9b8:	011a499f 	.word	0x011a499f
 800a9bc:	01312cff 	.word	0x01312cff
 800a9c0:	014ca43f 	.word	0x014ca43f
 800a9c4:	016e3600 	.word	0x016e3600
 800a9c8:	01a6ab1f 	.word	0x01a6ab1f
 800a9cc:	01e84800 	.word	0x01e84800

0800a9d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f043 0201 	orr.w	r2, r3, #1
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f023 0201 	bic.w	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d115      	bne.n	800aa62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa42:	2001      	movs	r0, #1
 800aa44:	f7f9 f8f0 	bl	8003c28 <HAL_Delay>
      ms++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fa3f 	bl	800bed2 <USB_GetMode>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d01e      	beq.n	800aa98 <USB_SetCurrentMode+0x84>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b31      	cmp	r3, #49	; 0x31
 800aa5e:	d9f0      	bls.n	800aa42 <USB_SetCurrentMode+0x2e>
 800aa60:	e01a      	b.n	800aa98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa62:	78fb      	ldrb	r3, [r7, #3]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d115      	bne.n	800aa94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa74:	2001      	movs	r0, #1
 800aa76:	f7f9 f8d7 	bl	8003c28 <HAL_Delay>
      ms++;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fa26 	bl	800bed2 <USB_GetMode>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d005      	beq.n	800aa98 <USB_SetCurrentMode+0x84>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b31      	cmp	r3, #49	; 0x31
 800aa90:	d9f0      	bls.n	800aa74 <USB_SetCurrentMode+0x60>
 800aa92:	e001      	b.n	800aa98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e005      	b.n	800aaa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b32      	cmp	r3, #50	; 0x32
 800aa9c:	d101      	bne.n	800aaa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aaac:	b084      	sub	sp, #16
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aaba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aac6:	2300      	movs	r3, #0
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	e009      	b.n	800aae0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	3340      	adds	r3, #64	; 0x40
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	3301      	adds	r3, #1
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2b0e      	cmp	r3, #14
 800aae4:	d9f2      	bls.n	800aacc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d11c      	bne.n	800ab26 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aafa:	f043 0302 	orr.w	r3, r3, #2
 800aafe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	e005      	b.n	800ab32 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab38:	461a      	mov	r2, r3
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab44:	4619      	mov	r1, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	680b      	ldr	r3, [r1, #0]
 800ab50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d10c      	bne.n	800ab72 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab5e:	2100      	movs	r1, #0
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f965 	bl	800ae30 <USB_SetDevSpeed>
 800ab66:	e008      	b.n	800ab7a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab68:	2101      	movs	r1, #1
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f960 	bl	800ae30 <USB_SetDevSpeed>
 800ab70:	e003      	b.n	800ab7a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab72:	2103      	movs	r1, #3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f95b 	bl	800ae30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab7a:	2110      	movs	r1, #16
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f8f3 	bl	800ad68 <USB_FlushTxFifo>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f91f 	bl	800add0 <USB_FlushRxFifo>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba2:	461a      	mov	r2, r3
 800aba4:	2300      	movs	r3, #0
 800aba6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abae:	461a      	mov	r2, r3
 800abb0:	2300      	movs	r3, #0
 800abb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abba:	461a      	mov	r2, r3
 800abbc:	2300      	movs	r3, #0
 800abbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abc0:	2300      	movs	r3, #0
 800abc2:	613b      	str	r3, [r7, #16]
 800abc4:	e043      	b.n	800ac4e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abdc:	d118      	bne.n	800ac10 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	461a      	mov	r2, r3
 800abf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	e013      	b.n	800ac22 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac06:	461a      	mov	r2, r3
 800ac08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	e008      	b.n	800ac22 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	2300      	movs	r3, #0
 800ac20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2e:	461a      	mov	r2, r3
 800ac30:	2300      	movs	r3, #0
 800ac32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac40:	461a      	mov	r2, r3
 800ac42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	613b      	str	r3, [r7, #16]
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d3b7      	bcc.n	800abc6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac56:	2300      	movs	r3, #0
 800ac58:	613b      	str	r3, [r7, #16]
 800ac5a:	e043      	b.n	800ace4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	015a      	lsls	r2, r3, #5
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac72:	d118      	bne.n	800aca6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac86:	461a      	mov	r2, r3
 800ac88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	e013      	b.n	800acb8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	e008      	b.n	800acb8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb2:	461a      	mov	r2, r3
 800acb4:	2300      	movs	r3, #0
 800acb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc4:	461a      	mov	r2, r3
 800acc6:	2300      	movs	r3, #0
 800acc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd6:	461a      	mov	r2, r3
 800acd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800acdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	3301      	adds	r3, #1
 800ace2:	613b      	str	r3, [r7, #16]
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d3b7      	bcc.n	800ac5c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acfe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ad0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d105      	bne.n	800ad20 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	f043 0210 	orr.w	r2, r3, #16
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	4b0f      	ldr	r3, [pc, #60]	; (800ad64 <USB_DevInit+0x2b8>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d005      	beq.n	800ad3e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	f043 0208 	orr.w	r2, r3, #8
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d107      	bne.n	800ad54 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad4c:	f043 0304 	orr.w	r3, r3, #4
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad60:	b004      	add	sp, #16
 800ad62:	4770      	bx	lr
 800ad64:	803c3800 	.word	0x803c3800

0800ad68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4a13      	ldr	r2, [pc, #76]	; (800adcc <USB_FlushTxFifo+0x64>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d901      	bls.n	800ad88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e01b      	b.n	800adc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	daf2      	bge.n	800ad76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	019b      	lsls	r3, r3, #6
 800ad98:	f043 0220 	orr.w	r2, r3, #32
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4a08      	ldr	r2, [pc, #32]	; (800adcc <USB_FlushTxFifo+0x64>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d901      	bls.n	800adb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e006      	b.n	800adc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	f003 0320 	and.w	r3, r3, #32
 800adba:	2b20      	cmp	r3, #32
 800adbc:	d0f0      	beq.n	800ada0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	00030d40 	.word	0x00030d40

0800add0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	4a11      	ldr	r2, [pc, #68]	; (800ae2c <USB_FlushRxFifo+0x5c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d901      	bls.n	800adee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e018      	b.n	800ae20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	daf2      	bge.n	800addc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2210      	movs	r2, #16
 800adfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4a08      	ldr	r2, [pc, #32]	; (800ae2c <USB_FlushRxFifo+0x5c>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d901      	bls.n	800ae12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e006      	b.n	800ae20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	f003 0310 	and.w	r3, r3, #16
 800ae1a:	2b10      	cmp	r3, #16
 800ae1c:	d0f0      	beq.n	800ae00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	00030d40 	.word	0x00030d40

0800ae30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	78fb      	ldrb	r3, [r7, #3]
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae50:	4313      	orrs	r3, r2
 800ae52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b087      	sub	sp, #28
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f003 0306 	and.w	r3, r3, #6
 800ae7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae82:	2300      	movs	r3, #0
 800ae84:	75fb      	strb	r3, [r7, #23]
 800ae86:	e00a      	b.n	800ae9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d002      	beq.n	800ae94 <USB_GetDevSpeed+0x32>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b06      	cmp	r3, #6
 800ae92:	d102      	bne.n	800ae9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae94:	2302      	movs	r3, #2
 800ae96:	75fb      	strb	r3, [r7, #23]
 800ae98:	e001      	b.n	800ae9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae9a:	230f      	movs	r3, #15
 800ae9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	371c      	adds	r7, #28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d13a      	bne.n	800af3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aece:	69da      	ldr	r2, [r3, #28]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	f003 030f 	and.w	r3, r3, #15
 800aed8:	2101      	movs	r1, #1
 800aeda:	fa01 f303 	lsl.w	r3, r1, r3
 800aede:	b29b      	uxth	r3, r3
 800aee0:	68f9      	ldr	r1, [r7, #12]
 800aee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aee6:	4313      	orrs	r3, r2
 800aee8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d155      	bne.n	800afac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	791b      	ldrb	r3, [r3, #4]
 800af1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	059b      	lsls	r3, r3, #22
 800af22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af24:	4313      	orrs	r3, r2
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	e036      	b.n	800afac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af44:	69da      	ldr	r2, [r3, #28]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f003 030f 	and.w	r3, r3, #15
 800af4e:	2101      	movs	r1, #1
 800af50:	fa01 f303 	lsl.w	r3, r1, r3
 800af54:	041b      	lsls	r3, r3, #16
 800af56:	68f9      	ldr	r1, [r7, #12]
 800af58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af5c:	4313      	orrs	r3, r2
 800af5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d11a      	bne.n	800afac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	791b      	ldrb	r3, [r3, #4]
 800af90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af92:	430b      	orrs	r3, r1
 800af94:	4313      	orrs	r3, r2
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	0151      	lsls	r1, r2, #5
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	440a      	add	r2, r1
 800af9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
	...

0800afbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	785b      	ldrb	r3, [r3, #1]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d161      	bne.n	800b09c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afee:	d11f      	bne.n	800b030 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	015a      	lsls	r2, r3, #5
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4413      	add	r3, r2
 800aff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	0151      	lsls	r1, r2, #5
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	440a      	add	r2, r1
 800b006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b00a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b00e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	0151      	lsls	r1, r2, #5
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	440a      	add	r2, r1
 800b026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b02a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b02e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f003 030f 	and.w	r3, r3, #15
 800b040:	2101      	movs	r1, #1
 800b042:	fa01 f303 	lsl.w	r3, r1, r3
 800b046:	b29b      	uxth	r3, r3
 800b048:	43db      	mvns	r3, r3
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b050:	4013      	ands	r3, r2
 800b052:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05a:	69da      	ldr	r2, [r3, #28]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	f003 030f 	and.w	r3, r3, #15
 800b064:	2101      	movs	r1, #1
 800b066:	fa01 f303 	lsl.w	r3, r1, r3
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	43db      	mvns	r3, r3
 800b06e:	68f9      	ldr	r1, [r7, #12]
 800b070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b074:	4013      	ands	r3, r2
 800b076:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	0159      	lsls	r1, r3, #5
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	440b      	add	r3, r1
 800b08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b092:	4619      	mov	r1, r3
 800b094:	4b35      	ldr	r3, [pc, #212]	; (800b16c <USB_DeactivateEndpoint+0x1b0>)
 800b096:	4013      	ands	r3, r2
 800b098:	600b      	str	r3, [r1, #0]
 800b09a:	e060      	b.n	800b15e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0b2:	d11f      	bne.n	800b0f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	2101      	movs	r1, #1
 800b106:	fa01 f303 	lsl.w	r3, r1, r3
 800b10a:	041b      	lsls	r3, r3, #16
 800b10c:	43db      	mvns	r3, r3
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b114:	4013      	ands	r3, r2
 800b116:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	f003 030f 	and.w	r3, r3, #15
 800b128:	2101      	movs	r1, #1
 800b12a:	fa01 f303 	lsl.w	r3, r1, r3
 800b12e:	041b      	lsls	r3, r3, #16
 800b130:	43db      	mvns	r3, r3
 800b132:	68f9      	ldr	r1, [r7, #12]
 800b134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b138:	4013      	ands	r3, r2
 800b13a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	0159      	lsls	r1, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	440b      	add	r3, r1
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	4619      	mov	r1, r3
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <USB_DeactivateEndpoint+0x1b4>)
 800b15a:	4013      	ands	r3, r2
 800b15c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	ec337800 	.word	0xec337800
 800b170:	eff37800 	.word	0xeff37800

0800b174 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af02      	add	r7, sp, #8
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b01      	cmp	r3, #1
 800b192:	f040 815c 	bne.w	800b44e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d132      	bne.n	800b204 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	0151      	lsls	r1, r2, #5
 800b1b0:	69fa      	ldr	r2, [r7, #28]
 800b1b2:	440a      	add	r2, r1
 800b1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	69fa      	ldr	r2, [r7, #28]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	015a      	lsls	r2, r3, #5
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	69ba      	ldr	r2, [r7, #24]
 800b1f2:	0151      	lsls	r1, r2, #5
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	440a      	add	r2, r1
 800b1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fc:	0cdb      	lsrs	r3, r3, #19
 800b1fe:	04db      	lsls	r3, r3, #19
 800b200:	6113      	str	r3, [r2, #16]
 800b202:	e074      	b.n	800b2ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	0151      	lsls	r1, r2, #5
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	440a      	add	r2, r1
 800b21a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b21e:	0cdb      	lsrs	r3, r3, #19
 800b220:	04db      	lsls	r3, r3, #19
 800b222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b242:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b254:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6999      	ldr	r1, [r3, #24]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	440b      	add	r3, r1
 800b260:	1e59      	subs	r1, r3, #1
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	fbb1 f3f3 	udiv	r3, r1, r3
 800b26a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b26c:	4b9d      	ldr	r3, [pc, #628]	; (800b4e4 <USB_EPStartXfer+0x370>)
 800b26e:	400b      	ands	r3, r1
 800b270:	69b9      	ldr	r1, [r7, #24]
 800b272:	0148      	lsls	r0, r1, #5
 800b274:	69f9      	ldr	r1, [r7, #28]
 800b276:	4401      	add	r1, r0
 800b278:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b27c:	4313      	orrs	r3, r2
 800b27e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28c:	691a      	ldr	r2, [r3, #16]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b296:	69b9      	ldr	r1, [r7, #24]
 800b298:	0148      	lsls	r0, r1, #5
 800b29a:	69f9      	ldr	r1, [r7, #28]
 800b29c:	4401      	add	r1, r0
 800b29e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	791b      	ldrb	r3, [r3, #4]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d11f      	bne.n	800b2ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	015a      	lsls	r2, r3, #5
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	0151      	lsls	r1, r2, #5
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	440a      	add	r2, r1
 800b2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b2cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	0151      	lsls	r1, r2, #5
 800b2e0:	69fa      	ldr	r2, [r7, #28]
 800b2e2:	440a      	add	r2, r1
 800b2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d14b      	bne.n	800b38c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b308:	461a      	mov	r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	791b      	ldrb	r3, [r3, #4]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d128      	bne.n	800b36a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b324:	2b00      	cmp	r3, #0
 800b326:	d110      	bne.n	800b34a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	0151      	lsls	r1, r2, #5
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	440a      	add	r2, r1
 800b33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	e00f      	b.n	800b36a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	0151      	lsls	r1, r2, #5
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	440a      	add	r2, r1
 800b360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b368:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	4413      	add	r3, r2
 800b372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	0151      	lsls	r1, r2, #5
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	440a      	add	r2, r1
 800b380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	e133      	b.n	800b5f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	791b      	ldrb	r3, [r3, #4]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d015      	beq.n	800b3e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 811b 	beq.w	800b5f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	f003 030f 	and.w	r3, r3, #15
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d4:	69f9      	ldr	r1, [r7, #28]
 800b3d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	634b      	str	r3, [r1, #52]	; 0x34
 800b3de:	e109      	b.n	800b5f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d110      	bne.n	800b412 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	e00f      	b.n	800b432 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	440a      	add	r2, r1
 800b428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b430:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	6919      	ldr	r1, [r3, #16]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	781a      	ldrb	r2, [r3, #0]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	b298      	uxth	r0, r3
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	4603      	mov	r3, r0
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 fade 	bl	800ba08 <USB_WritePacket>
 800b44c:	e0d2      	b.n	800b5f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	0151      	lsls	r1, r2, #5
 800b460:	69fa      	ldr	r2, [r7, #28]
 800b462:	440a      	add	r2, r1
 800b464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b468:	0cdb      	lsrs	r3, r3, #19
 800b46a:	04db      	lsls	r3, r3, #19
 800b46c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	0151      	lsls	r1, r2, #5
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	440a      	add	r2, r1
 800b484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b48c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b490:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d126      	bne.n	800b4e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4b0:	69b9      	ldr	r1, [r7, #24]
 800b4b2:	0148      	lsls	r0, r1, #5
 800b4b4:	69f9      	ldr	r1, [r7, #28]
 800b4b6:	4401      	add	r1, r0
 800b4b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	69fa      	ldr	r2, [r7, #28]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4de:	6113      	str	r3, [r2, #16]
 800b4e0:	e03a      	b.n	800b558 <USB_EPStartXfer+0x3e4>
 800b4e2:	bf00      	nop
 800b4e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	699a      	ldr	r2, [r3, #24]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	1e5a      	subs	r2, r3, #1
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	8afa      	ldrh	r2, [r7, #22]
 800b504:	fb03 f202 	mul.w	r2, r3, r2
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	4413      	add	r3, r2
 800b514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b518:	691a      	ldr	r2, [r3, #16]
 800b51a:	8afb      	ldrh	r3, [r7, #22]
 800b51c:	04d9      	lsls	r1, r3, #19
 800b51e:	4b38      	ldr	r3, [pc, #224]	; (800b600 <USB_EPStartXfer+0x48c>)
 800b520:	400b      	ands	r3, r1
 800b522:	69b9      	ldr	r1, [r7, #24]
 800b524:	0148      	lsls	r0, r1, #5
 800b526:	69f9      	ldr	r1, [r7, #28]
 800b528:	4401      	add	r1, r0
 800b52a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b52e:	4313      	orrs	r3, r2
 800b530:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b548:	69b9      	ldr	r1, [r7, #24]
 800b54a:	0148      	lsls	r0, r1, #5
 800b54c:	69f9      	ldr	r1, [r7, #28]
 800b54e:	4401      	add	r1, r0
 800b550:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b554:	4313      	orrs	r3, r2
 800b556:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d10d      	bne.n	800b57a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	6919      	ldr	r1, [r3, #16]
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	4413      	add	r3, r2
 800b572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b576:	460a      	mov	r2, r1
 800b578:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	791b      	ldrb	r3, [r3, #4]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d128      	bne.n	800b5d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d110      	bne.n	800b5b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	015a      	lsls	r2, r3, #5
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	4413      	add	r3, r2
 800b59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	0151      	lsls	r1, r2, #5
 800b5a4:	69fa      	ldr	r2, [r7, #28]
 800b5a6:	440a      	add	r2, r1
 800b5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	e00f      	b.n	800b5d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	0151      	lsls	r1, r2, #5
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	440a      	add	r2, r1
 800b5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	0151      	lsls	r1, r2, #5
 800b5e6:	69fa      	ldr	r2, [r7, #28]
 800b5e8:	440a      	add	r2, r1
 800b5ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3720      	adds	r7, #32
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	1ff80000 	.word	0x1ff80000

0800b604 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b604:	b480      	push	{r7}
 800b606:	b087      	sub	sp, #28
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	4613      	mov	r3, r2
 800b610:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	785b      	ldrb	r3, [r3, #1]
 800b620:	2b01      	cmp	r3, #1
 800b622:	f040 80ce 	bne.w	800b7c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d132      	bne.n	800b694 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	0151      	lsls	r1, r2, #5
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	440a      	add	r2, r1
 800b644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b64c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	0151      	lsls	r1, r2, #5
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	440a      	add	r2, r1
 800b668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b66c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	0151      	lsls	r1, r2, #5
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	440a      	add	r2, r1
 800b688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68c:	0cdb      	lsrs	r3, r3, #19
 800b68e:	04db      	lsls	r3, r3, #19
 800b690:	6113      	str	r3, [r2, #16]
 800b692:	e04e      	b.n	800b732 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	0151      	lsls	r1, r2, #5
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	440a      	add	r2, r1
 800b6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ae:	0cdb      	lsrs	r3, r3, #19
 800b6b0:	04db      	lsls	r3, r3, #19
 800b6b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	699a      	ldr	r2, [r3, #24]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d903      	bls.n	800b6ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	68da      	ldr	r2, [r3, #12]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	0151      	lsls	r1, r2, #5
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	440a      	add	r2, r1
 800b702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b70a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b718:	691a      	ldr	r2, [r3, #16]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b722:	6939      	ldr	r1, [r7, #16]
 800b724:	0148      	lsls	r0, r1, #5
 800b726:	6979      	ldr	r1, [r7, #20]
 800b728:	4401      	add	r1, r0
 800b72a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b72e:	4313      	orrs	r3, r2
 800b730:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d11e      	bne.n	800b776 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d009      	beq.n	800b754 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b74c:	461a      	mov	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	0151      	lsls	r1, r2, #5
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	440a      	add	r2, r1
 800b76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b76e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	e097      	b.n	800b8a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	0151      	lsls	r1, r2, #5
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	440a      	add	r2, r1
 800b78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b790:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b794:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8083 	beq.w	800b8a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	f003 030f 	and.w	r3, r3, #15
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b6:	6979      	ldr	r1, [r7, #20]
 800b7b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	634b      	str	r3, [r1, #52]	; 0x34
 800b7c0:	e071      	b.n	800b8a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	015a      	lsls	r2, r3, #5
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	0151      	lsls	r1, r2, #5
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	440a      	add	r2, r1
 800b7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7dc:	0cdb      	lsrs	r3, r3, #19
 800b7de:	04db      	lsls	r3, r3, #19
 800b7e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	0151      	lsls	r1, r2, #5
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	440a      	add	r2, r1
 800b7f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b804:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	015a      	lsls	r2, r3, #5
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	4413      	add	r3, r2
 800b826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	0151      	lsls	r1, r2, #5
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	440a      	add	r2, r1
 800b834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b83c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b854:	6939      	ldr	r1, [r7, #16]
 800b856:	0148      	lsls	r0, r1, #5
 800b858:	6979      	ldr	r1, [r7, #20]
 800b85a:	4401      	add	r1, r0
 800b85c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b860:	4313      	orrs	r3, r2
 800b862:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d10d      	bne.n	800b886 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6919      	ldr	r1, [r3, #16]
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	015a      	lsls	r2, r3, #5
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	4413      	add	r3, r2
 800b87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b882:	460a      	mov	r2, r1
 800b884:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	0151      	lsls	r1, r2, #5
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	440a      	add	r2, r1
 800b89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	371c      	adds	r7, #28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	785b      	ldrb	r3, [r3, #1]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d14a      	bne.n	800b968 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8ea:	f040 8086 	bne.w	800b9fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	7812      	ldrb	r2, [r2, #0]
 800b902:	0151      	lsls	r1, r2, #5
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	440a      	add	r2, r1
 800b908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b90c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b910:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	7812      	ldrb	r2, [r2, #0]
 800b926:	0151      	lsls	r1, r2, #5
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	440a      	add	r2, r1
 800b92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b934:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3301      	adds	r3, #1
 800b93a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b942:	4293      	cmp	r3, r2
 800b944:	d902      	bls.n	800b94c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	75fb      	strb	r3, [r7, #23]
          break;
 800b94a:	e056      	b.n	800b9fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b964:	d0e7      	beq.n	800b936 <USB_EPStopXfer+0x82>
 800b966:	e048      	b.n	800b9fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b97c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b980:	d13b      	bne.n	800b9fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	7812      	ldrb	r2, [r2, #0]
 800b996:	0151      	lsls	r1, r2, #5
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	440a      	add	r2, r1
 800b99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b9a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	7812      	ldrb	r2, [r2, #0]
 800b9ba:	0151      	lsls	r1, r2, #5
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	440a      	add	r2, r1
 800b9c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d902      	bls.n	800b9e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b9de:	e00c      	b.n	800b9fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f8:	d0e7      	beq.n	800b9ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	371c      	adds	r7, #28
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b089      	sub	sp, #36	; 0x24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4611      	mov	r1, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	460b      	mov	r3, r1
 800ba18:	71fb      	strb	r3, [r7, #7]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ba26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d123      	bne.n	800ba76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ba2e:	88bb      	ldrh	r3, [r7, #4]
 800ba30:	3303      	adds	r3, #3
 800ba32:	089b      	lsrs	r3, r3, #2
 800ba34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ba36:	2300      	movs	r3, #0
 800ba38:	61bb      	str	r3, [r7, #24]
 800ba3a:	e018      	b.n	800ba6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	031a      	lsls	r2, r3, #12
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba48:	461a      	mov	r2, r3
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	3301      	adds	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	3301      	adds	r3, #1
 800ba66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	61bb      	str	r3, [r7, #24]
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d3e2      	bcc.n	800ba3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3724      	adds	r7, #36	; 0x24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b08b      	sub	sp, #44	; 0x2c
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ba9a:	88fb      	ldrh	r3, [r7, #6]
 800ba9c:	089b      	lsrs	r3, r3, #2
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800baa2:	88fb      	ldrh	r3, [r7, #6]
 800baa4:	f003 0303 	and.w	r3, r3, #3
 800baa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800baaa:	2300      	movs	r3, #0
 800baac:	623b      	str	r3, [r7, #32]
 800baae:	e014      	b.n	800bada <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	601a      	str	r2, [r3, #0]
    pDest++;
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	3301      	adds	r3, #1
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	3301      	adds	r3, #1
 800bac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	3301      	adds	r3, #1
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	3301      	adds	r3, #1
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	3301      	adds	r3, #1
 800bad8:	623b      	str	r3, [r7, #32]
 800bada:	6a3a      	ldr	r2, [r7, #32]
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d3e6      	bcc.n	800bab0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bae2:	8bfb      	ldrh	r3, [r7, #30]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d01e      	beq.n	800bb26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf2:	461a      	mov	r2, r3
 800baf4:	f107 0310 	add.w	r3, r7, #16
 800baf8:	6812      	ldr	r2, [r2, #0]
 800bafa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	6a3b      	ldr	r3, [r7, #32]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	fa22 f303 	lsr.w	r3, r2, r3
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	701a      	strb	r2, [r3, #0]
      i++;
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	3301      	adds	r3, #1
 800bb12:	623b      	str	r3, [r7, #32]
      pDest++;
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	3301      	adds	r3, #1
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bb1a:	8bfb      	ldrh	r3, [r7, #30]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bb20:	8bfb      	ldrh	r3, [r7, #30]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1ea      	bne.n	800bafc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	372c      	adds	r7, #44	; 0x2c
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d12c      	bne.n	800bbaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	db12      	blt.n	800bb88 <USB_EPSetStall+0x54>
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00f      	beq.n	800bb88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	0151      	lsls	r1, r2, #5
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	440a      	add	r2, r1
 800bb7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	0151      	lsls	r1, r2, #5
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	440a      	add	r2, r1
 800bb9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	e02b      	b.n	800bc02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	015a      	lsls	r2, r3, #5
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	db12      	blt.n	800bbe2 <USB_EPSetStall+0xae>
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00f      	beq.n	800bbe2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	0151      	lsls	r1, r2, #5
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	440a      	add	r2, r1
 800bbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbe0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	015a      	lsls	r2, r3, #5
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	0151      	lsls	r1, r2, #5
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	440a      	add	r2, r1
 800bbf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	785b      	ldrb	r3, [r3, #1]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d128      	bne.n	800bc7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	0151      	lsls	r1, r2, #5
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	440a      	add	r2, r1
 800bc42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	791b      	ldrb	r3, [r3, #4]
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d003      	beq.n	800bc5c <USB_EPClearStall+0x4c>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	791b      	ldrb	r3, [r3, #4]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d138      	bne.n	800bcce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	015a      	lsls	r2, r3, #5
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	0151      	lsls	r1, r2, #5
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	440a      	add	r2, r1
 800bc72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	e027      	b.n	800bcce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	015a      	lsls	r2, r3, #5
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4413      	add	r3, r2
 800bc86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	0151      	lsls	r1, r2, #5
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	440a      	add	r2, r1
 800bc94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	791b      	ldrb	r3, [r3, #4]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d003      	beq.n	800bcae <USB_EPClearStall+0x9e>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	791b      	ldrb	r3, [r3, #4]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d10f      	bne.n	800bcce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	0151      	lsls	r1, r2, #5
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	440a      	add	r2, r1
 800bcc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bccc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bcfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bd10:	68f9      	ldr	r1, [r7, #12]
 800bd12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd16:	4313      	orrs	r3, r2
 800bd18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd56:	f023 0302 	bic.w	r3, r3, #2
 800bd5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b085      	sub	sp, #20
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd84:	f023 0303 	bic.w	r3, r3, #3
 800bd88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd98:	f043 0302 	orr.w	r3, r3, #2
 800bd9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	0c1b      	lsrs	r3, r3, #16
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be06:	b480      	push	{r7}
 800be08:	b085      	sub	sp, #20
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be22:	69db      	ldr	r3, [r3, #28]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	4013      	ands	r3, r2
 800be28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	b29b      	uxth	r3, r3
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	015a      	lsls	r2, r3, #5
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	4413      	add	r3, r2
 800be52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	4013      	ands	r3, r2
 800be66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be68:	68bb      	ldr	r3, [r7, #8]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be76:	b480      	push	{r7}
 800be78:	b087      	sub	sp, #28
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	f003 030f 	and.w	r3, r3, #15
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	fa22 f303 	lsr.w	r3, r2, r3
 800bea6:	01db      	lsls	r3, r3, #7
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4313      	orrs	r3, r2
 800beae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	4013      	ands	r3, r2
 800bec2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bec4:	68bb      	ldr	r3, [r7, #8]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	371c      	adds	r7, #28
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	f003 0301 	and.w	r3, r3, #1
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bf0c:	f023 0307 	bic.w	r3, r3, #7
 800bf10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	333c      	adds	r3, #60	; 0x3c
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	4a26      	ldr	r2, [pc, #152]	; (800bfec <USB_EP0_OutStart+0xb8>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d90a      	bls.n	800bf6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf68:	d101      	bne.n	800bf6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e037      	b.n	800bfde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf74:	461a      	mov	r2, r3
 800bf76:	2300      	movs	r3, #0
 800bf78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf9c:	f043 0318 	orr.w	r3, r3, #24
 800bfa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bfb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bfb6:	7afb      	ldrb	r3, [r7, #11]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d10f      	bne.n	800bfdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfd6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bfda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	4f54300a 	.word	0x4f54300a

0800bff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3301      	adds	r3, #1
 800c000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	4a13      	ldr	r2, [pc, #76]	; (800c054 <USB_CoreReset+0x64>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d901      	bls.n	800c00e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e01b      	b.n	800c046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	daf2      	bge.n	800bffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c016:	2300      	movs	r3, #0
 800c018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	f043 0201 	orr.w	r2, r3, #1
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3301      	adds	r3, #1
 800c02a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	4a09      	ldr	r2, [pc, #36]	; (800c054 <USB_CoreReset+0x64>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d901      	bls.n	800c038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c034:	2303      	movs	r3, #3
 800c036:	e006      	b.n	800c046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	2b01      	cmp	r3, #1
 800c042:	d0f0      	beq.n	800c026 <USB_CoreReset+0x36>

  return HAL_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	00030d40 	.word	0x00030d40

0800c058 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c064:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c068:	f002 fca0 	bl	800e9ac <USBD_static_malloc>
 800c06c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d109      	bne.n	800c088 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	32b0      	adds	r2, #176	; 0xb0
 800c07e:	2100      	movs	r1, #0
 800c080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c084:	2302      	movs	r3, #2
 800c086:	e0d4      	b.n	800c232 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c088:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c08c:	2100      	movs	r1, #0
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f002 fd0a 	bl	800eaa8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	32b0      	adds	r2, #176	; 0xb0
 800c09e:	68f9      	ldr	r1, [r7, #12]
 800c0a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	32b0      	adds	r2, #176	; 0xb0
 800c0ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7c1b      	ldrb	r3, [r3, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d138      	bne.n	800c132 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c0c0:	4b5e      	ldr	r3, [pc, #376]	; (800c23c <USBD_CDC_Init+0x1e4>)
 800c0c2:	7819      	ldrb	r1, [r3, #0]
 800c0c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f002 fb4b 	bl	800e766 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c0d0:	4b5a      	ldr	r3, [pc, #360]	; (800c23c <USBD_CDC_Init+0x1e4>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 020f 	and.w	r2, r3, #15
 800c0d8:	6879      	ldr	r1, [r7, #4]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	440b      	add	r3, r1
 800c0e4:	3324      	adds	r3, #36	; 0x24
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c0ea:	4b55      	ldr	r3, [pc, #340]	; (800c240 <USBD_CDC_Init+0x1e8>)
 800c0ec:	7819      	ldrb	r1, [r3, #0]
 800c0ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f002 fb36 	bl	800e766 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c0fa:	4b51      	ldr	r3, [pc, #324]	; (800c240 <USBD_CDC_Init+0x1e8>)
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	f003 020f 	and.w	r2, r3, #15
 800c102:	6879      	ldr	r1, [r7, #4]
 800c104:	4613      	mov	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	440b      	add	r3, r1
 800c10e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c112:	2201      	movs	r2, #1
 800c114:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c116:	4b4b      	ldr	r3, [pc, #300]	; (800c244 <USBD_CDC_Init+0x1ec>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	f003 020f 	and.w	r2, r3, #15
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	4613      	mov	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	3326      	adds	r3, #38	; 0x26
 800c12c:	2210      	movs	r2, #16
 800c12e:	801a      	strh	r2, [r3, #0]
 800c130:	e035      	b.n	800c19e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c132:	4b42      	ldr	r3, [pc, #264]	; (800c23c <USBD_CDC_Init+0x1e4>)
 800c134:	7819      	ldrb	r1, [r3, #0]
 800c136:	2340      	movs	r3, #64	; 0x40
 800c138:	2202      	movs	r2, #2
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f002 fb13 	bl	800e766 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c140:	4b3e      	ldr	r3, [pc, #248]	; (800c23c <USBD_CDC_Init+0x1e4>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f003 020f 	and.w	r2, r3, #15
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	440b      	add	r3, r1
 800c154:	3324      	adds	r3, #36	; 0x24
 800c156:	2201      	movs	r2, #1
 800c158:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c15a:	4b39      	ldr	r3, [pc, #228]	; (800c240 <USBD_CDC_Init+0x1e8>)
 800c15c:	7819      	ldrb	r1, [r3, #0]
 800c15e:	2340      	movs	r3, #64	; 0x40
 800c160:	2202      	movs	r2, #2
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f002 faff 	bl	800e766 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c168:	4b35      	ldr	r3, [pc, #212]	; (800c240 <USBD_CDC_Init+0x1e8>)
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	f003 020f 	and.w	r2, r3, #15
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	4613      	mov	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4413      	add	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	440b      	add	r3, r1
 800c17c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c180:	2201      	movs	r2, #1
 800c182:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c184:	4b2f      	ldr	r3, [pc, #188]	; (800c244 <USBD_CDC_Init+0x1ec>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 020f 	and.w	r2, r3, #15
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	3326      	adds	r3, #38	; 0x26
 800c19a:	2210      	movs	r2, #16
 800c19c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c19e:	4b29      	ldr	r3, [pc, #164]	; (800c244 <USBD_CDC_Init+0x1ec>)
 800c1a0:	7819      	ldrb	r1, [r3, #0]
 800c1a2:	2308      	movs	r3, #8
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f002 fadd 	bl	800e766 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c1ac:	4b25      	ldr	r3, [pc, #148]	; (800c244 <USBD_CDC_Init+0x1ec>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f003 020f 	and.w	r2, r3, #15
 800c1b4:	6879      	ldr	r1, [r7, #4]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	440b      	add	r3, r1
 800c1c0:	3324      	adds	r3, #36	; 0x24
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	33b0      	adds	r3, #176	; 0xb0
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	e018      	b.n	800c232 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7c1b      	ldrb	r3, [r3, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <USBD_CDC_Init+0x1e8>)
 800c20a:	7819      	ldrb	r1, [r3, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c212:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f002 fb94 	bl	800e944 <USBD_LL_PrepareReceive>
 800c21c:	e008      	b.n	800c230 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c21e:	4b08      	ldr	r3, [pc, #32]	; (800c240 <USBD_CDC_Init+0x1e8>)
 800c220:	7819      	ldrb	r1, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c228:	2340      	movs	r3, #64	; 0x40
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f002 fb8a 	bl	800e944 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000093 	.word	0x20000093
 800c240:	20000094 	.word	0x20000094
 800c244:	20000095 	.word	0x20000095

0800c248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c254:	4b3a      	ldr	r3, [pc, #232]	; (800c340 <USBD_CDC_DeInit+0xf8>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f002 faa9 	bl	800e7b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c260:	4b37      	ldr	r3, [pc, #220]	; (800c340 <USBD_CDC_DeInit+0xf8>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	f003 020f 	and.w	r2, r3, #15
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	440b      	add	r3, r1
 800c274:	3324      	adds	r3, #36	; 0x24
 800c276:	2200      	movs	r2, #0
 800c278:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c27a:	4b32      	ldr	r3, [pc, #200]	; (800c344 <USBD_CDC_DeInit+0xfc>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f002 fa96 	bl	800e7b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c286:	4b2f      	ldr	r3, [pc, #188]	; (800c344 <USBD_CDC_DeInit+0xfc>)
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	f003 020f 	and.w	r2, r3, #15
 800c28e:	6879      	ldr	r1, [r7, #4]
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	440b      	add	r3, r1
 800c29a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c29e:	2200      	movs	r2, #0
 800c2a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c2a2:	4b29      	ldr	r3, [pc, #164]	; (800c348 <USBD_CDC_DeInit+0x100>)
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f002 fa82 	bl	800e7b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c2ae:	4b26      	ldr	r3, [pc, #152]	; (800c348 <USBD_CDC_DeInit+0x100>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	f003 020f 	and.w	r2, r3, #15
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4413      	add	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	440b      	add	r3, r1
 800c2c2:	3324      	adds	r3, #36	; 0x24
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c2c8:	4b1f      	ldr	r3, [pc, #124]	; (800c348 <USBD_CDC_DeInit+0x100>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	f003 020f 	and.w	r2, r3, #15
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	440b      	add	r3, r1
 800c2dc:	3326      	adds	r3, #38	; 0x26
 800c2de:	2200      	movs	r2, #0
 800c2e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	32b0      	adds	r2, #176	; 0xb0
 800c2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d01f      	beq.n	800c334 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	33b0      	adds	r3, #176	; 0xb0
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	32b0      	adds	r2, #176	; 0xb0
 800c312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c316:	4618      	mov	r0, r3
 800c318:	f002 fb56 	bl	800e9c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	32b0      	adds	r2, #176	; 0xb0
 800c326:	2100      	movs	r1, #0
 800c328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	20000093 	.word	0x20000093
 800c344:	20000094 	.word	0x20000094
 800c348:	20000095 	.word	0x20000095

0800c34c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	32b0      	adds	r2, #176	; 0xb0
 800c360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c364:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c366:	2300      	movs	r3, #0
 800c368:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c378:	2303      	movs	r3, #3
 800c37a:	e0bf      	b.n	800c4fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c384:	2b00      	cmp	r3, #0
 800c386:	d050      	beq.n	800c42a <USBD_CDC_Setup+0xde>
 800c388:	2b20      	cmp	r3, #32
 800c38a:	f040 80af 	bne.w	800c4ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	88db      	ldrh	r3, [r3, #6]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d03a      	beq.n	800c40c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b25b      	sxtb	r3, r3
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	da1b      	bge.n	800c3d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	33b0      	adds	r3, #176	; 0xb0
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c3b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	88d2      	ldrh	r2, [r2, #6]
 800c3bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	88db      	ldrh	r3, [r3, #6]
 800c3c2:	2b07      	cmp	r3, #7
 800c3c4:	bf28      	it	cs
 800c3c6:	2307      	movcs	r3, #7
 800c3c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	89fa      	ldrh	r2, [r7, #14]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f001 fd43 	bl	800de5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c3d6:	e090      	b.n	800c4fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	785a      	ldrb	r2, [r3, #1]
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	88db      	ldrh	r3, [r3, #6]
 800c3e6:	2b3f      	cmp	r3, #63	; 0x3f
 800c3e8:	d803      	bhi.n	800c3f2 <USBD_CDC_Setup+0xa6>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	88db      	ldrh	r3, [r3, #6]
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	e000      	b.n	800c3f4 <USBD_CDC_Setup+0xa8>
 800c3f2:	2240      	movs	r2, #64	; 0x40
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c3fa:	6939      	ldr	r1, [r7, #16]
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c402:	461a      	mov	r2, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f001 fd55 	bl	800deb4 <USBD_CtlPrepareRx>
      break;
 800c40a:	e076      	b.n	800c4fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	33b0      	adds	r3, #176	; 0xb0
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	7850      	ldrb	r0, [r2, #1]
 800c422:	2200      	movs	r2, #0
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	4798      	blx	r3
      break;
 800c428:	e067      	b.n	800c4fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	2b0b      	cmp	r3, #11
 800c430:	d851      	bhi.n	800c4d6 <USBD_CDC_Setup+0x18a>
 800c432:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <USBD_CDC_Setup+0xec>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c469 	.word	0x0800c469
 800c43c:	0800c4e5 	.word	0x0800c4e5
 800c440:	0800c4d7 	.word	0x0800c4d7
 800c444:	0800c4d7 	.word	0x0800c4d7
 800c448:	0800c4d7 	.word	0x0800c4d7
 800c44c:	0800c4d7 	.word	0x0800c4d7
 800c450:	0800c4d7 	.word	0x0800c4d7
 800c454:	0800c4d7 	.word	0x0800c4d7
 800c458:	0800c4d7 	.word	0x0800c4d7
 800c45c:	0800c4d7 	.word	0x0800c4d7
 800c460:	0800c493 	.word	0x0800c493
 800c464:	0800c4bd 	.word	0x0800c4bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b03      	cmp	r3, #3
 800c472:	d107      	bne.n	800c484 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c474:	f107 030a 	add.w	r3, r7, #10
 800c478:	2202      	movs	r2, #2
 800c47a:	4619      	mov	r1, r3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f001 fced 	bl	800de5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c482:	e032      	b.n	800c4ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fc77 	bl	800dd7a <USBD_CtlError>
            ret = USBD_FAIL;
 800c48c:	2303      	movs	r3, #3
 800c48e:	75fb      	strb	r3, [r7, #23]
          break;
 800c490:	e02b      	b.n	800c4ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d107      	bne.n	800c4ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c49e:	f107 030d 	add.w	r3, r7, #13
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f001 fcd8 	bl	800de5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c4ac:	e01d      	b.n	800c4ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f001 fc62 	bl	800dd7a <USBD_CtlError>
            ret = USBD_FAIL;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c4ba:	e016      	b.n	800c4ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d00f      	beq.n	800c4e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f001 fc55 	bl	800dd7a <USBD_CtlError>
            ret = USBD_FAIL;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c4d4:	e008      	b.n	800c4e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 fc4e 	bl	800dd7a <USBD_CtlError>
          ret = USBD_FAIL;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c4e2:	e002      	b.n	800c4ea <USBD_CDC_Setup+0x19e>
          break;
 800c4e4:	bf00      	nop
 800c4e6:	e008      	b.n	800c4fa <USBD_CDC_Setup+0x1ae>
          break;
 800c4e8:	bf00      	nop
      }
      break;
 800c4ea:	e006      	b.n	800c4fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 fc43 	bl	800dd7a <USBD_CtlError>
      ret = USBD_FAIL;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c516:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	32b0      	adds	r2, #176	; 0xb0
 800c522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e065      	b.n	800c5fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	32b0      	adds	r2, #176	; 0xb0
 800c538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	f003 020f 	and.w	r2, r3, #15
 800c544:	6879      	ldr	r1, [r7, #4]
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	440b      	add	r3, r1
 800c550:	3318      	adds	r3, #24
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d02f      	beq.n	800c5b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	f003 020f 	and.w	r2, r3, #15
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	440b      	add	r3, r1
 800c56a:	3318      	adds	r3, #24
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	78fb      	ldrb	r3, [r7, #3]
 800c570:	f003 010f 	and.w	r1, r3, #15
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	460b      	mov	r3, r1
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	440b      	add	r3, r1
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4403      	add	r3, r0
 800c580:	3348      	adds	r3, #72	; 0x48
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	fbb2 f1f3 	udiv	r1, r2, r3
 800c588:	fb01 f303 	mul.w	r3, r1, r3
 800c58c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d112      	bne.n	800c5b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c592:	78fb      	ldrb	r3, [r7, #3]
 800c594:	f003 020f 	and.w	r2, r3, #15
 800c598:	6879      	ldr	r1, [r7, #4]
 800c59a:	4613      	mov	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	440b      	add	r3, r1
 800c5a4:	3318      	adds	r3, #24
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c5aa:	78f9      	ldrb	r1, [r7, #3]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f002 f9a6 	bl	800e902 <USBD_LL_Transmit>
 800c5b6:	e01f      	b.n	800c5f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	33b0      	adds	r3, #176	; 0xb0
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d010      	beq.n	800c5f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	33b0      	adds	r3, #176	; 0xb0
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c5f4:	78fa      	ldrb	r2, [r7, #3]
 800c5f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	460b      	mov	r3, r1
 800c60c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	32b0      	adds	r2, #176	; 0xb0
 800c618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	32b0      	adds	r2, #176	; 0xb0
 800c628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c630:	2303      	movs	r3, #3
 800c632:	e01a      	b.n	800c66a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f002 f9a4 	bl	800e986 <USBD_LL_GetRxDataSize>
 800c63e:	4602      	mov	r2, r0
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	33b0      	adds	r3, #176	; 0xb0
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c664:	4611      	mov	r1, r2
 800c666:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	32b0      	adds	r2, #176	; 0xb0
 800c684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c688:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c690:	2303      	movs	r3, #3
 800c692:	e025      	b.n	800c6e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	33b0      	adds	r3, #176	; 0xb0
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d01a      	beq.n	800c6de <USBD_CDC_EP0_RxReady+0x6c>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c6ae:	2bff      	cmp	r3, #255	; 0xff
 800c6b0:	d015      	beq.n	800c6de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	33b0      	adds	r3, #176	; 0xb0
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c6ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c6d2:	b292      	uxth	r2, r2
 800c6d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	22ff      	movs	r2, #255	; 0xff
 800c6da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6f0:	2182      	movs	r1, #130	; 0x82
 800c6f2:	4818      	ldr	r0, [pc, #96]	; (800c754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c6f4:	f000 fd09 	bl	800d10a <USBD_GetEpDesc>
 800c6f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	4815      	ldr	r0, [pc, #84]	; (800c754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c6fe:	f000 fd04 	bl	800d10a <USBD_GetEpDesc>
 800c702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c704:	2181      	movs	r1, #129	; 0x81
 800c706:	4813      	ldr	r0, [pc, #76]	; (800c754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c708:	f000 fcff 	bl	800d10a <USBD_GetEpDesc>
 800c70c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2210      	movs	r2, #16
 800c718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d006      	beq.n	800c72e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	2200      	movs	r2, #0
 800c724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c728:	711a      	strb	r2, [r3, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d006      	beq.n	800c742 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c73c:	711a      	strb	r2, [r3, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2243      	movs	r2, #67	; 0x43
 800c746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c748:	4b02      	ldr	r3, [pc, #8]	; (800c754 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20000050 	.word	0x20000050

0800c758 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c760:	2182      	movs	r1, #130	; 0x82
 800c762:	4818      	ldr	r0, [pc, #96]	; (800c7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c764:	f000 fcd1 	bl	800d10a <USBD_GetEpDesc>
 800c768:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c76a:	2101      	movs	r1, #1
 800c76c:	4815      	ldr	r0, [pc, #84]	; (800c7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c76e:	f000 fccc 	bl	800d10a <USBD_GetEpDesc>
 800c772:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c774:	2181      	movs	r1, #129	; 0x81
 800c776:	4813      	ldr	r0, [pc, #76]	; (800c7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c778:	f000 fcc7 	bl	800d10a <USBD_GetEpDesc>
 800c77c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2210      	movs	r2, #16
 800c788:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d006      	beq.n	800c79e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2200      	movs	r2, #0
 800c794:	711a      	strb	r2, [r3, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	f042 0202 	orr.w	r2, r2, #2
 800c79c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d006      	beq.n	800c7b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	711a      	strb	r2, [r3, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f042 0202 	orr.w	r2, r2, #2
 800c7b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2243      	movs	r2, #67	; 0x43
 800c7b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c7b8:	4b02      	ldr	r3, [pc, #8]	; (800c7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20000050 	.word	0x20000050

0800c7c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c7d0:	2182      	movs	r1, #130	; 0x82
 800c7d2:	4818      	ldr	r0, [pc, #96]	; (800c834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c7d4:	f000 fc99 	bl	800d10a <USBD_GetEpDesc>
 800c7d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c7da:	2101      	movs	r1, #1
 800c7dc:	4815      	ldr	r0, [pc, #84]	; (800c834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c7de:	f000 fc94 	bl	800d10a <USBD_GetEpDesc>
 800c7e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c7e4:	2181      	movs	r1, #129	; 0x81
 800c7e6:	4813      	ldr	r0, [pc, #76]	; (800c834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c7e8:	f000 fc8f 	bl	800d10a <USBD_GetEpDesc>
 800c7ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2210      	movs	r2, #16
 800c7f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d006      	beq.n	800c80e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2200      	movs	r2, #0
 800c804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c808:	711a      	strb	r2, [r3, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d006      	beq.n	800c822 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c81c:	711a      	strb	r2, [r3, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2243      	movs	r2, #67	; 0x43
 800c826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c828:	4b02      	ldr	r3, [pc, #8]	; (800c834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3718      	adds	r7, #24
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	20000050 	.word	0x20000050

0800c838 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	220a      	movs	r2, #10
 800c844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c846:	4b03      	ldr	r3, [pc, #12]	; (800c854 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	2000000c 	.word	0x2000000c

0800c858 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c868:	2303      	movs	r3, #3
 800c86a:	e009      	b.n	800c880 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	33b0      	adds	r3, #176	; 0xb0
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	32b0      	adds	r2, #176	; 0xb0
 800c8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e008      	b.n	800c8c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	371c      	adds	r7, #28
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	32b0      	adds	r2, #176	; 0xb0
 800c8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e004      	b.n	800c8fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3714      	adds	r7, #20
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
	...

0800c90c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	32b0      	adds	r2, #176	; 0xb0
 800c91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c922:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	32b0      	adds	r2, #176	; 0xb0
 800c92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d101      	bne.n	800c93a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c936:	2303      	movs	r3, #3
 800c938:	e018      	b.n	800c96c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7c1b      	ldrb	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c942:	4b0c      	ldr	r3, [pc, #48]	; (800c974 <USBD_CDC_ReceivePacket+0x68>)
 800c944:	7819      	ldrb	r1, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c94c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f001 fff7 	bl	800e944 <USBD_LL_PrepareReceive>
 800c956:	e008      	b.n	800c96a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c958:	4b06      	ldr	r3, [pc, #24]	; (800c974 <USBD_CDC_ReceivePacket+0x68>)
 800c95a:	7819      	ldrb	r1, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c962:	2340      	movs	r3, #64	; 0x40
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f001 ffed 	bl	800e944 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20000094 	.word	0x20000094

0800c978 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	4613      	mov	r3, r2
 800c984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e01f      	b.n	800c9d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	79fa      	ldrb	r2, [r7, #7]
 800c9c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f001 fe67 	bl	800e698 <USBD_LL_Init>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e025      	b.n	800ca3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	32ae      	adds	r2, #174	; 0xae
 800ca02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00f      	beq.n	800ca2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	32ae      	adds	r2, #174	; 0xae
 800ca16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1c:	f107 020e 	add.w	r2, r7, #14
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3
 800ca24:	4602      	mov	r2, r0
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 fe6f 	bl	800e730 <USBD_LL_Start>
 800ca52:	4603      	mov	r3, r0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d009      	beq.n	800caa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	78fa      	ldrb	r2, [r7, #3]
 800ca96:	4611      	mov	r1, r2
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	4798      	blx	r3
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	460b      	mov	r3, r1
 800cab4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	78fa      	ldrb	r2, [r7, #3]
 800cac4:	4611      	mov	r1, r2
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	4798      	blx	r3
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cad0:	2303      	movs	r3, #3
 800cad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f001 f908 	bl	800dd06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cb04:	461a      	mov	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb12:	f003 031f 	and.w	r3, r3, #31
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d01a      	beq.n	800cb50 <USBD_LL_SetupStage+0x72>
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d822      	bhi.n	800cb64 <USBD_LL_SetupStage+0x86>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <USBD_LL_SetupStage+0x4a>
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d00a      	beq.n	800cb3c <USBD_LL_SetupStage+0x5e>
 800cb26:	e01d      	b.n	800cb64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fb5f 	bl	800d1f4 <USBD_StdDevReq>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3a:	e020      	b.n	800cb7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fbc7 	bl	800d2d8 <USBD_StdItfReq>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb4e:	e016      	b.n	800cb7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fc29 	bl	800d3b0 <USBD_StdEPReq>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	73fb      	strb	r3, [r7, #15]
      break;
 800cb62:	e00c      	b.n	800cb7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f001 fe3c 	bl	800e7f0 <USBD_LL_StallEP>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb7c:	bf00      	nop
  }

  return ret;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	460b      	mov	r3, r1
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cb9a:	7afb      	ldrb	r3, [r7, #11]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d16e      	bne.n	800cc7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	f040 8098 	bne.w	800cce4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d913      	bls.n	800cbe8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	1ad2      	subs	r2, r2, r3
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	68da      	ldr	r2, [r3, #12]
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	bf28      	it	cs
 800cbda:	4613      	movcs	r3, r2
 800cbdc:	461a      	mov	r2, r3
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f001 f984 	bl	800deee <USBD_CtlContinueRx>
 800cbe6:	e07d      	b.n	800cce4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cbee:	f003 031f 	and.w	r3, r3, #31
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d014      	beq.n	800cc20 <USBD_LL_DataOutStage+0x98>
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d81d      	bhi.n	800cc36 <USBD_LL_DataOutStage+0xae>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d002      	beq.n	800cc04 <USBD_LL_DataOutStage+0x7c>
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d003      	beq.n	800cc0a <USBD_LL_DataOutStage+0x82>
 800cc02:	e018      	b.n	800cc36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	75bb      	strb	r3, [r7, #22]
            break;
 800cc08:	e018      	b.n	800cc3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	4619      	mov	r1, r3
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 fa5e 	bl	800d0d6 <USBD_CoreFindIF>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	75bb      	strb	r3, [r7, #22]
            break;
 800cc1e:	e00d      	b.n	800cc3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	4619      	mov	r1, r3
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 fa60 	bl	800d0f0 <USBD_CoreFindEP>
 800cc30:	4603      	mov	r3, r0
 800cc32:	75bb      	strb	r3, [r7, #22]
            break;
 800cc34:	e002      	b.n	800cc3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	75bb      	strb	r3, [r7, #22]
            break;
 800cc3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cc3c:	7dbb      	ldrb	r3, [r7, #22]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d119      	bne.n	800cc76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d113      	bne.n	800cc76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cc4e:	7dba      	ldrb	r2, [r7, #22]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	32ae      	adds	r2, #174	; 0xae
 800cc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cc5e:	7dba      	ldrb	r2, [r7, #22]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc66:	7dba      	ldrb	r2, [r7, #22]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	32ae      	adds	r2, #174	; 0xae
 800cc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f001 f94a 	bl	800df10 <USBD_CtlSendStatus>
 800cc7c:	e032      	b.n	800cce4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc7e:	7afb      	ldrb	r3, [r7, #11]
 800cc80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	4619      	mov	r1, r3
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 fa31 	bl	800d0f0 <USBD_CoreFindEP>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc92:	7dbb      	ldrb	r3, [r7, #22]
 800cc94:	2bff      	cmp	r3, #255	; 0xff
 800cc96:	d025      	beq.n	800cce4 <USBD_LL_DataOutStage+0x15c>
 800cc98:	7dbb      	ldrb	r3, [r7, #22]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d122      	bne.n	800cce4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b03      	cmp	r3, #3
 800cca8:	d117      	bne.n	800ccda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ccaa:	7dba      	ldrb	r2, [r7, #22]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	32ae      	adds	r2, #174	; 0xae
 800ccb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00f      	beq.n	800ccda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ccba:	7dba      	ldrb	r2, [r7, #22]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ccc2:	7dba      	ldrb	r2, [r7, #22]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	32ae      	adds	r2, #174	; 0xae
 800ccc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	7afa      	ldrb	r2, [r7, #11]
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	4798      	blx	r3
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	e000      	b.n	800cce6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b086      	sub	sp, #24
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	607a      	str	r2, [r7, #4]
 800ccfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ccfc:	7afb      	ldrb	r3, [r7, #11]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d16f      	bne.n	800cde2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3314      	adds	r3, #20
 800cd06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d15a      	bne.n	800cdc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	689a      	ldr	r2, [r3, #8]
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d914      	bls.n	800cd48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	689a      	ldr	r2, [r3, #8]
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	1ad2      	subs	r2, r2, r3
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	461a      	mov	r2, r3
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f001 f8ac 	bl	800de92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	2100      	movs	r1, #0
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f001 fdff 	bl	800e944 <USBD_LL_PrepareReceive>
 800cd46:	e03f      	b.n	800cdc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d11c      	bne.n	800cd8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d316      	bcc.n	800cd8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d20f      	bcs.n	800cd8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd6e:	2200      	movs	r2, #0
 800cd70:	2100      	movs	r1, #0
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f001 f88d 	bl	800de92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd80:	2300      	movs	r3, #0
 800cd82:	2200      	movs	r2, #0
 800cd84:	2100      	movs	r1, #0
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f001 fddc 	bl	800e944 <USBD_LL_PrepareReceive>
 800cd8c:	e01c      	b.n	800cdc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d10f      	bne.n	800cdba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d009      	beq.n	800cdba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdba:	2180      	movs	r1, #128	; 0x80
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f001 fd17 	bl	800e7f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f001 f8b7 	bl	800df36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d03a      	beq.n	800ce48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7ff fe42 	bl	800ca5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cde0:	e032      	b.n	800ce48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cde2:	7afb      	ldrb	r3, [r7, #11]
 800cde4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	4619      	mov	r1, r3
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f000 f97f 	bl	800d0f0 <USBD_CoreFindEP>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	2bff      	cmp	r3, #255	; 0xff
 800cdfa:	d025      	beq.n	800ce48 <USBD_LL_DataInStage+0x15a>
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d122      	bne.n	800ce48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d11c      	bne.n	800ce48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ce0e:	7dfa      	ldrb	r2, [r7, #23]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	32ae      	adds	r2, #174	; 0xae
 800ce14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce18:	695b      	ldr	r3, [r3, #20]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d014      	beq.n	800ce48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ce1e:	7dfa      	ldrb	r2, [r7, #23]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ce26:	7dfa      	ldrb	r2, [r7, #23]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	32ae      	adds	r2, #174	; 0xae
 800ce2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	7afa      	ldrb	r2, [r7, #11]
 800ce34:	4611      	mov	r1, r2
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	4798      	blx	r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ce3e:	7dbb      	ldrb	r3, [r7, #22]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ce44:	7dbb      	ldrb	r3, [r7, #22]
 800ce46:	e000      	b.n	800ce4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d014      	beq.n	800ceb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00e      	beq.n	800ceb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	6852      	ldr	r2, [r2, #4]
 800cea6:	b2d2      	uxtb	r2, r2
 800cea8:	4611      	mov	r1, r2
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	4798      	blx	r3
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ceb8:	2340      	movs	r3, #64	; 0x40
 800ceba:	2200      	movs	r2, #0
 800cebc:	2100      	movs	r1, #0
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f001 fc51 	bl	800e766 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2240      	movs	r2, #64	; 0x40
 800ced0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ced4:	2340      	movs	r3, #64	; 0x40
 800ced6:	2200      	movs	r2, #0
 800ced8:	2180      	movs	r1, #128	; 0x80
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f001 fc43 	bl	800e766 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2240      	movs	r2, #64	; 0x40
 800ceea:	621a      	str	r2, [r3, #32]

  return ret;
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	78fa      	ldrb	r2, [r7, #3]
 800cf06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2204      	movs	r2, #4
 800cf30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b083      	sub	sp, #12
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b04      	cmp	r3, #4
 800cf54:	d106      	bne.n	800cf64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d110      	bne.n	800cfa8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00b      	beq.n	800cfa8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	32ae      	adds	r2, #174	; 0xae
 800cfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e01c      	b.n	800d00e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d115      	bne.n	800d00c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	32ae      	adds	r2, #174	; 0xae
 800cfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfee:	6a1b      	ldr	r3, [r3, #32]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	32ae      	adds	r2, #174	; 0xae
 800cffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d002:	6a1b      	ldr	r3, [r3, #32]
 800d004:	78fa      	ldrb	r2, [r7, #3]
 800d006:	4611      	mov	r1, r2
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b082      	sub	sp, #8
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	460b      	mov	r3, r1
 800d020:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	32ae      	adds	r2, #174	; 0xae
 800d02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d034:	2303      	movs	r3, #3
 800d036:	e01c      	b.n	800d072 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b03      	cmp	r3, #3
 800d042:	d115      	bne.n	800d070 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	32ae      	adds	r2, #174	; 0xae
 800d04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00b      	beq.n	800d070 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	32ae      	adds	r2, #174	; 0xae
 800d062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	78fa      	ldrb	r2, [r7, #3]
 800d06a:	4611      	mov	r1, r2
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00e      	beq.n	800d0cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	6852      	ldr	r2, [r2, #4]
 800d0ba:	b2d2      	uxtb	r2, r2
 800d0bc:	4611      	mov	r1, r2
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	4798      	blx	r3
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b086      	sub	sp, #24
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d11e:	2300      	movs	r3, #0
 800d120:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	885b      	ldrh	r3, [r3, #2]
 800d126:	b29a      	uxth	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	429a      	cmp	r2, r3
 800d130:	d920      	bls.n	800d174 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	b29b      	uxth	r3, r3
 800d138:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d13a:	e013      	b.n	800d164 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d13c:	f107 030a 	add.w	r3, r7, #10
 800d140:	4619      	mov	r1, r3
 800d142:	6978      	ldr	r0, [r7, #20]
 800d144:	f000 f81b 	bl	800d17e <USBD_GetNextDesc>
 800d148:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	785b      	ldrb	r3, [r3, #1]
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d108      	bne.n	800d164 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	789b      	ldrb	r3, [r3, #2]
 800d15a:	78fa      	ldrb	r2, [r7, #3]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d008      	beq.n	800d172 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	885b      	ldrh	r3, [r3, #2]
 800d168:	b29a      	uxth	r2, r3
 800d16a:	897b      	ldrh	r3, [r7, #10]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d8e5      	bhi.n	800d13c <USBD_GetEpDesc+0x32>
 800d170:	e000      	b.n	800d174 <USBD_GetEpDesc+0x6a>
          break;
 800d172:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d174:	693b      	ldr	r3, [r7, #16]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d17e:	b480      	push	{r7}
 800d180:	b085      	sub	sp, #20
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	881a      	ldrh	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	b29b      	uxth	r3, r3
 800d196:	4413      	add	r3, r2
 800d198:	b29a      	uxth	r2, r3
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d1d6:	8a3b      	ldrh	r3, [r7, #16]
 800d1d8:	021b      	lsls	r3, r3, #8
 800d1da:	b21a      	sxth	r2, r3
 800d1dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	b21b      	sxth	r3, r3
 800d1e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1e6:	89fb      	ldrh	r3, [r7, #14]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	371c      	adds	r7, #28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d20a:	2b40      	cmp	r3, #64	; 0x40
 800d20c:	d005      	beq.n	800d21a <USBD_StdDevReq+0x26>
 800d20e:	2b40      	cmp	r3, #64	; 0x40
 800d210:	d857      	bhi.n	800d2c2 <USBD_StdDevReq+0xce>
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00f      	beq.n	800d236 <USBD_StdDevReq+0x42>
 800d216:	2b20      	cmp	r3, #32
 800d218:	d153      	bne.n	800d2c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	32ae      	adds	r2, #174	; 0xae
 800d224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	4798      	blx	r3
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]
      break;
 800d234:	e04a      	b.n	800d2cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	2b09      	cmp	r3, #9
 800d23c:	d83b      	bhi.n	800d2b6 <USBD_StdDevReq+0xc2>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <USBD_StdDevReq+0x50>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d299 	.word	0x0800d299
 800d248:	0800d2ad 	.word	0x0800d2ad
 800d24c:	0800d2b7 	.word	0x0800d2b7
 800d250:	0800d2a3 	.word	0x0800d2a3
 800d254:	0800d2b7 	.word	0x0800d2b7
 800d258:	0800d277 	.word	0x0800d277
 800d25c:	0800d26d 	.word	0x0800d26d
 800d260:	0800d2b7 	.word	0x0800d2b7
 800d264:	0800d28f 	.word	0x0800d28f
 800d268:	0800d281 	.word	0x0800d281
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 fa3c 	bl	800d6ec <USBD_GetDescriptor>
          break;
 800d274:	e024      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fba1 	bl	800d9c0 <USBD_SetAddress>
          break;
 800d27e:	e01f      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d280:	6839      	ldr	r1, [r7, #0]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fbe0 	bl	800da48 <USBD_SetConfig>
 800d288:	4603      	mov	r3, r0
 800d28a:	73fb      	strb	r3, [r7, #15]
          break;
 800d28c:	e018      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fc83 	bl	800db9c <USBD_GetConfig>
          break;
 800d296:	e013      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fcb4 	bl	800dc08 <USBD_GetStatus>
          break;
 800d2a0:	e00e      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fce3 	bl	800dc70 <USBD_SetFeature>
          break;
 800d2aa:	e009      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fd07 	bl	800dcc2 <USBD_ClrFeature>
          break;
 800d2b4:	e004      	b.n	800d2c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fd5e 	bl	800dd7a <USBD_CtlError>
          break;
 800d2be:	bf00      	nop
      }
      break;
 800d2c0:	e004      	b.n	800d2cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fd58 	bl	800dd7a <USBD_CtlError>
      break;
 800d2ca:	bf00      	nop
  }

  return ret;
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop

0800d2d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2ee:	2b40      	cmp	r3, #64	; 0x40
 800d2f0:	d005      	beq.n	800d2fe <USBD_StdItfReq+0x26>
 800d2f2:	2b40      	cmp	r3, #64	; 0x40
 800d2f4:	d852      	bhi.n	800d39c <USBD_StdItfReq+0xc4>
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <USBD_StdItfReq+0x26>
 800d2fa:	2b20      	cmp	r3, #32
 800d2fc:	d14e      	bne.n	800d39c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d304:	b2db      	uxtb	r3, r3
 800d306:	3b01      	subs	r3, #1
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d840      	bhi.n	800d38e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	889b      	ldrh	r3, [r3, #4]
 800d310:	b2db      	uxtb	r3, r3
 800d312:	2b01      	cmp	r3, #1
 800d314:	d836      	bhi.n	800d384 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	889b      	ldrh	r3, [r3, #4]
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fed9 	bl	800d0d6 <USBD_CoreFindIF>
 800d324:	4603      	mov	r3, r0
 800d326:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d328:	7bbb      	ldrb	r3, [r7, #14]
 800d32a:	2bff      	cmp	r3, #255	; 0xff
 800d32c:	d01d      	beq.n	800d36a <USBD_StdItfReq+0x92>
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d11a      	bne.n	800d36a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d334:	7bba      	ldrb	r2, [r7, #14]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	32ae      	adds	r2, #174	; 0xae
 800d33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00f      	beq.n	800d364 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d344:	7bba      	ldrb	r2, [r7, #14]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d34c:	7bba      	ldrb	r2, [r7, #14]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	32ae      	adds	r2, #174	; 0xae
 800d352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	4798      	blx	r3
 800d35e:	4603      	mov	r3, r0
 800d360:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d362:	e004      	b.n	800d36e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d364:	2303      	movs	r3, #3
 800d366:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d368:	e001      	b.n	800d36e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d36a:	2303      	movs	r3, #3
 800d36c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	88db      	ldrh	r3, [r3, #6]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d110      	bne.n	800d398 <USBD_StdItfReq+0xc0>
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10d      	bne.n	800d398 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fdc7 	bl	800df10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d382:	e009      	b.n	800d398 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fcf7 	bl	800dd7a <USBD_CtlError>
          break;
 800d38c:	e004      	b.n	800d398 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fcf2 	bl	800dd7a <USBD_CtlError>
          break;
 800d396:	e000      	b.n	800d39a <USBD_StdItfReq+0xc2>
          break;
 800d398:	bf00      	nop
      }
      break;
 800d39a:	e004      	b.n	800d3a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fceb 	bl	800dd7a <USBD_CtlError>
      break;
 800d3a4:	bf00      	nop
  }

  return ret;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	889b      	ldrh	r3, [r3, #4]
 800d3c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3cc:	2b40      	cmp	r3, #64	; 0x40
 800d3ce:	d007      	beq.n	800d3e0 <USBD_StdEPReq+0x30>
 800d3d0:	2b40      	cmp	r3, #64	; 0x40
 800d3d2:	f200 817f 	bhi.w	800d6d4 <USBD_StdEPReq+0x324>
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d02a      	beq.n	800d430 <USBD_StdEPReq+0x80>
 800d3da:	2b20      	cmp	r3, #32
 800d3dc:	f040 817a 	bne.w	800d6d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff fe83 	bl	800d0f0 <USBD_CoreFindEP>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3ee:	7b7b      	ldrb	r3, [r7, #13]
 800d3f0:	2bff      	cmp	r3, #255	; 0xff
 800d3f2:	f000 8174 	beq.w	800d6de <USBD_StdEPReq+0x32e>
 800d3f6:	7b7b      	ldrb	r3, [r7, #13]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f040 8170 	bne.w	800d6de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d3fe:	7b7a      	ldrb	r2, [r7, #13]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d406:	7b7a      	ldrb	r2, [r7, #13]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	32ae      	adds	r2, #174	; 0xae
 800d40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 8163 	beq.w	800d6de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d418:	7b7a      	ldrb	r2, [r7, #13]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	32ae      	adds	r2, #174	; 0xae
 800d41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	4798      	blx	r3
 800d42a:	4603      	mov	r3, r0
 800d42c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d42e:	e156      	b.n	800d6de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b03      	cmp	r3, #3
 800d436:	d008      	beq.n	800d44a <USBD_StdEPReq+0x9a>
 800d438:	2b03      	cmp	r3, #3
 800d43a:	f300 8145 	bgt.w	800d6c8 <USBD_StdEPReq+0x318>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f000 809b 	beq.w	800d57a <USBD_StdEPReq+0x1ca>
 800d444:	2b01      	cmp	r3, #1
 800d446:	d03c      	beq.n	800d4c2 <USBD_StdEPReq+0x112>
 800d448:	e13e      	b.n	800d6c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b02      	cmp	r3, #2
 800d454:	d002      	beq.n	800d45c <USBD_StdEPReq+0xac>
 800d456:	2b03      	cmp	r3, #3
 800d458:	d016      	beq.n	800d488 <USBD_StdEPReq+0xd8>
 800d45a:	e02c      	b.n	800d4b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00d      	beq.n	800d47e <USBD_StdEPReq+0xce>
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	2b80      	cmp	r3, #128	; 0x80
 800d466:	d00a      	beq.n	800d47e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d468:	7bbb      	ldrb	r3, [r7, #14]
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f001 f9bf 	bl	800e7f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d472:	2180      	movs	r1, #128	; 0x80
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f9bb 	bl	800e7f0 <USBD_LL_StallEP>
 800d47a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d47c:	e020      	b.n	800d4c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fc7a 	bl	800dd7a <USBD_CtlError>
              break;
 800d486:	e01b      	b.n	800d4c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	885b      	ldrh	r3, [r3, #2]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10e      	bne.n	800d4ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d490:	7bbb      	ldrb	r3, [r7, #14]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00b      	beq.n	800d4ae <USBD_StdEPReq+0xfe>
 800d496:	7bbb      	ldrb	r3, [r7, #14]
 800d498:	2b80      	cmp	r3, #128	; 0x80
 800d49a:	d008      	beq.n	800d4ae <USBD_StdEPReq+0xfe>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	88db      	ldrh	r3, [r3, #6]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d104      	bne.n	800d4ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f001 f9a1 	bl	800e7f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 fd2e 	bl	800df10 <USBD_CtlSendStatus>

              break;
 800d4b4:	e004      	b.n	800d4c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fc5e 	bl	800dd7a <USBD_CtlError>
              break;
 800d4be:	bf00      	nop
          }
          break;
 800d4c0:	e107      	b.n	800d6d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d002      	beq.n	800d4d4 <USBD_StdEPReq+0x124>
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d016      	beq.n	800d500 <USBD_StdEPReq+0x150>
 800d4d2:	e04b      	b.n	800d56c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4d4:	7bbb      	ldrb	r3, [r7, #14]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00d      	beq.n	800d4f6 <USBD_StdEPReq+0x146>
 800d4da:	7bbb      	ldrb	r3, [r7, #14]
 800d4dc:	2b80      	cmp	r3, #128	; 0x80
 800d4de:	d00a      	beq.n	800d4f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4e0:	7bbb      	ldrb	r3, [r7, #14]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f001 f983 	bl	800e7f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4ea:	2180      	movs	r1, #128	; 0x80
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 f97f 	bl	800e7f0 <USBD_LL_StallEP>
 800d4f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4f4:	e040      	b.n	800d578 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fc3e 	bl	800dd7a <USBD_CtlError>
              break;
 800d4fe:	e03b      	b.n	800d578 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	885b      	ldrh	r3, [r3, #2]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d136      	bne.n	800d576 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d508:	7bbb      	ldrb	r3, [r7, #14]
 800d50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d004      	beq.n	800d51c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d512:	7bbb      	ldrb	r3, [r7, #14]
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 f989 	bl	800e82e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fcf7 	bl	800df10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff fde2 	bl	800d0f0 <USBD_CoreFindEP>
 800d52c:	4603      	mov	r3, r0
 800d52e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d530:	7b7b      	ldrb	r3, [r7, #13]
 800d532:	2bff      	cmp	r3, #255	; 0xff
 800d534:	d01f      	beq.n	800d576 <USBD_StdEPReq+0x1c6>
 800d536:	7b7b      	ldrb	r3, [r7, #13]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d11c      	bne.n	800d576 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d53c:	7b7a      	ldrb	r2, [r7, #13]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d544:	7b7a      	ldrb	r2, [r7, #13]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	32ae      	adds	r2, #174	; 0xae
 800d54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d010      	beq.n	800d576 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d554:	7b7a      	ldrb	r2, [r7, #13]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	32ae      	adds	r2, #174	; 0xae
 800d55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	4798      	blx	r3
 800d566:	4603      	mov	r3, r0
 800d568:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d56a:	e004      	b.n	800d576 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fc03 	bl	800dd7a <USBD_CtlError>
              break;
 800d574:	e000      	b.n	800d578 <USBD_StdEPReq+0x1c8>
              break;
 800d576:	bf00      	nop
          }
          break;
 800d578:	e0ab      	b.n	800d6d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b02      	cmp	r3, #2
 800d584:	d002      	beq.n	800d58c <USBD_StdEPReq+0x1dc>
 800d586:	2b03      	cmp	r3, #3
 800d588:	d032      	beq.n	800d5f0 <USBD_StdEPReq+0x240>
 800d58a:	e097      	b.n	800d6bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d58c:	7bbb      	ldrb	r3, [r7, #14]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d007      	beq.n	800d5a2 <USBD_StdEPReq+0x1f2>
 800d592:	7bbb      	ldrb	r3, [r7, #14]
 800d594:	2b80      	cmp	r3, #128	; 0x80
 800d596:	d004      	beq.n	800d5a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fbed 	bl	800dd7a <USBD_CtlError>
                break;
 800d5a0:	e091      	b.n	800d6c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	da0b      	bge.n	800d5c2 <USBD_StdEPReq+0x212>
 800d5aa:	7bbb      	ldrb	r3, [r7, #14]
 800d5ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	3310      	adds	r3, #16
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	3304      	adds	r3, #4
 800d5c0:	e00b      	b.n	800d5da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5c2:	7bbb      	ldrb	r3, [r7, #14]
 800d5c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	3304      	adds	r3, #4
 800d5da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2202      	movs	r2, #2
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fc37 	bl	800de5c <USBD_CtlSendData>
              break;
 800d5ee:	e06a      	b.n	800d6c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	da11      	bge.n	800d61c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
 800d5fa:	f003 020f 	and.w	r2, r3, #15
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	4613      	mov	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4413      	add	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	440b      	add	r3, r1
 800d60a:	3324      	adds	r3, #36	; 0x24
 800d60c:	881b      	ldrh	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d117      	bne.n	800d642 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fbb0 	bl	800dd7a <USBD_CtlError>
                  break;
 800d61a:	e054      	b.n	800d6c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	f003 020f 	and.w	r2, r3, #15
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	4613      	mov	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	440b      	add	r3, r1
 800d62e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d104      	bne.n	800d642 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fb9d 	bl	800dd7a <USBD_CtlError>
                  break;
 800d640:	e041      	b.n	800d6c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d646:	2b00      	cmp	r3, #0
 800d648:	da0b      	bge.n	800d662 <USBD_StdEPReq+0x2b2>
 800d64a:	7bbb      	ldrb	r3, [r7, #14]
 800d64c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d650:	4613      	mov	r3, r2
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	4413      	add	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	3310      	adds	r3, #16
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	4413      	add	r3, r2
 800d65e:	3304      	adds	r3, #4
 800d660:	e00b      	b.n	800d67a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d662:	7bbb      	ldrb	r3, [r7, #14]
 800d664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d668:	4613      	mov	r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	4413      	add	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	4413      	add	r3, r2
 800d678:	3304      	adds	r3, #4
 800d67a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d67c:	7bbb      	ldrb	r3, [r7, #14]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <USBD_StdEPReq+0x2d8>
 800d682:	7bbb      	ldrb	r3, [r7, #14]
 800d684:	2b80      	cmp	r3, #128	; 0x80
 800d686:	d103      	bne.n	800d690 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	e00e      	b.n	800d6ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d690:	7bbb      	ldrb	r3, [r7, #14]
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f001 f8e9 	bl	800e86c <USBD_LL_IsStallEP>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	e002      	b.n	800d6ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fbd1 	bl	800de5c <USBD_CtlSendData>
              break;
 800d6ba:	e004      	b.n	800d6c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fb5b 	bl	800dd7a <USBD_CtlError>
              break;
 800d6c4:	bf00      	nop
          }
          break;
 800d6c6:	e004      	b.n	800d6d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fb55 	bl	800dd7a <USBD_CtlError>
          break;
 800d6d0:	bf00      	nop
      }
      break;
 800d6d2:	e005      	b.n	800d6e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d6d4:	6839      	ldr	r1, [r7, #0]
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fb4f 	bl	800dd7a <USBD_CtlError>
      break;
 800d6dc:	e000      	b.n	800d6e0 <USBD_StdEPReq+0x330>
      break;
 800d6de:	bf00      	nop
  }

  return ret;
 800d6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
	...

0800d6ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6fe:	2300      	movs	r3, #0
 800d700:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	885b      	ldrh	r3, [r3, #2]
 800d706:	0a1b      	lsrs	r3, r3, #8
 800d708:	b29b      	uxth	r3, r3
 800d70a:	3b01      	subs	r3, #1
 800d70c:	2b06      	cmp	r3, #6
 800d70e:	f200 8128 	bhi.w	800d962 <USBD_GetDescriptor+0x276>
 800d712:	a201      	add	r2, pc, #4	; (adr r2, 800d718 <USBD_GetDescriptor+0x2c>)
 800d714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d718:	0800d735 	.word	0x0800d735
 800d71c:	0800d74d 	.word	0x0800d74d
 800d720:	0800d78d 	.word	0x0800d78d
 800d724:	0800d963 	.word	0x0800d963
 800d728:	0800d963 	.word	0x0800d963
 800d72c:	0800d903 	.word	0x0800d903
 800d730:	0800d92f 	.word	0x0800d92f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	7c12      	ldrb	r2, [r2, #16]
 800d740:	f107 0108 	add.w	r1, r7, #8
 800d744:	4610      	mov	r0, r2
 800d746:	4798      	blx	r3
 800d748:	60f8      	str	r0, [r7, #12]
      break;
 800d74a:	e112      	b.n	800d972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7c1b      	ldrb	r3, [r3, #16]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10d      	bne.n	800d770 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75c:	f107 0208 	add.w	r2, r7, #8
 800d760:	4610      	mov	r0, r2
 800d762:	4798      	blx	r3
 800d764:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	3301      	adds	r3, #1
 800d76a:	2202      	movs	r2, #2
 800d76c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d76e:	e100      	b.n	800d972 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d778:	f107 0208 	add.w	r2, r7, #8
 800d77c:	4610      	mov	r0, r2
 800d77e:	4798      	blx	r3
 800d780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3301      	adds	r3, #1
 800d786:	2202      	movs	r2, #2
 800d788:	701a      	strb	r2, [r3, #0]
      break;
 800d78a:	e0f2      	b.n	800d972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	885b      	ldrh	r3, [r3, #2]
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b05      	cmp	r3, #5
 800d794:	f200 80ac 	bhi.w	800d8f0 <USBD_GetDescriptor+0x204>
 800d798:	a201      	add	r2, pc, #4	; (adr r2, 800d7a0 <USBD_GetDescriptor+0xb4>)
 800d79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79e:	bf00      	nop
 800d7a0:	0800d7b9 	.word	0x0800d7b9
 800d7a4:	0800d7ed 	.word	0x0800d7ed
 800d7a8:	0800d821 	.word	0x0800d821
 800d7ac:	0800d855 	.word	0x0800d855
 800d7b0:	0800d889 	.word	0x0800d889
 800d7b4:	0800d8bd 	.word	0x0800d8bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	7c12      	ldrb	r2, [r2, #16]
 800d7d0:	f107 0108 	add.w	r1, r7, #8
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	4798      	blx	r3
 800d7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7da:	e091      	b.n	800d900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 facb 	bl	800dd7a <USBD_CtlError>
            err++;
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ea:	e089      	b.n	800d900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00b      	beq.n	800d810 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	7c12      	ldrb	r2, [r2, #16]
 800d804:	f107 0108 	add.w	r1, r7, #8
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
 800d80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d80e:	e077      	b.n	800d900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fab1 	bl	800dd7a <USBD_CtlError>
            err++;
 800d818:	7afb      	ldrb	r3, [r7, #11]
 800d81a:	3301      	adds	r3, #1
 800d81c:	72fb      	strb	r3, [r7, #11]
          break;
 800d81e:	e06f      	b.n	800d900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00b      	beq.n	800d844 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	7c12      	ldrb	r2, [r2, #16]
 800d838:	f107 0108 	add.w	r1, r7, #8
 800d83c:	4610      	mov	r0, r2
 800d83e:	4798      	blx	r3
 800d840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d842:	e05d      	b.n	800d900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 fa97 	bl	800dd7a <USBD_CtlError>
            err++;
 800d84c:	7afb      	ldrb	r3, [r7, #11]
 800d84e:	3301      	adds	r3, #1
 800d850:	72fb      	strb	r3, [r7, #11]
          break;
 800d852:	e055      	b.n	800d900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00b      	beq.n	800d878 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	7c12      	ldrb	r2, [r2, #16]
 800d86c:	f107 0108 	add.w	r1, r7, #8
 800d870:	4610      	mov	r0, r2
 800d872:	4798      	blx	r3
 800d874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d876:	e043      	b.n	800d900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fa7d 	bl	800dd7a <USBD_CtlError>
            err++;
 800d880:	7afb      	ldrb	r3, [r7, #11]
 800d882:	3301      	adds	r3, #1
 800d884:	72fb      	strb	r3, [r7, #11]
          break;
 800d886:	e03b      	b.n	800d900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d88e:	695b      	ldr	r3, [r3, #20]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	7c12      	ldrb	r2, [r2, #16]
 800d8a0:	f107 0108 	add.w	r1, r7, #8
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	4798      	blx	r3
 800d8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8aa:	e029      	b.n	800d900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fa63 	bl	800dd7a <USBD_CtlError>
            err++;
 800d8b4:	7afb      	ldrb	r3, [r7, #11]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d8ba:	e021      	b.n	800d900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8c2:	699b      	ldr	r3, [r3, #24]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00b      	beq.n	800d8e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	7c12      	ldrb	r2, [r2, #16]
 800d8d4:	f107 0108 	add.w	r1, r7, #8
 800d8d8:	4610      	mov	r0, r2
 800d8da:	4798      	blx	r3
 800d8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8de:	e00f      	b.n	800d900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fa49 	bl	800dd7a <USBD_CtlError>
            err++;
 800d8e8:	7afb      	ldrb	r3, [r7, #11]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d8ee:	e007      	b.n	800d900 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fa41 	bl	800dd7a <USBD_CtlError>
          err++;
 800d8f8:	7afb      	ldrb	r3, [r7, #11]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8fe:	bf00      	nop
      }
      break;
 800d900:	e037      	b.n	800d972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	7c1b      	ldrb	r3, [r3, #16]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d109      	bne.n	800d91e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d912:	f107 0208 	add.w	r2, r7, #8
 800d916:	4610      	mov	r0, r2
 800d918:	4798      	blx	r3
 800d91a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d91c:	e029      	b.n	800d972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fa2a 	bl	800dd7a <USBD_CtlError>
        err++;
 800d926:	7afb      	ldrb	r3, [r7, #11]
 800d928:	3301      	adds	r3, #1
 800d92a:	72fb      	strb	r3, [r7, #11]
      break;
 800d92c:	e021      	b.n	800d972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	7c1b      	ldrb	r3, [r3, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10d      	bne.n	800d952 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93e:	f107 0208 	add.w	r2, r7, #8
 800d942:	4610      	mov	r0, r2
 800d944:	4798      	blx	r3
 800d946:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3301      	adds	r3, #1
 800d94c:	2207      	movs	r2, #7
 800d94e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d950:	e00f      	b.n	800d972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fa10 	bl	800dd7a <USBD_CtlError>
        err++;
 800d95a:	7afb      	ldrb	r3, [r7, #11]
 800d95c:	3301      	adds	r3, #1
 800d95e:	72fb      	strb	r3, [r7, #11]
      break;
 800d960:	e007      	b.n	800d972 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 fa08 	bl	800dd7a <USBD_CtlError>
      err++;
 800d96a:	7afb      	ldrb	r3, [r7, #11]
 800d96c:	3301      	adds	r3, #1
 800d96e:	72fb      	strb	r3, [r7, #11]
      break;
 800d970:	bf00      	nop
  }

  if (err != 0U)
 800d972:	7afb      	ldrb	r3, [r7, #11]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d11e      	bne.n	800d9b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d016      	beq.n	800d9ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d980:	893b      	ldrh	r3, [r7, #8]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00e      	beq.n	800d9a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	88da      	ldrh	r2, [r3, #6]
 800d98a:	893b      	ldrh	r3, [r7, #8]
 800d98c:	4293      	cmp	r3, r2
 800d98e:	bf28      	it	cs
 800d990:	4613      	movcs	r3, r2
 800d992:	b29b      	uxth	r3, r3
 800d994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d996:	893b      	ldrh	r3, [r7, #8]
 800d998:	461a      	mov	r2, r3
 800d99a:	68f9      	ldr	r1, [r7, #12]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fa5d 	bl	800de5c <USBD_CtlSendData>
 800d9a2:	e009      	b.n	800d9b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f9e7 	bl	800dd7a <USBD_CtlError>
 800d9ac:	e004      	b.n	800d9b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 faae 	bl	800df10 <USBD_CtlSendStatus>
 800d9b4:	e000      	b.n	800d9b8 <USBD_GetDescriptor+0x2cc>
    return;
 800d9b6:	bf00      	nop
  }
}
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop

0800d9c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	889b      	ldrh	r3, [r3, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d131      	bne.n	800da36 <USBD_SetAddress+0x76>
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	88db      	ldrh	r3, [r3, #6]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d12d      	bne.n	800da36 <USBD_SetAddress+0x76>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	885b      	ldrh	r3, [r3, #2]
 800d9de:	2b7f      	cmp	r3, #127	; 0x7f
 800d9e0:	d829      	bhi.n	800da36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	885b      	ldrh	r3, [r3, #2]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d104      	bne.n	800da04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9fa:	6839      	ldr	r1, [r7, #0]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f9bc 	bl	800dd7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da02:	e01d      	b.n	800da40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	7bfa      	ldrb	r2, [r7, #15]
 800da08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
 800da0e:	4619      	mov	r1, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 ff57 	bl	800e8c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa7a 	bl	800df10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d004      	beq.n	800da2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2202      	movs	r2, #2
 800da26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da2a:	e009      	b.n	800da40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da34:	e004      	b.n	800da40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f99e 	bl	800dd7a <USBD_CtlError>
  }
}
 800da3e:	bf00      	nop
 800da40:	bf00      	nop
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	885b      	ldrh	r3, [r3, #2]
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	4b4e      	ldr	r3, [pc, #312]	; (800db98 <USBD_SetConfig+0x150>)
 800da5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da60:	4b4d      	ldr	r3, [pc, #308]	; (800db98 <USBD_SetConfig+0x150>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d905      	bls.n	800da74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da68:	6839      	ldr	r1, [r7, #0]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f985 	bl	800dd7a <USBD_CtlError>
    return USBD_FAIL;
 800da70:	2303      	movs	r3, #3
 800da72:	e08c      	b.n	800db8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d002      	beq.n	800da86 <USBD_SetConfig+0x3e>
 800da80:	2b03      	cmp	r3, #3
 800da82:	d029      	beq.n	800dad8 <USBD_SetConfig+0x90>
 800da84:	e075      	b.n	800db72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da86:	4b44      	ldr	r3, [pc, #272]	; (800db98 <USBD_SetConfig+0x150>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d020      	beq.n	800dad0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da8e:	4b42      	ldr	r3, [pc, #264]	; (800db98 <USBD_SetConfig+0x150>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da98:	4b3f      	ldr	r3, [pc, #252]	; (800db98 <USBD_SetConfig+0x150>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7fe ffe7 	bl	800ca72 <USBD_SetClassConfig>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d008      	beq.n	800dac0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f962 	bl	800dd7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2202      	movs	r2, #2
 800daba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dabe:	e065      	b.n	800db8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fa25 	bl	800df10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2203      	movs	r2, #3
 800daca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dace:	e05d      	b.n	800db8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fa1d 	bl	800df10 <USBD_CtlSendStatus>
      break;
 800dad6:	e059      	b.n	800db8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dad8:	4b2f      	ldr	r3, [pc, #188]	; (800db98 <USBD_SetConfig+0x150>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d112      	bne.n	800db06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dae8:	4b2b      	ldr	r3, [pc, #172]	; (800db98 <USBD_SetConfig+0x150>)
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	461a      	mov	r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800daf2:	4b29      	ldr	r3, [pc, #164]	; (800db98 <USBD_SetConfig+0x150>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7fe ffd6 	bl	800caaa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fa06 	bl	800df10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db04:	e042      	b.n	800db8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800db06:	4b24      	ldr	r3, [pc, #144]	; (800db98 <USBD_SetConfig+0x150>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	461a      	mov	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	429a      	cmp	r2, r3
 800db12:	d02a      	beq.n	800db6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7fe ffc4 	bl	800caaa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800db22:	4b1d      	ldr	r3, [pc, #116]	; (800db98 <USBD_SetConfig+0x150>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db2c:	4b1a      	ldr	r3, [pc, #104]	; (800db98 <USBD_SetConfig+0x150>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fe ff9d 	bl	800ca72 <USBD_SetClassConfig>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00f      	beq.n	800db62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f918 	bl	800dd7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7fe ffa9 	bl	800caaa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2202      	movs	r2, #2
 800db5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db60:	e014      	b.n	800db8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f9d4 	bl	800df10 <USBD_CtlSendStatus>
      break;
 800db68:	e010      	b.n	800db8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f9d0 	bl	800df10 <USBD_CtlSendStatus>
      break;
 800db70:	e00c      	b.n	800db8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f900 	bl	800dd7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db7a:	4b07      	ldr	r3, [pc, #28]	; (800db98 <USBD_SetConfig+0x150>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	4619      	mov	r1, r3
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f7fe ff92 	bl	800caaa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db86:	2303      	movs	r3, #3
 800db88:	73fb      	strb	r3, [r7, #15]
      break;
 800db8a:	bf00      	nop
  }

  return ret;
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	20000794 	.word	0x20000794

0800db9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	88db      	ldrh	r3, [r3, #6]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d004      	beq.n	800dbb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 f8e2 	bl	800dd7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dbb6:	e023      	b.n	800dc00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	dc02      	bgt.n	800dbca <USBD_GetConfig+0x2e>
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dc03      	bgt.n	800dbd0 <USBD_GetConfig+0x34>
 800dbc8:	e015      	b.n	800dbf6 <USBD_GetConfig+0x5a>
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d00b      	beq.n	800dbe6 <USBD_GetConfig+0x4a>
 800dbce:	e012      	b.n	800dbf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3308      	adds	r3, #8
 800dbda:	2201      	movs	r2, #1
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f93c 	bl	800de5c <USBD_CtlSendData>
        break;
 800dbe4:	e00c      	b.n	800dc00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	2201      	movs	r2, #1
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f934 	bl	800de5c <USBD_CtlSendData>
        break;
 800dbf4:	e004      	b.n	800dc00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f8be 	bl	800dd7a <USBD_CtlError>
        break;
 800dbfe:	bf00      	nop
}
 800dc00:	bf00      	nop
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d81e      	bhi.n	800dc5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	88db      	ldrh	r3, [r3, #6]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d004      	beq.n	800dc32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 f8a5 	bl	800dd7a <USBD_CtlError>
        break;
 800dc30:	e01a      	b.n	800dc68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2201      	movs	r2, #1
 800dc36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d005      	beq.n	800dc4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	f043 0202 	orr.w	r2, r3, #2
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	330c      	adds	r3, #12
 800dc52:	2202      	movs	r2, #2
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f900 	bl	800de5c <USBD_CtlSendData>
      break;
 800dc5c:	e004      	b.n	800dc68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 f88a 	bl	800dd7a <USBD_CtlError>
      break;
 800dc66:	bf00      	nop
  }
}
 800dc68:	bf00      	nop
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	885b      	ldrh	r3, [r3, #2]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d107      	bne.n	800dc92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2201      	movs	r2, #1
 800dc86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f940 	bl	800df10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc90:	e013      	b.n	800dcba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	885b      	ldrh	r3, [r3, #2]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d10b      	bne.n	800dcb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	889b      	ldrh	r3, [r3, #4]
 800dc9e:	0a1b      	lsrs	r3, r3, #8
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f930 	bl	800df10 <USBD_CtlSendStatus>
}
 800dcb0:	e003      	b.n	800dcba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 f860 	bl	800dd7a <USBD_CtlError>
}
 800dcba:	bf00      	nop
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b082      	sub	sp, #8
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	d80b      	bhi.n	800dcf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	885b      	ldrh	r3, [r3, #2]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d10c      	bne.n	800dcfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f910 	bl	800df10 <USBD_CtlSendStatus>
      }
      break;
 800dcf0:	e004      	b.n	800dcfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f840 	bl	800dd7a <USBD_CtlError>
      break;
 800dcfa:	e000      	b.n	800dcfe <USBD_ClrFeature+0x3c>
      break;
 800dcfc:	bf00      	nop
  }
}
 800dcfe:	bf00      	nop
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b084      	sub	sp, #16
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
 800dd0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	781a      	ldrb	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	781a      	ldrb	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f7ff fa41 	bl	800d1b8 <SWAPBYTE>
 800dd36:	4603      	mov	r3, r0
 800dd38:	461a      	mov	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3301      	adds	r3, #1
 800dd42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3301      	adds	r3, #1
 800dd48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f7ff fa34 	bl	800d1b8 <SWAPBYTE>
 800dd50:	4603      	mov	r3, r0
 800dd52:	461a      	mov	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3301      	adds	r3, #1
 800dd62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff fa27 	bl	800d1b8 <SWAPBYTE>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	80da      	strh	r2, [r3, #6]
}
 800dd72:	bf00      	nop
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b082      	sub	sp, #8
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd84:	2180      	movs	r1, #128	; 0x80
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fd32 	bl	800e7f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fd2e 	bl	800e7f0 <USBD_LL_StallEP>
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d036      	beq.n	800de20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ddb6:	6938      	ldr	r0, [r7, #16]
 800ddb8:	f000 f836 	bl	800de28 <USBD_GetLen>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	4413      	add	r3, r2
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	7812      	ldrb	r2, [r2, #0]
 800ddd4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddd6:	7dfb      	ldrb	r3, [r7, #23]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dddc:	7dfb      	ldrb	r3, [r7, #23]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	4413      	add	r3, r2
 800dde2:	2203      	movs	r2, #3
 800dde4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	3301      	adds	r3, #1
 800ddea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ddec:	e013      	b.n	800de16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	7812      	ldrb	r2, [r2, #0]
 800ddf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	613b      	str	r3, [r7, #16]
    idx++;
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	3301      	adds	r3, #1
 800de04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de06:	7dfb      	ldrb	r3, [r7, #23]
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	4413      	add	r3, r2
 800de0c:	2200      	movs	r2, #0
 800de0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800de10:	7dfb      	ldrb	r3, [r7, #23]
 800de12:	3301      	adds	r3, #1
 800de14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1e7      	bne.n	800ddee <USBD_GetString+0x52>
 800de1e:	e000      	b.n	800de22 <USBD_GetString+0x86>
    return;
 800de20:	bf00      	nop
  }
}
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de38:	e005      	b.n	800de46 <USBD_GetLen+0x1e>
  {
    len++;
 800de3a:	7bfb      	ldrb	r3, [r7, #15]
 800de3c:	3301      	adds	r3, #1
 800de3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	3301      	adds	r3, #1
 800de44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1f5      	bne.n	800de3a <USBD_GetLen+0x12>
  }

  return len;
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3714      	adds	r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2202      	movs	r2, #2
 800de6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	2100      	movs	r1, #0
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f000 fd3d 	bl	800e902 <USBD_LL_Transmit>

  return USBD_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b084      	sub	sp, #16
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	2100      	movs	r1, #0
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f000 fd2c 	bl	800e902 <USBD_LL_Transmit>

  return USBD_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2203      	movs	r2, #3
 800dec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	2100      	movs	r1, #0
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 fd30 	bl	800e944 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b084      	sub	sp, #16
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	2100      	movs	r1, #0
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f000 fd1f 	bl	800e944 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2204      	movs	r2, #4
 800df1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df20:	2300      	movs	r3, #0
 800df22:	2200      	movs	r2, #0
 800df24:	2100      	movs	r1, #0
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 fceb 	bl	800e902 <USBD_LL_Transmit>

  return USBD_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b082      	sub	sp, #8
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2205      	movs	r2, #5
 800df42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df46:	2300      	movs	r3, #0
 800df48:	2200      	movs	r2, #0
 800df4a:	2100      	movs	r1, #0
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fcf9 	bl	800e944 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df52:	2300      	movs	r3, #0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df60:	2200      	movs	r2, #0
 800df62:	4912      	ldr	r1, [pc, #72]	; (800dfac <MX_USB_DEVICE_Init+0x50>)
 800df64:	4812      	ldr	r0, [pc, #72]	; (800dfb0 <MX_USB_DEVICE_Init+0x54>)
 800df66:	f7fe fd07 	bl	800c978 <USBD_Init>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df70:	f7f3 f942 	bl	80011f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df74:	490f      	ldr	r1, [pc, #60]	; (800dfb4 <MX_USB_DEVICE_Init+0x58>)
 800df76:	480e      	ldr	r0, [pc, #56]	; (800dfb0 <MX_USB_DEVICE_Init+0x54>)
 800df78:	f7fe fd2e 	bl	800c9d8 <USBD_RegisterClass>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df82:	f7f3 f939 	bl	80011f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df86:	490c      	ldr	r1, [pc, #48]	; (800dfb8 <MX_USB_DEVICE_Init+0x5c>)
 800df88:	4809      	ldr	r0, [pc, #36]	; (800dfb0 <MX_USB_DEVICE_Init+0x54>)
 800df8a:	f7fe fc65 	bl	800c858 <USBD_CDC_RegisterInterface>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df94:	f7f3 f930 	bl	80011f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df98:	4805      	ldr	r0, [pc, #20]	; (800dfb0 <MX_USB_DEVICE_Init+0x54>)
 800df9a:	f7fe fd53 	bl	800ca44 <USBD_Start>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dfa4:	f7f3 f928 	bl	80011f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dfa8:	bf00      	nop
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	200000ac 	.word	0x200000ac
 800dfb0:	20000798 	.word	0x20000798
 800dfb4:	20000018 	.word	0x20000018
 800dfb8:	20000098 	.word	0x20000098

0800dfbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4905      	ldr	r1, [pc, #20]	; (800dfd8 <CDC_Init_FS+0x1c>)
 800dfc4:	4805      	ldr	r0, [pc, #20]	; (800dfdc <CDC_Init_FS+0x20>)
 800dfc6:	f7fe fc61 	bl	800c88c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dfca:	4905      	ldr	r1, [pc, #20]	; (800dfe0 <CDC_Init_FS+0x24>)
 800dfcc:	4803      	ldr	r0, [pc, #12]	; (800dfdc <CDC_Init_FS+0x20>)
 800dfce:	f7fe fc7f 	bl	800c8d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dfd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	20001274 	.word	0x20001274
 800dfdc:	20000798 	.word	0x20000798
 800dfe0:	20000a74 	.word	0x20000a74

0800dfe4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dfe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	71fb      	strb	r3, [r7, #7]
 800e000:	4613      	mov	r3, r2
 800e002:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	2b23      	cmp	r3, #35	; 0x23
 800e008:	f200 808c 	bhi.w	800e124 <CDC_Control_FS+0x130>
 800e00c:	a201      	add	r2, pc, #4	; (adr r2, 800e014 <CDC_Control_FS+0x20>)
 800e00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e012:	bf00      	nop
 800e014:	0800e125 	.word	0x0800e125
 800e018:	0800e125 	.word	0x0800e125
 800e01c:	0800e125 	.word	0x0800e125
 800e020:	0800e125 	.word	0x0800e125
 800e024:	0800e125 	.word	0x0800e125
 800e028:	0800e125 	.word	0x0800e125
 800e02c:	0800e125 	.word	0x0800e125
 800e030:	0800e125 	.word	0x0800e125
 800e034:	0800e125 	.word	0x0800e125
 800e038:	0800e125 	.word	0x0800e125
 800e03c:	0800e125 	.word	0x0800e125
 800e040:	0800e125 	.word	0x0800e125
 800e044:	0800e125 	.word	0x0800e125
 800e048:	0800e125 	.word	0x0800e125
 800e04c:	0800e125 	.word	0x0800e125
 800e050:	0800e125 	.word	0x0800e125
 800e054:	0800e125 	.word	0x0800e125
 800e058:	0800e125 	.word	0x0800e125
 800e05c:	0800e125 	.word	0x0800e125
 800e060:	0800e125 	.word	0x0800e125
 800e064:	0800e125 	.word	0x0800e125
 800e068:	0800e125 	.word	0x0800e125
 800e06c:	0800e125 	.word	0x0800e125
 800e070:	0800e125 	.word	0x0800e125
 800e074:	0800e125 	.word	0x0800e125
 800e078:	0800e125 	.word	0x0800e125
 800e07c:	0800e125 	.word	0x0800e125
 800e080:	0800e125 	.word	0x0800e125
 800e084:	0800e125 	.word	0x0800e125
 800e088:	0800e125 	.word	0x0800e125
 800e08c:	0800e125 	.word	0x0800e125
 800e090:	0800e125 	.word	0x0800e125
 800e094:	0800e0a5 	.word	0x0800e0a5
 800e098:	0800e0df 	.word	0x0800e0df
 800e09c:	0800e125 	.word	0x0800e125
 800e0a0:	0800e125 	.word	0x0800e125
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	781a      	ldrb	r2, [r3, #0]
 800e0a8:	4b22      	ldr	r3, [pc, #136]	; (800e134 <CDC_Control_FS+0x140>)
 800e0aa:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	785a      	ldrb	r2, [r3, #1]
 800e0b0:	4b20      	ldr	r3, [pc, #128]	; (800e134 <CDC_Control_FS+0x140>)
 800e0b2:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	789a      	ldrb	r2, [r3, #2]
 800e0b8:	4b1e      	ldr	r3, [pc, #120]	; (800e134 <CDC_Control_FS+0x140>)
 800e0ba:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	78da      	ldrb	r2, [r3, #3]
 800e0c0:	4b1c      	ldr	r3, [pc, #112]	; (800e134 <CDC_Control_FS+0x140>)
 800e0c2:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	791a      	ldrb	r2, [r3, #4]
 800e0c8:	4b1a      	ldr	r3, [pc, #104]	; (800e134 <CDC_Control_FS+0x140>)
 800e0ca:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	795a      	ldrb	r2, [r3, #5]
 800e0d0:	4b18      	ldr	r3, [pc, #96]	; (800e134 <CDC_Control_FS+0x140>)
 800e0d2:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	799a      	ldrb	r2, [r3, #6]
 800e0d8:	4b16      	ldr	r3, [pc, #88]	; (800e134 <CDC_Control_FS+0x140>)
 800e0da:	719a      	strb	r2, [r3, #6]

    break;
 800e0dc:	e023      	b.n	800e126 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800e0de:	4b15      	ldr	r3, [pc, #84]	; (800e134 <CDC_Control_FS+0x140>)
 800e0e0:	781a      	ldrb	r2, [r3, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	4a12      	ldr	r2, [pc, #72]	; (800e134 <CDC_Control_FS+0x140>)
 800e0ec:	7852      	ldrb	r2, [r2, #1]
 800e0ee:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	3302      	adds	r3, #2
 800e0f4:	4a0f      	ldr	r2, [pc, #60]	; (800e134 <CDC_Control_FS+0x140>)
 800e0f6:	7892      	ldrb	r2, [r2, #2]
 800e0f8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	3303      	adds	r3, #3
 800e0fe:	4a0d      	ldr	r2, [pc, #52]	; (800e134 <CDC_Control_FS+0x140>)
 800e100:	78d2      	ldrb	r2, [r2, #3]
 800e102:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	3304      	adds	r3, #4
 800e108:	4a0a      	ldr	r2, [pc, #40]	; (800e134 <CDC_Control_FS+0x140>)
 800e10a:	7912      	ldrb	r2, [r2, #4]
 800e10c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	3305      	adds	r3, #5
 800e112:	4a08      	ldr	r2, [pc, #32]	; (800e134 <CDC_Control_FS+0x140>)
 800e114:	7952      	ldrb	r2, [r2, #5]
 800e116:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	3306      	adds	r3, #6
 800e11c:	4a05      	ldr	r2, [pc, #20]	; (800e134 <CDC_Control_FS+0x140>)
 800e11e:	7992      	ldrb	r2, [r2, #6]
 800e120:	701a      	strb	r2, [r3, #0]

    break;
 800e122:	e000      	b.n	800e126 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e124:	bf00      	nop
  }

  return (USBD_OK);
 800e126:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e128:	4618      	mov	r0, r3
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	20000554 	.word	0x20000554

0800e138 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	4808      	ldr	r0, [pc, #32]	; (800e168 <CDC_Receive_FS+0x30>)
 800e146:	f7fe fbc3 	bl	800c8d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e14a:	4807      	ldr	r0, [pc, #28]	; (800e168 <CDC_Receive_FS+0x30>)
 800e14c:	f7fe fbde 	bl	800c90c <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	b29b      	uxth	r3, r3
 800e156:	4619      	mov	r1, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7f3 f9ef 	bl	800153c <PDM_USB_Process>

  return (USBD_OK);
 800e15e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20000798 	.word	0x20000798

0800e16c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b087      	sub	sp, #28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	4613      	mov	r3, r2
 800e178:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e17e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e182:	4618      	mov	r0, r3
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
	...

0800e190 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	6039      	str	r1, [r7, #0]
 800e19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2212      	movs	r2, #18
 800e1a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e1a2:	4b03      	ldr	r3, [pc, #12]	; (800e1b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr
 800e1b0:	200000c8 	.word	0x200000c8

0800e1b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	6039      	str	r1, [r7, #0]
 800e1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	2204      	movs	r2, #4
 800e1c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e1c6:	4b03      	ldr	r3, [pc, #12]	; (800e1d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	200000dc 	.word	0x200000dc

0800e1d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	4603      	mov	r3, r0
 800e1e0:	6039      	str	r1, [r7, #0]
 800e1e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1e4:	79fb      	ldrb	r3, [r7, #7]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d105      	bne.n	800e1f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	4907      	ldr	r1, [pc, #28]	; (800e20c <USBD_FS_ProductStrDescriptor+0x34>)
 800e1ee:	4808      	ldr	r0, [pc, #32]	; (800e210 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1f0:	f7ff fdd4 	bl	800dd9c <USBD_GetString>
 800e1f4:	e004      	b.n	800e200 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	4904      	ldr	r1, [pc, #16]	; (800e20c <USBD_FS_ProductStrDescriptor+0x34>)
 800e1fa:	4805      	ldr	r0, [pc, #20]	; (800e210 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1fc:	f7ff fdce 	bl	800dd9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e200:	4b02      	ldr	r3, [pc, #8]	; (800e20c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	20001a74 	.word	0x20001a74
 800e210:	0800eccc 	.word	0x0800eccc

0800e214 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	4603      	mov	r3, r0
 800e21c:	6039      	str	r1, [r7, #0]
 800e21e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	4904      	ldr	r1, [pc, #16]	; (800e234 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e224:	4804      	ldr	r0, [pc, #16]	; (800e238 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e226:	f7ff fdb9 	bl	800dd9c <USBD_GetString>
  return USBD_StrDesc;
 800e22a:	4b02      	ldr	r3, [pc, #8]	; (800e234 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20001a74 	.word	0x20001a74
 800e238:	0800ece4 	.word	0x0800ece4

0800e23c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	6039      	str	r1, [r7, #0]
 800e246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	221a      	movs	r2, #26
 800e24c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e24e:	f000 f843 	bl	800e2d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e252:	4b02      	ldr	r3, [pc, #8]	; (800e25c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e254:	4618      	mov	r0, r3
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	200000e0 	.word	0x200000e0

0800e260 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	4603      	mov	r3, r0
 800e268:	6039      	str	r1, [r7, #0]
 800e26a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d105      	bne.n	800e27e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	4907      	ldr	r1, [pc, #28]	; (800e294 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e276:	4808      	ldr	r0, [pc, #32]	; (800e298 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e278:	f7ff fd90 	bl	800dd9c <USBD_GetString>
 800e27c:	e004      	b.n	800e288 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	4904      	ldr	r1, [pc, #16]	; (800e294 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e282:	4805      	ldr	r0, [pc, #20]	; (800e298 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e284:	f7ff fd8a 	bl	800dd9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e288:	4b02      	ldr	r3, [pc, #8]	; (800e294 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	20001a74 	.word	0x20001a74
 800e298:	0800ecf8 	.word	0x0800ecf8

0800e29c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	6039      	str	r1, [r7, #0]
 800e2a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d105      	bne.n	800e2ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	4907      	ldr	r1, [pc, #28]	; (800e2d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e2b2:	4808      	ldr	r0, [pc, #32]	; (800e2d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e2b4:	f7ff fd72 	bl	800dd9c <USBD_GetString>
 800e2b8:	e004      	b.n	800e2c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e2ba:	683a      	ldr	r2, [r7, #0]
 800e2bc:	4904      	ldr	r1, [pc, #16]	; (800e2d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e2be:	4805      	ldr	r0, [pc, #20]	; (800e2d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e2c0:	f7ff fd6c 	bl	800dd9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2c4:	4b02      	ldr	r3, [pc, #8]	; (800e2d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20001a74 	.word	0x20001a74
 800e2d4:	0800ed04 	.word	0x0800ed04

0800e2d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2de:	4b0f      	ldr	r3, [pc, #60]	; (800e31c <Get_SerialNum+0x44>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <Get_SerialNum+0x48>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	; (800e324 <Get_SerialNum+0x4c>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d009      	beq.n	800e312 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e2fe:	2208      	movs	r2, #8
 800e300:	4909      	ldr	r1, [pc, #36]	; (800e328 <Get_SerialNum+0x50>)
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f000 f814 	bl	800e330 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e308:	2204      	movs	r2, #4
 800e30a:	4908      	ldr	r1, [pc, #32]	; (800e32c <Get_SerialNum+0x54>)
 800e30c:	68b8      	ldr	r0, [r7, #8]
 800e30e:	f000 f80f 	bl	800e330 <IntToUnicode>
  }
}
 800e312:	bf00      	nop
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	1fff7a10 	.word	0x1fff7a10
 800e320:	1fff7a14 	.word	0x1fff7a14
 800e324:	1fff7a18 	.word	0x1fff7a18
 800e328:	200000e2 	.word	0x200000e2
 800e32c:	200000f2 	.word	0x200000f2

0800e330 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	4613      	mov	r3, r2
 800e33c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e342:	2300      	movs	r3, #0
 800e344:	75fb      	strb	r3, [r7, #23]
 800e346:	e027      	b.n	800e398 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	0f1b      	lsrs	r3, r3, #28
 800e34c:	2b09      	cmp	r3, #9
 800e34e:	d80b      	bhi.n	800e368 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	0f1b      	lsrs	r3, r3, #28
 800e354:	b2da      	uxtb	r2, r3
 800e356:	7dfb      	ldrb	r3, [r7, #23]
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	4619      	mov	r1, r3
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	440b      	add	r3, r1
 800e360:	3230      	adds	r2, #48	; 0x30
 800e362:	b2d2      	uxtb	r2, r2
 800e364:	701a      	strb	r2, [r3, #0]
 800e366:	e00a      	b.n	800e37e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	0f1b      	lsrs	r3, r3, #28
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	7dfb      	ldrb	r3, [r7, #23]
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	4619      	mov	r1, r3
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	440b      	add	r3, r1
 800e378:	3237      	adds	r2, #55	; 0x37
 800e37a:	b2d2      	uxtb	r2, r2
 800e37c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	011b      	lsls	r3, r3, #4
 800e382:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e384:	7dfb      	ldrb	r3, [r7, #23]
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	3301      	adds	r3, #1
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	4413      	add	r3, r2
 800e38e:	2200      	movs	r2, #0
 800e390:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e392:	7dfb      	ldrb	r3, [r7, #23]
 800e394:	3301      	adds	r3, #1
 800e396:	75fb      	strb	r3, [r7, #23]
 800e398:	7dfa      	ldrb	r2, [r7, #23]
 800e39a:	79fb      	ldrb	r3, [r7, #7]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d3d3      	bcc.n	800e348 <IntToUnicode+0x18>
  }
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	371c      	adds	r7, #28
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
	...

0800e3b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b0a0      	sub	sp, #128	; 0x80
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	605a      	str	r2, [r3, #4]
 800e3c2:	609a      	str	r2, [r3, #8]
 800e3c4:	60da      	str	r2, [r3, #12]
 800e3c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e3c8:	f107 0310 	add.w	r3, r7, #16
 800e3cc:	225c      	movs	r2, #92	; 0x5c
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 fb69 	bl	800eaa8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e3de:	d161      	bne.n	800e4a4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800e3e6:	2308      	movs	r3, #8
 800e3e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800e3ea:	23c0      	movs	r3, #192	; 0xc0
 800e3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800e3f2:	2304      	movs	r3, #4
 800e3f4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800e3fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e400:	f107 0310 	add.w	r3, r7, #16
 800e404:	4618      	mov	r0, r3
 800e406:	f7fa f84d 	bl	80084a4 <HAL_RCCEx_PeriphCLKConfig>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800e410:	f7f2 fef2 	bl	80011f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]
 800e418:	4b24      	ldr	r3, [pc, #144]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41c:	4a23      	ldr	r2, [pc, #140]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e41e:	f043 0301 	orr.w	r3, r3, #1
 800e422:	6313      	str	r3, [r2, #48]	; 0x30
 800e424:	4b21      	ldr	r3, [pc, #132]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	60fb      	str	r3, [r7, #12]
 800e42e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e430:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e434:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e436:	2300      	movs	r3, #0
 800e438:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e43a:	2300      	movs	r3, #0
 800e43c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e43e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e442:	4619      	mov	r1, r3
 800e444:	481a      	ldr	r0, [pc, #104]	; (800e4b0 <HAL_PCD_MspInit+0x100>)
 800e446:	f7f7 fb27 	bl	8005a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e44a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e44e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e450:	2302      	movs	r3, #2
 800e452:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e454:	2300      	movs	r3, #0
 800e456:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e458:	2303      	movs	r3, #3
 800e45a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e45c:	230a      	movs	r3, #10
 800e45e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e464:	4619      	mov	r1, r3
 800e466:	4812      	ldr	r0, [pc, #72]	; (800e4b0 <HAL_PCD_MspInit+0x100>)
 800e468:	f7f7 fb16 	bl	8005a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e46c:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e470:	4a0e      	ldr	r2, [pc, #56]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e476:	6353      	str	r3, [r2, #52]	; 0x34
 800e478:	2300      	movs	r3, #0
 800e47a:	60bb      	str	r3, [r7, #8]
 800e47c:	4b0b      	ldr	r3, [pc, #44]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e480:	4a0a      	ldr	r2, [pc, #40]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e486:	6453      	str	r3, [r2, #68]	; 0x44
 800e488:	4b08      	ldr	r3, [pc, #32]	; (800e4ac <HAL_PCD_MspInit+0xfc>)
 800e48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e490:	60bb      	str	r3, [r7, #8]
 800e492:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e494:	2200      	movs	r2, #0
 800e496:	2100      	movs	r1, #0
 800e498:	2043      	movs	r0, #67	; 0x43
 800e49a:	f7f6 ff2c 	bl	80052f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e49e:	2043      	movs	r0, #67	; 0x43
 800e4a0:	f7f6 ff45 	bl	800532e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4a4:	bf00      	nop
 800e4a6:	3780      	adds	r7, #128	; 0x80
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	40023800 	.word	0x40023800
 800e4b0:	40020000 	.word	0x40020000

0800e4b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f7fe fb07 	bl	800cade <USBD_LL_SetupStage>
}
 800e4d0:	bf00      	nop
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e4ea:	78fa      	ldrb	r2, [r7, #3]
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	00db      	lsls	r3, r3, #3
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	440b      	add	r3, r1
 800e4f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	78fb      	ldrb	r3, [r7, #3]
 800e500:	4619      	mov	r1, r3
 800e502:	f7fe fb41 	bl	800cb88 <USBD_LL_DataOutStage>
}
 800e506:	bf00      	nop
 800e508:	3708      	adds	r7, #8
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b082      	sub	sp, #8
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	460b      	mov	r3, r1
 800e518:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e520:	78fa      	ldrb	r2, [r7, #3]
 800e522:	6879      	ldr	r1, [r7, #4]
 800e524:	4613      	mov	r3, r2
 800e526:	00db      	lsls	r3, r3, #3
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	440b      	add	r3, r1
 800e52e:	334c      	adds	r3, #76	; 0x4c
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	78fb      	ldrb	r3, [r7, #3]
 800e534:	4619      	mov	r1, r3
 800e536:	f7fe fbda 	bl	800ccee <USBD_LL_DataInStage>
}
 800e53a:	bf00      	nop
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b082      	sub	sp, #8
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e550:	4618      	mov	r0, r3
 800e552:	f7fe fd0e 	bl	800cf72 <USBD_LL_SOF>
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e566:	2301      	movs	r3, #1
 800e568:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d102      	bne.n	800e578 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e572:	2300      	movs	r3, #0
 800e574:	73fb      	strb	r3, [r7, #15]
 800e576:	e008      	b.n	800e58a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d102      	bne.n	800e586 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e580:	2301      	movs	r3, #1
 800e582:	73fb      	strb	r3, [r7, #15]
 800e584:	e001      	b.n	800e58a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e586:	f7f2 fe37 	bl	80011f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e590:	7bfa      	ldrb	r2, [r7, #15]
 800e592:	4611      	mov	r1, r2
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fcae 	bl	800cef6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fe fc56 	bl	800ce52 <USBD_LL_Reset>
}
 800e5a6:	bf00      	nop
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
	...

0800e5b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fca9 	bl	800cf16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5d6:	f043 0301 	orr.w	r3, r3, #1
 800e5da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d005      	beq.n	800e5f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5e4:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <HAL_PCD_SuspendCallback+0x48>)
 800e5e6:	691b      	ldr	r3, [r3, #16]
 800e5e8:	4a03      	ldr	r2, [pc, #12]	; (800e5f8 <HAL_PCD_SuspendCallback+0x48>)
 800e5ea:	f043 0306 	orr.w	r3, r3, #6
 800e5ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	e000ed00 	.word	0xe000ed00

0800e5fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fc99 	bl	800cf42 <USBD_LL_Resume>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	460b      	mov	r3, r1
 800e622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e62a:	78fa      	ldrb	r2, [r7, #3]
 800e62c:	4611      	mov	r1, r2
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fe fcf1 	bl	800d016 <USBD_LL_IsoOUTIncomplete>
}
 800e634:	bf00      	nop
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	460b      	mov	r3, r1
 800e646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e64e:	78fa      	ldrb	r2, [r7, #3]
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fcad 	bl	800cfb2 <USBD_LL_IsoINIncomplete>
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fd03 	bl	800d07a <USBD_LL_DevConnected>
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe fd00 	bl	800d090 <USBD_LL_DevDisconnected>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d13c      	bne.n	800e722 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6a8:	4a20      	ldr	r2, [pc, #128]	; (800e72c <USBD_LL_Init+0x94>)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a1e      	ldr	r2, [pc, #120]	; (800e72c <USBD_LL_Init+0x94>)
 800e6b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6b8:	4b1c      	ldr	r3, [pc, #112]	; (800e72c <USBD_LL_Init+0x94>)
 800e6ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e6be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e6c0:	4b1a      	ldr	r3, [pc, #104]	; (800e72c <USBD_LL_Init+0x94>)
 800e6c2:	2206      	movs	r2, #6
 800e6c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6c6:	4b19      	ldr	r3, [pc, #100]	; (800e72c <USBD_LL_Init+0x94>)
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6cc:	4b17      	ldr	r3, [pc, #92]	; (800e72c <USBD_LL_Init+0x94>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6d2:	4b16      	ldr	r3, [pc, #88]	; (800e72c <USBD_LL_Init+0x94>)
 800e6d4:	2202      	movs	r2, #2
 800e6d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e6d8:	4b14      	ldr	r3, [pc, #80]	; (800e72c <USBD_LL_Init+0x94>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6de:	4b13      	ldr	r3, [pc, #76]	; (800e72c <USBD_LL_Init+0x94>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e6e4:	4b11      	ldr	r3, [pc, #68]	; (800e72c <USBD_LL_Init+0x94>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e6ea:	4b10      	ldr	r3, [pc, #64]	; (800e72c <USBD_LL_Init+0x94>)
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e6f0:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <USBD_LL_Init+0x94>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e6f6:	480d      	ldr	r0, [pc, #52]	; (800e72c <USBD_LL_Init+0x94>)
 800e6f8:	f7f8 faa8 	bl	8006c4c <HAL_PCD_Init>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e702:	f7f2 fd79 	bl	80011f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e706:	2180      	movs	r1, #128	; 0x80
 800e708:	4808      	ldr	r0, [pc, #32]	; (800e72c <USBD_LL_Init+0x94>)
 800e70a:	f7f9 fd34 	bl	8008176 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e70e:	2240      	movs	r2, #64	; 0x40
 800e710:	2100      	movs	r1, #0
 800e712:	4806      	ldr	r0, [pc, #24]	; (800e72c <USBD_LL_Init+0x94>)
 800e714:	f7f9 fce8 	bl	80080e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e718:	2280      	movs	r2, #128	; 0x80
 800e71a:	2101      	movs	r1, #1
 800e71c:	4803      	ldr	r0, [pc, #12]	; (800e72c <USBD_LL_Init+0x94>)
 800e71e:	f7f9 fce3 	bl	80080e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	20001c74 	.word	0x20001c74

0800e730 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e746:	4618      	mov	r0, r3
 800e748:	f7f8 fba4 	bl	8006e94 <HAL_PCD_Start>
 800e74c:	4603      	mov	r3, r0
 800e74e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e750:	7bfb      	ldrb	r3, [r7, #15]
 800e752:	4618      	mov	r0, r3
 800e754:	f000 f942 	bl	800e9dc <USBD_Get_USB_Status>
 800e758:	4603      	mov	r3, r0
 800e75a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e75c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3710      	adds	r7, #16
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b084      	sub	sp, #16
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	4608      	mov	r0, r1
 800e770:	4611      	mov	r1, r2
 800e772:	461a      	mov	r2, r3
 800e774:	4603      	mov	r3, r0
 800e776:	70fb      	strb	r3, [r7, #3]
 800e778:	460b      	mov	r3, r1
 800e77a:	70bb      	strb	r3, [r7, #2]
 800e77c:	4613      	mov	r3, r2
 800e77e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e780:	2300      	movs	r3, #0
 800e782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e78e:	78bb      	ldrb	r3, [r7, #2]
 800e790:	883a      	ldrh	r2, [r7, #0]
 800e792:	78f9      	ldrb	r1, [r7, #3]
 800e794:	f7f9 f8a2 	bl	80078dc <HAL_PCD_EP_Open>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f91c 	bl	800e9dc <USBD_Get_USB_Status>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7cc:	78fa      	ldrb	r2, [r7, #3]
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f9 f8eb 	bl	80079ac <HAL_PCD_EP_Close>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f8fd 	bl	800e9dc <USBD_Get_USB_Status>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e80a:	78fa      	ldrb	r2, [r7, #3]
 800e80c:	4611      	mov	r1, r2
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f9 f9c3 	bl	8007b9a <HAL_PCD_EP_SetStall>
 800e814:	4603      	mov	r3, r0
 800e816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 f8de 	bl	800e9dc <USBD_Get_USB_Status>
 800e820:	4603      	mov	r3, r0
 800e822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e824:	7bbb      	ldrb	r3, [r7, #14]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b084      	sub	sp, #16
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	460b      	mov	r3, r1
 800e838:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e848:	78fa      	ldrb	r2, [r7, #3]
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f9 fa08 	bl	8007c62 <HAL_PCD_EP_ClrStall>
 800e852:	4603      	mov	r3, r0
 800e854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e856:	7bfb      	ldrb	r3, [r7, #15]
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 f8bf 	bl	800e9dc <USBD_Get_USB_Status>
 800e85e:	4603      	mov	r3, r0
 800e860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e862:	7bbb      	ldrb	r3, [r7, #14]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	460b      	mov	r3, r1
 800e876:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e87e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e884:	2b00      	cmp	r3, #0
 800e886:	da0b      	bge.n	800e8a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e888:	78fb      	ldrb	r3, [r7, #3]
 800e88a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e88e:	68f9      	ldr	r1, [r7, #12]
 800e890:	4613      	mov	r3, r2
 800e892:	00db      	lsls	r3, r3, #3
 800e894:	4413      	add	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	440b      	add	r3, r1
 800e89a:	333e      	adds	r3, #62	; 0x3e
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	e00b      	b.n	800e8b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8a0:	78fb      	ldrb	r3, [r7, #3]
 800e8a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8a6:	68f9      	ldr	r1, [r7, #12]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	00db      	lsls	r3, r3, #3
 800e8ac:	4413      	add	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	440b      	add	r3, r1
 800e8b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e8b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8de:	78fa      	ldrb	r2, [r7, #3]
 800e8e0:	4611      	mov	r1, r2
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7f8 ffd5 	bl	8007892 <HAL_PCD_SetAddress>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 f874 	bl	800e9dc <USBD_Get_USB_Status>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b086      	sub	sp, #24
 800e906:	af00      	add	r7, sp, #0
 800e908:	60f8      	str	r0, [r7, #12]
 800e90a:	607a      	str	r2, [r7, #4]
 800e90c:	603b      	str	r3, [r7, #0]
 800e90e:	460b      	mov	r3, r1
 800e910:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e916:	2300      	movs	r3, #0
 800e918:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e920:	7af9      	ldrb	r1, [r7, #11]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	f7f9 f8ee 	bl	8007b06 <HAL_PCD_EP_Transmit>
 800e92a:	4603      	mov	r3, r0
 800e92c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	4618      	mov	r0, r3
 800e932:	f000 f853 	bl	800e9dc <USBD_Get_USB_Status>
 800e936:	4603      	mov	r3, r0
 800e938:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e93a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	603b      	str	r3, [r7, #0]
 800e950:	460b      	mov	r3, r1
 800e952:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e958:	2300      	movs	r3, #0
 800e95a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e962:	7af9      	ldrb	r1, [r7, #11]
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	f7f9 f86a 	bl	8007a40 <HAL_PCD_EP_Receive>
 800e96c:	4603      	mov	r3, r0
 800e96e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e970:	7dfb      	ldrb	r3, [r7, #23]
 800e972:	4618      	mov	r0, r3
 800e974:	f000 f832 	bl	800e9dc <USBD_Get_USB_Status>
 800e978:	4603      	mov	r3, r0
 800e97a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e97c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	460b      	mov	r3, r1
 800e990:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e998:	78fa      	ldrb	r2, [r7, #3]
 800e99a:	4611      	mov	r1, r2
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7f9 f89a 	bl	8007ad6 <HAL_PCD_EP_GetRxCount>
 800e9a2:	4603      	mov	r3, r0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e9b4:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <USBD_static_malloc+0x18>)
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	20002180 	.word	0x20002180

0800e9c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]

}
 800e9d0:	bf00      	nop
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9ea:	79fb      	ldrb	r3, [r7, #7]
 800e9ec:	2b03      	cmp	r3, #3
 800e9ee:	d817      	bhi.n	800ea20 <USBD_Get_USB_Status+0x44>
 800e9f0:	a201      	add	r2, pc, #4	; (adr r2, 800e9f8 <USBD_Get_USB_Status+0x1c>)
 800e9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f6:	bf00      	nop
 800e9f8:	0800ea09 	.word	0x0800ea09
 800e9fc:	0800ea0f 	.word	0x0800ea0f
 800ea00:	0800ea15 	.word	0x0800ea15
 800ea04:	0800ea1b 	.word	0x0800ea1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea0c:	e00b      	b.n	800ea26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea0e:	2303      	movs	r3, #3
 800ea10:	73fb      	strb	r3, [r7, #15]
    break;
 800ea12:	e008      	b.n	800ea26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea14:	2301      	movs	r3, #1
 800ea16:	73fb      	strb	r3, [r7, #15]
    break;
 800ea18:	e005      	b.n	800ea26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea1a:	2303      	movs	r3, #3
 800ea1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea1e:	e002      	b.n	800ea26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea20:	2303      	movs	r3, #3
 800ea22:	73fb      	strb	r3, [r7, #15]
    break;
 800ea24:	bf00      	nop
  }
  return usb_status;
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <__errno>:
 800ea34:	4b01      	ldr	r3, [pc, #4]	; (800ea3c <__errno+0x8>)
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	200000fc 	.word	0x200000fc

0800ea40 <__libc_init_array>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	4d0d      	ldr	r5, [pc, #52]	; (800ea78 <__libc_init_array+0x38>)
 800ea44:	4c0d      	ldr	r4, [pc, #52]	; (800ea7c <__libc_init_array+0x3c>)
 800ea46:	1b64      	subs	r4, r4, r5
 800ea48:	10a4      	asrs	r4, r4, #2
 800ea4a:	2600      	movs	r6, #0
 800ea4c:	42a6      	cmp	r6, r4
 800ea4e:	d109      	bne.n	800ea64 <__libc_init_array+0x24>
 800ea50:	4d0b      	ldr	r5, [pc, #44]	; (800ea80 <__libc_init_array+0x40>)
 800ea52:	4c0c      	ldr	r4, [pc, #48]	; (800ea84 <__libc_init_array+0x44>)
 800ea54:	f000 f92e 	bl	800ecb4 <_init>
 800ea58:	1b64      	subs	r4, r4, r5
 800ea5a:	10a4      	asrs	r4, r4, #2
 800ea5c:	2600      	movs	r6, #0
 800ea5e:	42a6      	cmp	r6, r4
 800ea60:	d105      	bne.n	800ea6e <__libc_init_array+0x2e>
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea68:	4798      	blx	r3
 800ea6a:	3601      	adds	r6, #1
 800ea6c:	e7ee      	b.n	800ea4c <__libc_init_array+0xc>
 800ea6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea72:	4798      	blx	r3
 800ea74:	3601      	adds	r6, #1
 800ea76:	e7f2      	b.n	800ea5e <__libc_init_array+0x1e>
 800ea78:	0800ed3c 	.word	0x0800ed3c
 800ea7c:	0800ed3c 	.word	0x0800ed3c
 800ea80:	0800ed3c 	.word	0x0800ed3c
 800ea84:	0800ed40 	.word	0x0800ed40

0800ea88 <malloc>:
 800ea88:	4b02      	ldr	r3, [pc, #8]	; (800ea94 <malloc+0xc>)
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	f000 b87f 	b.w	800eb90 <_malloc_r>
 800ea92:	bf00      	nop
 800ea94:	200000fc 	.word	0x200000fc

0800ea98 <free>:
 800ea98:	4b02      	ldr	r3, [pc, #8]	; (800eaa4 <free+0xc>)
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f000 b80b 	b.w	800eab8 <_free_r>
 800eaa2:	bf00      	nop
 800eaa4:	200000fc 	.word	0x200000fc

0800eaa8 <memset>:
 800eaa8:	4402      	add	r2, r0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d100      	bne.n	800eab2 <memset+0xa>
 800eab0:	4770      	bx	lr
 800eab2:	f803 1b01 	strb.w	r1, [r3], #1
 800eab6:	e7f9      	b.n	800eaac <memset+0x4>

0800eab8 <_free_r>:
 800eab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaba:	2900      	cmp	r1, #0
 800eabc:	d044      	beq.n	800eb48 <_free_r+0x90>
 800eabe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eac2:	9001      	str	r0, [sp, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f1a1 0404 	sub.w	r4, r1, #4
 800eaca:	bfb8      	it	lt
 800eacc:	18e4      	addlt	r4, r4, r3
 800eace:	f000 f8e3 	bl	800ec98 <__malloc_lock>
 800ead2:	4a1e      	ldr	r2, [pc, #120]	; (800eb4c <_free_r+0x94>)
 800ead4:	9801      	ldr	r0, [sp, #4]
 800ead6:	6813      	ldr	r3, [r2, #0]
 800ead8:	b933      	cbnz	r3, 800eae8 <_free_r+0x30>
 800eada:	6063      	str	r3, [r4, #4]
 800eadc:	6014      	str	r4, [r2, #0]
 800eade:	b003      	add	sp, #12
 800eae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eae4:	f000 b8de 	b.w	800eca4 <__malloc_unlock>
 800eae8:	42a3      	cmp	r3, r4
 800eaea:	d908      	bls.n	800eafe <_free_r+0x46>
 800eaec:	6825      	ldr	r5, [r4, #0]
 800eaee:	1961      	adds	r1, r4, r5
 800eaf0:	428b      	cmp	r3, r1
 800eaf2:	bf01      	itttt	eq
 800eaf4:	6819      	ldreq	r1, [r3, #0]
 800eaf6:	685b      	ldreq	r3, [r3, #4]
 800eaf8:	1949      	addeq	r1, r1, r5
 800eafa:	6021      	streq	r1, [r4, #0]
 800eafc:	e7ed      	b.n	800eada <_free_r+0x22>
 800eafe:	461a      	mov	r2, r3
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	b10b      	cbz	r3, 800eb08 <_free_r+0x50>
 800eb04:	42a3      	cmp	r3, r4
 800eb06:	d9fa      	bls.n	800eafe <_free_r+0x46>
 800eb08:	6811      	ldr	r1, [r2, #0]
 800eb0a:	1855      	adds	r5, r2, r1
 800eb0c:	42a5      	cmp	r5, r4
 800eb0e:	d10b      	bne.n	800eb28 <_free_r+0x70>
 800eb10:	6824      	ldr	r4, [r4, #0]
 800eb12:	4421      	add	r1, r4
 800eb14:	1854      	adds	r4, r2, r1
 800eb16:	42a3      	cmp	r3, r4
 800eb18:	6011      	str	r1, [r2, #0]
 800eb1a:	d1e0      	bne.n	800eade <_free_r+0x26>
 800eb1c:	681c      	ldr	r4, [r3, #0]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	6053      	str	r3, [r2, #4]
 800eb22:	4421      	add	r1, r4
 800eb24:	6011      	str	r1, [r2, #0]
 800eb26:	e7da      	b.n	800eade <_free_r+0x26>
 800eb28:	d902      	bls.n	800eb30 <_free_r+0x78>
 800eb2a:	230c      	movs	r3, #12
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	e7d6      	b.n	800eade <_free_r+0x26>
 800eb30:	6825      	ldr	r5, [r4, #0]
 800eb32:	1961      	adds	r1, r4, r5
 800eb34:	428b      	cmp	r3, r1
 800eb36:	bf04      	itt	eq
 800eb38:	6819      	ldreq	r1, [r3, #0]
 800eb3a:	685b      	ldreq	r3, [r3, #4]
 800eb3c:	6063      	str	r3, [r4, #4]
 800eb3e:	bf04      	itt	eq
 800eb40:	1949      	addeq	r1, r1, r5
 800eb42:	6021      	streq	r1, [r4, #0]
 800eb44:	6054      	str	r4, [r2, #4]
 800eb46:	e7ca      	b.n	800eade <_free_r+0x26>
 800eb48:	b003      	add	sp, #12
 800eb4a:	bd30      	pop	{r4, r5, pc}
 800eb4c:	200023a0 	.word	0x200023a0

0800eb50 <sbrk_aligned>:
 800eb50:	b570      	push	{r4, r5, r6, lr}
 800eb52:	4e0e      	ldr	r6, [pc, #56]	; (800eb8c <sbrk_aligned+0x3c>)
 800eb54:	460c      	mov	r4, r1
 800eb56:	6831      	ldr	r1, [r6, #0]
 800eb58:	4605      	mov	r5, r0
 800eb5a:	b911      	cbnz	r1, 800eb62 <sbrk_aligned+0x12>
 800eb5c:	f000 f88c 	bl	800ec78 <_sbrk_r>
 800eb60:	6030      	str	r0, [r6, #0]
 800eb62:	4621      	mov	r1, r4
 800eb64:	4628      	mov	r0, r5
 800eb66:	f000 f887 	bl	800ec78 <_sbrk_r>
 800eb6a:	1c43      	adds	r3, r0, #1
 800eb6c:	d00a      	beq.n	800eb84 <sbrk_aligned+0x34>
 800eb6e:	1cc4      	adds	r4, r0, #3
 800eb70:	f024 0403 	bic.w	r4, r4, #3
 800eb74:	42a0      	cmp	r0, r4
 800eb76:	d007      	beq.n	800eb88 <sbrk_aligned+0x38>
 800eb78:	1a21      	subs	r1, r4, r0
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f000 f87c 	bl	800ec78 <_sbrk_r>
 800eb80:	3001      	adds	r0, #1
 800eb82:	d101      	bne.n	800eb88 <sbrk_aligned+0x38>
 800eb84:	f04f 34ff 	mov.w	r4, #4294967295
 800eb88:	4620      	mov	r0, r4
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	200023a4 	.word	0x200023a4

0800eb90 <_malloc_r>:
 800eb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb94:	1ccd      	adds	r5, r1, #3
 800eb96:	f025 0503 	bic.w	r5, r5, #3
 800eb9a:	3508      	adds	r5, #8
 800eb9c:	2d0c      	cmp	r5, #12
 800eb9e:	bf38      	it	cc
 800eba0:	250c      	movcc	r5, #12
 800eba2:	2d00      	cmp	r5, #0
 800eba4:	4607      	mov	r7, r0
 800eba6:	db01      	blt.n	800ebac <_malloc_r+0x1c>
 800eba8:	42a9      	cmp	r1, r5
 800ebaa:	d905      	bls.n	800ebb8 <_malloc_r+0x28>
 800ebac:	230c      	movs	r3, #12
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	2600      	movs	r6, #0
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb8:	4e2e      	ldr	r6, [pc, #184]	; (800ec74 <_malloc_r+0xe4>)
 800ebba:	f000 f86d 	bl	800ec98 <__malloc_lock>
 800ebbe:	6833      	ldr	r3, [r6, #0]
 800ebc0:	461c      	mov	r4, r3
 800ebc2:	bb34      	cbnz	r4, 800ec12 <_malloc_r+0x82>
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	f7ff ffc2 	bl	800eb50 <sbrk_aligned>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	4604      	mov	r4, r0
 800ebd0:	d14d      	bne.n	800ec6e <_malloc_r+0xde>
 800ebd2:	6834      	ldr	r4, [r6, #0]
 800ebd4:	4626      	mov	r6, r4
 800ebd6:	2e00      	cmp	r6, #0
 800ebd8:	d140      	bne.n	800ec5c <_malloc_r+0xcc>
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4638      	mov	r0, r7
 800ebe0:	eb04 0803 	add.w	r8, r4, r3
 800ebe4:	f000 f848 	bl	800ec78 <_sbrk_r>
 800ebe8:	4580      	cmp	r8, r0
 800ebea:	d13a      	bne.n	800ec62 <_malloc_r+0xd2>
 800ebec:	6821      	ldr	r1, [r4, #0]
 800ebee:	3503      	adds	r5, #3
 800ebf0:	1a6d      	subs	r5, r5, r1
 800ebf2:	f025 0503 	bic.w	r5, r5, #3
 800ebf6:	3508      	adds	r5, #8
 800ebf8:	2d0c      	cmp	r5, #12
 800ebfa:	bf38      	it	cc
 800ebfc:	250c      	movcc	r5, #12
 800ebfe:	4629      	mov	r1, r5
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff ffa5 	bl	800eb50 <sbrk_aligned>
 800ec06:	3001      	adds	r0, #1
 800ec08:	d02b      	beq.n	800ec62 <_malloc_r+0xd2>
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	442b      	add	r3, r5
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	e00e      	b.n	800ec30 <_malloc_r+0xa0>
 800ec12:	6822      	ldr	r2, [r4, #0]
 800ec14:	1b52      	subs	r2, r2, r5
 800ec16:	d41e      	bmi.n	800ec56 <_malloc_r+0xc6>
 800ec18:	2a0b      	cmp	r2, #11
 800ec1a:	d916      	bls.n	800ec4a <_malloc_r+0xba>
 800ec1c:	1961      	adds	r1, r4, r5
 800ec1e:	42a3      	cmp	r3, r4
 800ec20:	6025      	str	r5, [r4, #0]
 800ec22:	bf18      	it	ne
 800ec24:	6059      	strne	r1, [r3, #4]
 800ec26:	6863      	ldr	r3, [r4, #4]
 800ec28:	bf08      	it	eq
 800ec2a:	6031      	streq	r1, [r6, #0]
 800ec2c:	5162      	str	r2, [r4, r5]
 800ec2e:	604b      	str	r3, [r1, #4]
 800ec30:	4638      	mov	r0, r7
 800ec32:	f104 060b 	add.w	r6, r4, #11
 800ec36:	f000 f835 	bl	800eca4 <__malloc_unlock>
 800ec3a:	f026 0607 	bic.w	r6, r6, #7
 800ec3e:	1d23      	adds	r3, r4, #4
 800ec40:	1af2      	subs	r2, r6, r3
 800ec42:	d0b6      	beq.n	800ebb2 <_malloc_r+0x22>
 800ec44:	1b9b      	subs	r3, r3, r6
 800ec46:	50a3      	str	r3, [r4, r2]
 800ec48:	e7b3      	b.n	800ebb2 <_malloc_r+0x22>
 800ec4a:	6862      	ldr	r2, [r4, #4]
 800ec4c:	42a3      	cmp	r3, r4
 800ec4e:	bf0c      	ite	eq
 800ec50:	6032      	streq	r2, [r6, #0]
 800ec52:	605a      	strne	r2, [r3, #4]
 800ec54:	e7ec      	b.n	800ec30 <_malloc_r+0xa0>
 800ec56:	4623      	mov	r3, r4
 800ec58:	6864      	ldr	r4, [r4, #4]
 800ec5a:	e7b2      	b.n	800ebc2 <_malloc_r+0x32>
 800ec5c:	4634      	mov	r4, r6
 800ec5e:	6876      	ldr	r6, [r6, #4]
 800ec60:	e7b9      	b.n	800ebd6 <_malloc_r+0x46>
 800ec62:	230c      	movs	r3, #12
 800ec64:	603b      	str	r3, [r7, #0]
 800ec66:	4638      	mov	r0, r7
 800ec68:	f000 f81c 	bl	800eca4 <__malloc_unlock>
 800ec6c:	e7a1      	b.n	800ebb2 <_malloc_r+0x22>
 800ec6e:	6025      	str	r5, [r4, #0]
 800ec70:	e7de      	b.n	800ec30 <_malloc_r+0xa0>
 800ec72:	bf00      	nop
 800ec74:	200023a0 	.word	0x200023a0

0800ec78 <_sbrk_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4d06      	ldr	r5, [pc, #24]	; (800ec94 <_sbrk_r+0x1c>)
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	f7f4 feec 	bl	8003a60 <_sbrk>
 800ec88:	1c43      	adds	r3, r0, #1
 800ec8a:	d102      	bne.n	800ec92 <_sbrk_r+0x1a>
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	b103      	cbz	r3, 800ec92 <_sbrk_r+0x1a>
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	200023a8 	.word	0x200023a8

0800ec98 <__malloc_lock>:
 800ec98:	4801      	ldr	r0, [pc, #4]	; (800eca0 <__malloc_lock+0x8>)
 800ec9a:	f000 b809 	b.w	800ecb0 <__retarget_lock_acquire_recursive>
 800ec9e:	bf00      	nop
 800eca0:	200023ac 	.word	0x200023ac

0800eca4 <__malloc_unlock>:
 800eca4:	4801      	ldr	r0, [pc, #4]	; (800ecac <__malloc_unlock+0x8>)
 800eca6:	f000 b804 	b.w	800ecb2 <__retarget_lock_release_recursive>
 800ecaa:	bf00      	nop
 800ecac:	200023ac 	.word	0x200023ac

0800ecb0 <__retarget_lock_acquire_recursive>:
 800ecb0:	4770      	bx	lr

0800ecb2 <__retarget_lock_release_recursive>:
 800ecb2:	4770      	bx	lr

0800ecb4 <_init>:
 800ecb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb6:	bf00      	nop
 800ecb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecba:	bc08      	pop	{r3}
 800ecbc:	469e      	mov	lr, r3
 800ecbe:	4770      	bx	lr

0800ecc0 <_fini>:
 800ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc2:	bf00      	nop
 800ecc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecc6:	bc08      	pop	{r3}
 800ecc8:	469e      	mov	lr, r3
 800ecca:	4770      	bx	lr

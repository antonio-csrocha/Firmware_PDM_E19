
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3fc  0800d3fc  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3fc  0800d3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d404  0800d404  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d404  0800d404  0001d404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a14  20000190  0800d59c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ba4  0800d59c  00022ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f5a  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b6a  00000000  00000000  0004711a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0004bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  0004d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007260  00000000  00000000  0004ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020df2  00000000  00000000  00055e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e57a2  00000000  00000000  00076c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006660  00000000  00000000  0015c3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800d37c 	.word	0x0800d37c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	0800d37c 	.word	0x0800d37c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f002 fbe6 	bl	8002cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f868 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fd08 	bl	8000f1c <MX_GPIO_Init>
  MX_ADC1_Init();
 800050c:	f000 f8d6 	bl	80006bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000510:	f000 f960 	bl	80007d4 <MX_ADC2_Init>
  MX_DMA_Init();
 8000514:	f000 fcc4 	bl	8000ea0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000518:	f00c f982 	bl	800c820 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 800051c:	f000 f9e4 	bl	80008e8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000520:	f000 fa18 	bl	8000954 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000524:	f000 fa44 	bl	80009b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000528:	f000 fae0 	bl	8000aec <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 fb54 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000530:	f000 fbc8 	bl	8000cc4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000534:	f000 fbfc 	bl	8000d30 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000538:	f000 fc2e 	bl	8000d98 <MX_TIM8_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(Accumulator_Delay == 0)
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <main+0xbc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <main+0x4e>
	{
		PDM_Read_Data(&Data_Conversion);
 8000544:	481d      	ldr	r0, [pc, #116]	; (80005bc <main+0xc0>)
 8000546:	f001 fe3d 	bl	80021c4 <PDM_Read_Data>
	}

	if(Accumulator_Output_Check >= OUTPUT_FUSE_FREQ)
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0xc4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b63      	cmp	r3, #99	; 0x63
 8000550:	d901      	bls.n	8000556 <main+0x5a>
	{
		PDM_Output_Fuse();
 8000552:	f001 f8cf 	bl	80016f4 <PDM_Output_Fuse>
	if(Accumulator_EEPROM_Write >= EEPROM_WRITE_CYCLE)
	{

	}

	if(Accumulator_Msg_10Hz >= DATA_FREQ_10HZ)
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <main+0xc8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800055e:	d307      	bcc.n	8000570 <main+0x74>
	{
		Accumulator_Msg_10Hz = 0;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0xc8>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, DATA_FREQ_10HZ);
 8000566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800056a:	4817      	ldr	r0, [pc, #92]	; (80005c8 <main+0xcc>)
 800056c:	f000 fdd0 	bl	8001110 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_25Hz >= DATA_FREQ_25HZ)
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <main+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000578:	d307      	bcc.n	800058a <main+0x8e>
	{
		Accumulator_Msg_25Hz = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0xd0>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, DATA_FREQ_25HZ);
 8000580:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000584:	4810      	ldr	r0, [pc, #64]	; (80005c8 <main+0xcc>)
 8000586:	f000 fdc3 	bl	8001110 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_50Hz >= DATA_FREQ_50HZ)
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <main+0xd4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2bc7      	cmp	r3, #199	; 0xc7
 8000590:	d906      	bls.n	80005a0 <main+0xa4>
	{
		Accumulator_Msg_50Hz = 0;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0xd4>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, DATA_FREQ_50HZ);
 8000598:	21c8      	movs	r1, #200	; 0xc8
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0xcc>)
 800059c:	f000 fdb8 	bl	8001110 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_100Hz >= DATA_FREQ_100HZ)
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b63      	cmp	r3, #99	; 0x63
 80005a6:	d9c9      	bls.n	800053c <main+0x40>
	{
		Accumulator_Msg_100Hz = 0;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <main+0xd8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, DATA_FREQ_100HZ);
 80005ae:	2164      	movs	r1, #100	; 0x64
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <main+0xcc>)
 80005b2:	f000 fdad 	bl	8001110 <PDM_CAN_Transmit_Data>
	if(Accumulator_Delay == 0)
 80005b6:	e7c1      	b.n	800053c <main+0x40>
 80005b8:	200011b4 	.word	0x200011b4
 80005bc:	20000eb0 	.word	0x20000eb0
 80005c0:	20000598 	.word	0x20000598
 80005c4:	20001128 	.word	0x20001128
 80005c8:	20001218 	.word	0x20001218
 80005cc:	20000eb4 	.word	0x20000eb4
 80005d0:	20000f6c 	.word	0x20000f6c
 80005d4:	20000f90 	.word	0x20000f90

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f00c fec0 	bl	800d36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <SystemClock_Config+0xdc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <SystemClock_Config+0xdc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xdc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xe0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <SystemClock_Config+0xe0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800064c:	23b4      	movs	r3, #180	; 0xb4
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000654:	2303      	movs	r3, #3
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f007 fe7d 	bl	8008360 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fd4a 	bl	8001104 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000670:	f007 f844 	bl	80076fc <HAL_PWREx_EnableOverDrive>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800067a:	f000 fd43 	bl	8001104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2105      	movs	r1, #5
 800069c:	4618      	mov	r0, r3
 800069e:	f007 f87d 	bl	800779c <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a8:	f000 fd2c 	bl	8001104 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ce:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006d0:	4a3d      	ldr	r2, [pc, #244]	; (80007c8 <MX_ADC1_Init+0x10c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006e2:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006e8:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_ADC1_Init+0x108>)
 80006fe:	4a33      	ldr	r2, [pc, #204]	; (80007cc <MX_ADC1_Init+0x110>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <MX_ADC1_Init+0x108>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_ADC1_Init+0x108>)
 800070a:	2205      	movs	r2, #5
 800070c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_ADC1_Init+0x108>)
 8000710:	2201      	movs	r2, #1
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_ADC1_Init+0x108>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	4829      	ldr	r0, [pc, #164]	; (80007c4 <MX_ADC1_Init+0x108>)
 800071e:	f002 fb6d 	bl	8002dfc <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fcec 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000734:	2307      	movs	r3, #7
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4821      	ldr	r0, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x108>)
 800073e:	f002 fba1 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000748:	f000 fcdc 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074c:	2301      	movs	r3, #1
 800074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	; (80007c4 <MX_ADC1_Init+0x108>)
 800075a:	f002 fb93 	bl	8002e84 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000764:	f000 fcce 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000768:	2302      	movs	r3, #2
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800076c:	2303      	movs	r3, #3
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <MX_ADC1_Init+0x108>)
 8000776:	f002 fb85 	bl	8002e84 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000780:	f000 fcc0 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000784:	2303      	movs	r3, #3
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_ADC1_Init+0x108>)
 8000792:	f002 fb77 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800079c:	f000 fcb2 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_ADC1_Init+0x114>)
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007a4:	2305      	movs	r3, #5
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_ADC1_Init+0x108>)
 80007ae:	f002 fb69 	bl	8002e84 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80007b8:	f000 fca4 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000eb8 	.word	0x20000eb8
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001
 80007d0:	10000012 	.word	0x10000012

080007d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_ADC2_Init+0x108>)
 80007e8:	4a3d      	ldr	r2, [pc, #244]	; (80008e0 <MX_ADC2_Init+0x10c>)
 80007ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ec:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <MX_ADC2_Init+0x108>)
 80007ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007f4:	4b39      	ldr	r3, [pc, #228]	; (80008dc <MX_ADC2_Init+0x108>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80007fa:	4b38      	ldr	r3, [pc, #224]	; (80008dc <MX_ADC2_Init+0x108>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000800:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_ADC2_Init+0x108>)
 8000802:	2201      	movs	r2, #1
 8000804:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_ADC2_Init+0x108>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_ADC2_Init+0x108>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_ADC2_Init+0x108>)
 8000816:	4a33      	ldr	r2, [pc, #204]	; (80008e4 <MX_ADC2_Init+0x110>)
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_ADC2_Init+0x108>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_ADC2_Init+0x108>)
 8000822:	2205      	movs	r2, #5
 8000824:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_ADC2_Init+0x108>)
 8000828:	2201      	movs	r2, #1
 800082a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_ADC2_Init+0x108>)
 8000830:	2201      	movs	r2, #1
 8000832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000834:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_ADC2_Init+0x108>)
 8000836:	f002 fae1 	bl	8002dfc <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 fc60 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000844:	2304      	movs	r3, #4
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800084c:	2307      	movs	r3, #7
 800084e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4821      	ldr	r0, [pc, #132]	; (80008dc <MX_ADC2_Init+0x108>)
 8000856:	f002 fb15 	bl	8002e84 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 fc50 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000864:	2305      	movs	r3, #5
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <MX_ADC2_Init+0x108>)
 8000872:	f002 fb07 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800087c:	f000 fc42 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000880:	2306      	movs	r3, #6
 8000882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000884:	2303      	movs	r3, #3
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_ADC2_Init+0x108>)
 800088e:	f002 faf9 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000898:	f000 fc34 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800089c:	2307      	movs	r3, #7
 800089e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_ADC2_Init+0x108>)
 80008aa:	f002 faeb 	bl	8002e84 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80008b4:	f000 fc26 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008b8:	230e      	movs	r3, #14
 80008ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80008bc:	2305      	movs	r3, #5
 80008be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_ADC2_Init+0x108>)
 80008c6:	f002 fadd 	bl	8002e84 <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008d0:	f000 fc18 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000049c 	.word	0x2000049c
 80008e0:	40012100 	.word	0x40012100
 80008e4:	0f000001 	.word	0x0f000001

080008e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_CAN1_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_CAN1_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_CAN1_Init+0x64>)
 80008f4:	2205      	movs	r2, #5
 80008f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_CAN1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_CAN1_Init+0x64>)
 8000900:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000904:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_CAN1_Init+0x64>)
 8000908:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800090c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_CAN1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_CAN1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_CAN1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_CAN1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_CAN1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_CAN1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_CAN1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_CAN1_Init+0x64>)
 800093a:	f002 fcd1 	bl	80032e0 <HAL_CAN_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000944:	f000 fbde 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20001218 	.word	0x20001218
 8000950:	40006400 	.word	0x40006400

08000954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_I2C1_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_I2C1_Init+0x58>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2C1_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000992:	f003 ffe5 	bl	8004960 <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 fbb2 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000544 	.word	0x20000544
 80009a8:	40005400 	.word	0x40005400
 80009ac:	00061a80 	.word	0x00061a80

080009b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	; 0x58
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2220      	movs	r2, #32
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00c fcbf 	bl	800d36c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ee:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <MX_TIM1_Init+0x134>)
 80009f0:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <MX_TIM1_Init+0x138>)
 80009f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17;
 80009f4:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_TIM1_Init+0x134>)
 80009f6:	2211      	movs	r2, #17
 80009f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_TIM1_Init+0x134>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a00:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1a:	4832      	ldr	r0, [pc, #200]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a1c:	f007 ff3e 	bl	800889c <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a26:	f000 fb6d 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a34:	4619      	mov	r1, r3
 8000a36:	482b      	ldr	r0, [pc, #172]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a38:	f008 fa38 	bl	8008eac <HAL_TIM_ConfigClockSource>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a42:	f000 fb5f 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a46:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a48:	f008 f817 	bl	8008a7a <HAL_TIM_PWM_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a52:	f000 fb57 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a62:	4619      	mov	r1, r3
 8000a64:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a66:	f008 fdfb 	bl	8009660 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a70:	f000 fb48 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a74:	2360      	movs	r3, #96	; 0x60
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	220c      	movs	r2, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000a96:	f008 f947 	bl	8008d28 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000aa0:	f000 fb30 	bl	8001104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000ac8:	f008 fe46 	bl	8009758 <HAL_TIMEx_ConfigBreakDeadTime>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000ad2:	f000 fb17 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM1_Init+0x134>)
 8000ad8:	f001 ff8c 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 8000adc:	bf00      	nop
 8000ade:	3758      	adds	r7, #88	; 0x58
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20001044 	.word	0x20001044
 8000ae8:	40010000 	.word	0x40010000

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b26:	2208      	movs	r2, #8
 8000b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b44:	4823      	ldr	r0, [pc, #140]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b46:	f007 fea9 	bl	800889c <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b50:	f000 fad8 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b62:	f008 f9a3 	bl	8008eac <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b6c:	f000 faca 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b70:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b72:	f007 ff82 	bl	8008a7a <HAL_TIM_PWM_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b7c:	f000 fac2 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000b90:	f008 fd66 	bl	8009660 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b9a:	f000 fab3 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	; 0x60
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000bb6:	f008 f8b7 	bl	8008d28 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bc0:	f000 faa0 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM2_Init+0xe8>)
 8000bc6:	f001 ff15 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 8000bca:	bf00      	nop
 8000bcc:	3738      	adds	r7, #56	; 0x38
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000112c 	.word	0x2000112c

08000bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c10:	2208      	movs	r2, #8
 8000c12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c30:	f007 fe34 	bl	800889c <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c3a:	f000 fa63 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481c      	ldr	r0, [pc, #112]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c4c:	f008 f92e 	bl	8008eac <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c56:	f000 fa55 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c5c:	f007 ff0d 	bl	8008a7a <HAL_TIM_PWM_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c66:	f000 fa4d 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	4619      	mov	r1, r3
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000c7a:	f008 fcf1 	bl	8009660 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c84:	f000 fa3e 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	; 0x60
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000ca0:	f008 f842 	bl	8008d28 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000caa:	f000 fa2b 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <MX_TIM3_Init+0xe4>)
 8000cb0:	f001 fea0 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 8000cb4:	bf00      	nop
 8000cb6:	3738      	adds	r7, #56	; 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000e68 	.word	0x20000e68
 8000cc0:	40000400 	.word	0x40000400

08000cc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_TIM6_Init+0x68>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cda:	2259      	movs	r2, #89	; 0x59
 8000cdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cf4:	f007 fdd2 	bl	800889c <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000cfe:	f000 fa01 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000d10:	f008 fca6 	bl	8009660 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f000 f9f3 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000ff4 	.word	0x20000ff4
 8000d2c:	40001000 	.word	0x40001000

08000d30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d52:	2209      	movs	r2, #9
 8000d54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d5e:	f007 fd9d 	bl	800889c <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000d68:	f000 f9cc 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_TIM7_Init+0x60>)
 8000d7a:	f008 fc71 	bl	8009660 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f9be 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000127c 	.word	0x2000127c
 8000d94:	40001400 	.word	0x40001400

08000d98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00c fad2 	bl	800d36c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dca:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <MX_TIM8_Init+0x104>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dd0:	2211      	movs	r2, #17
 8000dd2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000ddc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000df4:	4828      	ldr	r0, [pc, #160]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000df6:	f007 fe40 	bl	8008a7a <HAL_TIM_PWM_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000e00:	f000 f980 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e10:	4619      	mov	r1, r3
 8000e12:	4821      	ldr	r0, [pc, #132]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e14:	f008 fc24 	bl	8009660 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e1e:	f000 f971 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e22:	2370      	movs	r3, #112	; 0x70
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e48:	f007 ff6e 	bl	8008d28 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000e52:	f000 f957 	bl	8001104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e7a:	f008 fc6d 	bl	8009758 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000e84:	f000 f93e 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM8_Init+0x100>)
 8000e8a:	f001 fdb3 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3748      	adds	r7, #72	; 0x48
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200003f8 	.word	0x200003f8
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_DMA_Init+0x78>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <MX_DMA_Init+0x78>)
 8000eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_DMA_Init+0x78>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_DMA_Init+0x78>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_DMA_Init+0x78>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_DMA_Init+0x78>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f003 f823 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee8:	2011      	movs	r0, #17
 8000eea:	f003 f83c 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2038      	movs	r0, #56	; 0x38
 8000ef4:	f003 f81b 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ef8:	2038      	movs	r0, #56	; 0x38
 8000efa:	f003 f834 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	203a      	movs	r0, #58	; 0x3a
 8000f04:	f003 f813 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f08:	203a      	movs	r0, #58	; 0x3a
 8000f0a:	f003 f82c 	bl	8003f66 <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	4b6c      	ldr	r3, [pc, #432]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a6b      	ldr	r2, [pc, #428]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a64      	ldr	r2, [pc, #400]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a5d      	ldr	r2, [pc, #372]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a56      	ldr	r2, [pc, #344]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a41      	ldr	r2, [pc, #260]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a3a      	ldr	r2, [pc, #232]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8001000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	213c      	movs	r1, #60	; 0x3c
 8001016:	4835      	ldr	r0, [pc, #212]	; (80010ec <MX_GPIO_Init+0x1d0>)
 8001018:	f003 fc6e 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001022:	4833      	ldr	r0, [pc, #204]	; (80010f0 <MX_GPIO_Init+0x1d4>)
 8001024:	f003 fc68 	bl	80048f8 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800102e:	4831      	ldr	r0, [pc, #196]	; (80010f4 <MX_GPIO_Init+0x1d8>)
 8001030:	f003 fc62 	bl	80048f8 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8001034:	233c      	movs	r3, #60	; 0x3c
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4828      	ldr	r0, [pc, #160]	; (80010ec <MX_GPIO_Init+0x1d0>)
 800104c:	f003 fac0 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001050:	230f      	movs	r3, #15
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4824      	ldr	r0, [pc, #144]	; (80010f8 <MX_GPIO_Init+0x1dc>)
 8001066:	f003 fab3 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800106a:	f24f 0330 	movw	r3, #61488	; 0xf030
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001070:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <MX_GPIO_Init+0x1e0>)
 8001082:	f003 faa5 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001086:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_GPIO_Init+0x1d4>)
 80010a0:	f003 fa96 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010a4:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_GPIO_Init+0x1d8>)
 80010be:	f003 fa87 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80010c2:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <MX_GPIO_Init+0x1e4>)
 80010da:	f003 fa79 	bl	80045d0 <HAL_GPIO_Init>

}
 80010de:	bf00      	nop
 80010e0:	3738      	adds	r7, #56	; 0x38
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021800 	.word	0x40021800
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <PDM_CAN_Transmit_Data>:

	return HAL_CAN_ConfigFilter(hcan, &CAN_Filter_Config);
}

HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint16_t data_freq)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0a2      	sub	sp, #136	; 0x88
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef Ret_Val = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint8_t data_index = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint16_t data_buffer[NBR_OF_DATA_CHANNELS * 2];

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800112e:	e038      	b.n	80011a2 <PDM_CAN_Transmit_Data+0x92>
	{
		if(Data_Freq_Buffer[i] == data_freq)
 8001130:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001134:	4a88      	ldr	r2, [pc, #544]	; (8001358 <PDM_CAN_Transmit_Data+0x248>)
 8001136:	5cd3      	ldrb	r3, [r2, r3]
 8001138:	b29b      	uxth	r3, r3
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	429a      	cmp	r2, r3
 800113e:	d12b      	bne.n	8001198 <PDM_CAN_Transmit_Data+0x88>
		{
			data_buffer[2 * data_index] = (Data_ID_Buffer[i] << 1) | Data_Verify_Buffer[i];
 8001140:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001144:	4a85      	ldr	r2, [pc, #532]	; (800135c <PDM_CAN_Transmit_Data+0x24c>)
 8001146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	b21a      	sxth	r2, r3
 800114e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001152:	4983      	ldr	r1, [pc, #524]	; (8001360 <PDM_CAN_Transmit_Data+0x250>)
 8001154:	5ccb      	ldrb	r3, [r1, r3]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21a      	sxth	r2, r3
 800115c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	b292      	uxth	r2, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800116a:	440b      	add	r3, r1
 800116c:	f823 2c80 	strh.w	r2, [r3, #-128]
			data_buffer[(2 * data_index) + 1] = Data_Buffer[i];
 8001170:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8001174:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	3301      	adds	r3, #1
 800117c:	4979      	ldr	r1, [pc, #484]	; (8001364 <PDM_CAN_Transmit_Data+0x254>)
 800117e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001188:	440b      	add	r3, r1
 800118a:	f823 2c80 	strh.w	r2, [r3, #-128]
			data_index++;
 800118e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001192:	3301      	adds	r3, #1
 8001194:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001198:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800119c:	3301      	adds	r3, #1
 800119e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80011a2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80011a6:	2b1d      	cmp	r3, #29
 80011a8:	d9c2      	bls.n	8001130 <PDM_CAN_Transmit_Data+0x20>
		}
	}

	switch(data_freq)
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b0:	d019      	beq.n	80011e6 <PDM_CAN_Transmit_Data+0xd6>
 80011b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b6:	dc1a      	bgt.n	80011ee <PDM_CAN_Transmit_Data+0xde>
 80011b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011bc:	d00f      	beq.n	80011de <PDM_CAN_Transmit_Data+0xce>
 80011be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011c2:	dc14      	bgt.n	80011ee <PDM_CAN_Transmit_Data+0xde>
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d002      	beq.n	80011ce <PDM_CAN_Transmit_Data+0xbe>
 80011c8:	2bc8      	cmp	r3, #200	; 0xc8
 80011ca:	d004      	beq.n	80011d6 <PDM_CAN_Transmit_Data+0xc6>
 80011cc:	e00f      	b.n	80011ee <PDM_CAN_Transmit_Data+0xde>
	{
	case DATA_FREQ_100HZ:
		Can_Tx_Message.ExtId = 0x1E35C003;
 80011ce:	4b66      	ldr	r3, [pc, #408]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80011d0:	4a66      	ldr	r2, [pc, #408]	; (800136c <PDM_CAN_Transmit_Data+0x25c>)
 80011d2:	605a      	str	r2, [r3, #4]
		break;
 80011d4:	e00d      	b.n	80011f2 <PDM_CAN_Transmit_Data+0xe2>
	case DATA_FREQ_50HZ:
		Can_Tx_Message.ExtId = 0x1E35C004;
 80011d6:	4b64      	ldr	r3, [pc, #400]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80011d8:	4a65      	ldr	r2, [pc, #404]	; (8001370 <PDM_CAN_Transmit_Data+0x260>)
 80011da:	605a      	str	r2, [r3, #4]
		break;
 80011dc:	e009      	b.n	80011f2 <PDM_CAN_Transmit_Data+0xe2>
	case DATA_FREQ_25HZ:
		Can_Tx_Message.ExtId = 0x1E35C005;
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80011e0:	4a64      	ldr	r2, [pc, #400]	; (8001374 <PDM_CAN_Transmit_Data+0x264>)
 80011e2:	605a      	str	r2, [r3, #4]
		break;
 80011e4:	e005      	b.n	80011f2 <PDM_CAN_Transmit_Data+0xe2>
	case DATA_FREQ_10HZ:
		Can_Tx_Message.ExtId = 0x1E35C006;
 80011e6:	4b60      	ldr	r3, [pc, #384]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80011e8:	4a63      	ldr	r2, [pc, #396]	; (8001378 <PDM_CAN_Transmit_Data+0x268>)
 80011ea:	605a      	str	r2, [r3, #4]
		break;
 80011ec:	e001      	b.n	80011f2 <PDM_CAN_Transmit_Data+0xe2>
	default:
		return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0ad      	b.n	800134e <PDM_CAN_Transmit_Data+0x23e>
	}

	Can_Tx_Message.IDE = CAN_ID_EXT;
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80011f4:	2204      	movs	r2, #4
 80011f6:	609a      	str	r2, [r3, #8]
	Can_Tx_Message.RTR = CAN_RTR_DATA;
 80011f8:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
	Can_Tx_Message.TransmitGlobalTime = DISABLE;
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 8001200:	2200      	movs	r2, #0
 8001202:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i <= (2 * data_index); i += 2)
 8001204:	2300      	movs	r3, #0
 8001206:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800120a:	e096      	b.n	800133a <PDM_CAN_Transmit_Data+0x22a>
	{
		Can_Tx_Message.DLC = 4;
 800120c:	4b56      	ldr	r3, [pc, #344]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 800120e:	2204      	movs	r2, #4
 8001210:	611a      	str	r2, [r3, #16]

		Can_Tx_Data[0] = data_buffer[i] >> 8;
 8001212:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800121c:	4413      	add	r3, r2
 800121e:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b54      	ldr	r3, [pc, #336]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 800122a:	701a      	strb	r2, [r3, #0]
		Can_Tx_Data[1] = data_buffer[i] & 0xFF;
 800122c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001236:	4413      	add	r3, r2
 8001238:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b4f      	ldr	r3, [pc, #316]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 8001240:	705a      	strb	r2, [r3, #1]
		Can_Tx_Data[2] = data_buffer[i + 1] >> 8;
 8001242:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001246:	3301      	adds	r3, #1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800124e:	4413      	add	r3, r2
 8001250:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29b      	uxth	r3, r3
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 800125c:	709a      	strb	r2, [r3, #2]
		Can_Tx_Data[3] = data_buffer[i + 1] & 0xFF;
 800125e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001262:	3301      	adds	r3, #1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800126a:	4413      	add	r3, r2
 800126c:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b42      	ldr	r3, [pc, #264]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 8001274:	70da      	strb	r2, [r3, #3]

		if((data_index - i) >= 2)
 8001276:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800127a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	dd39      	ble.n	80012f8 <PDM_CAN_Transmit_Data+0x1e8>
		{
			Can_Tx_Message.DLC = 8;
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 8001286:	2208      	movs	r2, #8
 8001288:	611a      	str	r2, [r3, #16]

			i += 2;
 800128a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800128e:	3302      	adds	r3, #2
 8001290:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

			Can_Tx_Data[4] = data_buffer[i] >> 8;
 8001294:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800129e:	4413      	add	r3, r2
 80012a0:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 80012ac:	711a      	strb	r2, [r3, #4]
			Can_Tx_Data[5] = data_buffer[i] & 0xFF;
 80012ae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012b8:	4413      	add	r3, r2
 80012ba:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 80012c2:	715a      	strb	r2, [r3, #5]
			Can_Tx_Data[6] = data_buffer[i + 1] >> 8;
 80012c4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80012c8:	3301      	adds	r3, #1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012d0:	4413      	add	r3, r2
 80012d2:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 80012de:	719a      	strb	r2, [r3, #6]
			Can_Tx_Data[7] = data_buffer[i + 1] & 0xFF;
 80012e0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80012e4:	3301      	adds	r3, #1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ec:	4413      	add	r3, r2
 80012ee:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 80012f6:	71da      	strb	r2, [r3, #7]
		}

		Ret_Val = HAL_CAN_AddTxMessage(hcan, &Can_Tx_Message, Can_Tx_Data, &pTxMailbox);
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <PDM_CAN_Transmit_Data+0x270>)
 80012fa:	4a20      	ldr	r2, [pc, #128]	; (800137c <PDM_CAN_Transmit_Data+0x26c>)
 80012fc:	491a      	ldr	r1, [pc, #104]	; (8001368 <PDM_CAN_Transmit_Data+0x258>)
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f002 f8e9 	bl	80034d6 <HAL_CAN_AddTxMessage>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001310:	e004      	b.n	800131c <PDM_CAN_Transmit_Data+0x20c>
 8001312:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001316:	3301      	adds	r3, #1
 8001318:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f002 f9b5 	bl	800368c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b03      	cmp	r3, #3
 8001326:	d003      	beq.n	8001330 <PDM_CAN_Transmit_Data+0x220>
 8001328:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800132c:	2b02      	cmp	r3, #2
 800132e:	d9f0      	bls.n	8001312 <PDM_CAN_Transmit_Data+0x202>
	for(uint8_t i = 0; i <= (2 * data_index); i += 2)
 8001330:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001334:	3302      	adds	r3, #2
 8001336:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800133a:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 800133e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	429a      	cmp	r2, r3
 8001346:	f77f af61 	ble.w	800120c <PDM_CAN_Transmit_Data+0xfc>
	}

	return Ret_Val;
 800134a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800134e:	4618      	mov	r0, r3
 8001350:	3788      	adds	r7, #136	; 0x88
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000f70 	.word	0x20000f70
 800135c:	20001178 	.word	0x20001178
 8001360:	20000458 	.word	0x20000458
 8001364:	20001240 	.word	0x20001240
 8001368:	20000440 	.word	0x20000440
 800136c:	1e35c003 	.word	0x1e35c003
 8001370:	1e35c004 	.word	0x1e35c004
 8001374:	1e35c005 	.word	0x1e35c005
 8001378:	1e35c006 	.word	0x1e35c006
 800137c:	2000103c 	.word	0x2000103c
 8001380:	200003f4 	.word	0x200003f4

08001384 <PDM_CAN_Process_Rx_Data>:

void PDM_CAN_Process_Rx_Data()
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
	uint8_t return_flag = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
	uint32_t Rx_ID = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]

	if(Can_Rx_Message.IDE == CAN_ID_STD)
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <PDM_CAN_Process_Rx_Data+0x174>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <PDM_CAN_Process_Rx_Data+0x1e>
	{
		Rx_ID = Can_Rx_Message.StdId;
 800139a:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <PDM_CAN_Process_Rx_Data+0x174>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	e002      	b.n	80013a8 <PDM_CAN_Process_Rx_Data+0x24>
	}else{
		Rx_ID = Can_Rx_Message.ExtId;
 80013a2:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <PDM_CAN_Process_Rx_Data+0x174>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i = 0; i < 4; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	e098      	b.n	80014e0 <PDM_CAN_Process_Rx_Data+0x15c>
	{
		if(Rx_ID == PWM_Pins[i].Command_Var_CAN_ID[0])
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 80013b2:	f44f 710c 	mov.w	r1, #560	; 0x230
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	3318      	adds	r3, #24
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d13d      	bne.n	8001442 <PDM_CAN_Process_Rx_Data+0xbe>
		{
			PWM_Pins[i].Command_Var[0]  = (Can_Rx_Data[PWM_Pins[i].Command_Var_Position[0]]) << 8;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 80013ca:	f44f 710c 	mov.w	r1, #560	; 0x230
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	3313      	adds	r3, #19
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <PDM_CAN_Process_Rx_Data+0x17c>)
 80013dc:	5c9b      	ldrb	r3, [r3, r2]
 80013de:	021a      	lsls	r2, r3, #8
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	b210      	sxth	r0, r2
 80013e4:	4a45      	ldr	r2, [pc, #276]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 80013e6:	f44f 710c 	mov.w	r1, #560	; 0x230
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	3322      	adds	r3, #34	; 0x22
 80013f2:	4602      	mov	r2, r0
 80013f4:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[0] |= (Can_Rx_Data[PWM_Pins[i].Command_Var_Position[0] + 1]) & 0xFF;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4a40      	ldr	r2, [pc, #256]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 80013fa:	f44f 710c 	mov.w	r1, #560	; 0x230
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	3322      	adds	r3, #34	; 0x22
 8001406:	f9b3 1000 	ldrsh.w	r1, [r3]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 800140e:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001412:	fb00 f303 	mul.w	r3, r0, r3
 8001416:	4413      	add	r3, r2
 8001418:	3313      	adds	r3, #19
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a38      	ldr	r2, [pc, #224]	; (8001500 <PDM_CAN_Process_Rx_Data+0x17c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	b21a      	sxth	r2, r3
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	430a      	orrs	r2, r1
 8001428:	b210      	sxth	r0, r2
 800142a:	4a34      	ldr	r2, [pc, #208]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 800142c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001430:	fb01 f303 	mul.w	r3, r1, r3
 8001434:	4413      	add	r3, r2
 8001436:	3322      	adds	r3, #34	; 0x22
 8001438:	4602      	mov	r2, r0
 800143a:	801a      	strh	r2, [r3, #0]

			return_flag = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e048      	b.n	80014d4 <PDM_CAN_Process_Rx_Data+0x150>
		}
		else if(Rx_ID == PWM_Pins[i].Command_Var_CAN_ID[1])
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 8001446:	f44f 710c 	mov.w	r1, #560	; 0x230
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	331c      	adds	r3, #28
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	429a      	cmp	r2, r3
 8001458:	d13c      	bne.n	80014d4 <PDM_CAN_Process_Rx_Data+0x150>
		{
			PWM_Pins[i].Command_Var[1]  = (Can_Rx_Data[PWM_Pins[i].Command_Var_Position[1]]) << 8;
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 800145e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	4413      	add	r3, r2
 8001468:	3314      	adds	r3, #20
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <PDM_CAN_Process_Rx_Data+0x17c>)
 8001470:	5c9b      	ldrb	r3, [r3, r2]
 8001472:	021a      	lsls	r2, r3, #8
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	b210      	sxth	r0, r2
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 800147a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	3324      	adds	r3, #36	; 0x24
 8001486:	4602      	mov	r2, r0
 8001488:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[1] |= (Can_Rx_Data[PWM_Pins[i].Command_Var_Position[1] + 1]) & 0xFF;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 800148e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	4413      	add	r3, r2
 8001498:	3324      	adds	r3, #36	; 0x24
 800149a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 80014a2:	f44f 700c 	mov.w	r0, #560	; 0x230
 80014a6:	fb00 f303 	mul.w	r3, r0, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	3314      	adds	r3, #20
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <PDM_CAN_Process_Rx_Data+0x17c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	b210      	sxth	r0, r2
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <PDM_CAN_Process_Rx_Data+0x178>)
 80014c0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	3324      	adds	r3, #36	; 0x24
 80014cc:	4602      	mov	r2, r0
 80014ce:	801a      	strh	r2, [r3, #0]

			return_flag = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
		}

		if(return_flag == 1)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d007      	beq.n	80014ea <PDM_CAN_Process_Rx_Data+0x166>
	for(uint8_t i = 0; i < 4; i++)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3301      	adds	r3, #1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	f67f af63 	bls.w	80013ae <PDM_CAN_Process_Rx_Data+0x2a>
			return;
	}

	return;
 80014e8:	e000      	b.n	80014ec <PDM_CAN_Process_Rx_Data+0x168>
			return;
 80014ea:	bf00      	nop
}
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2000110c 	.word	0x2000110c
 80014fc:	200005a8 	.word	0x200005a8
 8001500:	200005a0 	.word	0x200005a0

08001504 <PDM_Output_Set>:
	return PCF8574_Write_Pins(hi2c, level_buffer, 0);
}
#endif

static void PDM_Output_Set(uint8_t output_pin, uint8_t output_level)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	460a      	mov	r2, r1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	71bb      	strb	r3, [r7, #6]
	switch(output_pin)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	3b04      	subs	r3, #4
 8001518:	2b0b      	cmp	r3, #11
 800151a:	d878      	bhi.n	800160e <PDM_Output_Set+0x10a>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <PDM_Output_Set+0x20>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001555 	.word	0x08001555
 8001528:	08001565 	.word	0x08001565
 800152c:	08001575 	.word	0x08001575
 8001530:	08001585 	.word	0x08001585
 8001534:	08001595 	.word	0x08001595
 8001538:	080015a5 	.word	0x080015a5
 800153c:	080015b5 	.word	0x080015b5
 8001540:	080015c5 	.word	0x080015c5
 8001544:	080015d5 	.word	0x080015d5
 8001548:	080015e3 	.word	0x080015e3
 800154c:	080015f1 	.word	0x080015f1
 8001550:	080015ff 	.word	0x080015ff
	{
	case 4:
		HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_level);
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	461a      	mov	r2, r3
 8001558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155c:	482e      	ldr	r0, [pc, #184]	; (8001618 <PDM_Output_Set+0x114>)
 800155e:	f003 f9cb 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8001562:	e053      	b.n	800160c <PDM_Output_Set+0x108>

	case 5:
		HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_level);
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	461a      	mov	r2, r3
 8001568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156c:	482a      	ldr	r0, [pc, #168]	; (8001618 <PDM_Output_Set+0x114>)
 800156e:	f003 f9c3 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8001572:	e04b      	b.n	800160c <PDM_Output_Set+0x108>

	case 6:
		HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_level);
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	461a      	mov	r2, r3
 8001578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800157c:	4826      	ldr	r0, [pc, #152]	; (8001618 <PDM_Output_Set+0x114>)
 800157e:	f003 f9bb 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8001582:	e043      	b.n	800160c <PDM_Output_Set+0x108>

	case 7:
		HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_level);
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	461a      	mov	r2, r3
 8001588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158c:	4822      	ldr	r0, [pc, #136]	; (8001618 <PDM_Output_Set+0x114>)
 800158e:	f003 f9b3 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8001592:	e03b      	b.n	800160c <PDM_Output_Set+0x108>

#ifndef LQFP64
	case 8:
		HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_level);
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	461a      	mov	r2, r3
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	481e      	ldr	r0, [pc, #120]	; (8001618 <PDM_Output_Set+0x114>)
 800159e:	f003 f9ab 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015a2:	e033      	b.n	800160c <PDM_Output_Set+0x108>

	case 9:
		HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_level);
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ac:	481a      	ldr	r0, [pc, #104]	; (8001618 <PDM_Output_Set+0x114>)
 80015ae:	f003 f9a3 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015b2:	e02b      	b.n	800160c <PDM_Output_Set+0x108>

	case 10:
		HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_level);
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	461a      	mov	r2, r3
 80015b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015bc:	4816      	ldr	r0, [pc, #88]	; (8001618 <PDM_Output_Set+0x114>)
 80015be:	f003 f99b 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015c2:	e023      	b.n	800160c <PDM_Output_Set+0x108>

	case 11:
		HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_level);
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015cc:	4812      	ldr	r0, [pc, #72]	; (8001618 <PDM_Output_Set+0x114>)
 80015ce:	f003 f993 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015d2:	e01b      	b.n	800160c <PDM_Output_Set+0x108>

	case 12:
		HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_level);
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	461a      	mov	r2, r3
 80015d8:	2108      	movs	r1, #8
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <PDM_Output_Set+0x118>)
 80015dc:	f003 f98c 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015e0:	e014      	b.n	800160c <PDM_Output_Set+0x108>

	case 13:
		HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_level);
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2104      	movs	r1, #4
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <PDM_Output_Set+0x118>)
 80015ea:	f003 f985 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015ee:	e00d      	b.n	800160c <PDM_Output_Set+0x108>

	case 14:
		HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_level);
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	461a      	mov	r2, r3
 80015f4:	2120      	movs	r1, #32
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <PDM_Output_Set+0x118>)
 80015f8:	f003 f97e 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80015fc:	e006      	b.n	800160c <PDM_Output_Set+0x108>

	case 15:
		HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_level);
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	461a      	mov	r2, r3
 8001602:	2110      	movs	r1, #16
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <PDM_Output_Set+0x118>)
 8001606:	f003 f977 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 800160a:	bf00      	nop
#endif
	}

	return;
 800160c:	bf00      	nop
 800160e:	bf00      	nop
}
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40021800 	.word	0x40021800

08001620 <PDM_Output_Process>:

	return;
}

void PDM_Output_Process()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
#ifndef LQFP64
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8001626:	2304      	movs	r3, #4
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e036      	b.n	800169a <PDM_Output_Process+0x7a>
#else
	for(uint8_t i = 4; i < (NBR_OF_OUTPUTS - 8); i++)
#endif
	{
		if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[0], Output_Pin[i].Input_Levels[0],
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <PDM_Output_Process+0xc0>)
 8001630:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <PDM_Output_Process+0xc4>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4013      	ands	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4928      	ldr	r1, [pc, #160]	; (80016e0 <PDM_Output_Process+0xc0>)
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	889b      	ldrh	r3, [r3, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	d00f      	beq.n	800166a <PDM_Output_Process+0x4a>
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <PDM_Output_Process+0xc0>)
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	885a      	ldrh	r2, [r3, #2]
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <PDM_Output_Process+0xc4>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	4013      	ands	r3, r2
 800165a:	b29a      	uxth	r2, r3
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4920      	ldr	r1, [pc, #128]	; (80016e0 <PDM_Output_Process+0xc0>)
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	88db      	ldrh	r3, [r3, #6]
 8001666:	429a      	cmp	r2, r3
 8001668:	d10f      	bne.n	800168a <PDM_Output_Process+0x6a>
										 Output_Pin[i].Enabled_Inputs[1], Output_Pin[i].Input_Levels[1]))
										 && (((Driver_Safety_Flag >> i) & 0x01) == 1))
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <PDM_Output_Process+0xc8>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	fa42 f303 	asr.w	r3, r2, r3
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <PDM_Output_Process+0x6a>
		{
			PDM_Output_Set(i, GPIO_PIN_SET);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2101      	movs	r1, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff3e 	bl	8001504 <PDM_Output_Set>
 8001688:	e004      	b.n	8001694 <PDM_Output_Process+0x74>
		}else{
			PDM_Output_Set(i, GPIO_PIN_RESET);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff38 	bl	8001504 <PDM_Output_Set>
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	3301      	adds	r3, #1
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d9c5      	bls.n	800162c <PDM_Output_Process+0xc>

#ifdef LQFP64
	PDM_Output_Expander_Set(&hi2c1);
#endif

	PWM_Pin_Status &= 0xF0;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <PDM_Output_Process+0xcc>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f023 030f 	bic.w	r3, r3, #15
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <PDM_Output_Process+0xcc>)
 80016ac:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 4; i++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	71bb      	strb	r3, [r7, #6]
 80016b2:	e00e      	b.n	80016d2 <PDM_Output_Process+0xb2>
	{
		PDM_PWM_Output_Process(&PWM_Pins[i], i);
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	f44f 720c 	mov.w	r2, #560	; 0x230
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <PDM_Output_Process+0xd0>)
 80016c0:	4413      	add	r3, r2
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fc06 	bl	8001ed8 <PDM_PWM_Output_Process>
	for(uint8_t i = 0; i < 4; i++)
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	3301      	adds	r3, #1
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d9ed      	bls.n	80016b4 <PDM_Output_Process+0x94>
	}

	return;
 80016d8:	bf00      	nop
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000108c 	.word	0x2000108c
 80016e4:	200012c4 	.word	0x200012c4
 80016e8:	2000059c 	.word	0x2000059c
 80016ec:	20000f00 	.word	0x20000f00
 80016f0:	200005a8 	.word	0x200005a8

080016f4 <PDM_Output_Fuse>:

void PDM_Output_Fuse()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	uint8_t fuse_flag = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	e04f      	b.n	80017a4 <PDM_Output_Fuse+0xb0>
	{
		if(Data_Buffer[i] > Current_Thresholds[i])
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <PDM_Output_Fuse+0xd4>)
 8001708:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	492f      	ldr	r1, [pc, #188]	; (80017cc <PDM_Output_Fuse+0xd8>)
 8001710:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001714:	429a      	cmp	r2, r3
 8001716:	d92e      	bls.n	8001776 <PDM_Output_Fuse+0x82>
		{
			Accumulator_Output_Fuse[i] += Accumulator_Output_Check;
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <PDM_Output_Fuse+0xdc>)
 800171c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <PDM_Output_Fuse+0xe0>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	440a      	add	r2, r1
 8001728:	4929      	ldr	r1, [pc, #164]	; (80017d0 <PDM_Output_Fuse+0xdc>)
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(Accumulator_Output_Fuse[i] >= (Timeout_Output_Fuse[i] * 10))
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <PDM_Output_Fuse+0xdc>)
 8001732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	4927      	ldr	r1, [pc, #156]	; (80017d8 <PDM_Output_Fuse+0xe4>)
 800173a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800173e:	4619      	mov	r1, r3
 8001740:	460b      	mov	r3, r1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	429a      	cmp	r2, r3
 800174a:	d328      	bcc.n	800179e <PDM_Output_Fuse+0xaa>
			{
				Driver_Safety_Flag |= (1 << i);
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	2201      	movs	r2, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <PDM_Output_Fuse+0xe8>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21b      	sxth	r3, r3
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <PDM_Output_Fuse+0xe8>)
 8001764:	801a      	strh	r2, [r3, #0]
				Accumulator_Output_Fuse[i] = 0;
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <PDM_Output_Fuse+0xdc>)
 800176a:	2100      	movs	r1, #0
 800176c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				fuse_flag = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	e013      	b.n	800179e <PDM_Output_Fuse+0xaa>
			}

		}else{
			Driver_Overcurrent_Flag &= ~(1 << i);
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	2201      	movs	r2, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	b21b      	sxth	r3, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <PDM_Output_Fuse+0xec>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b21b      	sxth	r3, r3
 800178a:	4013      	ands	r3, r2
 800178c:	b21b      	sxth	r3, r3
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <PDM_Output_Fuse+0xec>)
 8001792:	801a      	strh	r2, [r3, #0]
			Accumulator_Output_Fuse[i] = 0;
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <PDM_Output_Fuse+0xdc>)
 8001798:	2100      	movs	r1, #0
 800179a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	3301      	adds	r3, #1
 80017a2:	71bb      	strb	r3, [r7, #6]
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d9ac      	bls.n	8001704 <PDM_Output_Fuse+0x10>
		}
	}

	Accumulator_Output_Check -= OUTPUT_FUSE_FREQ;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <PDM_Output_Fuse+0xe0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3b64      	subs	r3, #100	; 0x64
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <PDM_Output_Fuse+0xe0>)
 80017b2:	6013      	str	r3, [r2, #0]

	if(fuse_flag == 1)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <PDM_Output_Fuse+0xcc>
		PDM_Output_Process();
 80017ba:	f7ff ff31 	bl	8001620 <PDM_Output_Process>

	return;
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20001240 	.word	0x20001240
 80017cc:	20000478 	.word	0x20000478
 80017d0:	20000f2c 	.word	0x20000f2c
 80017d4:	20000598 	.word	0x20000598
 80017d8:	200003d4 	.word	0x200003d4
 80017dc:	2000059c 	.word	0x2000059c
 80017e0:	20000498 	.word	0x20000498

080017e4 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "pdm.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d109      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if(Accumulator_Delay > 0)
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d02d      	beq.n	800185a <HAL_TIM_PeriodElapsedCallback+0x76>
			Accumulator_Delay--;
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3b01      	subs	r3, #1
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001806:	6013      	str	r3, [r2, #0]

		return;
 8001808:	e027      	b.n	800185a <HAL_TIM_PeriodElapsedCallback+0x76>
	}
	else if(htim->Instance == TIM6)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d123      	bne.n	800185c <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		Accumulator_Output_Check++;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800181c:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_10Hz++;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001826:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25Hz++;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a13      	ldr	r2, [pc, #76]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001830:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50Hz++;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800183a:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100Hz++;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001844:	6013      	str	r3, [r2, #0]

		if(EEPROM_Write_Status == 1)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d106      	bne.n	800185c <HAL_TIM_PeriodElapsedCallback+0x78>
			Accumulator_EEPROM_Write++;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e000      	b.n	800185c <HAL_TIM_PeriodElapsedCallback+0x78>
		return;
 800185a:	bf00      	nop
	}
}
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40001400 	.word	0x40001400
 800186c:	200011b4 	.word	0x200011b4
 8001870:	40001000 	.word	0x40001000
 8001874:	20000598 	.word	0x20000598
 8001878:	20001128 	.word	0x20001128
 800187c:	20000eb4 	.word	0x20000eb4
 8001880:	20000f6c 	.word	0x20000f6c
 8001884:	20000f90 	.word	0x20000f90
 8001888:	200003d0 	.word	0x200003d0
 800188c:	20001174 	.word	0x20001174

08001890 <HAL_CAN_RxFifo0MsgPendingCallback>:

	PDM_Output_Process();
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Can_Rx_Message, Can_Rx_Data) == HAL_OK)
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800189c:	2100      	movs	r1, #0
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 ff29 	bl	80036f6 <HAL_CAN_GetRxMessage>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
	{
		PDM_CAN_Process_Rx_Data();
 80018aa:	f7ff fd6b 	bl	8001384 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018b2:	f003 f83a 	bl	800492a <HAL_GPIO_TogglePin>
	}
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200005a0 	.word	0x200005a0
 80018c4:	2000110c 	.word	0x2000110c
 80018c8:	40021800 	.word	0x40021800

080018cc <Linear_Interpolation>:
 */

#include "pdm.h"

static int16_t Linear_Interpolation(int16_t x, int16_t x0, int16_t x1, int16_t y0, int16_t y1)
{
 80018cc:	b490      	push	{r4, r7}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	803b      	strh	r3, [r7, #0]
	return (((y1 - y0) * (x - x0)) / (x1 - x0)) + y0;
 80018ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80018ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80018f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018fc:	1a8a      	subs	r2, r1, r2
 80018fe:	fb02 f203 	mul.w	r2, r2, r3
 8001902:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190a:	1acb      	subs	r3, r1, r3
 800190c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001910:	b29a      	uxth	r2, r3
 8001912:	883b      	ldrh	r3, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bc90      	pop	{r4, r7}
 8001922:	4770      	bx	lr

08001924 <Bilinear_Interpolation>:

static int16_t Bilinear_Interpolation(int16_t x, int16_t y, int16_t x0, int16_t x1, int16_t y0, int16_t y1, int16_t z00, int16_t z01, int16_t z10, int16_t z11)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b087      	sub	sp, #28
 8001928:	af02      	add	r7, sp, #8
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4603      	mov	r3, r0
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	803b      	strh	r3, [r7, #0]
	int16_t z[2];

	z[0] = Linear_Interpolation(x, x0, x1, z00, z01);
 8001942:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8001946:	f9b7 2000 	ldrsh.w	r2, [r7]
 800194a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800194e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001952:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4623      	mov	r3, r4
 800195a:	f7ff ffb7 	bl	80018cc <Linear_Interpolation>
 800195e:	4603      	mov	r3, r0
 8001960:	81bb      	strh	r3, [r7, #12]
	z[1] = Linear_Interpolation(x, x0, x1, z10, z11);
 8001962:	f9b7 4030 	ldrsh.w	r4, [r7, #48]	; 0x30
 8001966:	f9b7 2000 	ldrsh.w	r2, [r7]
 800196a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800196e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001972:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4623      	mov	r3, r4
 800197a:	f7ff ffa7 	bl	80018cc <Linear_Interpolation>
 800197e:	4603      	mov	r3, r0
 8001980:	81fb      	strh	r3, [r7, #14]

	return Linear_Interpolation(y, y0, y1, z[0], z[1]);
 8001982:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 8001986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800198a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800198e:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8001992:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4623      	mov	r3, r4
 800199a:	f7ff ff97 	bl	80018cc <Linear_Interpolation>
 800199e:	4603      	mov	r3, r0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <PDM_PWM_Duty_Cycle_Set>:

static void PDM_PWM_Duty_Cycle_Set(PWM_Control_Struct* pwm_struct)
{
 80019a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ac:	b08a      	sub	sp, #40	; 0x28
 80019ae:	af06      	add	r7, sp, #24
 80019b0:	6078      	str	r0, [r7, #4]
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019be:	429a      	cmp	r2, r3
 80019c0:	dc0e      	bgt.n	80019e0 <PDM_PWM_Duty_Cycle_Set+0x38>
		&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dc06      	bgt.n	80019e0 <PDM_PWM_Duty_Cycle_Set+0x38>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][0];
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		return;
 80019de:	e276      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019ec:	429a      	cmp	r2, r3
 80019ee:	db13      	blt.n	8001a18 <PDM_PWM_Duty_Cycle_Set+0x70>
			 && (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dc0b      	bgt.n	8001a18 <PDM_PWM_Duty_Cycle_Set+0x70>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][pwm_struct->Map_Lengths[0]];
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	3334      	adds	r3, #52	; 0x34
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	889a      	ldrh	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		return;
 8001a16:	e25a      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
	}
	else if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dc17      	bgt.n	8001a58 <PDM_PWM_Duty_Cycle_Set+0xb0>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001a34:	429a      	cmp	r2, r3
 8001a36:	db0f      	blt.n	8001a58 <PDM_PWM_Duty_Cycle_Set+0xb0>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][0];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a3e:	4619      	mov	r1, r3
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a5b      	subs	r3, r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	336c      	adds	r3, #108	; 0x6c
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		return;
 8001a56:	e23a      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001a64:	429a      	cmp	r2, r3
 8001a66:	db1c      	blt.n	8001aa2 <PDM_PWM_Duty_Cycle_Set+0xfa>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001a74:	429a      	cmp	r2, r3
 8001a76:	db14      	blt.n	8001aa2 <PDM_PWM_Duty_Cycle_Set+0xfa>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][pwm_struct->Map_Lengths[0]];
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a86:	4618      	mov	r0, r3
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a5b      	subs	r3, r3, r1
 8001a90:	4403      	add	r3, r0
 8001a92:	3334      	adds	r3, #52	; 0x34
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	889a      	ldrh	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		return;
 8001aa0:	e215      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
	}

	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dd08      	ble.n	8001ac4 <PDM_PWM_Duty_Cycle_Set+0x11c>
		|| (pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1]))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	f2c0 809f 	blt.w	8001c02 <PDM_PWM_Duty_Cycle_Set+0x25a>
	{
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e094      	b.n	8001bf4 <PDM_PWM_Duty_Cycle_Set+0x24c>
		{
			if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	3316      	adds	r3, #22
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	440b      	add	r3, r1
 8001ada:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	f2c0 8085 	blt.w	8001bee <PDM_PWM_Duty_Cycle_Set+0x246>
				&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	3316      	adds	r3, #22
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	440b      	add	r3, r1
 8001af6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dc77      	bgt.n	8001bee <PDM_PWM_Duty_Cycle_Set+0x246>
			{
				if(pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dc32      	bgt.n	8001b74 <PDM_PWM_Duty_Cycle_Set+0x1cc>
				{
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f9b3 0024 	ldrsh.w	r0, [r3, #36]	; 0x24
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	3316      	adds	r3, #22
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
																  pwm_struct->Command_Var_Step[1][y],
																  pwm_struct->Command_Var_Step[1][y + 1],
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	3301      	adds	r3, #1
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	3316      	adds	r3, #22
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
																  pwm_struct->Duty_Cycle_Map[y][0],
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	440b      	add	r3, r1
 8001b40:	336c      	adds	r3, #108	; 0x6c
 8001b42:	881b      	ldrh	r3, [r3, #0]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001b44:	b21e      	sxth	r6, r3
																  pwm_struct->Duty_Cycle_Map[y + 1][0]);
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	336c      	adds	r3, #108	; 0x6c
 8001b58:	881b      	ldrh	r3, [r3, #0]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4633      	mov	r3, r6
 8001b60:	462a      	mov	r2, r5
 8001b62:	4621      	mov	r1, r4
 8001b64:	f7ff feb2 	bl	80018cc <Linear_Interpolation>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
																  pwm_struct->Command_Var_Step[1][y],
																  pwm_struct->Command_Var_Step[1][y + 1],
																  pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
																  pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
				}
				return;
 8001b72:	e1ac      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f9b3 0024 	ldrsh.w	r0, [r3, #36]	; 0x24
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	3316      	adds	r3, #22
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
																  pwm_struct->Command_Var_Step[1][y + 1],
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3301      	adds	r3, #1
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	3316      	adds	r3, #22
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
																  pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba0:	461e      	mov	r6, r3
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	4433      	add	r3, r6
 8001bac:	3334      	adds	r3, #52	; 0x34
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001bb4:	b21e      	sxth	r6, r3
																  pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	4463      	add	r3, ip
 8001bcc:	3334      	adds	r3, #52	; 0x34
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[1],
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	4633      	mov	r3, r6
 8001bda:	462a      	mov	r2, r5
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff fe75 	bl	80018cc <Linear_Interpolation>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
				return;
 8001bec:	e16f      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f4ff af64 	bcc.w	8001aca <PDM_PWM_Duty_Cycle_Set+0x122>
			}
		}
	}

	if((pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dd08      	ble.n	8001c24 <PDM_PWM_Duty_Cycle_Set+0x27c>
		|| (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	f2c0 8098 	blt.w	8001d54 <PDM_PWM_Duty_Cycle_Set+0x3ac>
	{
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	73bb      	strb	r3, [r7, #14]
 8001c28:	e08d      	b.n	8001d46 <PDM_PWM_Duty_Cycle_Set+0x39e>
		{
			if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	3314      	adds	r3, #20
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	440b      	add	r3, r1
 8001c3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	db7e      	blt.n	8001d40 <PDM_PWM_Duty_Cycle_Set+0x398>
				&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001c48:	7bbb      	ldrb	r3, [r7, #14]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	3314      	adds	r3, #20
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dc71      	bgt.n	8001d40 <PDM_PWM_Duty_Cycle_Set+0x398>
			{
				if(pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dc2b      	bgt.n	8001cc4 <PDM_PWM_Duty_Cycle_Set+0x31c>
				{
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8001c72:	7bbb      	ldrb	r3, [r7, #14]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	3314      	adds	r3, #20
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
																  pwm_struct->Command_Var_Step[0][x],
																  pwm_struct->Command_Var_Step[0][x + 1],
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	3301      	adds	r3, #1
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	3314      	adds	r3, #20
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
																  pwm_struct->Duty_Cycle_Map[0][x],
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	3334      	adds	r3, #52	; 0x34
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001c9c:	b21d      	sxth	r5, r3
																  pwm_struct->Duty_Cycle_Map[0][x + 1]);
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	3334      	adds	r3, #52	; 0x34
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	f7ff fe0a 	bl	80018cc <Linear_Interpolation>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
																  pwm_struct->Command_Var_Step[0][x],
																  pwm_struct->Command_Var_Step[0][x + 1],
																  pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
																  pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
				}
				return;
 8001cc2:	e104      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	3314      	adds	r3, #20
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
																  pwm_struct->Command_Var_Step[0][x + 1],
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	3301      	adds	r3, #1
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	3314      	adds	r3, #20
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
																  pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cee:	461e      	mov	r6, r3
 8001cf0:	7bb9      	ldrb	r1, [r7, #14]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4633      	mov	r3, r6
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1b9b      	subs	r3, r3, r6
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3334      	adds	r3, #52	; 0x34
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001d04:	b21e      	sxth	r6, r3
																  pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	1c59      	adds	r1, r3, #1
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4663      	mov	r3, ip
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	eba3 030c 	sub.w	r3, r3, ip
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3334      	adds	r3, #52	; 0x34
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Linear_Interpolation(pwm_struct->Command_Var[0],
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4633      	mov	r3, r6
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	4621      	mov	r1, r4
 8001d30:	f7ff fdcc 	bl	80018cc <Linear_Interpolation>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
				return;
 8001d3e:	e0c6      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	3301      	adds	r3, #1
 8001d44:	73bb      	strb	r3, [r7, #14]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4c:	7bba      	ldrb	r2, [r7, #14]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	f4ff af6b 	bcc.w	8001c2a <PDM_PWM_Duty_Cycle_Set+0x282>
			}
		}
	}

	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	737b      	strb	r3, [r7, #13]
 8001d58:	e0b1      	b.n	8001ebe <PDM_PWM_Duty_Cycle_Set+0x516>
	{
		if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	3314      	adds	r3, #20
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	f2c0 80a2 	blt.w	8001eb8 <PDM_PWM_Duty_Cycle_Set+0x510>
			&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001d7a:	7b7b      	ldrb	r3, [r7, #13]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	3314      	adds	r3, #20
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	440b      	add	r3, r1
 8001d86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	f300 8094 	bgt.w	8001eb8 <PDM_PWM_Duty_Cycle_Set+0x510>
		{
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	733b      	strb	r3, [r7, #12]
 8001d94:	e089      	b.n	8001eaa <PDM_PWM_Duty_Cycle_Set+0x502>
			{
				if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001d9c:	7b3b      	ldrb	r3, [r7, #12]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	3316      	adds	r3, #22
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	db7a      	blt.n	8001ea4 <PDM_PWM_Duty_Cycle_Set+0x4fc>
					&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001db4:	7b3b      	ldrb	r3, [r7, #12]
 8001db6:	3301      	adds	r3, #1
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	3316      	adds	r3, #22
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dc6d      	bgt.n	8001ea4 <PDM_PWM_Duty_Cycle_Set+0x4fc>
				{
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f9b3 e022 	ldrsh.w	lr, [r3, #34]	; 0x22
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f9b3 8024 	ldrsh.w	r8, [r3, #36]	; 0x24
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	3314      	adds	r3, #20
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	f9b3 9006 	ldrsh.w	r9, [r3, #6]
																	pwm_struct->Command_Var[1],
																	pwm_struct->Command_Var_Step[0][x],
																	pwm_struct->Command_Var_Step[0][x + 1],
 8001de2:	7b7b      	ldrb	r3, [r7, #13]
 8001de4:	3301      	adds	r3, #1
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	3314      	adds	r3, #20
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	f9b3 a006 	ldrsh.w	sl, [r3, #6]
 8001df2:	7b3b      	ldrb	r3, [r7, #12]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	3316      	adds	r3, #22
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
																	pwm_struct->Command_Var_Step[1][y],
																	pwm_struct->Command_Var_Step[1][y + 1],
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	3316      	adds	r3, #22
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
																	pwm_struct->Duty_Cycle_Map[y][x],
 8001e10:	7b3a      	ldrb	r2, [r7, #12]
 8001e12:	7b7d      	ldrb	r5, [r7, #13]
 8001e14:	687c      	ldr	r4, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	442b      	add	r3, r5
 8001e1e:	3334      	adds	r3, #52	; 0x34
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4423      	add	r3, r4
 8001e24:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001e26:	b21c      	sxth	r4, r3
																	pwm_struct->Duty_Cycle_Map[y][x + 1],
 8001e28:	7b3a      	ldrb	r2, [r7, #12]
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	1c5e      	adds	r6, r3, #1
 8001e2e:	687d      	ldr	r5, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	4433      	add	r3, r6
 8001e38:	3334      	adds	r3, #52	; 0x34
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	442b      	add	r3, r5
 8001e3e:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001e40:	b21d      	sxth	r5, r3
																	pwm_struct->Duty_Cycle_Map[y + 1][x],
 8001e42:	7b3b      	ldrb	r3, [r7, #12]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	f897 c00d 	ldrb.w	ip, [r7, #13]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	4463      	add	r3, ip
 8001e54:	3334      	adds	r3, #52	; 0x34
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4433      	add	r3, r6
 8001e5a:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001e5c:	b21e      	sxth	r6, r3
																	pwm_struct->Duty_Cycle_Map[y + 1][x + 1]);
 8001e5e:	7b3b      	ldrb	r3, [r7, #12]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	7b7b      	ldrb	r3, [r7, #13]
 8001e64:	f103 0c01 	add.w	ip, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	4463      	add	r3, ip
 8001e74:	3334      	adds	r3, #52	; 0x34
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	889b      	ldrh	r3, [r3, #4]
					pwm_struct->Duty_Cycle = Bilinear_Interpolation(pwm_struct->Command_Var[0],
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	9305      	str	r3, [sp, #20]
 8001e82:	9604      	str	r6, [sp, #16]
 8001e84:	9503      	str	r5, [sp, #12]
 8001e86:	9402      	str	r4, [sp, #8]
 8001e88:	9001      	str	r0, [sp, #4]
 8001e8a:	9100      	str	r1, [sp, #0]
 8001e8c:	4653      	mov	r3, sl
 8001e8e:	464a      	mov	r2, r9
 8001e90:	4641      	mov	r1, r8
 8001e92:	4670      	mov	r0, lr
 8001e94:	f7ff fd46 	bl	8001924 <Bilinear_Interpolation>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
					return;
 8001ea2:	e014      	b.n	8001ece <PDM_PWM_Duty_Cycle_Set+0x526>
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	733b      	strb	r3, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eb0:	7b3a      	ldrb	r2, [r7, #12]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	f4ff af6f 	bcc.w	8001d96 <PDM_PWM_Duty_Cycle_Set+0x3ee>
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8001eb8:	7b7b      	ldrb	r3, [r7, #13]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	737b      	strb	r3, [r7, #13]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec4:	7b7a      	ldrb	r2, [r7, #13]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	f4ff af47 	bcc.w	8001d5a <PDM_PWM_Duty_Cycle_Set+0x3b2>
				}
			}
		}
	}
	return;
 8001ecc:	bf00      	nop
}
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001ed8 <PDM_PWM_Output_Process>:

	PDM_PWM_Output_Process(pwm_struct, pwm_out_number);
}

void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
		break;
	default:
		return;
	}
#else
	switch(pwm_out_number)
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	f200 80f7 	bhi.w	80020da <PDM_PWM_Output_Process+0x202>
 8001eec:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <PDM_PWM_Output_Process+0x1c>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f0f 	.word	0x08001f0f
 8001efc:	08001f19 	.word	0x08001f19
 8001f00:	08001f23 	.word	0x08001f23
	{
	case 0:
		__PDM_PWM_SELECT_TIM(&htim3, TIM_CHANNEL_4);
 8001f04:	4b77      	ldr	r3, [pc, #476]	; (80020e4 <PDM_PWM_Output_Process+0x20c>)
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	230c      	movs	r3, #12
 8001f0a:	817b      	strh	r3, [r7, #10]
		break;
 8001f0c:	e00e      	b.n	8001f2c <PDM_PWM_Output_Process+0x54>
	case 1:
		__PDM_PWM_SELECT_TIM(&htim8, TIM_CHANNEL_2);
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <PDM_PWM_Output_Process+0x210>)
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	2304      	movs	r3, #4
 8001f14:	817b      	strh	r3, [r7, #10]
		break;
 8001f16:	e009      	b.n	8001f2c <PDM_PWM_Output_Process+0x54>
	case 2:
		__PDM_PWM_SELECT_TIM(&htim2, TIM_CHANNEL_3);
 8001f18:	4b74      	ldr	r3, [pc, #464]	; (80020ec <PDM_PWM_Output_Process+0x214>)
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	817b      	strh	r3, [r7, #10]
		break;
 8001f20:	e004      	b.n	8001f2c <PDM_PWM_Output_Process+0x54>
	case 3:
		__PDM_PWM_SELECT_TIM(&htim1, TIM_CHANNEL_4);
 8001f22:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <PDM_PWM_Output_Process+0x218>)
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	230c      	movs	r3, #12
 8001f28:	817b      	strh	r3, [r7, #10]
		break;
 8001f2a:	bf00      	nop
	default:
		return;
	}
#endif

	if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0],
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <PDM_PWM_Output_Process+0x21c>)
 8001f30:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001f34:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <PDM_PWM_Output_Process+0x220>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	496d      	ldr	r1, [pc, #436]	; (80020f4 <PDM_PWM_Output_Process+0x21c>)
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	889b      	ldrh	r3, [r3, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d00f      	beq.n	8001f6a <PDM_PWM_Output_Process+0x92>
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	4a69      	ldr	r2, [pc, #420]	; (80020f4 <PDM_PWM_Output_Process+0x21c>)
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	885a      	ldrh	r2, [r3, #2]
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <PDM_PWM_Output_Process+0x220>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	4965      	ldr	r1, [pc, #404]	; (80020f4 <PDM_PWM_Output_Process+0x21c>)
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	88db      	ldrh	r3, [r3, #6]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d166      	bne.n	8002038 <PDM_PWM_Output_Process+0x160>
									 Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1]))
									 && (((Driver_Safety_Flag >> pwm_out_number) & 0x01) == 1))
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <PDM_PWM_Output_Process+0x224>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	fa42 f303 	asr.w	r3, r2, r3
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d05c      	beq.n	8002038 <PDM_PWM_Output_Process+0x160>
	{
		if(Data_Verify_Buffer[26 + pwm_out_number] == OUTPUT_PWM_ENABLE)
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	331a      	adds	r3, #26
 8001f82:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <PDM_PWM_Output_Process+0x228>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d14f      	bne.n	800202a <PDM_PWM_Output_Process+0x152>
		{
			if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[0], pwm_struct->Input_DC_Preset[0],
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	885a      	ldrh	r2, [r3, #2]
 8001f9a:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <PDM_PWM_Output_Process+0x220>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	88db      	ldrh	r3, [r3, #6]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d00f      	beq.n	8001fca <PDM_PWM_Output_Process+0xf2>
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	889a      	ldrh	r2, [r3, #4]
 8001fba:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <PDM_PWM_Output_Process+0x220>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	891b      	ldrh	r3, [r3, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d105      	bne.n	8001fd6 <PDM_PWM_Output_Process+0xfe>
											 pwm_struct[pwm_out_number].Input_DC_Preset_Enable[1], pwm_struct->Input_DC_Preset[1]))
			{
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[0];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	89da      	ldrh	r2, [r3, #14]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8001fd4:	e02f      	b.n	8002036 <PDM_PWM_Output_Process+0x15e>
			}
			else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[2], pwm_struct->Input_DC_Preset[2],
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	88da      	ldrh	r2, [r3, #6]
 8001fe6:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <PDM_PWM_Output_Process+0x220>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	4013      	ands	r3, r2
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	895b      	ldrh	r3, [r3, #10]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d00f      	beq.n	8002016 <PDM_PWM_Output_Process+0x13e>
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	891a      	ldrh	r2, [r3, #8]
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <PDM_PWM_Output_Process+0x220>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4013      	ands	r3, r2
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	899b      	ldrh	r3, [r3, #12]
 8002012:	429a      	cmp	r2, r3
 8002014:	d105      	bne.n	8002022 <PDM_PWM_Output_Process+0x14a>
					 	 	 	 	 	 	 	  pwm_struct[pwm_out_number].Input_DC_Preset_Enable[3], pwm_struct->Input_DC_Preset[3]))
			{
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[1];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8a1a      	ldrh	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8002020:	e009      	b.n	8002036 <PDM_PWM_Output_Process+0x15e>
			}else{
				PDM_PWM_Duty_Cycle_Set(pwm_struct);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fcc0 	bl	80019a8 <PDM_PWM_Duty_Cycle_Set>
		if(Data_Verify_Buffer[26 + pwm_out_number] == OUTPUT_PWM_ENABLE)
 8002028:	e00a      	b.n	8002040 <PDM_PWM_Output_Process+0x168>
			}
		}else{
			pwm_struct->Duty_Cycle = 1010;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8002030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		if(Data_Verify_Buffer[26 + pwm_out_number] == OUTPUT_PWM_ENABLE)
 8002034:	e004      	b.n	8002040 <PDM_PWM_Output_Process+0x168>
 8002036:	e003      	b.n	8002040 <PDM_PWM_Output_Process+0x168>
		}
	}else{
		pwm_struct->Duty_Cycle = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	}

	__HAL_TIM_SET_COMPARE(htim, tim_channel, (htim->Init.Period * pwm_struct->Duty_Cycle) / 1000);
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <PDM_PWM_Output_Process+0x18c>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8002050:	fb02 f203 	mul.w	r2, r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	492a      	ldr	r1, [pc, #168]	; (8002104 <PDM_PWM_Output_Process+0x22c>)
 800205a:	fba1 1202 	umull	r1, r2, r1, r2
 800205e:	0992      	lsrs	r2, r2, #6
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
 8002062:	e031      	b.n	80020c8 <PDM_PWM_Output_Process+0x1f0>
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d10e      	bne.n	8002088 <PDM_PWM_Output_Process+0x1b0>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4921      	ldr	r1, [pc, #132]	; (8002104 <PDM_PWM_Output_Process+0x22c>)
 800207e:	fba1 1303 	umull	r1, r3, r1, r3
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	6393      	str	r3, [r2, #56]	; 0x38
 8002086:	e01f      	b.n	80020c8 <PDM_PWM_Output_Process+0x1f0>
 8002088:	897b      	ldrh	r3, [r7, #10]
 800208a:	2b08      	cmp	r3, #8
 800208c:	d10e      	bne.n	80020ac <PDM_PWM_Output_Process+0x1d4>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4918      	ldr	r1, [pc, #96]	; (8002104 <PDM_PWM_Output_Process+0x22c>)
 80020a2:	fba1 1303 	umull	r1, r3, r1, r3
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80020aa:	e00d      	b.n	80020c8 <PDM_PWM_Output_Process+0x1f0>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4911      	ldr	r1, [pc, #68]	; (8002104 <PDM_PWM_Output_Process+0x22c>)
 80020c0:	fba1 1303 	umull	r1, r3, r1, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40

	Data_Buffer[26 + pwm_out_number] = pwm_struct->Duty_Cycle;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	331a      	adds	r3, #26
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	f8b2 106a 	ldrh.w	r1, [r2, #106]	; 0x6a
 80020d2:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <PDM_PWM_Output_Process+0x230>)
 80020d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 80020d8:	e000      	b.n	80020dc <PDM_PWM_Output_Process+0x204>
		return;
 80020da:	bf00      	nop
}
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000e68 	.word	0x20000e68
 80020e8:	200003f8 	.word	0x200003f8
 80020ec:	2000112c 	.word	0x2000112c
 80020f0:	20001044 	.word	0x20001044
 80020f4:	2000108c 	.word	0x2000108c
 80020f8:	200012c4 	.word	0x200012c4
 80020fc:	2000059c 	.word	0x2000059c
 8002100:	20000458 	.word	0x20000458
 8002104:	10624dd3 	.word	0x10624dd3
 8002108:	20001240 	.word	0x20001240

0800210c <PDM_Next_Data_Conversion>:
 */

#include "pdm.h"

void PDM_Next_Data_Conversion(uint8_t Next_Data)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	switch(Next_Data)
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d84d      	bhi.n	80021b8 <PDM_Next_Data_Conversion+0xac>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <PDM_Next_Data_Conversion+0x18>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002139 	.word	0x08002139
 8002128:	080021b9 	.word	0x080021b9
 800212c:	08002159 	.word	0x08002159
 8002130:	08002179 	.word	0x08002179
 8002134:	08002199 	.word	0x08002199
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	2120      	movs	r1, #32
 800213c:	4820      	ldr	r0, [pc, #128]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 800213e:	f002 fbdb 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2108      	movs	r1, #8
 8002146:	481e      	ldr	r0, [pc, #120]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 8002148:	f002 fbd6 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2104      	movs	r1, #4
 8002150:	481b      	ldr	r0, [pc, #108]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 8002152:	f002 fbd1 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8002156:	e02f      	b.n	80021b8 <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002158:	2201      	movs	r2, #1
 800215a:	2120      	movs	r1, #32
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 800215e:	f002 fbcb 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2108      	movs	r1, #8
 8002166:	4816      	ldr	r0, [pc, #88]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 8002168:	f002 fbc6 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 800216c:	2201      	movs	r2, #1
 800216e:	2104      	movs	r1, #4
 8002170:	4813      	ldr	r0, [pc, #76]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 8002172:	f002 fbc1 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8002176:	e01f      	b.n	80021b8 <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002178:	2201      	movs	r2, #1
 800217a:	2120      	movs	r1, #32
 800217c:	4810      	ldr	r0, [pc, #64]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 800217e:	f002 fbbb 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	2108      	movs	r1, #8
 8002186:	480e      	ldr	r0, [pc, #56]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 8002188:	f002 fbb6 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2104      	movs	r1, #4
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 8002192:	f002 fbb1 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 8002196:	e00f      	b.n	80021b8 <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2120      	movs	r1, #32
 800219c:	4808      	ldr	r0, [pc, #32]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 800219e:	f002 fbab 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2108      	movs	r1, #8
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 80021a8:	f002 fba6 	bl	80048f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2104      	movs	r1, #4
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <PDM_Next_Data_Conversion+0xb4>)
 80021b2:	f002 fba1 	bl	80048f8 <HAL_GPIO_WritePin>
		break;
 80021b6:	bf00      	nop
	}
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000

080021c4 <PDM_Read_Data>:

void PDM_Read_Data(uint8_t *Data_read)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim7);
 80021cc:	48ad      	ldr	r0, [pc, #692]	; (8002484 <PDM_Read_Data+0x2c0>)
 80021ce:	f006 fc25 	bl	8008a1c <HAL_TIM_Base_Stop_IT>

	switch(*Data_read)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	f200 8138 	bhi.w	800244c <PDM_Read_Data+0x288>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <PDM_Read_Data+0x20>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f9 	.word	0x080021f9
 80021e8:	0800244d 	.word	0x0800244d
 80021ec:	0800229b 	.word	0x0800229b
 80021f0:	08002349 	.word	0x08002349
 80021f4:	080023b9 	.word	0x080023b9
	{
	case Data_Read_Current0:
		*Data_read = Data_Read_Current0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_CURRENT1;
 80021fe:	4ba2      	ldr	r3, [pc, #648]	; (8002488 <PDM_Read_Data+0x2c4>)
 8002200:	22a0      	movs	r2, #160	; 0xa0
 8002202:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e043      	b.n	8002292 <PDM_Read_Data+0xce>
		{
			Data_Buffer[i * 2] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	4a9f      	ldr	r2, [pc, #636]	; (800248c <PDM_Read_Data+0x2c8>)
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	f241 62f7 	movw	r2, #5879	; 0x16f7
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 800221e:	33dc      	adds	r3, #220	; 0xdc
 8002220:	4a9b      	ldr	r2, [pc, #620]	; (8002490 <PDM_Read_Data+0x2cc>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0b5a      	lsrs	r2, r3, #13
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	b291      	uxth	r1, r2
 800222e:	4a99      	ldr	r2, [pc, #612]	; (8002494 <PDM_Read_Data+0x2d0>)
 8002230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[i * 2] > Current_Thresholds[i * 2])
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4a96      	ldr	r2, [pc, #600]	; (8002494 <PDM_Read_Data+0x2d0>)
 800223a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4995      	ldr	r1, [pc, #596]	; (8002498 <PDM_Read_Data+0x2d4>)
 8002244:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002248:	429a      	cmp	r2, r3
 800224a:	d90d      	bls.n	8002268 <PDM_Read_Data+0xa4>
				Driver_Overcurrent_Flag |= (1 << (i * 2));
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2201      	movs	r2, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	b21a      	sxth	r2, r3
 8002258:	4b90      	ldr	r3, [pc, #576]	; (800249c <PDM_Read_Data+0x2d8>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b21b      	sxth	r3, r3
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b8d      	ldr	r3, [pc, #564]	; (800249c <PDM_Read_Data+0x2d8>)
 8002266:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < 4000)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	4a88      	ldr	r2, [pc, #544]	; (800248c <PDM_Read_Data+0x2c8>)
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002274:	d205      	bcs.n	8002282 <PDM_Read_Data+0xbe>
				Data_Verify_Buffer[i * 2] = 1;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4a89      	ldr	r2, [pc, #548]	; (80024a0 <PDM_Read_Data+0x2dc>)
 800227c:	2101      	movs	r1, #1
 800227e:	54d1      	strb	r1, [r2, r3]
 8002280:	e004      	b.n	800228c <PDM_Read_Data+0xc8>
			else
				Data_Verify_Buffer[i * 2] = 0;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4a86      	ldr	r2, [pc, #536]	; (80024a0 <PDM_Read_Data+0x2dc>)
 8002288:	2100      	movs	r1, #0
 800228a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b07      	cmp	r3, #7
 8002296:	d9b8      	bls.n	800220a <PDM_Read_Data+0x46>
		}
		break;
 8002298:	e0d8      	b.n	800244c <PDM_Read_Data+0x288>

	case Data_Read_Current1:
		*Data_read = Data_Read_Temperature;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_TEMPERATURE;
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <PDM_Read_Data+0x2c4>)
 80022a2:	22c8      	movs	r2, #200	; 0xc8
 80022a4:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73bb      	strb	r3, [r7, #14]
 80022aa:	e049      	b.n	8002340 <PDM_Read_Data+0x17c>
		{
			Data_Buffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	4a77      	ldr	r2, [pc, #476]	; (800248c <PDM_Read_Data+0x2c8>)
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	f241 62f7 	movw	r2, #5879	; 0x16f7
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 80022c0:	33dc      	adds	r3, #220	; 0xdc
 80022c2:	4a73      	ldr	r2, [pc, #460]	; (8002490 <PDM_Read_Data+0x2cc>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	0b5a      	lsrs	r2, r3, #13
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	3301      	adds	r3, #1
 80022d0:	b291      	uxth	r1, r2
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <PDM_Read_Data+0x2d0>)
 80022d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[(i * 2) + 1] > Current_Thresholds[(i * 2) + 1])
 80022d8:	7bbb      	ldrb	r3, [r7, #14]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	3301      	adds	r3, #1
 80022de:	4a6d      	ldr	r2, [pc, #436]	; (8002494 <PDM_Read_Data+0x2d0>)
 80022e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	3301      	adds	r3, #1
 80022ea:	496b      	ldr	r1, [pc, #428]	; (8002498 <PDM_Read_Data+0x2d4>)
 80022ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d90e      	bls.n	8002312 <PDM_Read_Data+0x14e>
				Driver_Overcurrent_Flag |= (1 << ((i * 2) + 1));
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	3301      	adds	r3, #1
 80022fa:	2201      	movs	r2, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	b21a      	sxth	r2, r3
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <PDM_Read_Data+0x2d8>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b21b      	sxth	r3, r3
 8002308:	4313      	orrs	r3, r2
 800230a:	b21b      	sxth	r3, r3
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b63      	ldr	r3, [pc, #396]	; (800249c <PDM_Read_Data+0x2d8>)
 8002310:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < 4000)
 8002312:	7bbb      	ldrb	r3, [r7, #14]
 8002314:	4a5d      	ldr	r2, [pc, #372]	; (800248c <PDM_Read_Data+0x2c8>)
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800231e:	d206      	bcs.n	800232e <PDM_Read_Data+0x16a>
				Data_Verify_Buffer[(i * 2) + 1] = 1;
 8002320:	7bbb      	ldrb	r3, [r7, #14]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	3301      	adds	r3, #1
 8002326:	4a5e      	ldr	r2, [pc, #376]	; (80024a0 <PDM_Read_Data+0x2dc>)
 8002328:	2101      	movs	r1, #1
 800232a:	54d1      	strb	r1, [r2, r3]
 800232c:	e005      	b.n	800233a <PDM_Read_Data+0x176>
			else
				Data_Verify_Buffer[(i * 2) + 1] = 0;
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	3301      	adds	r3, #1
 8002334:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <PDM_Read_Data+0x2dc>)
 8002336:	2100      	movs	r1, #0
 8002338:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	3301      	adds	r3, #1
 800233e:	73bb      	strb	r3, [r7, #14]
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	2b07      	cmp	r3, #7
 8002344:	d9b2      	bls.n	80022ac <PDM_Read_Data+0xe8>
		}
		break;
 8002346:	e081      	b.n	800244c <PDM_Read_Data+0x288>

	case Data_Read_Temperature:
		*Data_read = Data_Read_Voltage;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2204      	movs	r2, #4
 800234c:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_VOLTAGE;
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <PDM_Read_Data+0x2c4>)
 8002350:	22a0      	movs	r2, #160	; 0xa0
 8002352:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	737b      	strb	r3, [r7, #13]
 8002358:	e02a      	b.n	80023b0 <PDM_Read_Data+0x1ec>
		{
			Data_Buffer[16 + i] = __PDM_CONVERT_TEMPERATURE(ADC_BUFFER[i], ADC_BUFFER[8]);
 800235a:	7b7b      	ldrb	r3, [r7, #13]
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <PDM_Read_Data+0x2c8>)
 800235e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <PDM_Read_Data+0x2c8>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f06f 0215 	mvn.w	r2, #21
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <PDM_Read_Data+0x2e0>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	7b7b      	ldrb	r3, [r7, #13]
 800237c:	3310      	adds	r3, #16
 800237e:	b291      	uxth	r1, r2
 8002380:	4a44      	ldr	r2, [pc, #272]	; (8002494 <PDM_Read_Data+0x2d0>)
 8002382:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(ADC_BUFFER[i] < 4000)
 8002386:	7b7b      	ldrb	r3, [r7, #13]
 8002388:	4a40      	ldr	r2, [pc, #256]	; (800248c <PDM_Read_Data+0x2c8>)
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002392:	d205      	bcs.n	80023a0 <PDM_Read_Data+0x1dc>
				Data_Verify_Buffer[16 + i] = 1;
 8002394:	7b7b      	ldrb	r3, [r7, #13]
 8002396:	3310      	adds	r3, #16
 8002398:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <PDM_Read_Data+0x2dc>)
 800239a:	2101      	movs	r1, #1
 800239c:	54d1      	strb	r1, [r2, r3]
 800239e:	e004      	b.n	80023aa <PDM_Read_Data+0x1e6>
			else
				Data_Verify_Buffer[16 + i] = 0;
 80023a0:	7b7b      	ldrb	r3, [r7, #13]
 80023a2:	3310      	adds	r3, #16
 80023a4:	4a3e      	ldr	r2, [pc, #248]	; (80024a0 <PDM_Read_Data+0x2dc>)
 80023a6:	2100      	movs	r1, #0
 80023a8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 80023aa:	7b7b      	ldrb	r3, [r7, #13]
 80023ac:	3301      	adds	r3, #1
 80023ae:	737b      	strb	r3, [r7, #13]
 80023b0:	7b7b      	ldrb	r3, [r7, #13]
 80023b2:	2b07      	cmp	r3, #7
 80023b4:	d9d1      	bls.n	800235a <PDM_Read_Data+0x196>
		}
		break;
 80023b6:	e049      	b.n	800244c <PDM_Read_Data+0x288>

	case Data_Read_Voltage:
		*Data_read = Data_Read_Current0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_CURRENT0;
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <PDM_Read_Data+0x2c4>)
 80023c0:	22a0      	movs	r2, #160	; 0xa0
 80023c2:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	733b      	strb	r3, [r7, #12]
 80023c8:	e028      	b.n	800241c <PDM_Read_Data+0x258>
		{
			if((ADC_BUFFER[i] < 10) || (ADC_BUFFER[i] > 4000))
 80023ca:	7b3b      	ldrb	r3, [r7, #12]
 80023cc:	4a2f      	ldr	r2, [pc, #188]	; (800248c <PDM_Read_Data+0x2c8>)
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	d906      	bls.n	80023e4 <PDM_Read_Data+0x220>
 80023d6:	7b3b      	ldrb	r3, [r7, #12]
 80023d8:	4a2c      	ldr	r2, [pc, #176]	; (800248c <PDM_Read_Data+0x2c8>)
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80023e2:	d903      	bls.n	80023ec <PDM_Read_Data+0x228>
				Data_Verify_Buffer[24] = 0;
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <PDM_Read_Data+0x2dc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	761a      	strb	r2, [r3, #24]
 80023ea:	e014      	b.n	8002416 <PDM_Read_Data+0x252>
			else
			{
				Data_Buffer[24] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[i], ADC_BUFFER[8]);
 80023ec:	7b3b      	ldrb	r3, [r7, #12]
 80023ee:	4a27      	ldr	r2, [pc, #156]	; (800248c <PDM_Read_Data+0x2c8>)
 80023f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <PDM_Read_Data+0x2c8>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 22c4 	movw	r2, #4804	; 0x12c4
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a23      	ldr	r2, [pc, #140]	; (8002490 <PDM_Read_Data+0x2cc>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	0b5b      	lsrs	r3, r3, #13
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <PDM_Read_Data+0x2d0>)
 800240e:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_Verify_Buffer[24] = 1;
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <PDM_Read_Data+0x2dc>)
 8002412:	2201      	movs	r2, #1
 8002414:	761a      	strb	r2, [r3, #24]
		for(uint8_t i = 0; i < 8; i++)
 8002416:	7b3b      	ldrb	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	733b      	strb	r3, [r7, #12]
 800241c:	7b3b      	ldrb	r3, [r7, #12]
 800241e:	2b07      	cmp	r3, #7
 8002420:	d9d3      	bls.n	80023ca <PDM_Read_Data+0x206>
			}
		}

		if(Data_Verify_Buffer[24] == 0)
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <PDM_Read_Data+0x2dc>)
 8002424:	7e1b      	ldrb	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <PDM_Read_Data+0x286>
			Data_Buffer[0] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[0], ADC_BUFFER[8]);
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <PDM_Read_Data+0x2c8>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <PDM_Read_Data+0x2c8>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <PDM_Read_Data+0x2cc>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0b5b      	lsrs	r3, r3, #13
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <PDM_Read_Data+0x2d0>)
 8002448:	801a      	strh	r2, [r3, #0]
		break;
 800244a:	bf00      	nop
	}

	Data_Buffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(ADC_BUFFER[9]);
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <PDM_Read_Data+0x2c8>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f647 52ea 	movw	r2, #32234	; 0x7dea
 8002454:	fb02 f203 	mul.w	r2, r2, r3
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <PDM_Read_Data+0x2e4>)
 800245a:	4413      	add	r3, r2
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <PDM_Read_Data+0x2e8>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <PDM_Read_Data+0x2d0>)
 8002468:	865a      	strh	r2, [r3, #50]	; 0x32

	PDM_Next_Data_Conversion(*Data_read);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe4c 	bl	800210c <PDM_Next_Data_Conversion>

	HAL_TIM_Base_Start_IT(&htim7);
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <PDM_Read_Data+0x2c0>)
 8002476:	f006 fa61 	bl	800893c <HAL_TIM_Base_Start_IT>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000127c 	.word	0x2000127c
 8002488:	200011b4 	.word	0x200011b4
 800248c:	20000f04 	.word	0x20000f04
 8002490:	d1b71759 	.word	0xd1b71759
 8002494:	20001240 	.word	0x20001240
 8002498:	20000478 	.word	0x20000478
 800249c:	20000498 	.word	0x20000498
 80024a0:	20000458 	.word	0x20000458
 80024a4:	cccccccd 	.word	0xcccccccd
 80024a8:	ffd56d90 	.word	0xffd56d90
 80024ac:	10624dd3 	.word	0x10624dd3

080024b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_MspInit+0x4c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_MspInit+0x4c>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	; (80026cc <HAL_ADC_MspInit+0x1cc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d158      	bne.n	80025d4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a62      	ldr	r2, [pc, #392]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 800255a:	230f      	movs	r3, #15
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	4859      	ldr	r0, [pc, #356]	; (80026d4 <HAL_ADC_MspInit+0x1d4>)
 800256e:	f002 f82f 	bl	80045d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002572:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 8002574:	4a59      	ldr	r2, [pc, #356]	; (80026dc <HAL_ADC_MspInit+0x1dc>)
 8002576:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002578:	4b57      	ldr	r3, [pc, #348]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800257e:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002584:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 800258c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002590:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 8002594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002598:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800259a:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 800259c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025aa:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b0:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025b6:	4848      	ldr	r0, [pc, #288]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 80025b8:	f001 fcf0 	bl	8003f9c <HAL_DMA_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80025c2:	f7fe fd9f 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a43      	ldr	r2, [pc, #268]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
 80025cc:	4a42      	ldr	r2, [pc, #264]	; (80026d8 <HAL_ADC_MspInit+0x1d8>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025d2:	e077      	b.n	80026c4 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a41      	ldr	r2, [pc, #260]	; (80026e0 <HAL_ADC_MspInit+0x1e0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d172      	bne.n	80026c4 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 80025e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a33      	ldr	r2, [pc, #204]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_ADC_MspInit+0x1d0>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG5_Pin|ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8002632:	23f0      	movs	r3, #240	; 0xf0
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002636:	2303      	movs	r3, #3
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	4823      	ldr	r0, [pc, #140]	; (80026d4 <HAL_ADC_MspInit+0x1d4>)
 8002646:	f001 ffc3 	bl	80045d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG9_Pin;
 800264a:	2310      	movs	r3, #16
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800264e:	2303      	movs	r3, #3
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	4821      	ldr	r0, [pc, #132]	; (80026e4 <HAL_ADC_MspInit+0x1e4>)
 800265e:	f001 ffb7 	bl	80045d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_ADC_MspInit+0x1ec>)
 8002666:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 800266a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 800267e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002682:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 8002686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800268a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 800268e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002692:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 8002696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026a8:	480f      	ldr	r0, [pc, #60]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 80026aa:	f001 fc77 	bl	8003f9c <HAL_DMA_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80026b4:	f7fe fd26 	bl	8001104 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_ADC_MspInit+0x1e8>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026c4:	bf00      	nop
 80026c6:	3730      	adds	r7, #48	; 0x30
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40012000 	.word	0x40012000
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	20000f94 	.word	0x20000f94
 80026dc:	40026410 	.word	0x40026410
 80026e0:	40012100 	.word	0x40012100
 80026e4:	40020800 	.word	0x40020800
 80026e8:	200011b8 	.word	0x200011b8
 80026ec:	40026440 	.word	0x40026440

080026f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <HAL_CAN_MspInit+0x94>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d134      	bne.n	800277c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_CAN_MspInit+0x98>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_CAN_MspInit+0x98>)
 800271c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_CAN_MspInit+0x98>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_CAN_MspInit+0x98>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_CAN_MspInit+0x98>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_CAN_MspInit+0x98>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800274a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800274e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800275c:	2309      	movs	r3, #9
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <HAL_CAN_MspInit+0x9c>)
 8002768:	f001 ff32 	bl	80045d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2014      	movs	r0, #20
 8002772:	f001 fbdc 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002776:	2014      	movs	r0, #20
 8002778:	f001 fbf5 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40006400 	.word	0x40006400
 8002788:	40023800 	.word	0x40023800
 800278c:	40020400 	.word	0x40020400

08002790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a34      	ldr	r2, [pc, #208]	; (8002880 <HAL_I2C_MspInit+0xf0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d161      	bne.n	8002876 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_I2C_MspInit+0xf4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a32      	ldr	r2, [pc, #200]	; (8002884 <HAL_I2C_MspInit+0xf4>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_I2C_MspInit+0xf4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ce:	23c0      	movs	r3, #192	; 0xc0
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d2:	2312      	movs	r3, #18
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027de:	2304      	movs	r3, #4
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4619      	mov	r1, r3
 80027e8:	4827      	ldr	r0, [pc, #156]	; (8002888 <HAL_I2C_MspInit+0xf8>)
 80027ea:	f001 fef1 	bl	80045d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_I2C_MspInit+0xf4>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a23      	ldr	r2, [pc, #140]	; (8002884 <HAL_I2C_MspInit+0xf4>)
 80027f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_I2C_MspInit+0xf4>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_I2C_MspInit+0xfc>)
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_I2C_MspInit+0x100>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002816:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_I2C_MspInit+0xfc>)
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_I2C_MspInit+0xfc>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_I2C_MspInit+0xfc>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002846:	2200      	movs	r2, #0
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800284a:	4810      	ldr	r0, [pc, #64]	; (800288c <HAL_I2C_MspInit+0xfc>)
 800284c:	f001 fba6 	bl	8003f9c <HAL_DMA_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002856:	f7fe fc55 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_I2C_MspInit+0xfc>)
 800285e:	635a      	str	r2, [r3, #52]	; 0x34
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_I2C_MspInit+0xfc>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201f      	movs	r0, #31
 800286c:	f001 fb5f 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002870:	201f      	movs	r0, #31
 8002872:	f001 fb78 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40005400 	.word	0x40005400
 8002884:	40023800 	.word	0x40023800
 8002888:	40020400 	.word	0x40020400
 800288c:	200004e4 	.word	0x200004e4
 8002890:	400260a0 	.word	0x400260a0

08002894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a3e      	ldr	r2, [pc, #248]	; (800299c <HAL_TIM_Base_MspInit+0x108>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d116      	bne.n	80028d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	2019      	movs	r0, #25
 80028c8:	f001 fb31 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028cc:	2019      	movs	r0, #25
 80028ce:	f001 fb4a 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80028d2:	e05e      	b.n	8002992 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
}
 80028fa:	e04a      	b.n	8002992 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <HAL_TIM_Base_MspInit+0x110>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
}
 8002922:	e036      	b.n	8002992 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM6)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_TIM_Base_MspInit+0x114>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d116      	bne.n	800295c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002938:	f043 0310 	orr.w	r3, r3, #16
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2036      	movs	r0, #54	; 0x36
 8002950:	f001 faed 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002954:	2036      	movs	r0, #54	; 0x36
 8002956:	f001 fb06 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 800295a:	e01a      	b.n	8002992 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_TIM_Base_MspInit+0x118>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d115      	bne.n	8002992 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_TIM_Base_MspInit+0x10c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	2037      	movs	r0, #55	; 0x37
 8002988:	f001 fad1 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800298c:	2037      	movs	r0, #55	; 0x37
 800298e:	f001 faea 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40001000 	.word	0x40001000
 80029ac:	40001400 	.word	0x40001400

080029b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_TIM_PWM_MspInit+0x3c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10d      	bne.n	80029de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_TIM_PWM_MspInit+0x40>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_TIM_PWM_MspInit+0x40>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_TIM_PWM_MspInit+0x40>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40010400 	.word	0x40010400
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a49      	ldr	r2, [pc, #292]	; (8002b38 <HAL_TIM_MspPostInit+0x144>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d11f      	bne.n	8002a56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a47      	ldr	r2, [pc, #284]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8002a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	483c      	ldr	r0, [pc, #240]	; (8002b40 <HAL_TIM_MspPostInit+0x14c>)
 8002a50:	f001 fdbe 	bl	80045d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002a54:	e06b      	b.n	8002b2e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d11f      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a34      	ldr	r2, [pc, #208]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8002a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	482a      	ldr	r0, [pc, #168]	; (8002b44 <HAL_TIM_MspPostInit+0x150>)
 8002a9a:	f001 fd99 	bl	80045d0 <HAL_GPIO_Init>
}
 8002a9e:	e046      	b.n	8002b2e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <HAL_TIM_MspPostInit+0x154>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8002ada:	f107 031c 	add.w	r3, r7, #28
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4818      	ldr	r0, [pc, #96]	; (8002b44 <HAL_TIM_MspPostInit+0x150>)
 8002ae2:	f001 fd75 	bl	80045d0 <HAL_GPIO_Init>
}
 8002ae6:	e022      	b.n	8002b2e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_TIM_MspPostInit+0x158>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11d      	bne.n	8002b2e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_TIM_MspPostInit+0x148>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4806      	ldr	r0, [pc, #24]	; (8002b44 <HAL_TIM_MspPostInit+0x150>)
 8002b2a:	f001 fd51 	bl	80045d0 <HAL_GPIO_Init>
}
 8002b2e:	bf00      	nop
 8002b30:	3730      	adds	r7, #48	; 0x30
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40010400 	.word	0x40010400

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <NMI_Handler+0x4>

08002b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <MemManage_Handler+0x4>

08002b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <BusFault_Handler+0x4>

08002b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <UsageFault_Handler+0x4>

08002b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b9c:	f000 f8ea 	bl	8002d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <DMA1_Stream6_IRQHandler+0x10>)
 8002baa:	f001 fac7 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200004e4 	.word	0x200004e4

08002bb8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <CAN1_RX0_IRQHandler+0x10>)
 8002bbe:	f000 feac 	bl	800391a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20001218 	.word	0x20001218

08002bcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002bd2:	f005 ffa1 	bl	8008b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20001044 	.word	0x20001044

08002be0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <I2C1_EV_IRQHandler+0x10>)
 8002be6:	f001 ffff 	bl	8004be8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000544 	.word	0x20000544

08002bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <TIM6_DAC_IRQHandler+0x10>)
 8002bfa:	f005 ff8d 	bl	8008b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000ff4 	.word	0x20000ff4

08002c08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <TIM7_IRQHandler+0x10>)
 8002c0e:	f005 ff83 	bl	8008b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000127c 	.word	0x2000127c

08002c1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <DMA2_Stream0_IRQHandler+0x10>)
 8002c22:	f001 fa8b 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000f94 	.word	0x20000f94

08002c30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <DMA2_Stream2_IRQHandler+0x10>)
 8002c36:	f001 fa81 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200011b8 	.word	0x200011b8

08002c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <OTG_FS_IRQHandler+0x10>)
 8002c4a:	f003 fcdf 	bl	800660c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000279c 	.word	0x2000279c

08002c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <SystemInit+0x20>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <SystemInit+0x20>)
 8002c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c80:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c82:	490e      	ldr	r1, [pc, #56]	; (8002cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c84:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c98:	4c0b      	ldr	r4, [pc, #44]	; (8002cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ca6:	f7ff ffd7 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002caa:	f00a fb3b 	bl	800d324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cae:	f7fd fc25 	bl	80004fc <main>
  bx  lr    
 8002cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002cc0:	0800d40c 	.word	0x0800d40c
  ldr r2, =_sbss
 8002cc4:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002cc8:	20002ba4 	.word	0x20002ba4

08002ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_Init+0x40>)
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_Init+0x40>)
 8002ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_Init+0x40>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_Init+0x40>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f001 f90d 	bl	8003f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f808 	bl	8002d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d04:	f7ff fbd4 	bl	80024b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023c00 	.word	0x40023c00

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_InitTick+0x54>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_InitTick+0x58>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 f925 	bl	8003f82 <HAL_SYSTICK_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00e      	b.n	8002d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d80a      	bhi.n	8002d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	f001 f8ed 	bl	8003f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d54:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <HAL_InitTick+0x5c>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x20>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_IncTick+0x24>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_IncTick+0x24>)
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000008 	.word	0x20000008
 8002d98:	200012c8 	.word	0x200012c8

08002d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_GetTick+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	200012c8 	.word	0x200012c8

08002db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7ff ffee 	bl	8002d9c <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d005      	beq.n	8002dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_Delay+0x44>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dda:	bf00      	nop
 8002ddc:	f7ff ffde 	bl	8002d9c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d8f7      	bhi.n	8002ddc <HAL_Delay+0x28>
  {
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e033      	b.n	8002e7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fb70 	bl	8002500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e42:	f023 0302 	bic.w	r3, r3, #2
 8002e46:	f043 0202 	orr.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f94a 	bl	80030e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
 8002e6a:	e001      	b.n	8002e70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1c>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e113      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x244>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	d925      	bls.n	8002efc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68d9      	ldr	r1, [r3, #12]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b1e      	subs	r3, #30
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68d9      	ldr	r1, [r3, #12]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4603      	mov	r3, r0
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4403      	add	r3, r0
 8002eee:	3b1e      	subs	r3, #30
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	e022      	b.n	8002f42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	2207      	movs	r2, #7
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6919      	ldr	r1, [r3, #16]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4403      	add	r3, r0
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d824      	bhi.n	8002f94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b05      	subs	r3, #5
 8002f5c:	221f      	movs	r2, #31
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	400a      	ands	r2, r1
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	3b05      	subs	r3, #5
 8002f86:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
 8002f92:	e04c      	b.n	800302e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	d824      	bhi.n	8002fe6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	3b23      	subs	r3, #35	; 0x23
 8002fae:	221f      	movs	r2, #31
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	400a      	ands	r2, r1
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3b23      	subs	r3, #35	; 0x23
 8002fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe4:	e023      	b.n	800302e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b41      	subs	r3, #65	; 0x41
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b41      	subs	r3, #65	; 0x41
 8003022:	fa00 f203 	lsl.w	r2, r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_ADC_ConfigChannel+0x250>)
 8003030:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_ADC_ConfigChannel+0x254>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10f      	bne.n	800305c <HAL_ADC_ConfigChannel+0x1d8>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b12      	cmp	r3, #18
 8003042:	d10b      	bne.n	800305c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_ADC_ConfigChannel+0x254>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d12b      	bne.n	80030be <HAL_ADC_ConfigChannel+0x23a>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_ADC_ConfigChannel+0x258>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <HAL_ADC_ConfigChannel+0x1f4>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b11      	cmp	r3, #17
 8003076:	d122      	bne.n	80030be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_ADC_ConfigChannel+0x258>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_ADC_ConfigChannel+0x25c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <HAL_ADC_ConfigChannel+0x260>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0c9a      	lsrs	r2, r3, #18
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b0:	e002      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f9      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40012300 	.word	0x40012300
 80030d8:	40012000 	.word	0x40012000
 80030dc:	10000012 	.word	0x10000012
 80030e0:	20000000 	.word	0x20000000
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f0:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <ADC_Init+0x1f0>)
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	4a58      	ldr	r2, [pc, #352]	; (80032dc <ADC_Init+0x1f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800318e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e00f      	b.n	80031e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0202 	bic.w	r2, r2, #2
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e1b      	ldrb	r3, [r3, #24]
 8003200:	005a      	lsls	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	3b01      	subs	r3, #1
 8003240:	035a      	lsls	r2, r3, #13
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	e007      	b.n	800325c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	3b01      	subs	r3, #1
 8003278:	051a      	lsls	r2, r3, #20
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800329e:	025a      	lsls	r2, r3, #9
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	029a      	lsls	r2, r3, #10
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40012300 	.word	0x40012300
 80032dc:	0f000001 	.word	0x0f000001

080032e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0ed      	b.n	80034ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff f9f6 	bl	80026f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003314:	f7ff fd42 	bl	8002d9c <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800331a:	e012      	b.n	8003342 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800331c:	f7ff fd3e 	bl	8002d9c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b0a      	cmp	r3, #10
 8003328:	d90b      	bls.n	8003342 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2205      	movs	r2, #5
 800333a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0c5      	b.n	80034ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0e5      	beq.n	800331c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0202 	bic.w	r2, r2, #2
 800335e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003360:	f7ff fd1c 	bl	8002d9c <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003366:	e012      	b.n	800338e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003368:	f7ff fd18 	bl	8002d9c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b0a      	cmp	r3, #10
 8003374:	d90b      	bls.n	800338e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2205      	movs	r2, #5
 8003386:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e09f      	b.n	80034ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e1b      	ldrb	r3, [r3, #24]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d108      	bne.n	80033b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e007      	b.n	80033c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7e5b      	ldrb	r3, [r3, #25]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e007      	b.n	80033f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7e9b      	ldrb	r3, [r3, #26]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d108      	bne.n	800340a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0220 	orr.w	r2, r2, #32
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e007      	b.n	800341a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0220 	bic.w	r2, r2, #32
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	7edb      	ldrb	r3, [r3, #27]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0210 	bic.w	r2, r2, #16
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e007      	b.n	8003444 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0210 	orr.w	r2, r2, #16
 8003442:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7f1b      	ldrb	r3, [r3, #28]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d108      	bne.n	800345e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e007      	b.n	800346e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7f5b      	ldrb	r3, [r3, #29]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0204 	orr.w	r2, r2, #4
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e007      	b.n	8003498 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b089      	sub	sp, #36	; 0x24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034f4:	7ffb      	ldrb	r3, [r7, #31]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d003      	beq.n	8003502 <HAL_CAN_AddTxMessage+0x2c>
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	f040 80b8 	bne.w	8003672 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a0 	beq.w	8003662 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d907      	bls.n	8003542 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e09e      	b.n	8003680 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003542:	2201      	movs	r2, #1
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	409a      	lsls	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	6809      	ldr	r1, [r1, #0]
 8003562:	431a      	orrs	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3318      	adds	r3, #24
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	440b      	add	r3, r1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e00f      	b.n	8003590 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800357a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003584:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3318      	adds	r3, #24
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	440b      	add	r3, r1
 800358e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3318      	adds	r3, #24
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	440b      	add	r3, r1
 80035a0:	3304      	adds	r3, #4
 80035a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	7d1b      	ldrb	r3, [r3, #20]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d111      	bne.n	80035d0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3318      	adds	r3, #24
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	6811      	ldr	r1, [r2, #0]
 80035c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3318      	adds	r3, #24
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	440b      	add	r3, r1
 80035cc:	3304      	adds	r3, #4
 80035ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3307      	adds	r3, #7
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	061a      	lsls	r2, r3, #24
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3306      	adds	r3, #6
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3305      	adds	r3, #5
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4313      	orrs	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	3204      	adds	r2, #4
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	4610      	mov	r0, r2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6811      	ldr	r1, [r2, #0]
 80035f8:	ea43 0200 	orr.w	r2, r3, r0
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	440b      	add	r3, r1
 8003602:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003606:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3303      	adds	r3, #3
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	061a      	lsls	r2, r3, #24
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3302      	adds	r3, #2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3301      	adds	r3, #1
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	4313      	orrs	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	4610      	mov	r0, r2
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	6811      	ldr	r1, [r2, #0]
 800362e:	ea43 0200 	orr.w	r2, r3, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	440b      	add	r3, r1
 8003638:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800363c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3318      	adds	r3, #24
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	6811      	ldr	r1, [r2, #0]
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3318      	adds	r3, #24
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	440b      	add	r3, r1
 800365c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e00e      	b.n	8003680 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e006      	b.n	8003680 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
  }
}
 8003680:	4618      	mov	r0, r3
 8003682:	3724      	adds	r7, #36	; 0x24
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d002      	beq.n	80036ac <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80036a6:	7afb      	ldrb	r3, [r7, #11]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d11d      	bne.n	80036e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3301      	adds	r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80036e8:	68fb      	ldr	r3, [r7, #12]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d003      	beq.n	800371a <HAL_CAN_GetRxMessage+0x24>
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b02      	cmp	r3, #2
 8003716:	f040 80f3 	bne.w	8003900 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10e      	bne.n	800373e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0e7      	b.n	800390e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0d8      	b.n	800390e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	331b      	adds	r3, #27
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0204 	and.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	331b      	adds	r3, #27
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4413      	add	r3, r2
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0d5b      	lsrs	r3, r3, #21
 800378a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e00b      	b.n	80037ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	331b      	adds	r3, #27
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	4413      	add	r3, r2
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	331b      	adds	r3, #27
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0202 	and.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	331b      	adds	r3, #27
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	331b      	adds	r3, #27
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	331b      	adds	r3, #27
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4413      	add	r3, r2
 8003814:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	4413      	add	r3, r2
 800382a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0a1a      	lsrs	r2, r3, #8
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	4413      	add	r3, r2
 8003844:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0c1a      	lsrs	r2, r3, #16
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3302      	adds	r3, #2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0e1a      	lsrs	r2, r3, #24
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3303      	adds	r3, #3
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	3304      	adds	r3, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4413      	add	r3, r2
 8003890:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0a1a      	lsrs	r2, r3, #8
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	3305      	adds	r3, #5
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0c1a      	lsrs	r2, r3, #16
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	3306      	adds	r3, #6
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0e1a      	lsrs	r2, r3, #24
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	3307      	adds	r3, #7
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0220 	orr.w	r2, r2, #32
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e007      	b.n	80038fc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0220 	orr.w	r2, r2, #32
 80038fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e006      	b.n	800390e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b08a      	sub	sp, #40	; 0x28
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d07c      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d023      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f983 	bl	8003c88 <HAL_CAN_TxMailbox0CompleteCallback>
 8003982:	e016      	b.n	80039b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	e00c      	b.n	80039b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e002      	b.n	80039b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f989 	bl	8003cc4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d024      	beq.n	8003a06 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f963 	bl	8003c9c <HAL_CAN_TxMailbox1CompleteCallback>
 80039d6:	e016      	b.n	8003a06 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	e00c      	b.n	8003a06 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	e002      	b.n	8003a06 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f969 	bl	8003cd8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d024      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f943 	bl	8003cb0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a2a:	e016      	b.n	8003a5a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	e00c      	b.n	8003a5a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	e002      	b.n	8003a5a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f949 	bl	8003cec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2208      	movs	r2, #8
 8003a98:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f930 	bl	8003d00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fee9 	bl	8001890 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00b      	beq.n	8003b04 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2208      	movs	r2, #8
 8003afc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f912 	bl	8003d28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f8f9 	bl	8003d14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d006      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8fc 	bl	8003d3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d006      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8f5 	bl	8003d50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d07b      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d072      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d043      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03e      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003be8:	2b60      	cmp	r3, #96	; 0x60
 8003bea:	d02b      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x32a>
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d82e      	bhi.n	8003c4e <HAL_CAN_IRQHandler+0x334>
 8003bf0:	2b50      	cmp	r3, #80	; 0x50
 8003bf2:	d022      	beq.n	8003c3a <HAL_CAN_IRQHandler+0x320>
 8003bf4:	2b50      	cmp	r3, #80	; 0x50
 8003bf6:	d82a      	bhi.n	8003c4e <HAL_CAN_IRQHandler+0x334>
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d019      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x316>
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d826      	bhi.n	8003c4e <HAL_CAN_IRQHandler+0x334>
 8003c00:	2b30      	cmp	r3, #48	; 0x30
 8003c02:	d010      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x30c>
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d822      	bhi.n	8003c4e <HAL_CAN_IRQHandler+0x334>
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d002      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x2f8>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d005      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c10:	e01d      	b.n	8003c4e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f043 0308 	orr.w	r3, r3, #8
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c1a:	e019      	b.n	8003c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	f043 0310 	orr.w	r3, r3, #16
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c24:	e014      	b.n	8003c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f043 0320 	orr.w	r3, r3, #32
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c2e:	e00f      	b.n	8003c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c38:	e00a      	b.n	8003c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c42:	e005      	b.n	8003c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c4c:	e000      	b.n	8003c50 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c4e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c5e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2204      	movs	r2, #4
 8003c66:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f872 	bl	8003d64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 0307 	and.w	r3, r3, #7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	db0b      	blt.n	8003e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	4907      	ldr	r1, [pc, #28]	; (8003e14 <__NVIC_EnableIRQ+0x38>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	e000e100 	.word	0xe000e100

08003e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	db0a      	blt.n	8003e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	490c      	ldr	r1, [pc, #48]	; (8003e64 <__NVIC_SetPriority+0x4c>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	0112      	lsls	r2, r2, #4
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e40:	e00a      	b.n	8003e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4908      	ldr	r1, [pc, #32]	; (8003e68 <__NVIC_SetPriority+0x50>)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	440b      	add	r3, r1
 8003e56:	761a      	strb	r2, [r3, #24]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000e100 	.word	0xe000e100
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f1c3 0307 	rsb	r3, r3, #7
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	bf28      	it	cs
 8003e8a:	2304      	movcs	r3, #4
 8003e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3304      	adds	r3, #4
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d902      	bls.n	8003e9c <NVIC_EncodePriority+0x30>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3b03      	subs	r3, #3
 8003e9a:	e000      	b.n	8003e9e <NVIC_EncodePriority+0x32>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	401a      	ands	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	43d9      	mvns	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	4313      	orrs	r3, r2
         );
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3724      	adds	r7, #36	; 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee4:	d301      	bcc.n	8003eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00f      	b.n	8003f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <SysTick_Config+0x40>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f7ff ff8e 	bl	8003e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SysTick_Config+0x40>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SysTick_Config+0x40>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff29 	bl	8003d78 <__NVIC_SetPriorityGrouping>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f40:	f7ff ff3e 	bl	8003dc0 <__NVIC_GetPriorityGrouping>
 8003f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff8e 	bl	8003e6c <NVIC_EncodePriority>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff5d 	bl	8003e18 <__NVIC_SetPriority>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff31 	bl	8003ddc <__NVIC_EnableIRQ>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa2 	bl	8003ed4 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7fe fef8 	bl	8002d9c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e099      	b.n	80040ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd8:	e00f      	b.n	8003ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fda:	f7fe fedf 	bl	8002d9c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d908      	bls.n	8003ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e078      	b.n	80040ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e8      	bne.n	8003fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_DMA_Init+0x158>)
 8004014:	4013      	ands	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	2b04      	cmp	r3, #4
 8004052:	d107      	bne.n	8004064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	4313      	orrs	r3, r2
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b04      	cmp	r3, #4
 800408c:	d117      	bne.n	80040be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa19 	bl	80044d8 <DMA_CheckFifoParam>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ba:	2301      	movs	r3, #1
 80040bc:	e016      	b.n	80040ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f9d0 	bl	800446c <DMA_CalcBaseAndBitshift>
 80040cc:	4603      	mov	r3, r0
 80040ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	223f      	movs	r2, #63	; 0x3f
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	f010803f 	.word	0xf010803f

080040f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d004      	beq.n	8004116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2280      	movs	r2, #128	; 0x80
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e00c      	b.n	8004130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2205      	movs	r2, #5
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004148:	4b92      	ldr	r3, [pc, #584]	; (8004394 <HAL_DMA_IRQHandler+0x258>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a92      	ldr	r2, [pc, #584]	; (8004398 <HAL_DMA_IRQHandler+0x25c>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0a9b      	lsrs	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	2208      	movs	r2, #8
 8004168:	409a      	lsls	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01a      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	2208      	movs	r2, #8
 8004196:	409a      	lsls	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f043 0201 	orr.w	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2204      	movs	r2, #4
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2210      	movs	r2, #16
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d043      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d03c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2210      	movs	r2, #16
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d024      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e01f      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e016      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0208 	bic.w	r2, r2, #8
 800429a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2220      	movs	r2, #32
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 808e 	beq.w	80043da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8086 	beq.w	80043da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2220      	movs	r2, #32
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d136      	bne.n	8004354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0216 	bic.w	r2, r2, #22
 80042f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_DMA_IRQHandler+0x1da>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	223f      	movs	r2, #63	; 0x3f
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d07d      	beq.n	8004446 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
        }
        return;
 8004352:	e078      	b.n	8004446 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01c      	beq.n	800439c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d108      	bne.n	8004382 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	2b00      	cmp	r3, #0
 8004376:	d030      	beq.n	80043da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
 8004380:	e02b      	b.n	80043da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d027      	beq.n	80043da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
 8004392:	e022      	b.n	80043da <HAL_DMA_IRQHandler+0x29e>
 8004394:	20000000 	.word	0x20000000
 8004398:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0210 	bic.w	r2, r2, #16
 80043b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d032      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d022      	beq.n	8004434 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2205      	movs	r2, #5
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3301      	adds	r3, #1
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	429a      	cmp	r2, r3
 8004410:	d307      	bcc.n	8004422 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f2      	bne.n	8004406 <HAL_DMA_IRQHandler+0x2ca>
 8004420:	e000      	b.n	8004424 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004422:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
 8004444:	e000      	b.n	8004448 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004446:	bf00      	nop
    }
  }
}
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop

08004450 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800445e:	b2db      	uxtb	r3, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3b10      	subs	r3, #16
 800447c:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <DMA_CalcBaseAndBitshift+0x64>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d909      	bls.n	80044ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	659a      	str	r2, [r3, #88]	; 0x58
 80044ac:	e007      	b.n	80044be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	aaaaaaab 	.word	0xaaaaaaab
 80044d4:	0800d3f4 	.word	0x0800d3f4

080044d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11f      	bne.n	8004532 <DMA_CheckFifoParam+0x5a>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d856      	bhi.n	80045a6 <DMA_CheckFifoParam+0xce>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <DMA_CheckFifoParam+0x28>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004511 	.word	0x08004511
 8004504:	08004523 	.word	0x08004523
 8004508:	08004511 	.word	0x08004511
 800450c:	080045a7 	.word	0x080045a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d046      	beq.n	80045aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004520:	e043      	b.n	80045aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800452a:	d140      	bne.n	80045ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004530:	e03d      	b.n	80045ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	d121      	bne.n	8004580 <DMA_CheckFifoParam+0xa8>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d837      	bhi.n	80045b2 <DMA_CheckFifoParam+0xda>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <DMA_CheckFifoParam+0x70>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	0800455f 	.word	0x0800455f
 8004550:	08004559 	.word	0x08004559
 8004554:	08004571 	.word	0x08004571
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e030      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d025      	beq.n	80045b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456e:	e022      	b.n	80045b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004578:	d11f      	bne.n	80045ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800457e:	e01c      	b.n	80045ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d903      	bls.n	800458e <DMA_CheckFifoParam+0xb6>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d003      	beq.n	8004594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800458c:	e018      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      break;
 8004592:	e015      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      break;
 80045a4:	e00b      	b.n	80045be <DMA_CheckFifoParam+0xe6>
      break;
 80045a6:	bf00      	nop
 80045a8:	e00a      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045aa:	bf00      	nop
 80045ac:	e008      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ae:	bf00      	nop
 80045b0:	e006      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045b2:	bf00      	nop
 80045b4:	e004      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
    }
  } 
  
  return status; 
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e165      	b.n	80048b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045ec:	2201      	movs	r2, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	f040 8154 	bne.w	80048b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d005      	beq.n	8004622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461e:	2b02      	cmp	r3, #2
 8004620:	d130      	bne.n	8004684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0201 	and.w	r2, r3, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b03      	cmp	r3, #3
 800468e:	d017      	beq.n	80046c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d123      	bne.n	8004714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	08da      	lsrs	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3208      	adds	r2, #8
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	08da      	lsrs	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3208      	adds	r2, #8
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80ae 	beq.w	80048b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b5d      	ldr	r3, [pc, #372]	; (80048d0 <HAL_GPIO_Init+0x300>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4a5c      	ldr	r2, [pc, #368]	; (80048d0 <HAL_GPIO_Init+0x300>)
 8004760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004764:	6453      	str	r3, [r2, #68]	; 0x44
 8004766:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <HAL_GPIO_Init+0x300>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004772:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_GPIO_Init+0x304>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4f      	ldr	r2, [pc, #316]	; (80048d8 <HAL_GPIO_Init+0x308>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d025      	beq.n	80047ea <HAL_GPIO_Init+0x21a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <HAL_GPIO_Init+0x30c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01f      	beq.n	80047e6 <HAL_GPIO_Init+0x216>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4d      	ldr	r2, [pc, #308]	; (80048e0 <HAL_GPIO_Init+0x310>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d019      	beq.n	80047e2 <HAL_GPIO_Init+0x212>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4c      	ldr	r2, [pc, #304]	; (80048e4 <HAL_GPIO_Init+0x314>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0x20e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <HAL_GPIO_Init+0x318>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00d      	beq.n	80047da <HAL_GPIO_Init+0x20a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4a      	ldr	r2, [pc, #296]	; (80048ec <HAL_GPIO_Init+0x31c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_GPIO_Init+0x206>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a49      	ldr	r2, [pc, #292]	; (80048f0 <HAL_GPIO_Init+0x320>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_GPIO_Init+0x202>
 80047ce:	2306      	movs	r3, #6
 80047d0:	e00c      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047d2:	2307      	movs	r3, #7
 80047d4:	e00a      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047d6:	2305      	movs	r3, #5
 80047d8:	e008      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047da:	2304      	movs	r3, #4
 80047dc:	e006      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047de:	2303      	movs	r3, #3
 80047e0:	e004      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e002      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047ea:	2300      	movs	r3, #0
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f002 0203 	and.w	r2, r2, #3
 80047f2:	0092      	lsls	r2, r2, #2
 80047f4:	4093      	lsls	r3, r2
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047fc:	4935      	ldr	r1, [pc, #212]	; (80048d4 <HAL_GPIO_Init+0x304>)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	3302      	adds	r3, #2
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800480a:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800482e:	4a31      	ldr	r2, [pc, #196]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004834:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004882:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_GPIO_Init+0x324>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3301      	adds	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	f67f ae96 	bls.w	80045ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40013800 	.word	0x40013800
 80048d8:	40020000 	.word	0x40020000
 80048dc:	40020400 	.word	0x40020400
 80048e0:	40020800 	.word	0x40020800
 80048e4:	40020c00 	.word	0x40020c00
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40021400 	.word	0x40021400
 80048f0:	40021800 	.word	0x40021800
 80048f4:	40013c00 	.word	0x40013c00

080048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004908:	787b      	ldrb	r3, [r7, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004914:	e003      	b.n	800491e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800493c:	887a      	ldrh	r2, [r7, #2]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4013      	ands	r3, r2
 8004942:	041a      	lsls	r2, r3, #16
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	43d9      	mvns	r1, r3
 8004948:	887b      	ldrh	r3, [r7, #2]
 800494a:	400b      	ands	r3, r1
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	619a      	str	r2, [r3, #24]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e12b      	b.n	8004bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fd ff02 	bl	8002790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2224      	movs	r2, #36	; 0x24
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049c4:	f002 ffdc 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 80049c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4a81      	ldr	r2, [pc, #516]	; (8004bd4 <HAL_I2C_Init+0x274>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d807      	bhi.n	80049e4 <HAL_I2C_Init+0x84>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a80      	ldr	r2, [pc, #512]	; (8004bd8 <HAL_I2C_Init+0x278>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	bf94      	ite	ls
 80049dc:	2301      	movls	r3, #1
 80049de:	2300      	movhi	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e006      	b.n	80049f2 <HAL_I2C_Init+0x92>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a7d      	ldr	r2, [pc, #500]	; (8004bdc <HAL_I2C_Init+0x27c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bf94      	ite	ls
 80049ec:	2301      	movls	r3, #1
 80049ee:	2300      	movhi	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e0e7      	b.n	8004bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a78      	ldr	r2, [pc, #480]	; (8004be0 <HAL_I2C_Init+0x280>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	0c9b      	lsrs	r3, r3, #18
 8004a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a6a      	ldr	r2, [pc, #424]	; (8004bd4 <HAL_I2C_Init+0x274>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d802      	bhi.n	8004a34 <HAL_I2C_Init+0xd4>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	3301      	adds	r3, #1
 8004a32:	e009      	b.n	8004a48 <HAL_I2C_Init+0xe8>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	4a69      	ldr	r2, [pc, #420]	; (8004be4 <HAL_I2C_Init+0x284>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	3301      	adds	r3, #1
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	495c      	ldr	r1, [pc, #368]	; (8004bd4 <HAL_I2C_Init+0x274>)
 8004a64:	428b      	cmp	r3, r1
 8004a66:	d819      	bhi.n	8004a9c <HAL_I2C_Init+0x13c>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1e59      	subs	r1, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a7c:	400b      	ands	r3, r1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_I2C_Init+0x138>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e59      	subs	r1, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a96:	e051      	b.n	8004b3c <HAL_I2C_Init+0x1dc>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e04f      	b.n	8004b3c <HAL_I2C_Init+0x1dc>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d111      	bne.n	8004ac8 <HAL_I2C_Init+0x168>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	440b      	add	r3, r1
 8004ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e012      	b.n	8004aee <HAL_I2C_Init+0x18e>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1e58      	subs	r0, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	0099      	lsls	r1, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Init+0x196>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e022      	b.n	8004b3c <HAL_I2C_Init+0x1dc>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <HAL_I2C_Init+0x1bc>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1e58      	subs	r0, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	440b      	add	r3, r1
 8004b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b10:	3301      	adds	r3, #1
 8004b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	e00f      	b.n	8004b3c <HAL_I2C_Init+0x1dc>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1e58      	subs	r0, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	0099      	lsls	r1, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	6809      	ldr	r1, [r1, #0]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6911      	ldr	r1, [r2, #16]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	000186a0 	.word	0x000186a0
 8004bd8:	001e847f 	.word	0x001e847f
 8004bdc:	003d08ff 	.word	0x003d08ff
 8004be0:	431bde83 	.word	0x431bde83
 8004be4:	10624dd3 	.word	0x10624dd3

08004be8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d003      	beq.n	8004c20 <HAL_I2C_EV_IRQHandler+0x38>
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	f040 80c1 	bne.w	8004da2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10d      	bne.n	8004c56 <HAL_I2C_EV_IRQHandler+0x6e>
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c40:	d003      	beq.n	8004c4a <HAL_I2C_EV_IRQHandler+0x62>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_EV_IRQHandler+0x66>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_I2C_EV_IRQHandler+0x68>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f000 8132 	beq.w	8004eba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00c      	beq.n	8004c7a <HAL_I2C_EV_IRQHandler+0x92>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	0a5b      	lsrs	r3, r3, #9
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 fb5b 	bl	8006328 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fcd2 	bl	800561c <I2C_Master_SB>
 8004c78:	e092      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_I2C_EV_IRQHandler+0xb2>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	0a5b      	lsrs	r3, r3, #9
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fd48 	bl	8005728 <I2C_Master_ADD10>
 8004c98:	e082      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_I2C_EV_IRQHandler+0xd2>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	0a5b      	lsrs	r3, r3, #9
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fd62 	bl	800577c <I2C_Master_ADDR>
 8004cb8:	e072      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d03b      	beq.n	8004d3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd4:	f000 80f3 	beq.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	09db      	lsrs	r3, r3, #7
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	0a9b      	lsrs	r3, r3, #10
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f94c 	bl	8004f9a <I2C_MasterTransmit_TXE>
 8004d02:	e04d      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80d6 	beq.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	0a5b      	lsrs	r3, r3, #9
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80cf 	beq.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	2b21      	cmp	r3, #33	; 0x21
 8004d24:	d103      	bne.n	8004d2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9d3 	bl	80050d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d2c:	e0c7      	b.n	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	f040 80c4 	bne.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa41 	bl	80051be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d3c:	e0bf      	b.n	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4c:	f000 80b7 	beq.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	099b      	lsrs	r3, r3, #6
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00f      	beq.n	8004d7c <HAL_I2C_EV_IRQHandler+0x194>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	0a9b      	lsrs	r3, r3, #10
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <HAL_I2C_EV_IRQHandler+0x194>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fab6 	bl	80052e6 <I2C_MasterReceive_RXNE>
 8004d7a:	e011      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	089b      	lsrs	r3, r3, #2
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 809a 	beq.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	0a5b      	lsrs	r3, r3, #9
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8093 	beq.w	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb55 	bl	8005448 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d9e:	e08e      	b.n	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004da0:	e08d      	b.n	8004ebe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	e007      	b.n	8004dc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <HAL_I2C_EV_IRQHandler+0x20e>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 ff13 	bl	8005c1a <I2C_Slave_ADDR>
 8004df4:	e066      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_I2C_EV_IRQHandler+0x22e>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	0a5b      	lsrs	r3, r3, #9
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 ff4e 	bl	8005cb0 <I2C_Slave_STOPF>
 8004e14:	e056      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e16:	7bbb      	ldrb	r3, [r7, #14]
 8004e18:	2b21      	cmp	r3, #33	; 0x21
 8004e1a:	d002      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0x23a>
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	2b29      	cmp	r3, #41	; 0x29
 8004e20:	d125      	bne.n	8004e6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00f      	beq.n	8004e4e <HAL_I2C_EV_IRQHandler+0x266>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	0a9b      	lsrs	r3, r3, #10
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_I2C_EV_IRQHandler+0x266>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fe29 	bl	8005a9e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e4c:	e039      	b.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d033      	beq.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x2da>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	0a5b      	lsrs	r3, r3, #9
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02d      	beq.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fe56 	bl	8005b18 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e6c:	e029      	b.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a9b      	lsrs	r3, r3, #10
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fe61 	bl	8005b5a <I2C_SlaveReceive_RXNE>
 8004e98:	e014      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00e      	beq.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	0a5b      	lsrs	r3, r3, #9
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fe8f 	bl	8005bd6 <I2C_SlaveReceive_BTF>
 8004eb8:	e004      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ec2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	70fb      	strb	r3, [r7, #3]
 8004f26:	4613      	mov	r3, r2
 8004f28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d150      	bne.n	8005062 <I2C_MasterTransmit_TXE+0xc8>
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b21      	cmp	r3, #33	; 0x21
 8004fc4:	d14d      	bne.n	8005062 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d01d      	beq.n	8005008 <I2C_MasterTransmit_TXE+0x6e>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d01a      	beq.n	8005008 <I2C_MasterTransmit_TXE+0x6e>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fd8:	d016      	beq.n	8005008 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fe8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2211      	movs	r2, #17
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff62 	bl	8004eca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005006:	e060      	b.n	80050ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005016:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d107      	bne.n	8005052 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff ff7d 	bl	8004f4a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005050:	e03b      	b.n	80050ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff ff35 	bl	8004eca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005060:	e033      	b.n	80050ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b21      	cmp	r3, #33	; 0x21
 8005066:	d005      	beq.n	8005074 <I2C_MasterTransmit_TXE+0xda>
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d12d      	bne.n	80050ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b22      	cmp	r3, #34	; 0x22
 8005072:	d12a      	bne.n	80050ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800508e:	e01c      	b.n	80050ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d103      	bne.n	80050a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f88e 	bl	80051be <I2C_MemoryTransmit_TXE_BTF>
}
 80050a2:	e012      	b.n	80050ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050c8:	e7ff      	b.n	80050ca <I2C_MasterTransmit_TXE+0x130>
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b21      	cmp	r3, #33	; 0x21
 80050ea:	d164      	bne.n	80051b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d012      	beq.n	800511c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800511a:	e04c      	b.n	80051b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d01d      	beq.n	800515e <I2C_MasterTransmit_BTF+0x8c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b20      	cmp	r3, #32
 8005126:	d01a      	beq.n	800515e <I2C_MasterTransmit_BTF+0x8c>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800512e:	d016      	beq.n	800515e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800513e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2211      	movs	r2, #17
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff feb7 	bl	8004eca <HAL_I2C_MasterTxCpltCallback>
}
 800515c:	e02b      	b.n	80051b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800516c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d107      	bne.n	80051a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fed2 	bl	8004f4a <HAL_I2C_MemTxCpltCallback>
}
 80051a6:	e006      	b.n	80051b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe8a 	bl	8004eca <HAL_I2C_MasterTxCpltCallback>
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d11d      	bne.n	8005212 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10b      	bne.n	80051f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051f4:	e073      	b.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	121b      	asrs	r3, r3, #8
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005210:	e065      	b.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10b      	bne.n	8005232 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521e:	b2da      	uxtb	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005230:	e055      	b.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	2b02      	cmp	r3, #2
 8005238:	d151      	bne.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b22      	cmp	r3, #34	; 0x22
 800523e:	d10d      	bne.n	800525c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	651a      	str	r2, [r3, #80]	; 0x50
}
 800525a:	e040      	b.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b21      	cmp	r3, #33	; 0x21
 800526a:	d112      	bne.n	8005292 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005290:	e025      	b.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d120      	bne.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b21      	cmp	r3, #33	; 0x21
 80052a0:	d11d      	bne.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff fe36 	bl	8004f4a <HAL_I2C_MemTxCpltCallback>
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b22      	cmp	r3, #34	; 0x22
 80052f8:	f040 80a2 	bne.w	8005440 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d921      	bls.n	800534e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b03      	cmp	r3, #3
 8005338:	f040 8082 	bne.w	8005440 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800534c:	e078      	b.n	8005440 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	2b02      	cmp	r3, #2
 8005354:	d074      	beq.n	8005440 <I2C_MasterReceive_RXNE+0x15a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d002      	beq.n	8005362 <I2C_MasterReceive_RXNE+0x7c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d16e      	bne.n	8005440 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 ffae 	bl	80062c4 <I2C_WaitOnSTOPRequestThroughIT>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d142      	bne.n	80053f4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800538c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d10a      	bne.n	80053de <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fdc1 	bl	8004f5e <HAL_I2C_MemRxCpltCallback>
}
 80053dc:	e030      	b.n	8005440 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2212      	movs	r2, #18
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fd76 	bl	8004ede <HAL_I2C_MasterRxCpltCallback>
}
 80053f2:	e025      	b.n	8005440 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005402:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fd99 	bl	8004f72 <HAL_I2C_ErrorCallback>
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b04      	cmp	r3, #4
 800545e:	d11b      	bne.n	8005498 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005496:	e0bd      	b.n	8005614 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d129      	bne.n	80054f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d00a      	beq.n	80054ce <I2C_MasterReceive_BTF+0x86>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d007      	beq.n	80054ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054f4:	e08e      	b.n	8005614 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d176      	bne.n	80055ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d002      	beq.n	800550c <I2C_MasterReceive_BTF+0xc4>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b10      	cmp	r3, #16
 800550a:	d108      	bne.n	800551e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e019      	b.n	8005552 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d002      	beq.n	800552a <I2C_MasterReceive_BTF+0xe2>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d108      	bne.n	800553c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e00a      	b.n	8005552 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b10      	cmp	r3, #16
 8005540:	d007      	beq.n	8005552 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	d10a      	bne.n	80055d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fcc4 	bl	8004f5e <HAL_I2C_MemRxCpltCallback>
}
 80055d6:	e01d      	b.n	8005614 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2212      	movs	r2, #18
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fc79 	bl	8004ede <HAL_I2C_MasterRxCpltCallback>
}
 80055ec:	e012      	b.n	8005614 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d117      	bne.n	8005660 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005648:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800564a:	e067      	b.n	800571c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	611a      	str	r2, [r3, #16]
}
 800565e:	e05d      	b.n	800571c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005668:	d133      	bne.n	80056d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b21      	cmp	r3, #33	; 0x21
 8005674:	d109      	bne.n	800568a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005686:	611a      	str	r2, [r3, #16]
 8005688:	e008      	b.n	800569c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <I2C_Master_SB+0x92>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d032      	beq.n	800571c <I2C_Master_SB+0x100>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02d      	beq.n	800571c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ce:	605a      	str	r2, [r3, #4]
}
 80056d0:	e024      	b.n	800571c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10e      	bne.n	80056f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	b29b      	uxth	r3, r3
 80056e0:	11db      	asrs	r3, r3, #7
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 0306 	and.w	r3, r3, #6
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f063 030f 	orn	r3, r3, #15
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	611a      	str	r2, [r3, #16]
}
 80056f6:	e011      	b.n	800571c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10d      	bne.n	800571c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	b29b      	uxth	r3, r3
 8005706:	11db      	asrs	r3, r3, #7
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0306 	and.w	r3, r3, #6
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f063 030e 	orn	r3, r3, #14
 8005714:	b2da      	uxtb	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	611a      	str	r2, [r3, #16]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005734:	b2da      	uxtb	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <I2C_Master_ADD10+0x26>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00c      	beq.n	8005770 <I2C_Master_ADD10+0x48>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800576e:	605a      	str	r2, [r3, #4]
  }
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800577c:	b480      	push	{r7}
 800577e:	b091      	sub	sp, #68	; 0x44
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800578a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b22      	cmp	r3, #34	; 0x22
 80057a4:	f040 8169 	bne.w	8005a7a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <I2C_Master_ADDR+0x54>
 80057b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d10b      	bne.n	80057d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b8:	2300      	movs	r3, #0
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	e160      	b.n	8005a92 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11d      	bne.n	8005814 <I2C_Master_ADDR+0x98>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057e0:	d118      	bne.n	8005814 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e2:	2300      	movs	r3, #0
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005806:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	651a      	str	r2, [r3, #80]	; 0x50
 8005812:	e13e      	b.n	8005a92 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e115      	b.n	8005a72 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	f040 808a 	bne.w	8005966 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005858:	d137      	bne.n	80058ca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005878:	d113      	bne.n	80058a2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005888:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	e0e7      	b.n	8005a72 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a2:	2300      	movs	r3, #0
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e0d3      	b.n	8005a72 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d02e      	beq.n	800592e <I2C_Master_ADDR+0x1b2>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d02b      	beq.n	800592e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d8:	2b12      	cmp	r3, #18
 80058da:	d102      	bne.n	80058e2 <I2C_Master_ADDR+0x166>
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d125      	bne.n	800592e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d00e      	beq.n	8005906 <I2C_Master_ADDR+0x18a>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d00b      	beq.n	8005906 <I2C_Master_ADDR+0x18a>
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d008      	beq.n	8005906 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e007      	b.n	8005916 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005914:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	e0a1      	b.n	8005a72 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e085      	b.n	8005a72 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d14d      	bne.n	8005a0c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2b04      	cmp	r3, #4
 8005974:	d016      	beq.n	80059a4 <I2C_Master_ADDR+0x228>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b02      	cmp	r3, #2
 800597a:	d013      	beq.n	80059a4 <I2C_Master_ADDR+0x228>
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b10      	cmp	r3, #16
 8005980:	d010      	beq.n	80059a4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005990:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e007      	b.n	80059b4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c2:	d117      	bne.n	80059f4 <I2C_Master_ADDR+0x278>
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ca:	d00b      	beq.n	80059e4 <I2C_Master_ADDR+0x268>
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d008      	beq.n	80059e4 <I2C_Master_ADDR+0x268>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d005      	beq.n	80059e4 <I2C_Master_ADDR+0x268>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d002      	beq.n	80059e4 <I2C_Master_ADDR+0x268>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d107      	bne.n	80059f4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	e032      	b.n	8005a72 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a1a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2a:	d117      	bne.n	8005a5c <I2C_Master_ADDR+0x2e0>
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a32:	d00b      	beq.n	8005a4c <I2C_Master_ADDR+0x2d0>
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d008      	beq.n	8005a4c <I2C_Master_ADDR+0x2d0>
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d005      	beq.n	8005a4c <I2C_Master_ADDR+0x2d0>
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d002      	beq.n	8005a4c <I2C_Master_ADDR+0x2d0>
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d107      	bne.n	8005a5c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a78:	e00b      	b.n	8005a92 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
}
 8005a90:	e7ff      	b.n	8005a92 <I2C_Master_ADDR+0x316>
 8005a92:	bf00      	nop
 8005a94:	3744      	adds	r7, #68	; 0x44
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02b      	beq.n	8005b10 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d114      	bne.n	8005b10 <I2C_SlaveTransmit_TXE+0x72>
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b29      	cmp	r3, #41	; 0x29
 8005aea:	d111      	bne.n	8005b10 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2221      	movs	r2, #33	; 0x21
 8005b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2228      	movs	r2, #40	; 0x28
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff f9f1 	bl	8004ef2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	781a      	ldrb	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02c      	beq.n	8005bce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d114      	bne.n	8005bce <I2C_SlaveReceive_RXNE+0x74>
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba8:	d111      	bne.n	8005bce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2222      	movs	r2, #34	; 0x22
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2228      	movs	r2, #40	; 0x28
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff f99c 	bl	8004f06 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c34:	2b28      	cmp	r3, #40	; 0x28
 8005c36:	d127      	bne.n	8005c88 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c46:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	09db      	lsrs	r3, r3, #7
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	81bb      	strh	r3, [r7, #12]
 8005c6a:	e002      	b.n	8005c72 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c7a:	89ba      	ldrh	r2, [r7, #12]
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff f94a 	bl	8004f1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c86:	e00e      	b.n	8005ca6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0c:	d172      	bne.n	8005df4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b22      	cmp	r3, #34	; 0x22
 8005d12:	d002      	beq.n	8005d1a <I2C_Slave_STOPF+0x6a>
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b2a      	cmp	r3, #42	; 0x2a
 8005d18:	d135      	bne.n	8005d86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f043 0204 	orr.w	r2, r3, #4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fb7c 	bl	8004450 <HAL_DMA_GetState>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d049      	beq.n	8005df2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	4a69      	ldr	r2, [pc, #420]	; (8005f08 <I2C_Slave_STOPF+0x258>)
 8005d64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe f9c4 	bl	80040f8 <HAL_DMA_Abort_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d03d      	beq.n	8005df2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d84:	e035      	b.n	8005df2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f043 0204 	orr.w	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fb46 	bl	8004450 <HAL_DMA_GetState>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d014      	beq.n	8005df4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	4a4e      	ldr	r2, [pc, #312]	; (8005f08 <I2C_Slave_STOPF+0x258>)
 8005dd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe f98e 	bl	80040f8 <HAL_DMA_Abort_IT>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	e000      	b.n	8005df4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005df2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d03e      	beq.n	8005e7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d112      	bne.n	8005e32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	d112      	bne.n	8005e66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	f043 0204 	orr.w	r2, r3, #4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f843 	bl	8005f10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e8a:	e039      	b.n	8005f00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e90:	d109      	bne.n	8005ea6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2228      	movs	r2, #40	; 0x28
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff f830 	bl	8004f06 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b28      	cmp	r3, #40	; 0x28
 8005eb0:	d111      	bne.n	8005ed6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <I2C_Slave_STOPF+0x25c>)
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff f831 	bl	8004f36 <HAL_I2C_ListenCpltCallback>
}
 8005ed4:	e014      	b.n	8005f00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	2b22      	cmp	r3, #34	; 0x22
 8005edc:	d002      	beq.n	8005ee4 <I2C_Slave_STOPF+0x234>
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b22      	cmp	r3, #34	; 0x22
 8005ee2:	d10d      	bne.n	8005f00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff f803 	bl	8004f06 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	08006175 	.word	0x08006175
 8005f0c:	ffff0000 	.word	0xffff0000

08005f10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	2b10      	cmp	r3, #16
 8005f2c:	d002      	beq.n	8005f34 <I2C_ITError+0x24>
 8005f2e:	7bbb      	ldrb	r3, [r7, #14]
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d10a      	bne.n	8005f4a <I2C_ITError+0x3a>
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b22      	cmp	r3, #34	; 0x22
 8005f38:	d107      	bne.n	8005f4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f50:	2b28      	cmp	r3, #40	; 0x28
 8005f52:	d107      	bne.n	8005f64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2228      	movs	r2, #40	; 0x28
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f62:	e015      	b.n	8005f90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f72:	d00a      	beq.n	8005f8a <I2C_ITError+0x7a>
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b60      	cmp	r3, #96	; 0x60
 8005f78:	d007      	beq.n	8005f8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9e:	d162      	bne.n	8006066 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d020      	beq.n	8006000 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	4a6a      	ldr	r2, [pc, #424]	; (800616c <I2C_ITError+0x25c>)
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe f894 	bl	80040f8 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8089 	beq.w	80060ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4798      	blx	r3
 8005ffe:	e074      	b.n	80060ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	4a59      	ldr	r2, [pc, #356]	; (800616c <I2C_ITError+0x25c>)
 8006006:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	4618      	mov	r0, r3
 800600e:	f7fe f873 	bl	80040f8 <HAL_DMA_Abort_IT>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d068      	beq.n	80060ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d10b      	bne.n	800603e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	e041      	b.n	80060ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b60      	cmp	r3, #96	; 0x60
 8006070:	d125      	bne.n	80060be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d10b      	bne.n	80060a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fe ff65 	bl	8004f86 <HAL_I2C_AbortCpltCallback>
 80060bc:	e015      	b.n	80060ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d10b      	bne.n	80060e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fe ff44 	bl	8004f72 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10e      	bne.n	8006118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006126:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b04      	cmp	r3, #4
 800613a:	d113      	bne.n	8006164 <I2C_ITError+0x254>
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b28      	cmp	r3, #40	; 0x28
 8006140:	d110      	bne.n	8006164 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <I2C_ITError+0x260>)
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fe fee9 	bl	8004f36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08006175 	.word	0x08006175
 8006170:	ffff0000 	.word	0xffff0000

08006174 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800618e:	4b4b      	ldr	r3, [pc, #300]	; (80062bc <I2C_DMAAbort+0x148>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	4a4a      	ldr	r2, [pc, #296]	; (80062c0 <I2C_DMAAbort+0x14c>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	0a1a      	lsrs	r2, r3, #8
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	00da      	lsls	r2, r3, #3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061ba:	e00a      	b.n	80061d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3b01      	subs	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d0:	d0ea      	beq.n	80061a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	2200      	movs	r2, #0
 80061e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	2200      	movs	r2, #0
 80061f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006200:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	2200      	movs	r2, #0
 8006216:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b60      	cmp	r3, #96	; 0x60
 8006242:	d10e      	bne.n	8006262 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800625a:	6978      	ldr	r0, [r7, #20]
 800625c:	f7fe fe93 	bl	8004f86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006260:	e027      	b.n	80062b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006262:	7cfb      	ldrb	r3, [r7, #19]
 8006264:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006268:	2b28      	cmp	r3, #40	; 0x28
 800626a:	d117      	bne.n	800629c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800628a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2228      	movs	r2, #40	; 0x28
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800629a:	e007      	b.n	80062ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062ac:	6978      	ldr	r0, [r7, #20]
 80062ae:	f7fe fe60 	bl	8004f72 <HAL_I2C_ErrorCallback>
}
 80062b2:	bf00      	nop
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000000 	.word	0x20000000
 80062c0:	14f8b589 	.word	0x14f8b589

080062c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	08db      	lsrs	r3, r3, #3
 80062d6:	4a13      	ldr	r2, [pc, #76]	; (8006324 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	0a1a      	lsrs	r2, r3, #8
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d107      	bne.n	8006302 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e008      	b.n	8006314 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006310:	d0e9      	beq.n	80062e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000000 	.word	0x20000000
 8006324:	14f8b589 	.word	0x14f8b589

08006328 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006338:	d103      	bne.n	8006342 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006340:	e007      	b.n	8006352 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800634a:	d102      	bne.n	8006352 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2208      	movs	r2, #8
 8006350:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800635e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006360:	b08f      	sub	sp, #60	; 0x3c
 8006362:	af0a      	add	r7, sp, #40	; 0x28
 8006364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e116      	b.n	800659e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f006 fc3a 	bl	800cc04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2203      	movs	r2, #3
 8006394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f003 fb4d 	bl	8009a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	687e      	ldr	r6, [r7, #4]
 80063bc:	466d      	mov	r5, sp
 80063be:	f106 0410 	add.w	r4, r6, #16
 80063c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80063d2:	1d33      	adds	r3, r6, #4
 80063d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063d6:	6838      	ldr	r0, [r7, #0]
 80063d8:	f003 fa24 	bl	8009824 <USB_CoreInit>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0d7      	b.n	800659e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f003 fb3b 	bl	8009a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	e04a      	b.n	8006496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006400:	7bfa      	ldrb	r2, [r7, #15]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	333d      	adds	r3, #61	; 0x3d
 8006410:	2201      	movs	r2, #1
 8006412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006414:	7bfa      	ldrb	r2, [r7, #15]
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	333c      	adds	r3, #60	; 0x3c
 8006424:	7bfa      	ldrb	r2, [r7, #15]
 8006426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006428:	7bfa      	ldrb	r2, [r7, #15]
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	b298      	uxth	r0, r3
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	3342      	adds	r3, #66	; 0x42
 800643c:	4602      	mov	r2, r0
 800643e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006440:	7bfa      	ldrb	r2, [r7, #15]
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	333f      	adds	r3, #63	; 0x3f
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006454:	7bfa      	ldrb	r2, [r7, #15]
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	3344      	adds	r3, #68	; 0x44
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006468:	7bfa      	ldrb	r2, [r7, #15]
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	3348      	adds	r3, #72	; 0x48
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800647c:	7bfa      	ldrb	r2, [r7, #15]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	3350      	adds	r3, #80	; 0x50
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	3301      	adds	r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
 8006496:	7bfa      	ldrb	r2, [r7, #15]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d3af      	bcc.n	8006400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e044      	b.n	8006530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80064a6:	7bfa      	ldrb	r2, [r7, #15]
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064bc:	7bfa      	ldrb	r2, [r7, #15]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80064ce:	7bfa      	ldrb	r2, [r7, #15]
 80064d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064d2:	7bfa      	ldrb	r2, [r7, #15]
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064e8:	7bfa      	ldrb	r2, [r7, #15]
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064fe:	7bfa      	ldrb	r2, [r7, #15]
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006514:	7bfa      	ldrb	r2, [r7, #15]
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	3301      	adds	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3b5      	bcc.n	80064a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	687e      	ldr	r6, [r7, #4]
 8006542:	466d      	mov	r5, sp
 8006544:	f106 0410 	add.w	r4, r6, #16
 8006548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800654a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800654c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800654e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006554:	e885 0003 	stmia.w	r5, {r0, r1}
 8006558:	1d33      	adds	r3, r6, #4
 800655a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800655c:	6838      	ldr	r0, [r7, #0]
 800655e:	f003 fad3 	bl	8009b08 <USB_DevInit>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e014      	b.n	800659e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b01      	cmp	r3, #1
 800658a:	d102      	bne.n	8006592 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f891 	bl	80076b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f004 fb42 	bl	800ac20 <USB_DevDisconnect>

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_PCD_Start+0x1c>
 80065be:	2302      	movs	r3, #2
 80065c0:	e020      	b.n	8006604 <HAL_PCD_Start+0x5e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d109      	bne.n	80065e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d005      	beq.n	80065e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f003 fa1e 	bl	8009a2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f004 faf2 	bl	800abde <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b08d      	sub	sp, #52	; 0x34
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f004 fbb0 	bl	800ad88 <USB_GetMode>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 83ca 	bne.w	8006dc4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f004 fb14 	bl	800ac62 <USB_ReadInterrupts>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 83c0 	beq.w	8006dc2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f004 fb0b 	bl	800ac62 <USB_ReadInterrupts>
 800664c:	4603      	mov	r3, r0
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b02      	cmp	r3, #2
 8006654:	d107      	bne.n	8006666 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f002 0202 	and.w	r2, r2, #2
 8006664:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f004 faf9 	bl	800ac62 <USB_ReadInterrupts>
 8006670:	4603      	mov	r3, r0
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d161      	bne.n	800673e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0210 	bic.w	r2, r2, #16
 8006688:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 020f 	and.w	r2, r3, #15
 8006696:	4613      	mov	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	3304      	adds	r3, #4
 80066a8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	0c5b      	lsrs	r3, r3, #17
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d124      	bne.n	8006700 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d035      	beq.n	800672e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	6a38      	ldr	r0, [r7, #32]
 80066d6:	f004 f930 	bl	800a93a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066e6:	441a      	add	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	699a      	ldr	r2, [r3, #24]
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f8:	441a      	add	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	619a      	str	r2, [r3, #24]
 80066fe:	e016      	b.n	800672e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	0c5b      	lsrs	r3, r3, #17
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2b06      	cmp	r3, #6
 800670a:	d110      	bne.n	800672e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006712:	2208      	movs	r2, #8
 8006714:	4619      	mov	r1, r3
 8006716:	6a38      	ldr	r0, [r7, #32]
 8006718:	f004 f90f 	bl	800a93a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006728:	441a      	add	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0210 	orr.w	r2, r2, #16
 800673c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f004 fa8d 	bl	800ac62 <USB_ReadInterrupts>
 8006748:	4603      	mov	r3, r0
 800674a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800674e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006752:	d16e      	bne.n	8006832 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f004 fa93 	bl	800ac88 <USB_ReadDevAllOutEpInterrupt>
 8006762:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006764:	e062      	b.n	800682c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d057      	beq.n	8006820 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f004 fab8 	bl	800acf0 <USB_ReadDevOutEPInterrupt>
 8006780:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00c      	beq.n	80067a6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	461a      	mov	r2, r3
 800679a:	2301      	movs	r3, #1
 800679c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800679e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fddd 	bl	8007360 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00c      	beq.n	80067ca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067bc:	461a      	mov	r2, r3
 80067be:	2308      	movs	r3, #8
 80067c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80067c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fed7 	bl	8007578 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	461a      	mov	r2, r3
 80067e2:	2310      	movs	r3, #16
 80067e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	461a      	mov	r2, r3
 80067fe:	2320      	movs	r3, #32
 8006800:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	461a      	mov	r2, r3
 800681a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800681e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	3301      	adds	r3, #1
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d199      	bne.n	8006766 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f004 fa13 	bl	800ac62 <USB_ReadInterrupts>
 800683c:	4603      	mov	r3, r0
 800683e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006846:	f040 80c0 	bne.w	80069ca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f004 fa34 	bl	800acbc <USB_ReadDevAllInEpInterrupt>
 8006854:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800685a:	e0b2      	b.n	80069c2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80a7 	beq.w	80069b6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f004 fa5a 	bl	800ad2c <USB_ReadDevInEPInterrupt>
 8006878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d057      	beq.n	8006934 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	2201      	movs	r2, #1
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	43db      	mvns	r3, r3
 800689e:	69f9      	ldr	r1, [r7, #28]
 80068a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a4:	4013      	ands	r3, r2
 80068a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	461a      	mov	r2, r3
 80068b6:	2301      	movs	r3, #1
 80068b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d132      	bne.n	8006928 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	3348      	adds	r3, #72	; 0x48
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4403      	add	r3, r0
 80068e2:	3344      	adds	r3, #68	; 0x44
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4419      	add	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4403      	add	r3, r0
 80068f6:	3348      	adds	r3, #72	; 0x48
 80068f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d113      	bne.n	8006928 <HAL_PCD_IRQHandler+0x31c>
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	4613      	mov	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	3350      	adds	r3, #80	; 0x50
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d108      	bne.n	8006928 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006920:	461a      	mov	r2, r3
 8006922:	2101      	movs	r1, #1
 8006924:	f004 fa62 	bl	800adec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	b2db      	uxtb	r3, r3
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f006 fa17 	bl	800cd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	461a      	mov	r2, r3
 800694c:	2308      	movs	r3, #8
 800694e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	461a      	mov	r2, r3
 8006968:	2310      	movs	r3, #16
 800696a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	461a      	mov	r2, r3
 8006984:	2340      	movs	r3, #64	; 0x40
 8006986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	461a      	mov	r2, r3
 80069a0:	2302      	movs	r3, #2
 80069a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80069ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fc48 	bl	8007246 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	3301      	adds	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f47f af49 	bne.w	800685c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f004 f947 	bl	800ac62 <USB_ReadInterrupts>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069de:	d122      	bne.n	8006a26 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d108      	bne.n	8006a10 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f006 fbf9 	bl	800d200 <HAL_PCDEx_LPM_Callback>
 8006a0e:	e002      	b.n	8006a16 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f006 fa1d 	bl	800ce50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f004 f919 	bl	800ac62 <USB_ReadInterrupts>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3a:	d112      	bne.n	8006a62 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d102      	bne.n	8006a52 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f006 f9d9 	bl	800ce04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006a60:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f004 f8fb 	bl	800ac62 <USB_ReadInterrupts>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a76:	d121      	bne.n	8006abc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695a      	ldr	r2, [r3, #20]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006a86:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d111      	bne.n	8006ab6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	f003 020f 	and.w	r2, r3, #15
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006aac:	2101      	movs	r1, #1
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f006 fba6 	bl	800d200 <HAL_PCDEx_LPM_Callback>
 8006ab4:	e002      	b.n	8006abc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f006 f9a4 	bl	800ce04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f004 f8ce 	bl	800ac62 <USB_ReadInterrupts>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad0:	f040 80c7 	bne.w	8006c62 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae2:	f023 0301 	bic.w	r3, r3, #1
 8006ae6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2110      	movs	r1, #16
 8006aee:	4618      	mov	r0, r3
 8006af0:	f003 f968 	bl	8009dc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af8:	e056      	b.n	8006ba8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b06:	461a      	mov	r2, r3
 8006b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ba0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d3a3      	bcc.n	8006afa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006bc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bde:	f043 030b 	orr.w	r3, r3, #11
 8006be2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf4:	f043 030b 	orr.w	r3, r3, #11
 8006bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bfa:	e015      	b.n	8006c28 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006c12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c22:	f043 030b 	orr.w	r3, r3, #11
 8006c26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f004 f8cd 	bl	800adec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f003 fffb 	bl	800ac62 <USB_ReadInterrupts>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c76:	d124      	bne.n	8006cc2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f004 f891 	bl	800ada4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f003 f8f9 	bl	8009e7e <USB_GetDevSpeed>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681c      	ldr	r4, [r3, #0]
 8006c98:	f000 fe66 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 8006c9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f002 fe1e 	bl	80098e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f006 f880 	bl	800cdb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695a      	ldr	r2, [r3, #20]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f003 ffcb 	bl	800ac62 <USB_ReadInterrupts>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d10a      	bne.n	8006cec <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f006 f85d 	bl	800cd96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f002 0208 	and.w	r2, r2, #8
 8006cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f003 ffb6 	bl	800ac62 <USB_ReadInterrupts>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d00:	d10f      	bne.n	8006d22 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f006 f8bf 	bl	800ce90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f003 ff9b 	bl	800ac62 <USB_ReadInterrupts>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d36:	d10f      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f006 f892 	bl	800ce6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f003 ff80 	bl	800ac62 <USB_ReadInterrupts>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6c:	d10a      	bne.n	8006d84 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f006 f8a0 	bl	800ceb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f003 ff6a 	bl	800ac62 <USB_ReadInterrupts>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d115      	bne.n	8006dc4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f006 f890 	bl	800ced0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6859      	ldr	r1, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]
 8006dc0:	e000      	b.n	8006dc4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006dc2:	bf00      	nop
    }
  }
}
 8006dc4:	3734      	adds	r7, #52	; 0x34
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd90      	pop	{r4, r7, pc}

08006dca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_PCD_SetAddress+0x1a>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e013      	b.n	8006e0c <HAL_PCD_SetAddress+0x42>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	78fa      	ldrb	r2, [r7, #3]
 8006df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f003 fec8 	bl	800ab92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	70fb      	strb	r3, [r7, #3]
 8006e26:	460b      	mov	r3, r1
 8006e28:	803b      	strh	r3, [r7, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da0f      	bge.n	8006e5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	3338      	adds	r3, #56	; 0x38
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	705a      	strb	r2, [r3, #1]
 8006e58:	e00f      	b.n	8006e7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3304      	adds	r3, #4
 8006e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e86:	883a      	ldrh	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	78ba      	ldrb	r2, [r7, #2]
 8006e90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ea4:	78bb      	ldrb	r3, [r7, #2]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d102      	bne.n	8006eb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_PCD_EP_Open+0xaa>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e00e      	b.n	8006edc <HAL_PCD_EP_Open+0xc8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f002 fffb 	bl	8009ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006eda:	7afb      	ldrb	r3, [r7, #11]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	da0f      	bge.n	8006f18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	4613      	mov	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	3338      	adds	r3, #56	; 0x38
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	705a      	strb	r2, [r3, #1]
 8006f16:	e00f      	b.n	8006f38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	f003 020f 	and.w	r2, r3, #15
 8006f1e:	4613      	mov	r3, r2
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	1a9b      	subs	r3, r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_PCD_EP_Close+0x6e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e00e      	b.n	8006f70 <HAL_PCD_EP_Close+0x8c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68f9      	ldr	r1, [r7, #12]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f003 f839 	bl	8009fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	460b      	mov	r3, r1
 8006f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	f003 020f 	and.w	r2, r3, #15
 8006f8e:	4613      	mov	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d102      	bne.n	8006fd4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6979      	ldr	r1, [r7, #20]
 8006fec:	f003 fb14 	bl	800a618 <USB_EP0StartXfer>
 8006ff0:	e008      	b.n	8007004 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6979      	ldr	r1, [r7, #20]
 8007000:	f003 f8c6 	bl	800a190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	f003 020f 	and.w	r2, r3, #15
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007030:	681b      	ldr	r3, [r3, #0]
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
 800704a:	460b      	mov	r3, r1
 800704c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	4613      	mov	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	1a9b      	subs	r3, r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	3338      	adds	r3, #56	; 0x38
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	3304      	adds	r3, #4
 8007064:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2201      	movs	r2, #1
 800707c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	b2da      	uxtb	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d102      	bne.n	8007098 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007098:	7afb      	ldrb	r3, [r7, #11]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	6979      	ldr	r1, [r7, #20]
 80070b0:	f003 fab2 	bl	800a618 <USB_EP0StartXfer>
 80070b4:	e008      	b.n	80070c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	f003 f864 	bl	800a190 <USB_EPStartXfer>
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d901      	bls.n	80070f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e050      	b.n	8007192 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da0f      	bge.n	8007118 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	3338      	adds	r3, #56	; 0x38
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	3304      	adds	r3, #4
 800710e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	705a      	strb	r2, [r3, #1]
 8007116:	e00d      	b.n	8007134 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	3304      	adds	r3, #4
 800712c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_PCD_EP_SetStall+0x82>
 8007150:	2302      	movs	r3, #2
 8007152:	e01e      	b.n	8007192 <HAL_PCD_EP_SetStall+0xc0>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68f9      	ldr	r1, [r7, #12]
 8007162:	4618      	mov	r0, r3
 8007164:	f003 fc41 	bl	800a9ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	b2d9      	uxtb	r1, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007182:	461a      	mov	r2, r3
 8007184:	f003 fe32 	bl	800adec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	f003 020f 	and.w	r2, r3, #15
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d901      	bls.n	80071b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e042      	b.n	800723e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da0f      	bge.n	80071e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	f003 020f 	and.w	r2, r3, #15
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	3338      	adds	r3, #56	; 0x38
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	3304      	adds	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	705a      	strb	r2, [r3, #1]
 80071de:	e00f      	b.n	8007200 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	f003 020f 	and.w	r2, r3, #15
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4413      	add	r3, r2
 80071f6:	3304      	adds	r3, #4
 80071f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_PCD_EP_ClrStall+0x86>
 800721c:	2302      	movs	r3, #2
 800721e:	e00e      	b.n	800723e <HAL_PCD_EP_ClrStall+0xa4>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	4618      	mov	r0, r3
 8007230:	f003 fc49 	bl	800aac6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b08a      	sub	sp, #40	; 0x28
 800724a:	af02      	add	r7, sp, #8
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	3338      	adds	r3, #56	; 0x38
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	3304      	adds	r3, #4
 800726c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	429a      	cmp	r2, r3
 8007278:	d901      	bls.n	800727e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e06c      	b.n	8007358 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	429a      	cmp	r2, r3
 8007292:	d902      	bls.n	800729a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	3303      	adds	r3, #3
 800729e:	089b      	lsrs	r3, r3, #2
 80072a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072a2:	e02b      	b.n	80072fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d902      	bls.n	80072c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	3303      	adds	r3, #3
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68d9      	ldr	r1, [r3, #12]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	4603      	mov	r3, r0
 80072de:	6978      	ldr	r0, [r7, #20]
 80072e0:	f003 faed 	bl	800a8be <USB_WritePacket>

    ep->xfer_buff  += len;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	441a      	add	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	b29b      	uxth	r3, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	429a      	cmp	r2, r3
 8007310:	d809      	bhi.n	8007326 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800731a:	429a      	cmp	r2, r3
 800731c:	d203      	bcs.n	8007326 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1be      	bne.n	80072a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	695a      	ldr	r2, [r3, #20]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	429a      	cmp	r2, r3
 8007330:	d811      	bhi.n	8007356 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f003 030f 	and.w	r3, r3, #15
 8007338:	2201      	movs	r2, #1
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	43db      	mvns	r3, r3
 800734c:	6939      	ldr	r1, [r7, #16]
 800734e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007352:	4013      	ands	r3, r2
 8007354:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	333c      	adds	r3, #60	; 0x3c
 8007378:	3304      	adds	r3, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b01      	cmp	r3, #1
 8007394:	f040 80a0 	bne.w	80074d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d015      	beq.n	80073ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a72      	ldr	r2, [pc, #456]	; (8007570 <PCD_EP_OutXfrComplete_int+0x210>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	f240 80dd 	bls.w	8007566 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80d7 	beq.w	8007566 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	461a      	mov	r2, r3
 80073c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ca:	6093      	str	r3, [r2, #8]
 80073cc:	e0cb      	b.n	8007566 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	461a      	mov	r2, r3
 80073e6:	2320      	movs	r3, #32
 80073e8:	6093      	str	r3, [r2, #8]
 80073ea:	e0bc      	b.n	8007566 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f040 80b7 	bne.w	8007566 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a5d      	ldr	r2, [pc, #372]	; (8007570 <PCD_EP_OutXfrComplete_int+0x210>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d90f      	bls.n	8007420 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	461a      	mov	r2, r3
 8007418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741c:	6093      	str	r3, [r2, #8]
 800741e:	e0a2      	b.n	8007566 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007432:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	0159      	lsls	r1, r3, #5
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	440b      	add	r3, r1
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007446:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4403      	add	r3, r0
 8007456:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800745a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4403      	add	r3, r0
 800747e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4419      	add	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	4613      	mov	r3, r2
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4403      	add	r3, r0
 8007494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007498:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d114      	bne.n	80074ca <PCD_EP_OutXfrComplete_int+0x16a>
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d108      	bne.n	80074ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074c2:	461a      	mov	r2, r3
 80074c4:	2101      	movs	r1, #1
 80074c6:	f003 fc91 	bl	800adec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f005 fc2b 	bl	800cd2c <HAL_PCD_DataOutStageCallback>
 80074d6:	e046      	b.n	8007566 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4a26      	ldr	r2, [pc, #152]	; (8007574 <PCD_EP_OutXfrComplete_int+0x214>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d124      	bne.n	800752a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f6:	461a      	mov	r2, r3
 80074f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074fc:	6093      	str	r3, [r2, #8]
 80074fe:	e032      	b.n	8007566 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	461a      	mov	r2, r3
 8007518:	2320      	movs	r3, #32
 800751a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f005 fc02 	bl	800cd2c <HAL_PCD_DataOutStageCallback>
 8007528:	e01d      	b.n	8007566 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d114      	bne.n	800755a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007552:	461a      	mov	r2, r3
 8007554:	2100      	movs	r1, #0
 8007556:	f003 fc49 	bl	800adec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f005 fbe3 	bl	800cd2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	4f54300a 	.word	0x4f54300a
 8007574:	4f54310a 	.word	0x4f54310a

08007578 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	333c      	adds	r3, #60	; 0x3c
 8007590:	3304      	adds	r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <PCD_EP_OutSetupPacket_int+0x88>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d90e      	bls.n	80075cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d009      	beq.n	80075cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	461a      	mov	r2, r3
 80075c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f005 fb9b 	bl	800cd08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a0a      	ldr	r2, [pc, #40]	; (8007600 <PCD_EP_OutSetupPacket_int+0x88>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d90c      	bls.n	80075f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d108      	bne.n	80075f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075ec:	461a      	mov	r2, r3
 80075ee:	2101      	movs	r1, #1
 80075f0:	f003 fbfc 	bl	800adec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	4f54300a 	.word	0x4f54300a

08007604 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	4613      	mov	r3, r2
 8007612:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007622:	883b      	ldrh	r3, [r7, #0]
 8007624:	0419      	lsls	r1, r3, #16
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	430a      	orrs	r2, r1
 800762e:	629a      	str	r2, [r3, #40]	; 0x28
 8007630:	e028      	b.n	8007684 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	0c1b      	lsrs	r3, r3, #16
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	4413      	add	r3, r2
 800763e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
 8007644:	e00d      	b.n	8007662 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	3340      	adds	r3, #64	; 0x40
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	0c1b      	lsrs	r3, r3, #16
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	4413      	add	r3, r2
 800765a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	3301      	adds	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
 8007662:	7bfa      	ldrb	r2, [r7, #15]
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	3b01      	subs	r3, #1
 8007668:	429a      	cmp	r2, r3
 800766a:	d3ec      	bcc.n	8007646 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800766c:	883b      	ldrh	r3, [r7, #0]
 800766e:	0418      	lsls	r0, r3, #16
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	3b01      	subs	r3, #1
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4302      	orrs	r2, r0
 800767c:	3340      	adds	r3, #64	; 0x40
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	887a      	ldrh	r2, [r7, #2]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e6:	f043 0303 	orr.w	r3, r3, #3
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007706:	2300      	movs	r3, #0
 8007708:	603b      	str	r3, [r7, #0]
 800770a:	4b20      	ldr	r3, [pc, #128]	; (800778c <HAL_PWREx_EnableOverDrive+0x90>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	4a1f      	ldr	r2, [pc, #124]	; (800778c <HAL_PWREx_EnableOverDrive+0x90>)
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6413      	str	r3, [r2, #64]	; 0x40
 8007716:	4b1d      	ldr	r3, [pc, #116]	; (800778c <HAL_PWREx_EnableOverDrive+0x90>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_PWREx_EnableOverDrive+0x94>)
 8007724:	2201      	movs	r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007728:	f7fb fb38 	bl	8002d9c <HAL_GetTick>
 800772c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800772e:	e009      	b.n	8007744 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007730:	f7fb fb34 	bl	8002d9c <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800773e:	d901      	bls.n	8007744 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e01f      	b.n	8007784 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_PWREx_EnableOverDrive+0x98>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007750:	d1ee      	bne.n	8007730 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007754:	2201      	movs	r2, #1
 8007756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007758:	f7fb fb20 	bl	8002d9c <HAL_GetTick>
 800775c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800775e:	e009      	b.n	8007774 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007760:	f7fb fb1c 	bl	8002d9c <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800776e:	d901      	bls.n	8007774 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e007      	b.n	8007784 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <HAL_PWREx_EnableOverDrive+0x98>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007780:	d1ee      	bne.n	8007760 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40023800 	.word	0x40023800
 8007790:	420e0040 	.word	0x420e0040
 8007794:	40007000 	.word	0x40007000
 8007798:	420e0044 	.word	0x420e0044

0800779c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0cc      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077b0:	4b68      	ldr	r3, [pc, #416]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d90c      	bls.n	80077d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077be:	4b65      	ldr	r3, [pc, #404]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c6:	4b63      	ldr	r3, [pc, #396]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d001      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0b8      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d020      	beq.n	8007826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077f0:	4b59      	ldr	r3, [pc, #356]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	4a58      	ldr	r2, [pc, #352]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007808:	4b53      	ldr	r3, [pc, #332]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a52      	ldr	r2, [pc, #328]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007814:	4b50      	ldr	r3, [pc, #320]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	494d      	ldr	r1, [pc, #308]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d044      	beq.n	80078bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d107      	bne.n	800784a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d119      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e07f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d003      	beq.n	800785a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007856:	2b03      	cmp	r3, #3
 8007858:	d107      	bne.n	800786a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800785a:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e06f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786a:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e067      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800787a:	4b37      	ldr	r3, [pc, #220]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0203 	bic.w	r2, r3, #3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	4934      	ldr	r1, [pc, #208]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800788c:	f7fb fa86 	bl	8002d9c <HAL_GetTick>
 8007890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	e00a      	b.n	80078aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007894:	f7fb fa82 	bl	8002d9c <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e04f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078aa:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 020c 	and.w	r2, r3, #12
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d1eb      	bne.n	8007894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078bc:	4b25      	ldr	r3, [pc, #148]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d20c      	bcs.n	80078e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d001      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e032      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f0:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	4916      	ldr	r1, [pc, #88]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800790e:	4b12      	ldr	r3, [pc, #72]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	490e      	ldr	r1, [pc, #56]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	4313      	orrs	r3, r2
 8007920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007922:	f000 fb6b 	bl	8007ffc <HAL_RCC_GetSysClockFreq>
 8007926:	4602      	mov	r2, r0
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	490a      	ldr	r1, [pc, #40]	; (800795c <HAL_RCC_ClockConfig+0x1c0>)
 8007934:	5ccb      	ldrb	r3, [r1, r3]
 8007936:	fa22 f303 	lsr.w	r3, r2, r3
 800793a:	4a09      	ldr	r2, [pc, #36]	; (8007960 <HAL_RCC_ClockConfig+0x1c4>)
 800793c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_RCC_ClockConfig+0x1c8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f7fb f9e6 	bl	8002d14 <HAL_InitTick>

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023c00 	.word	0x40023c00
 8007958:	40023800 	.word	0x40023800
 800795c:	0800d3dc 	.word	0x0800d3dc
 8007960:	20000000 	.word	0x20000000
 8007964:	20000004 	.word	0x20000004

08007968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800796c:	4b03      	ldr	r3, [pc, #12]	; (800797c <HAL_RCC_GetHCLKFreq+0x14>)
 800796e:	681b      	ldr	r3, [r3, #0]
}
 8007970:	4618      	mov	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000000 	.word	0x20000000

08007980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007984:	f7ff fff0 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	0a9b      	lsrs	r3, r3, #10
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	4903      	ldr	r1, [pc, #12]	; (80079a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007996:	5ccb      	ldrb	r3, [r1, r3]
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40023800 	.word	0x40023800
 80079a4:	0800d3ec 	.word	0x0800d3ec

080079a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80079e0:	4b6f      	ldr	r3, [pc, #444]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80079e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	496c      	ldr	r1, [pc, #432]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80079fe:	2301      	movs	r3, #1
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007a0e:	4b64      	ldr	r3, [pc, #400]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a14:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	4960      	ldr	r1, [pc, #384]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a3c:	4b58      	ldr	r3, [pc, #352]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	4955      	ldr	r1, [pc, #340]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a5a:	d101      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d017      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a78:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a86:	4946      	ldr	r1, [pc, #280]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a96:	d101      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 808a 	beq.w	8007bca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	4a38      	ldr	r2, [pc, #224]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac6:	4b36      	ldr	r3, [pc, #216]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ace:	60bb      	str	r3, [r7, #8]
 8007ad0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ad2:	4b34      	ldr	r3, [pc, #208]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a33      	ldr	r2, [pc, #204]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007adc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ade:	f7fb f95d 	bl	8002d9c <HAL_GetTick>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ae6:	f7fb f959 	bl	8002d9c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e278      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007af8:	4b2a      	ldr	r3, [pc, #168]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b04:	4b26      	ldr	r3, [pc, #152]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b0c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d02f      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b1c:	6a3a      	ldr	r2, [r7, #32]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d028      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b22:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b2c:	4b1e      	ldr	r3, [pc, #120]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b32:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d114      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b4a:	f7fb f927 	bl	8002d9c <HAL_GetTick>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b50:	e00a      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b52:	f7fb f923 	bl	8002d9c <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e240      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b68:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ee      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b80:	d114      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b96:	4902      	ldr	r1, [pc, #8]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	608b      	str	r3, [r1, #8]
 8007b9c:	e00c      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007b9e:	bf00      	nop
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40007000 	.word	0x40007000
 8007ba8:	42470e40 	.word	0x42470e40
 8007bac:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	4a49      	ldr	r2, [pc, #292]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bb6:	6093      	str	r3, [r2, #8]
 8007bb8:	4b47      	ldr	r3, [pc, #284]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc4:	4944      	ldr	r1, [pc, #272]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007bdc:	4b3f      	ldr	r3, [pc, #252]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007bde:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007bec:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfa:	4937      	ldr	r1, [pc, #220]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c0e:	4b32      	ldr	r3, [pc, #200]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c14:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1c:	492e      	ldr	r1, [pc, #184]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d011      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c30:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c36:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	4926      	ldr	r1, [pc, #152]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c4e:	d101      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007c50:	2301      	movs	r3, #1
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007c60:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	491a      	ldr	r1, [pc, #104]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d011      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	4911      	ldr	r1, [pc, #68]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d005      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb4:	f040 80ff 	bne.w	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cbe:	f7fb f86d 	bl	8002d9c <HAL_GetTick>
 8007cc2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cc4:	e00e      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cc6:	f7fb f869 	bl	8002d9c <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d907      	bls.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e188      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	424711e0 	.word	0x424711e0
 8007ce0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce4:	4b7e      	ldr	r3, [pc, #504]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1ea      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d028      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d124      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007d18:	4b71      	ldr	r3, [pc, #452]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	3301      	adds	r3, #1
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d2a:	4b6d      	ldr	r3, [pc, #436]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d30:	0e1b      	lsrs	r3, r3, #24
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	019b      	lsls	r3, r3, #6
 8007d42:	431a      	orrs	r2, r3
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	071b      	lsls	r3, r3, #28
 8007d5a:	4961      	ldr	r1, [pc, #388]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d76:	d00a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d035      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d8c:	d130      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007d8e:	4b54      	ldr	r3, [pc, #336]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007da0:	4b4f      	ldr	r3, [pc, #316]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da6:	0f1b      	lsrs	r3, r3, #28
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	019b      	lsls	r3, r3, #6
 8007db8:	431a      	orrs	r2, r3
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	041b      	lsls	r3, r3, #16
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	061b      	lsls	r3, r3, #24
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	071b      	lsls	r3, r3, #28
 8007dd0:	4943      	ldr	r1, [pc, #268]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007dd8:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dde:	f023 021f 	bic.w	r2, r3, #31
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	3b01      	subs	r3, #1
 8007de8:	493d      	ldr	r1, [pc, #244]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d029      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e04:	d124      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e06:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	3301      	adds	r3, #1
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e18:	4b31      	ldr	r3, [pc, #196]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1e:	0f1b      	lsrs	r3, r3, #28
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	019b      	lsls	r3, r3, #6
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	431a      	orrs	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	071b      	lsls	r3, r3, #28
 8007e48:	4925      	ldr	r1, [pc, #148]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d016      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	019b      	lsls	r3, r3, #6
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	085b      	lsrs	r3, r3, #1
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	071b      	lsls	r3, r3, #28
 8007e82:	4917      	ldr	r1, [pc, #92]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e90:	f7fa ff84 	bl	8002d9c <HAL_GetTick>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e98:	f7fa ff80 	bl	8002d9c <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e09f      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 8095 	bne.w	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ec4:	f7fa ff6a 	bl	8002d9c <HAL_GetTick>
 8007ec8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eca:	e00f      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007ecc:	f7fa ff66 	bl	8002d9c <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d908      	bls.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e085      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007ede:	bf00      	nop
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	42470068 	.word	0x42470068
 8007ee8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eec:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef8:	d0e8      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02b      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d127      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007f22:	4b34      	ldr	r3, [pc, #208]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	3301      	adds	r3, #1
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	019b      	lsls	r3, r3, #6
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	3b01      	subs	r3, #1
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	061b      	lsls	r3, r3, #24
 8007f50:	4928      	ldr	r1, [pc, #160]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f58:	4b26      	ldr	r3, [pc, #152]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	3b01      	subs	r3, #1
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	4922      	ldr	r1, [pc, #136]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01d      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f86:	d118      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8e:	0e1b      	lsrs	r3, r3, #24
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	019b      	lsls	r3, r3, #6
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	085b      	lsrs	r3, r3, #1
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	4910      	ldr	r1, [pc, #64]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fba:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fc0:	f7fa feec 	bl	8002d9c <HAL_GetTick>
 8007fc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007fc8:	f7fa fee8 	bl	8002d9c <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e007      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe6:	d1ef      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3730      	adds	r7, #48	; 0x30
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40023800 	.word	0x40023800
 8007ff8:	42470070 	.word	0x42470070

08007ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008000:	b088      	sub	sp, #32
 8008002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008018:	4bce      	ldr	r3, [pc, #824]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 030c 	and.w	r3, r3, #12
 8008020:	2b0c      	cmp	r3, #12
 8008022:	f200 818d 	bhi.w	8008340 <HAL_RCC_GetSysClockFreq+0x344>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <HAL_RCC_GetSysClockFreq+0x30>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008061 	.word	0x08008061
 8008030:	08008341 	.word	0x08008341
 8008034:	08008341 	.word	0x08008341
 8008038:	08008341 	.word	0x08008341
 800803c:	08008067 	.word	0x08008067
 8008040:	08008341 	.word	0x08008341
 8008044:	08008341 	.word	0x08008341
 8008048:	08008341 	.word	0x08008341
 800804c:	0800806d 	.word	0x0800806d
 8008050:	08008341 	.word	0x08008341
 8008054:	08008341 	.word	0x08008341
 8008058:	08008341 	.word	0x08008341
 800805c:	080081e1 	.word	0x080081e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008060:	4bbd      	ldr	r3, [pc, #756]	; (8008358 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008062:	61bb      	str	r3, [r7, #24]
       break;
 8008064:	e16f      	b.n	8008346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008066:	4bbd      	ldr	r3, [pc, #756]	; (800835c <HAL_RCC_GetSysClockFreq+0x360>)
 8008068:	61bb      	str	r3, [r7, #24]
      break;
 800806a:	e16c      	b.n	8008346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800806c:	4bb9      	ldr	r3, [pc, #740]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008074:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008076:	4bb7      	ldr	r3, [pc, #732]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d053      	beq.n	800812a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008082:	4bb4      	ldr	r3, [pc, #720]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	099b      	lsrs	r3, r3, #6
 8008088:	461a      	mov	r2, r3
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008092:	f04f 0100 	mov.w	r1, #0
 8008096:	ea02 0400 	and.w	r4, r2, r0
 800809a:	603c      	str	r4, [r7, #0]
 800809c:	400b      	ands	r3, r1
 800809e:	607b      	str	r3, [r7, #4]
 80080a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	014b      	lsls	r3, r1, #5
 80080b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80080b6:	0142      	lsls	r2, r0, #5
 80080b8:	4610      	mov	r0, r2
 80080ba:	4619      	mov	r1, r3
 80080bc:	4623      	mov	r3, r4
 80080be:	1ac0      	subs	r0, r0, r3
 80080c0:	462b      	mov	r3, r5
 80080c2:	eb61 0103 	sbc.w	r1, r1, r3
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	018b      	lsls	r3, r1, #6
 80080d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80080d4:	0182      	lsls	r2, r0, #6
 80080d6:	1a12      	subs	r2, r2, r0
 80080d8:	eb63 0301 	sbc.w	r3, r3, r1
 80080dc:	f04f 0000 	mov.w	r0, #0
 80080e0:	f04f 0100 	mov.w	r1, #0
 80080e4:	00d9      	lsls	r1, r3, #3
 80080e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080ea:	00d0      	lsls	r0, r2, #3
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4621      	mov	r1, r4
 80080f2:	1852      	adds	r2, r2, r1
 80080f4:	4629      	mov	r1, r5
 80080f6:	eb43 0101 	adc.w	r1, r3, r1
 80080fa:	460b      	mov	r3, r1
 80080fc:	f04f 0000 	mov.w	r0, #0
 8008100:	f04f 0100 	mov.w	r1, #0
 8008104:	0259      	lsls	r1, r3, #9
 8008106:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800810a:	0250      	lsls	r0, r2, #9
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4610      	mov	r0, r2
 8008112:	4619      	mov	r1, r3
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	461a      	mov	r2, r3
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	f7f8 f872 	bl	8000204 <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4613      	mov	r3, r2
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e04c      	b.n	80081c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800812a:	4b8a      	ldr	r3, [pc, #552]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	099b      	lsrs	r3, r3, #6
 8008130:	461a      	mov	r2, r3
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800813a:	f04f 0100 	mov.w	r1, #0
 800813e:	ea02 0a00 	and.w	sl, r2, r0
 8008142:	ea03 0b01 	and.w	fp, r3, r1
 8008146:	4650      	mov	r0, sl
 8008148:	4659      	mov	r1, fp
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	014b      	lsls	r3, r1, #5
 8008154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008158:	0142      	lsls	r2, r0, #5
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	ebb0 000a 	subs.w	r0, r0, sl
 8008162:	eb61 010b 	sbc.w	r1, r1, fp
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	018b      	lsls	r3, r1, #6
 8008170:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008174:	0182      	lsls	r2, r0, #6
 8008176:	1a12      	subs	r2, r2, r0
 8008178:	eb63 0301 	sbc.w	r3, r3, r1
 800817c:	f04f 0000 	mov.w	r0, #0
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	00d9      	lsls	r1, r3, #3
 8008186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800818a:	00d0      	lsls	r0, r2, #3
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	eb12 020a 	adds.w	r2, r2, sl
 8008194:	eb43 030b 	adc.w	r3, r3, fp
 8008198:	f04f 0000 	mov.w	r0, #0
 800819c:	f04f 0100 	mov.w	r1, #0
 80081a0:	0299      	lsls	r1, r3, #10
 80081a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80081a6:	0290      	lsls	r0, r2, #10
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4610      	mov	r0, r2
 80081ae:	4619      	mov	r1, r3
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	461a      	mov	r2, r3
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	f7f8 f824 	bl	8000204 <__aeabi_uldivmod>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4613      	mov	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081c4:	4b63      	ldr	r3, [pc, #396]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	3301      	adds	r3, #1
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	61bb      	str	r3, [r7, #24]
      break;
 80081de:	e0b2      	b.n	8008346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081e0:	4b5c      	ldr	r3, [pc, #368]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081ea:	4b5a      	ldr	r3, [pc, #360]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d04d      	beq.n	8008292 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081f6:	4b57      	ldr	r3, [pc, #348]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	099b      	lsrs	r3, r3, #6
 80081fc:	461a      	mov	r2, r3
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008206:	f04f 0100 	mov.w	r1, #0
 800820a:	ea02 0800 	and.w	r8, r2, r0
 800820e:	ea03 0901 	and.w	r9, r3, r1
 8008212:	4640      	mov	r0, r8
 8008214:	4649      	mov	r1, r9
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	014b      	lsls	r3, r1, #5
 8008220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008224:	0142      	lsls	r2, r0, #5
 8008226:	4610      	mov	r0, r2
 8008228:	4619      	mov	r1, r3
 800822a:	ebb0 0008 	subs.w	r0, r0, r8
 800822e:	eb61 0109 	sbc.w	r1, r1, r9
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	018b      	lsls	r3, r1, #6
 800823c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008240:	0182      	lsls	r2, r0, #6
 8008242:	1a12      	subs	r2, r2, r0
 8008244:	eb63 0301 	sbc.w	r3, r3, r1
 8008248:	f04f 0000 	mov.w	r0, #0
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	00d9      	lsls	r1, r3, #3
 8008252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008256:	00d0      	lsls	r0, r2, #3
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	eb12 0208 	adds.w	r2, r2, r8
 8008260:	eb43 0309 	adc.w	r3, r3, r9
 8008264:	f04f 0000 	mov.w	r0, #0
 8008268:	f04f 0100 	mov.w	r1, #0
 800826c:	0259      	lsls	r1, r3, #9
 800826e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008272:	0250      	lsls	r0, r2, #9
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	461a      	mov	r2, r3
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	f7f7 ffbe 	bl	8000204 <__aeabi_uldivmod>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4613      	mov	r3, r2
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	e04a      	b.n	8008328 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008292:	4b30      	ldr	r3, [pc, #192]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	461a      	mov	r2, r3
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80082a2:	f04f 0100 	mov.w	r1, #0
 80082a6:	ea02 0400 	and.w	r4, r2, r0
 80082aa:	ea03 0501 	and.w	r5, r3, r1
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	014b      	lsls	r3, r1, #5
 80082bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80082c0:	0142      	lsls	r2, r0, #5
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	1b00      	subs	r0, r0, r4
 80082c8:	eb61 0105 	sbc.w	r1, r1, r5
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	018b      	lsls	r3, r1, #6
 80082d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80082da:	0182      	lsls	r2, r0, #6
 80082dc:	1a12      	subs	r2, r2, r0
 80082de:	eb63 0301 	sbc.w	r3, r3, r1
 80082e2:	f04f 0000 	mov.w	r0, #0
 80082e6:	f04f 0100 	mov.w	r1, #0
 80082ea:	00d9      	lsls	r1, r3, #3
 80082ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082f0:	00d0      	lsls	r0, r2, #3
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	1912      	adds	r2, r2, r4
 80082f8:	eb45 0303 	adc.w	r3, r5, r3
 80082fc:	f04f 0000 	mov.w	r0, #0
 8008300:	f04f 0100 	mov.w	r1, #0
 8008304:	0299      	lsls	r1, r3, #10
 8008306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800830a:	0290      	lsls	r0, r2, #10
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4610      	mov	r0, r2
 8008312:	4619      	mov	r1, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	461a      	mov	r2, r3
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	f7f7 ff72 	bl	8000204 <__aeabi_uldivmod>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4613      	mov	r3, r2
 8008326:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <HAL_RCC_GetSysClockFreq+0x358>)
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	0f1b      	lsrs	r3, r3, #28
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	fbb2 f3f3 	udiv	r3, r2, r3
 800833c:	61bb      	str	r3, [r7, #24]
      break;
 800833e:	e002      	b.n	8008346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008342:	61bb      	str	r3, [r7, #24]
      break;
 8008344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008346:	69bb      	ldr	r3, [r7, #24]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008352:	bf00      	nop
 8008354:	40023800 	.word	0x40023800
 8008358:	00f42400 	.word	0x00f42400
 800835c:	007a1200 	.word	0x007a1200

08008360 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e28d      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8083 	beq.w	8008486 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008380:	4b94      	ldr	r3, [pc, #592]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 030c 	and.w	r3, r3, #12
 8008388:	2b04      	cmp	r3, #4
 800838a:	d019      	beq.n	80083c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800838c:	4b91      	ldr	r3, [pc, #580]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008394:	2b08      	cmp	r3, #8
 8008396:	d106      	bne.n	80083a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008398:	4b8e      	ldr	r3, [pc, #568]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a4:	d00c      	beq.n	80083c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083a6:	4b8b      	ldr	r3, [pc, #556]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80083ae:	2b0c      	cmp	r3, #12
 80083b0:	d112      	bne.n	80083d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083b2:	4b88      	ldr	r3, [pc, #544]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083be:	d10b      	bne.n	80083d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c0:	4b84      	ldr	r3, [pc, #528]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d05b      	beq.n	8008484 <HAL_RCC_OscConfig+0x124>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d157      	bne.n	8008484 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e25a      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e0:	d106      	bne.n	80083f0 <HAL_RCC_OscConfig+0x90>
 80083e2:	4b7c      	ldr	r3, [pc, #496]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a7b      	ldr	r2, [pc, #492]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80083e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	e01d      	b.n	800842c <HAL_RCC_OscConfig+0xcc>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083f8:	d10c      	bne.n	8008414 <HAL_RCC_OscConfig+0xb4>
 80083fa:	4b76      	ldr	r3, [pc, #472]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a75      	ldr	r2, [pc, #468]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4b73      	ldr	r3, [pc, #460]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a72      	ldr	r2, [pc, #456]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 800840c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e00b      	b.n	800842c <HAL_RCC_OscConfig+0xcc>
 8008414:	4b6f      	ldr	r3, [pc, #444]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a6e      	ldr	r2, [pc, #440]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 800841a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4b6c      	ldr	r3, [pc, #432]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a6b      	ldr	r2, [pc, #428]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800842a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d013      	beq.n	800845c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008434:	f7fa fcb2 	bl	8002d9c <HAL_GetTick>
 8008438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800843c:	f7fa fcae 	bl	8002d9c <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b64      	cmp	r3, #100	; 0x64
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e21f      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800844e:	4b61      	ldr	r3, [pc, #388]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <HAL_RCC_OscConfig+0xdc>
 800845a:	e014      	b.n	8008486 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845c:	f7fa fc9e 	bl	8002d9c <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008464:	f7fa fc9a 	bl	8002d9c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b64      	cmp	r3, #100	; 0x64
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e20b      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008476:	4b57      	ldr	r3, [pc, #348]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f0      	bne.n	8008464 <HAL_RCC_OscConfig+0x104>
 8008482:	e000      	b.n	8008486 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d06f      	beq.n	8008572 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008492:	4b50      	ldr	r3, [pc, #320]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f003 030c 	and.w	r3, r3, #12
 800849a:	2b00      	cmp	r3, #0
 800849c:	d017      	beq.n	80084ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800849e:	4b4d      	ldr	r3, [pc, #308]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d105      	bne.n	80084b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084b6:	4b47      	ldr	r3, [pc, #284]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80084be:	2b0c      	cmp	r3, #12
 80084c0:	d11c      	bne.n	80084fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084c2:	4b44      	ldr	r3, [pc, #272]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d116      	bne.n	80084fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ce:	4b41      	ldr	r3, [pc, #260]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <HAL_RCC_OscConfig+0x186>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d001      	beq.n	80084e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e1d3      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084e6:	4b3b      	ldr	r3, [pc, #236]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4937      	ldr	r1, [pc, #220]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084fa:	e03a      	b.n	8008572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d020      	beq.n	8008546 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008504:	4b34      	ldr	r3, [pc, #208]	; (80085d8 <HAL_RCC_OscConfig+0x278>)
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850a:	f7fa fc47 	bl	8002d9c <HAL_GetTick>
 800850e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008510:	e008      	b.n	8008524 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008512:	f7fa fc43 	bl	8002d9c <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e1b4      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008524:	4b2b      	ldr	r3, [pc, #172]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0f0      	beq.n	8008512 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	4925      	ldr	r1, [pc, #148]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008540:	4313      	orrs	r3, r2
 8008542:	600b      	str	r3, [r1, #0]
 8008544:	e015      	b.n	8008572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008546:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <HAL_RCC_OscConfig+0x278>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7fa fc26 	bl	8002d9c <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008554:	f7fa fc22 	bl	8002d9c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e193      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008566:	4b1b      	ldr	r3, [pc, #108]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f0      	bne.n	8008554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d036      	beq.n	80085ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008586:	4b15      	ldr	r3, [pc, #84]	; (80085dc <HAL_RCC_OscConfig+0x27c>)
 8008588:	2201      	movs	r2, #1
 800858a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800858c:	f7fa fc06 	bl	8002d9c <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008594:	f7fa fc02 	bl	8002d9c <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e173      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <HAL_RCC_OscConfig+0x274>)
 80085a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0x234>
 80085b2:	e01b      	b.n	80085ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085b4:	4b09      	ldr	r3, [pc, #36]	; (80085dc <HAL_RCC_OscConfig+0x27c>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ba:	f7fa fbef 	bl	8002d9c <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c0:	e00e      	b.n	80085e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085c2:	f7fa fbeb 	bl	8002d9c <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d907      	bls.n	80085e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e15c      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
 80085d4:	40023800 	.word	0x40023800
 80085d8:	42470000 	.word	0x42470000
 80085dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085e0:	4b8a      	ldr	r3, [pc, #552]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80085e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1ea      	bne.n	80085c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8097 	beq.w	8008728 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085fe:	4b83      	ldr	r3, [pc, #524]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800860a:	2300      	movs	r3, #0
 800860c:	60bb      	str	r3, [r7, #8]
 800860e:	4b7f      	ldr	r3, [pc, #508]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	4a7e      	ldr	r2, [pc, #504]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008618:	6413      	str	r3, [r2, #64]	; 0x40
 800861a:	4b7c      	ldr	r3, [pc, #496]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008622:	60bb      	str	r3, [r7, #8]
 8008624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008626:	2301      	movs	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800862a:	4b79      	ldr	r3, [pc, #484]	; (8008810 <HAL_RCC_OscConfig+0x4b0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008632:	2b00      	cmp	r3, #0
 8008634:	d118      	bne.n	8008668 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008636:	4b76      	ldr	r3, [pc, #472]	; (8008810 <HAL_RCC_OscConfig+0x4b0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a75      	ldr	r2, [pc, #468]	; (8008810 <HAL_RCC_OscConfig+0x4b0>)
 800863c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008642:	f7fa fbab 	bl	8002d9c <HAL_GetTick>
 8008646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008648:	e008      	b.n	800865c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800864a:	f7fa fba7 	bl	8002d9c <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b02      	cmp	r3, #2
 8008656:	d901      	bls.n	800865c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e118      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800865c:	4b6c      	ldr	r3, [pc, #432]	; (8008810 <HAL_RCC_OscConfig+0x4b0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0f0      	beq.n	800864a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d106      	bne.n	800867e <HAL_RCC_OscConfig+0x31e>
 8008670:	4b66      	ldr	r3, [pc, #408]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008674:	4a65      	ldr	r2, [pc, #404]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008676:	f043 0301 	orr.w	r3, r3, #1
 800867a:	6713      	str	r3, [r2, #112]	; 0x70
 800867c:	e01c      	b.n	80086b8 <HAL_RCC_OscConfig+0x358>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b05      	cmp	r3, #5
 8008684:	d10c      	bne.n	80086a0 <HAL_RCC_OscConfig+0x340>
 8008686:	4b61      	ldr	r3, [pc, #388]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868a:	4a60      	ldr	r2, [pc, #384]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 800868c:	f043 0304 	orr.w	r3, r3, #4
 8008690:	6713      	str	r3, [r2, #112]	; 0x70
 8008692:	4b5e      	ldr	r3, [pc, #376]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008696:	4a5d      	ldr	r2, [pc, #372]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	6713      	str	r3, [r2, #112]	; 0x70
 800869e:	e00b      	b.n	80086b8 <HAL_RCC_OscConfig+0x358>
 80086a0:	4b5a      	ldr	r3, [pc, #360]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80086a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a4:	4a59      	ldr	r2, [pc, #356]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	6713      	str	r3, [r2, #112]	; 0x70
 80086ac:	4b57      	ldr	r3, [pc, #348]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80086ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b0:	4a56      	ldr	r2, [pc, #344]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80086b2:	f023 0304 	bic.w	r3, r3, #4
 80086b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d015      	beq.n	80086ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c0:	f7fa fb6c 	bl	8002d9c <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086c6:	e00a      	b.n	80086de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c8:	f7fa fb68 	bl	8002d9c <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e0d7      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086de:	4b4b      	ldr	r3, [pc, #300]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0ee      	beq.n	80086c8 <HAL_RCC_OscConfig+0x368>
 80086ea:	e014      	b.n	8008716 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ec:	f7fa fb56 	bl	8002d9c <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086f2:	e00a      	b.n	800870a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086f4:	f7fa fb52 	bl	8002d9c <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008702:	4293      	cmp	r3, r2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e0c1      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800870a:	4b40      	ldr	r3, [pc, #256]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 800870c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1ee      	bne.n	80086f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d105      	bne.n	8008728 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800871c:	4b3b      	ldr	r3, [pc, #236]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	4a3a      	ldr	r2, [pc, #232]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80ad 	beq.w	800888c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008732:	4b36      	ldr	r3, [pc, #216]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 030c 	and.w	r3, r3, #12
 800873a:	2b08      	cmp	r3, #8
 800873c:	d060      	beq.n	8008800 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d145      	bne.n	80087d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008746:	4b33      	ldr	r3, [pc, #204]	; (8008814 <HAL_RCC_OscConfig+0x4b4>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874c:	f7fa fb26 	bl	8002d9c <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008754:	f7fa fb22 	bl	8002d9c <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e093      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008766:	4b29      	ldr	r3, [pc, #164]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f0      	bne.n	8008754 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	019b      	lsls	r3, r3, #6
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	3b01      	subs	r3, #1
 800878c:	041b      	lsls	r3, r3, #16
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	061b      	lsls	r3, r3, #24
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	071b      	lsls	r3, r3, #28
 800879e:	491b      	ldr	r1, [pc, #108]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087a4:	4b1b      	ldr	r3, [pc, #108]	; (8008814 <HAL_RCC_OscConfig+0x4b4>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087aa:	f7fa faf7 	bl	8002d9c <HAL_GetTick>
 80087ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b0:	e008      	b.n	80087c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b2:	f7fa faf3 	bl	8002d9c <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d901      	bls.n	80087c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e064      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c4:	4b11      	ldr	r3, [pc, #68]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0f0      	beq.n	80087b2 <HAL_RCC_OscConfig+0x452>
 80087d0:	e05c      	b.n	800888c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d2:	4b10      	ldr	r3, [pc, #64]	; (8008814 <HAL_RCC_OscConfig+0x4b4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d8:	f7fa fae0 	bl	8002d9c <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e0:	f7fa fadc 	bl	8002d9c <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e04d      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <HAL_RCC_OscConfig+0x4ac>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f0      	bne.n	80087e0 <HAL_RCC_OscConfig+0x480>
 80087fe:	e045      	b.n	800888c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d107      	bne.n	8008818 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e040      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
 800880c:	40023800 	.word	0x40023800
 8008810:	40007000 	.word	0x40007000
 8008814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008818:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <HAL_RCC_OscConfig+0x538>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d030      	beq.n	8008888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008830:	429a      	cmp	r2, r3
 8008832:	d129      	bne.n	8008888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800883e:	429a      	cmp	r2, r3
 8008840:	d122      	bne.n	8008888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008848:	4013      	ands	r3, r2
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800884e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008850:	4293      	cmp	r3, r2
 8008852:	d119      	bne.n	8008888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	3b01      	subs	r3, #1
 8008862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008864:	429a      	cmp	r2, r3
 8008866:	d10f      	bne.n	8008888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008874:	429a      	cmp	r2, r3
 8008876:	d107      	bne.n	8008888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	40023800 	.word	0x40023800

0800889c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e041      	b.n	8008932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7f9 ffe6 	bl	8002894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f000 fbd6 	bl	800908c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	d001      	beq.n	8008954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e04e      	b.n	80089f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a23      	ldr	r2, [pc, #140]	; (8008a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d022      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897e:	d01d      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1f      	ldr	r2, [pc, #124]	; (8008a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d018      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d013      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00e      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1b      	ldr	r2, [pc, #108]	; (8008a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d009      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a19      	ldr	r2, [pc, #100]	; (8008a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x80>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d111      	bne.n	80089e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b06      	cmp	r3, #6
 80089cc:	d010      	beq.n	80089f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089de:	e007      	b.n	80089f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0201 	orr.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40010000 	.word	0x40010000
 8008a04:	40000400 	.word	0x40000400
 8008a08:	40000800 	.word	0x40000800
 8008a0c:	40000c00 	.word	0x40000c00
 8008a10:	40010400 	.word	0x40010400
 8008a14:	40014000 	.word	0x40014000
 8008a18:	40001800 	.word	0x40001800

08008a1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0201 	bic.w	r2, r2, #1
 8008a32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a1a      	ldr	r2, [r3, #32]
 8008a3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10f      	bne.n	8008a64 <HAL_TIM_Base_Stop_IT+0x48>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6a1a      	ldr	r2, [r3, #32]
 8008a4a:	f240 4344 	movw	r3, #1092	; 0x444
 8008a4e:	4013      	ands	r3, r2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d107      	bne.n	8008a64 <HAL_TIM_Base_Stop_IT+0x48>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0201 	bic.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e041      	b.n	8008b10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7f9 ff85 	bl	80029b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f000 fae7 	bl	800908c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d122      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d11b      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0202 	mvn.w	r2, #2
 8008b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa77 	bl	800904e <HAL_TIM_IC_CaptureCallback>
 8008b60:	e005      	b.n	8008b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa69 	bl	800903a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa7a 	bl	8009062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d122      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d11b      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0204 	mvn.w	r2, #4
 8008b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa4d 	bl	800904e <HAL_TIM_IC_CaptureCallback>
 8008bb4:	e005      	b.n	8008bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fa3f 	bl	800903a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa50 	bl	8009062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d122      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d11b      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f06f 0208 	mvn.w	r2, #8
 8008bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa23 	bl	800904e <HAL_TIM_IC_CaptureCallback>
 8008c08:	e005      	b.n	8008c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa15 	bl	800903a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fa26 	bl	8009062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d122      	bne.n	8008c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 0310 	and.w	r3, r3, #16
 8008c34:	2b10      	cmp	r3, #16
 8008c36:	d11b      	bne.n	8008c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f06f 0210 	mvn.w	r2, #16
 8008c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2208      	movs	r2, #8
 8008c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f9f9 	bl	800904e <HAL_TIM_IC_CaptureCallback>
 8008c5c:	e005      	b.n	8008c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9eb 	bl	800903a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9fc 	bl	8009062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d10e      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d107      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f06f 0201 	mvn.w	r2, #1
 8008c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7f8 fda4 	bl	80017e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca6:	2b80      	cmp	r3, #128	; 0x80
 8008ca8:	d10e      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb4:	2b80      	cmp	r3, #128	; 0x80
 8008cb6:	d107      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fda4 	bl	8009810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd2:	2b40      	cmp	r3, #64	; 0x40
 8008cd4:	d10e      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d107      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f9c1 	bl	8009076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d10e      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d107      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0220 	mvn.w	r2, #32
 8008d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fd6e 	bl	80097fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e0ae      	b.n	8008ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b0c      	cmp	r3, #12
 8008d52:	f200 809f 	bhi.w	8008e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008d91 	.word	0x08008d91
 8008d60:	08008e95 	.word	0x08008e95
 8008d64:	08008e95 	.word	0x08008e95
 8008d68:	08008e95 	.word	0x08008e95
 8008d6c:	08008dd1 	.word	0x08008dd1
 8008d70:	08008e95 	.word	0x08008e95
 8008d74:	08008e95 	.word	0x08008e95
 8008d78:	08008e95 	.word	0x08008e95
 8008d7c:	08008e13 	.word	0x08008e13
 8008d80:	08008e95 	.word	0x08008e95
 8008d84:	08008e95 	.word	0x08008e95
 8008d88:	08008e95 	.word	0x08008e95
 8008d8c:	08008e53 	.word	0x08008e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fa18 	bl	80091cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0208 	orr.w	r2, r2, #8
 8008daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0204 	bic.w	r2, r2, #4
 8008dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6999      	ldr	r1, [r3, #24]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	691a      	ldr	r2, [r3, #16]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	619a      	str	r2, [r3, #24]
      break;
 8008dce:	e064      	b.n	8008e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fa68 	bl	80092ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699a      	ldr	r2, [r3, #24]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6999      	ldr	r1, [r3, #24]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	619a      	str	r2, [r3, #24]
      break;
 8008e10:	e043      	b.n	8008e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fabd 	bl	8009398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69da      	ldr	r2, [r3, #28]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 0208 	orr.w	r2, r2, #8
 8008e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0204 	bic.w	r2, r2, #4
 8008e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69d9      	ldr	r1, [r3, #28]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	61da      	str	r2, [r3, #28]
      break;
 8008e50:	e023      	b.n	8008e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fb11 	bl	8009480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69da      	ldr	r2, [r3, #28]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69d9      	ldr	r1, [r3, #28]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	021a      	lsls	r2, r3, #8
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	61da      	str	r2, [r3, #28]
      break;
 8008e92:	e002      	b.n	8008e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
      break;
 8008e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e0b4      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x186>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f00:	d03e      	beq.n	8008f80 <HAL_TIM_ConfigClockSource+0xd4>
 8008f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f06:	f200 8087 	bhi.w	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0e:	f000 8086 	beq.w	800901e <HAL_TIM_ConfigClockSource+0x172>
 8008f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f16:	d87f      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f18:	2b70      	cmp	r3, #112	; 0x70
 8008f1a:	d01a      	beq.n	8008f52 <HAL_TIM_ConfigClockSource+0xa6>
 8008f1c:	2b70      	cmp	r3, #112	; 0x70
 8008f1e:	d87b      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f20:	2b60      	cmp	r3, #96	; 0x60
 8008f22:	d050      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8008f24:	2b60      	cmp	r3, #96	; 0x60
 8008f26:	d877      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f28:	2b50      	cmp	r3, #80	; 0x50
 8008f2a:	d03c      	beq.n	8008fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8008f2c:	2b50      	cmp	r3, #80	; 0x50
 8008f2e:	d873      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f30:	2b40      	cmp	r3, #64	; 0x40
 8008f32:	d058      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8008f34:	2b40      	cmp	r3, #64	; 0x40
 8008f36:	d86f      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f38:	2b30      	cmp	r3, #48	; 0x30
 8008f3a:	d064      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x15a>
 8008f3c:	2b30      	cmp	r3, #48	; 0x30
 8008f3e:	d86b      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f40:	2b20      	cmp	r3, #32
 8008f42:	d060      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x15a>
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d867      	bhi.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d05c      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x15a>
 8008f4c:	2b10      	cmp	r3, #16
 8008f4e:	d05a      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x15a>
 8008f50:	e062      	b.n	8009018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	6899      	ldr	r1, [r3, #8]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f000 fb5d 	bl	8009620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	609a      	str	r2, [r3, #8]
      break;
 8008f7e:	e04f      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	6899      	ldr	r1, [r3, #8]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f000 fb46 	bl	8009620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689a      	ldr	r2, [r3, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fa2:	609a      	str	r2, [r3, #8]
      break;
 8008fa4:	e03c      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	6859      	ldr	r1, [r3, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f000 faba 	bl	800952c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2150      	movs	r1, #80	; 0x50
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fb13 	bl	80095ea <TIM_ITRx_SetConfig>
      break;
 8008fc4:	e02c      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	6859      	ldr	r1, [r3, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f000 fad9 	bl	800958a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2160      	movs	r1, #96	; 0x60
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fb03 	bl	80095ea <TIM_ITRx_SetConfig>
      break;
 8008fe4:	e01c      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6859      	ldr	r1, [r3, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f000 fa9a 	bl	800952c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2140      	movs	r1, #64	; 0x40
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 faf3 	bl	80095ea <TIM_ITRx_SetConfig>
      break;
 8009004:	e00c      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f000 faea 	bl	80095ea <TIM_ITRx_SetConfig>
      break;
 8009016:	e003      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
      break;
 800901c:	e000      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800901e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800907e:	bf00      	nop
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
	...

0800908c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a40      	ldr	r2, [pc, #256]	; (80091a0 <TIM_Base_SetConfig+0x114>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d013      	beq.n	80090cc <TIM_Base_SetConfig+0x40>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090aa:	d00f      	beq.n	80090cc <TIM_Base_SetConfig+0x40>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a3d      	ldr	r2, [pc, #244]	; (80091a4 <TIM_Base_SetConfig+0x118>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00b      	beq.n	80090cc <TIM_Base_SetConfig+0x40>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a3c      	ldr	r2, [pc, #240]	; (80091a8 <TIM_Base_SetConfig+0x11c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d007      	beq.n	80090cc <TIM_Base_SetConfig+0x40>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a3b      	ldr	r2, [pc, #236]	; (80091ac <TIM_Base_SetConfig+0x120>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d003      	beq.n	80090cc <TIM_Base_SetConfig+0x40>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a3a      	ldr	r2, [pc, #232]	; (80091b0 <TIM_Base_SetConfig+0x124>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d108      	bne.n	80090de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a2f      	ldr	r2, [pc, #188]	; (80091a0 <TIM_Base_SetConfig+0x114>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d02b      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ec:	d027      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a2c      	ldr	r2, [pc, #176]	; (80091a4 <TIM_Base_SetConfig+0x118>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d023      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a2b      	ldr	r2, [pc, #172]	; (80091a8 <TIM_Base_SetConfig+0x11c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d01f      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a2a      	ldr	r2, [pc, #168]	; (80091ac <TIM_Base_SetConfig+0x120>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d01b      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a29      	ldr	r2, [pc, #164]	; (80091b0 <TIM_Base_SetConfig+0x124>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d017      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a28      	ldr	r2, [pc, #160]	; (80091b4 <TIM_Base_SetConfig+0x128>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a27      	ldr	r2, [pc, #156]	; (80091b8 <TIM_Base_SetConfig+0x12c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00f      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a26      	ldr	r2, [pc, #152]	; (80091bc <TIM_Base_SetConfig+0x130>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00b      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a25      	ldr	r2, [pc, #148]	; (80091c0 <TIM_Base_SetConfig+0x134>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d007      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a24      	ldr	r2, [pc, #144]	; (80091c4 <TIM_Base_SetConfig+0x138>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d003      	beq.n	800913e <TIM_Base_SetConfig+0xb2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a23      	ldr	r2, [pc, #140]	; (80091c8 <TIM_Base_SetConfig+0x13c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d108      	bne.n	8009150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a0a      	ldr	r2, [pc, #40]	; (80091a0 <TIM_Base_SetConfig+0x114>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <TIM_Base_SetConfig+0xf8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a0c      	ldr	r2, [pc, #48]	; (80091b0 <TIM_Base_SetConfig+0x124>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d103      	bne.n	800918c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	691a      	ldr	r2, [r3, #16]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	615a      	str	r2, [r3, #20]
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40000400 	.word	0x40000400
 80091a8:	40000800 	.word	0x40000800
 80091ac:	40000c00 	.word	0x40000c00
 80091b0:	40010400 	.word	0x40010400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400
 80091bc:	40014800 	.word	0x40014800
 80091c0:	40001800 	.word	0x40001800
 80091c4:	40001c00 	.word	0x40001c00
 80091c8:	40002000 	.word	0x40002000

080091cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f023 0201 	bic.w	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f023 0302 	bic.w	r3, r3, #2
 8009214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a20      	ldr	r2, [pc, #128]	; (80092a4 <TIM_OC1_SetConfig+0xd8>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d003      	beq.n	8009230 <TIM_OC1_SetConfig+0x64>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a1f      	ldr	r2, [pc, #124]	; (80092a8 <TIM_OC1_SetConfig+0xdc>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d10c      	bne.n	800924a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f023 0308 	bic.w	r3, r3, #8
 8009236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f023 0304 	bic.w	r3, r3, #4
 8009248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a15      	ldr	r2, [pc, #84]	; (80092a4 <TIM_OC1_SetConfig+0xd8>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d003      	beq.n	800925a <TIM_OC1_SetConfig+0x8e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a14      	ldr	r2, [pc, #80]	; (80092a8 <TIM_OC1_SetConfig+0xdc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d111      	bne.n	800927e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4313      	orrs	r3, r2
 8009272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	621a      	str	r2, [r3, #32]
}
 8009298:	bf00      	nop
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	40010000 	.word	0x40010000
 80092a8:	40010400 	.word	0x40010400

080092ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f023 0210 	bic.w	r2, r3, #16
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f023 0320 	bic.w	r3, r3, #32
 80092f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4313      	orrs	r3, r2
 8009302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a22      	ldr	r2, [pc, #136]	; (8009390 <TIM_OC2_SetConfig+0xe4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_OC2_SetConfig+0x68>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a21      	ldr	r2, [pc, #132]	; (8009394 <TIM_OC2_SetConfig+0xe8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10d      	bne.n	8009330 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800931a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800932e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a17      	ldr	r2, [pc, #92]	; (8009390 <TIM_OC2_SetConfig+0xe4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC2_SetConfig+0x94>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a16      	ldr	r2, [pc, #88]	; (8009394 <TIM_OC2_SetConfig+0xe8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d113      	bne.n	8009368 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800934e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	621a      	str	r2, [r3, #32]
}
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40010000 	.word	0x40010000
 8009394:	40010400 	.word	0x40010400

08009398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 0303 	bic.w	r3, r3, #3
 80093ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a21      	ldr	r2, [pc, #132]	; (8009478 <TIM_OC3_SetConfig+0xe0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_OC3_SetConfig+0x66>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a20      	ldr	r2, [pc, #128]	; (800947c <TIM_OC3_SetConfig+0xe4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d10d      	bne.n	800941a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a16      	ldr	r2, [pc, #88]	; (8009478 <TIM_OC3_SetConfig+0xe0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d003      	beq.n	800942a <TIM_OC3_SetConfig+0x92>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a15      	ldr	r2, [pc, #84]	; (800947c <TIM_OC3_SetConfig+0xe4>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d113      	bne.n	8009452 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	621a      	str	r2, [r3, #32]
}
 800946c:	bf00      	nop
 800946e:	371c      	adds	r7, #28
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	40010000 	.word	0x40010000
 800947c:	40010400 	.word	0x40010400

08009480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	031b      	lsls	r3, r3, #12
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a12      	ldr	r2, [pc, #72]	; (8009524 <TIM_OC4_SetConfig+0xa4>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d003      	beq.n	80094e8 <TIM_OC4_SetConfig+0x68>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a11      	ldr	r2, [pc, #68]	; (8009528 <TIM_OC4_SetConfig+0xa8>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d109      	bne.n	80094fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	019b      	lsls	r3, r3, #6
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	40010000 	.word	0x40010000
 8009528:	40010400 	.word	0x40010400

0800952c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	f023 0201 	bic.w	r2, r3, #1
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	4313      	orrs	r3, r2
 8009560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f023 030a 	bic.w	r3, r3, #10
 8009568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800958a:	b480      	push	{r7}
 800958c:	b087      	sub	sp, #28
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	f023 0210 	bic.w	r2, r3, #16
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	031b      	lsls	r3, r3, #12
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	621a      	str	r2, [r3, #32]
}
 80095de:	bf00      	nop
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4313      	orrs	r3, r2
 8009608:	f043 0307 	orr.w	r3, r3, #7
 800960c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	609a      	str	r2, [r3, #8]
}
 8009614:	bf00      	nop
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800963a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	021a      	lsls	r2, r3, #8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	431a      	orrs	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4313      	orrs	r3, r2
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	609a      	str	r2, [r3, #8]
}
 8009654:	bf00      	nop
 8009656:	371c      	adds	r7, #28
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009670:	2b01      	cmp	r3, #1
 8009672:	d101      	bne.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009674:	2302      	movs	r3, #2
 8009676:	e05a      	b.n	800972e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a21      	ldr	r2, [pc, #132]	; (800973c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d022      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c4:	d01d      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a1d      	ldr	r2, [pc, #116]	; (8009740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d018      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a1b      	ldr	r2, [pc, #108]	; (8009744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d013      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a1a      	ldr	r2, [pc, #104]	; (8009748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00e      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a18      	ldr	r2, [pc, #96]	; (800974c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d009      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a17      	ldr	r2, [pc, #92]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d004      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a15      	ldr	r2, [pc, #84]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d10c      	bne.n	800971c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4313      	orrs	r3, r2
 8009712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	40010000 	.word	0x40010000
 8009740:	40000400 	.word	0x40000400
 8009744:	40000800 	.word	0x40000800
 8009748:	40000c00 	.word	0x40000c00
 800974c:	40010400 	.word	0x40010400
 8009750:	40014000 	.word	0x40014000
 8009754:	40001800 	.word	0x40001800

08009758 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009770:	2302      	movs	r3, #2
 8009772:	e03d      	b.n	80097f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009824:	b084      	sub	sp, #16
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	f107 001c 	add.w	r0, r7, #28
 8009832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	2b01      	cmp	r3, #1
 800983a:	d122      	bne.n	8009882 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009866:	2b01      	cmp	r3, #1
 8009868:	d105      	bne.n	8009876 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 fb16 	bl	800aea8 <USB_CoreReset>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
 8009880:	e01a      	b.n	80098b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fb0a 	bl	800aea8 <USB_CoreReset>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	639a      	str	r2, [r3, #56]	; 0x38
 80098aa:	e005      	b.n	80098b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10b      	bne.n	80098d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f043 0206 	orr.w	r2, r3, #6
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098e2:	b004      	add	sp, #16
 80098e4:	4770      	bx	lr
	...

080098e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d165      	bne.n	80099c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4a41      	ldr	r2, [pc, #260]	; (8009a04 <USB_SetTurnaroundTime+0x11c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d906      	bls.n	8009912 <USB_SetTurnaroundTime+0x2a>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4a40      	ldr	r2, [pc, #256]	; (8009a08 <USB_SetTurnaroundTime+0x120>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d202      	bcs.n	8009912 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800990c:	230f      	movs	r3, #15
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e062      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	4a3c      	ldr	r2, [pc, #240]	; (8009a08 <USB_SetTurnaroundTime+0x120>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d306      	bcc.n	8009928 <USB_SetTurnaroundTime+0x40>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	4a3b      	ldr	r2, [pc, #236]	; (8009a0c <USB_SetTurnaroundTime+0x124>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d202      	bcs.n	8009928 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009922:	230e      	movs	r3, #14
 8009924:	617b      	str	r3, [r7, #20]
 8009926:	e057      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4a38      	ldr	r2, [pc, #224]	; (8009a0c <USB_SetTurnaroundTime+0x124>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d306      	bcc.n	800993e <USB_SetTurnaroundTime+0x56>
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4a37      	ldr	r2, [pc, #220]	; (8009a10 <USB_SetTurnaroundTime+0x128>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d202      	bcs.n	800993e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009938:	230d      	movs	r3, #13
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e04c      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4a33      	ldr	r2, [pc, #204]	; (8009a10 <USB_SetTurnaroundTime+0x128>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d306      	bcc.n	8009954 <USB_SetTurnaroundTime+0x6c>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4a32      	ldr	r2, [pc, #200]	; (8009a14 <USB_SetTurnaroundTime+0x12c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d802      	bhi.n	8009954 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800994e:	230c      	movs	r3, #12
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	e041      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4a2f      	ldr	r2, [pc, #188]	; (8009a14 <USB_SetTurnaroundTime+0x12c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d906      	bls.n	800996a <USB_SetTurnaroundTime+0x82>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4a2e      	ldr	r2, [pc, #184]	; (8009a18 <USB_SetTurnaroundTime+0x130>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d802      	bhi.n	800996a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009964:	230b      	movs	r3, #11
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e036      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4a2a      	ldr	r2, [pc, #168]	; (8009a18 <USB_SetTurnaroundTime+0x130>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d906      	bls.n	8009980 <USB_SetTurnaroundTime+0x98>
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4a29      	ldr	r2, [pc, #164]	; (8009a1c <USB_SetTurnaroundTime+0x134>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d802      	bhi.n	8009980 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800997a:	230a      	movs	r3, #10
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	e02b      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <USB_SetTurnaroundTime+0x134>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d906      	bls.n	8009996 <USB_SetTurnaroundTime+0xae>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4a25      	ldr	r2, [pc, #148]	; (8009a20 <USB_SetTurnaroundTime+0x138>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d202      	bcs.n	8009996 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009990:	2309      	movs	r3, #9
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e020      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	4a21      	ldr	r2, [pc, #132]	; (8009a20 <USB_SetTurnaroundTime+0x138>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d306      	bcc.n	80099ac <USB_SetTurnaroundTime+0xc4>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	4a20      	ldr	r2, [pc, #128]	; (8009a24 <USB_SetTurnaroundTime+0x13c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d802      	bhi.n	80099ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099a6:	2308      	movs	r3, #8
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e015      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4a1d      	ldr	r2, [pc, #116]	; (8009a24 <USB_SetTurnaroundTime+0x13c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d906      	bls.n	80099c2 <USB_SetTurnaroundTime+0xda>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4a1c      	ldr	r2, [pc, #112]	; (8009a28 <USB_SetTurnaroundTime+0x140>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d202      	bcs.n	80099c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099bc:	2307      	movs	r3, #7
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e00a      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099c2:	2306      	movs	r3, #6
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	e007      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80099ce:	2309      	movs	r3, #9
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e001      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099d4:	2309      	movs	r3, #9
 80099d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	029b      	lsls	r3, r3, #10
 80099ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	00d8acbf 	.word	0x00d8acbf
 8009a08:	00e4e1c0 	.word	0x00e4e1c0
 8009a0c:	00f42400 	.word	0x00f42400
 8009a10:	01067380 	.word	0x01067380
 8009a14:	011a499f 	.word	0x011a499f
 8009a18:	01312cff 	.word	0x01312cff
 8009a1c:	014ca43f 	.word	0x014ca43f
 8009a20:	016e3600 	.word	0x016e3600
 8009a24:	01a6ab1f 	.word	0x01a6ab1f
 8009a28:	01e84800 	.word	0x01e84800

08009a2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f043 0201 	orr.w	r2, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f023 0201 	bic.w	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d115      	bne.n	8009abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	f7f9 f988 	bl	8002db4 <HAL_Delay>
      ms++;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 f96c 	bl	800ad88 <USB_GetMode>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d01e      	beq.n	8009af4 <USB_SetCurrentMode+0x84>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b31      	cmp	r3, #49	; 0x31
 8009aba:	d9f0      	bls.n	8009a9e <USB_SetCurrentMode+0x2e>
 8009abc:	e01a      	b.n	8009af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d115      	bne.n	8009af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	f7f9 f96f 	bl	8002db4 <HAL_Delay>
      ms++;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 f953 	bl	800ad88 <USB_GetMode>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <USB_SetCurrentMode+0x84>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b31      	cmp	r3, #49	; 0x31
 8009aec:	d9f0      	bls.n	8009ad0 <USB_SetCurrentMode+0x60>
 8009aee:	e001      	b.n	8009af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e005      	b.n	8009b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b32      	cmp	r3, #50	; 0x32
 8009af8:	d101      	bne.n	8009afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e000      	b.n	8009b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b08:	b084      	sub	sp, #16
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b22:	2300      	movs	r3, #0
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	e009      	b.n	8009b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	3340      	adds	r3, #64	; 0x40
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	2200      	movs	r2, #0
 8009b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b0e      	cmp	r3, #14
 8009b40:	d9f2      	bls.n	8009b28 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11c      	bne.n	8009b82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b56:	f043 0302 	orr.w	r3, r3, #2
 8009b5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	e005      	b.n	8009b8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b94:	461a      	mov	r2, r3
 8009b96:	2300      	movs	r3, #0
 8009b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba8:	461a      	mov	r2, r3
 8009baa:	680b      	ldr	r3, [r1, #0]
 8009bac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d10c      	bne.n	8009bce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bba:	2100      	movs	r1, #0
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f945 	bl	8009e4c <USB_SetDevSpeed>
 8009bc2:	e008      	b.n	8009bd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f940 	bl	8009e4c <USB_SetDevSpeed>
 8009bcc:	e003      	b.n	8009bd6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bce:	2103      	movs	r1, #3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f93b 	bl	8009e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bd6:	2110      	movs	r1, #16
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f8f3 	bl	8009dc4 <USB_FlushTxFifo>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f90f 	bl	8009e0c <USB_FlushRxFifo>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfe:	461a      	mov	r2, r3
 8009c00:	2300      	movs	r3, #0
 8009c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c16:	461a      	mov	r2, r3
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	613b      	str	r3, [r7, #16]
 8009c20:	e043      	b.n	8009caa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c38:	d118      	bne.n	8009c6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	e013      	b.n	8009c7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c62:	461a      	mov	r2, r3
 8009c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	e008      	b.n	8009c7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	613b      	str	r3, [r7, #16]
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d3b7      	bcc.n	8009c22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	e043      	b.n	8009d40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cce:	d118      	bne.n	8009d02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10a      	bne.n	8009cec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	e013      	b.n	8009d14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	e008      	b.n	8009d14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d0e:	461a      	mov	r2, r3
 8009d10:	2300      	movs	r3, #0
 8009d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d20:	461a      	mov	r2, r3
 8009d22:	2300      	movs	r3, #0
 8009d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d32:	461a      	mov	r2, r3
 8009d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d3b7      	bcc.n	8009cb8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d105      	bne.n	8009d7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	f043 0210 	orr.w	r2, r3, #16
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699a      	ldr	r2, [r3, #24]
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <USB_DevInit+0x2b8>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	f043 0208 	orr.w	r2, r3, #8
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d107      	bne.n	8009db0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009da8:	f043 0304 	orr.w	r3, r3, #4
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dbc:	b004      	add	sp, #16
 8009dbe:	4770      	bx	lr
 8009dc0:	803c3800 	.word	0x803c3800

08009dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	019b      	lsls	r3, r3, #6
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	4a08      	ldr	r2, [pc, #32]	; (8009e08 <USB_FlushTxFifo+0x44>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d901      	bls.n	8009dee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e006      	b.n	8009dfc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	d0f1      	beq.n	8009dde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	00030d40 	.word	0x00030d40

08009e0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2210      	movs	r2, #16
 8009e1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3301      	adds	r3, #1
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	4a08      	ldr	r2, [pc, #32]	; (8009e48 <USB_FlushRxFifo+0x3c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d901      	bls.n	8009e2e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e006      	b.n	8009e3c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	f003 0310 	and.w	r3, r3, #16
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	d0f1      	beq.n	8009e1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	00030d40 	.word	0x00030d40

08009e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b087      	sub	sp, #28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f003 0306 	and.w	r3, r3, #6
 8009e96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75fb      	strb	r3, [r7, #23]
 8009ea2:	e00a      	b.n	8009eba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d002      	beq.n	8009eb0 <USB_GetDevSpeed+0x32>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b06      	cmp	r3, #6
 8009eae:	d102      	bne.n	8009eb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	75fb      	strb	r3, [r7, #23]
 8009eb4:	e001      	b.n	8009eba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009eb6:	230f      	movs	r3, #15
 8009eb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	371c      	adds	r7, #28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	785b      	ldrb	r3, [r3, #1]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d13a      	bne.n	8009f5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eea:	69da      	ldr	r2, [r3, #28]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f02:	4313      	orrs	r3, r2
 8009f04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d155      	bne.n	8009fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	78db      	ldrb	r3, [r3, #3]
 8009f36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	059b      	lsls	r3, r3, #22
 8009f3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f40:	4313      	orrs	r3, r2
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	0151      	lsls	r1, r2, #5
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	440a      	add	r2, r1
 8009f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	e036      	b.n	8009fc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f60:	69da      	ldr	r2, [r3, #28]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	f003 030f 	and.w	r3, r3, #15
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f70:	041b      	lsls	r3, r3, #16
 8009f72:	68f9      	ldr	r1, [r7, #12]
 8009f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d11a      	bne.n	8009fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	78db      	ldrb	r3, [r3, #3]
 8009fac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	0151      	lsls	r1, r2, #5
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	440a      	add	r2, r1
 8009fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
	...

08009fd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d161      	bne.n	800a0b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a00a:	d11f      	bne.n	800a04c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a02a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	0151      	lsls	r1, r2, #5
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	440a      	add	r2, r1
 800a042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a04a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f303 	lsl.w	r3, r1, r3
 800a062:	b29b      	uxth	r3, r3
 800a064:	43db      	mvns	r3, r3
 800a066:	68f9      	ldr	r1, [r7, #12]
 800a068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a06c:	4013      	ands	r3, r2
 800a06e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a076:	69da      	ldr	r2, [r3, #28]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	2101      	movs	r1, #1
 800a082:	fa01 f303 	lsl.w	r3, r1, r3
 800a086:	b29b      	uxth	r3, r3
 800a088:	43db      	mvns	r3, r3
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a090:	4013      	ands	r3, r2
 800a092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	0159      	lsls	r1, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	440b      	add	r3, r1
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4b35      	ldr	r3, [pc, #212]	; (800a188 <USB_DeactivateEndpoint+0x1b0>)
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	600b      	str	r3, [r1, #0]
 800a0b6:	e060      	b.n	800a17a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0ce:	d11f      	bne.n	800a110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	440a      	add	r2, r1
 800a106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a10e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f303 	lsl.w	r3, r1, r3
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	43db      	mvns	r3, r3
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a130:	4013      	ands	r3, r2
 800a132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	2101      	movs	r1, #1
 800a146:	fa01 f303 	lsl.w	r3, r1, r3
 800a14a:	041b      	lsls	r3, r3, #16
 800a14c:	43db      	mvns	r3, r3
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a154:	4013      	ands	r3, r2
 800a156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	0159      	lsls	r1, r3, #5
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	440b      	add	r3, r1
 800a16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a172:	4619      	mov	r1, r3
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <USB_DeactivateEndpoint+0x1b4>)
 800a176:	4013      	ands	r3, r2
 800a178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	ec337800 	.word	0xec337800
 800a18c:	eff37800 	.word	0xeff37800

0800a190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	af02      	add	r7, sp, #8
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	f040 815c 	bne.w	800a46a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d132      	bne.n	800a220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	0151      	lsls	r1, r2, #5
 800a210:	69fa      	ldr	r2, [r7, #28]
 800a212:	440a      	add	r2, r1
 800a214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a218:	0cdb      	lsrs	r3, r3, #19
 800a21a:	04db      	lsls	r3, r3, #19
 800a21c:	6113      	str	r3, [r2, #16]
 800a21e:	e074      	b.n	800a30a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a23a:	0cdb      	lsrs	r3, r3, #19
 800a23c:	04db      	lsls	r3, r3, #19
 800a23e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a25a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a25e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a270:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6959      	ldr	r1, [r3, #20]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	440b      	add	r3, r1
 800a27c:	1e59      	subs	r1, r3, #1
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	fbb1 f3f3 	udiv	r3, r1, r3
 800a286:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a288:	4b9d      	ldr	r3, [pc, #628]	; (800a500 <USB_EPStartXfer+0x370>)
 800a28a:	400b      	ands	r3, r1
 800a28c:	69b9      	ldr	r1, [r7, #24]
 800a28e:	0148      	lsls	r0, r1, #5
 800a290:	69f9      	ldr	r1, [r7, #28]
 800a292:	4401      	add	r1, r0
 800a294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a298:	4313      	orrs	r3, r2
 800a29a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a8:	691a      	ldr	r2, [r3, #16]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2b2:	69b9      	ldr	r1, [r7, #24]
 800a2b4:	0148      	lsls	r0, r1, #5
 800a2b6:	69f9      	ldr	r1, [r7, #28]
 800a2b8:	4401      	add	r1, r0
 800a2ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	78db      	ldrb	r3, [r3, #3]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d11f      	bne.n	800a30a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a2e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d14b      	bne.n	800a3a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d009      	beq.n	800a32c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	461a      	mov	r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	78db      	ldrb	r3, [r3, #3]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d128      	bne.n	800a386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a340:	2b00      	cmp	r3, #0
 800a342:	d110      	bne.n	800a366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	e00f      	b.n	800a386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	69fa      	ldr	r2, [r7, #28]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	0151      	lsls	r1, r2, #5
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	440a      	add	r2, r1
 800a39c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	e12f      	b.n	800a608 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	78db      	ldrb	r3, [r3, #3]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d015      	beq.n	800a3fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 8117 	beq.w	800a608 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f0:	69f9      	ldr	r1, [r7, #28]
 800a3f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	634b      	str	r3, [r1, #52]	; 0x34
 800a3fa:	e105      	b.n	800a608 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d110      	bne.n	800a42e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	69fa      	ldr	r2, [r7, #28]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	e00f      	b.n	800a44e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	0151      	lsls	r1, r2, #5
 800a440:	69fa      	ldr	r2, [r7, #28]
 800a442:	440a      	add	r2, r1
 800a444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a44c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	68d9      	ldr	r1, [r3, #12]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	781a      	ldrb	r2, [r3, #0]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	b298      	uxth	r0, r3
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	4603      	mov	r3, r0
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fa2b 	bl	800a8be <USB_WritePacket>
 800a468:	e0ce      	b.n	800a608 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	69fa      	ldr	r2, [r7, #28]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a484:	0cdb      	lsrs	r3, r3, #19
 800a486:	04db      	lsls	r3, r3, #19
 800a488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	4413      	add	r3, r2
 800a492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d126      	bne.n	800a504 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4cc:	69b9      	ldr	r1, [r7, #24]
 800a4ce:	0148      	lsls	r0, r1, #5
 800a4d0:	69f9      	ldr	r1, [r7, #28]
 800a4d2:	4401      	add	r1, r0
 800a4d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4fa:	6113      	str	r3, [r2, #16]
 800a4fc:	e036      	b.n	800a56c <USB_EPStartXfer+0x3dc>
 800a4fe:	bf00      	nop
 800a500:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	695a      	ldr	r2, [r3, #20]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	4413      	add	r3, r2
 800a50e:	1e5a      	subs	r2, r3, #1
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	fbb2 f3f3 	udiv	r3, r2, r3
 800a518:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a526:	691a      	ldr	r2, [r3, #16]
 800a528:	8afb      	ldrh	r3, [r7, #22]
 800a52a:	04d9      	lsls	r1, r3, #19
 800a52c:	4b39      	ldr	r3, [pc, #228]	; (800a614 <USB_EPStartXfer+0x484>)
 800a52e:	400b      	ands	r3, r1
 800a530:	69b9      	ldr	r1, [r7, #24]
 800a532:	0148      	lsls	r0, r1, #5
 800a534:	69f9      	ldr	r1, [r7, #28]
 800a536:	4401      	add	r1, r0
 800a538:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a53c:	4313      	orrs	r3, r2
 800a53e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	691a      	ldr	r2, [r3, #16]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	8af9      	ldrh	r1, [r7, #22]
 800a554:	fb01 f303 	mul.w	r3, r1, r3
 800a558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a55c:	69b9      	ldr	r1, [r7, #24]
 800a55e:	0148      	lsls	r0, r1, #5
 800a560:	69f9      	ldr	r1, [r7, #28]
 800a562:	4401      	add	r1, r0
 800a564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a568:	4313      	orrs	r3, r2
 800a56a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d10d      	bne.n	800a58e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	68d9      	ldr	r1, [r3, #12]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58a:	460a      	mov	r2, r1
 800a58c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	78db      	ldrb	r3, [r3, #3]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d128      	bne.n	800a5e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d110      	bne.n	800a5c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	0151      	lsls	r1, r2, #5
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	440a      	add	r2, r1
 800a5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	e00f      	b.n	800a5e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	0151      	lsls	r1, r2, #5
 800a5da:	69fa      	ldr	r2, [r7, #28]
 800a5dc:	440a      	add	r2, r1
 800a5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	0151      	lsls	r1, r2, #5
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	440a      	add	r2, r1
 800a5fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	1ff80000 	.word	0x1ff80000

0800a618 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	2b01      	cmp	r3, #1
 800a636:	f040 80cd 	bne.w	800a7d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d132      	bne.n	800a6a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	440a      	add	r2, r1
 800a658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a65c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a660:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	0151      	lsls	r1, r2, #5
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	440a      	add	r2, r1
 800a67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	0151      	lsls	r1, r2, #5
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	440a      	add	r2, r1
 800a69c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a0:	0cdb      	lsrs	r3, r3, #19
 800a6a2:	04db      	lsls	r3, r3, #19
 800a6a4:	6113      	str	r3, [r2, #16]
 800a6a6:	e04e      	b.n	800a746 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	0151      	lsls	r1, r2, #5
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	440a      	add	r2, r1
 800a6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c2:	0cdb      	lsrs	r3, r3, #19
 800a6c4:	04db      	lsls	r3, r3, #19
 800a6c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	0151      	lsls	r1, r2, #5
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	440a      	add	r2, r1
 800a6de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	695a      	ldr	r2, [r3, #20]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d903      	bls.n	800a700 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a71e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72c:	691a      	ldr	r2, [r3, #16]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a736:	6939      	ldr	r1, [r7, #16]
 800a738:	0148      	lsls	r0, r1, #5
 800a73a:	6979      	ldr	r1, [r7, #20]
 800a73c:	4401      	add	r1, r0
 800a73e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a742:	4313      	orrs	r3, r2
 800a744:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d11e      	bne.n	800a78a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d009      	beq.n	800a768 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a760:	461a      	mov	r2, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	0151      	lsls	r1, r2, #5
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	440a      	add	r2, r1
 800a77e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e092      	b.n	800a8b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	0151      	lsls	r1, r2, #5
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	440a      	add	r2, r1
 800a7a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d07e      	beq.n	800a8b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c8:	6979      	ldr	r1, [r7, #20]
 800a7ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	634b      	str	r3, [r1, #52]	; 0x34
 800a7d2:	e06d      	b.n	800a8b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ee:	0cdb      	lsrs	r3, r3, #19
 800a7f0:	04db      	lsls	r3, r3, #19
 800a7f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a812:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a816:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	0151      	lsls	r1, r2, #5
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	440a      	add	r2, r1
 800a83e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a846:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a854:	691a      	ldr	r2, [r3, #16]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a85e:	6939      	ldr	r1, [r7, #16]
 800a860:	0148      	lsls	r0, r1, #5
 800a862:	6979      	ldr	r1, [r7, #20]
 800a864:	4401      	add	r1, r0
 800a866:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a86a:	4313      	orrs	r3, r2
 800a86c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d10d      	bne.n	800a890 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d009      	beq.n	800a890 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	68d9      	ldr	r1, [r3, #12]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	015a      	lsls	r2, r3, #5
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	4413      	add	r3, r2
 800a888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88c:	460a      	mov	r2, r1
 800a88e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	015a      	lsls	r2, r3, #5
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
 800a898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	0151      	lsls	r1, r2, #5
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	440a      	add	r2, r1
 800a8a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b089      	sub	sp, #36	; 0x24
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	71fb      	strb	r3, [r7, #7]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a8dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d123      	bne.n	800a92c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8e4:	88bb      	ldrh	r3, [r7, #4]
 800a8e6:	3303      	adds	r3, #3
 800a8e8:	089b      	lsrs	r3, r3, #2
 800a8ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61bb      	str	r3, [r7, #24]
 800a8f0:	e018      	b.n	800a924 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8f2:	79fb      	ldrb	r3, [r7, #7]
 800a8f4:	031a      	lsls	r2, r3, #12
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fe:	461a      	mov	r2, r3
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	3301      	adds	r3, #1
 800a90a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	3301      	adds	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3301      	adds	r3, #1
 800a916:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	3301      	adds	r3, #1
 800a91c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	3301      	adds	r3, #1
 800a922:	61bb      	str	r3, [r7, #24]
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d3e2      	bcc.n	800a8f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3724      	adds	r7, #36	; 0x24
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b08b      	sub	sp, #44	; 0x2c
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	4613      	mov	r3, r2
 800a946:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a950:	88fb      	ldrh	r3, [r7, #6]
 800a952:	089b      	lsrs	r3, r3, #2
 800a954:	b29b      	uxth	r3, r3
 800a956:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a958:	88fb      	ldrh	r3, [r7, #6]
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a960:	2300      	movs	r3, #0
 800a962:	623b      	str	r3, [r7, #32]
 800a964:	e014      	b.n	800a990 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	601a      	str	r2, [r3, #0]
    pDest++;
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	3301      	adds	r3, #1
 800a976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	3301      	adds	r3, #1
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	3301      	adds	r3, #1
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	3301      	adds	r3, #1
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	3301      	adds	r3, #1
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	6a3a      	ldr	r2, [r7, #32]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	429a      	cmp	r2, r3
 800a996:	d3e6      	bcc.n	800a966 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a998:	8bfb      	ldrh	r3, [r7, #30]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d01e      	beq.n	800a9dc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f107 0310 	add.w	r3, r7, #16
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	701a      	strb	r2, [r3, #0]
      i++;
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a9d0:	8bfb      	ldrh	r3, [r7, #30]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9d6:	8bfb      	ldrh	r3, [r7, #30]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1ea      	bne.n	800a9b2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	372c      	adds	r7, #44	; 0x2c
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d12c      	bne.n	800aa60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	db12      	blt.n	800aa3e <USB_EPSetStall+0x54>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00f      	beq.n	800aa3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	0151      	lsls	r1, r2, #5
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	440a      	add	r2, r1
 800aa34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	e02b      	b.n	800aab8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	db12      	blt.n	800aa98 <USB_EPSetStall+0xae>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00f      	beq.n	800aa98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b085      	sub	sp, #20
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d128      	bne.n	800ab34 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	0151      	lsls	r1, r2, #5
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	440a      	add	r2, r1
 800aaf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aafc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	78db      	ldrb	r3, [r3, #3]
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d003      	beq.n	800ab12 <USB_EPClearStall+0x4c>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	78db      	ldrb	r3, [r3, #3]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d138      	bne.n	800ab84 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	015a      	lsls	r2, r3, #5
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4413      	add	r3, r2
 800ab1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	e027      	b.n	800ab84 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	78db      	ldrb	r3, [r3, #3]
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d003      	beq.n	800ab64 <USB_EPClearStall+0x9e>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	78db      	ldrb	r3, [r3, #3]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d10f      	bne.n	800ab84 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	0151      	lsls	r1, r2, #5
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	440a      	add	r2, r1
 800ab7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab82:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abb0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800abb4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abcc:	4313      	orrs	r3, r2
 800abce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abf8:	f023 0303 	bic.w	r3, r3, #3
 800abfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac0c:	f023 0302 	bic.w	r3, r3, #2
 800ac10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac3a:	f023 0303 	bic.w	r3, r3, #3
 800ac3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac4e:	f043 0302 	orr.w	r3, r3, #2
 800ac52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4013      	ands	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	4013      	ands	r3, r2
 800acaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	0c1b      	lsrs	r3, r3, #16
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	4013      	ands	r3, r2
 800acde:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	b29b      	uxth	r3, r3
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad1e:	68bb      	ldr	r3, [r7, #8]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	f003 030f 	and.w	r3, r3, #15
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5c:	01db      	lsls	r3, r3, #7
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad66:	78fb      	ldrb	r3, [r7, #3]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4013      	ands	r3, r2
 800ad78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	f003 0301 	and.w	r3, r3, #1
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adbe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800adc2:	f023 0307 	bic.w	r3, r3, #7
 800adc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800add6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
	...

0800adec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	460b      	mov	r3, r1
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	333c      	adds	r3, #60	; 0x3c
 800ae02:	3304      	adds	r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	4a26      	ldr	r2, [pc, #152]	; (800aea4 <USB_EP0_OutStart+0xb8>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d90a      	bls.n	800ae26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae20:	d101      	bne.n	800ae26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e037      	b.n	800ae96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae54:	f043 0318 	orr.w	r3, r3, #24
 800ae58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae6e:	7afb      	ldrb	r3, [r7, #11]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d10f      	bne.n	800ae94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ae92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	4f54300a 	.word	0x4f54300a

0800aea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	4a13      	ldr	r2, [pc, #76]	; (800af08 <USB_CoreReset+0x60>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d901      	bls.n	800aec4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e01a      	b.n	800aefa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	daf3      	bge.n	800aeb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f043 0201 	orr.w	r2, r3, #1
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3301      	adds	r3, #1
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	4a09      	ldr	r2, [pc, #36]	; (800af08 <USB_CoreReset+0x60>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d901      	bls.n	800aeec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e006      	b.n	800aefa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d0f1      	beq.n	800aedc <USB_CoreReset+0x34>

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	00030d40 	.word	0x00030d40

0800af0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800af1c:	f002 f9be 	bl	800d29c <USBD_static_malloc>
 800af20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d105      	bne.n	800af34 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800af30:	2302      	movs	r3, #2
 800af32:	e066      	b.n	800b002 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7c1b      	ldrb	r3, [r3, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d119      	bne.n	800af78 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af48:	2202      	movs	r2, #2
 800af4a:	2181      	movs	r1, #129	; 0x81
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f002 f834 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af5c:	2202      	movs	r2, #2
 800af5e:	2101      	movs	r1, #1
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f002 f82a 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2210      	movs	r2, #16
 800af72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800af76:	e016      	b.n	800afa6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af78:	2340      	movs	r3, #64	; 0x40
 800af7a:	2202      	movs	r2, #2
 800af7c:	2181      	movs	r1, #129	; 0x81
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f002 f81b 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af8a:	2340      	movs	r3, #64	; 0x40
 800af8c:	2202      	movs	r2, #2
 800af8e:	2101      	movs	r1, #1
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f002 f812 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2210      	movs	r2, #16
 800afa2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800afa6:	2308      	movs	r3, #8
 800afa8:	2203      	movs	r2, #3
 800afaa:	2182      	movs	r1, #130	; 0x82
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f002 f804 	bl	800cfba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7c1b      	ldrb	r3, [r3, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d109      	bne.n	800aff0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afe6:	2101      	movs	r1, #1
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f002 f8d5 	bl	800d198 <USBD_LL_PrepareReceive>
 800afee:	e007      	b.n	800b000 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aff6:	2340      	movs	r3, #64	; 0x40
 800aff8:	2101      	movs	r1, #1
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f002 f8cc 	bl	800d198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b016:	2181      	movs	r1, #129	; 0x81
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fff4 	bl	800d006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b024:	2101      	movs	r1, #1
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 ffed 	bl	800d006 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b034:	2182      	movs	r1, #130	; 0x82
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 ffe5 	bl	800d006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00e      	beq.n	800b074 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b066:	4618      	mov	r0, r3
 800b068:	f002 f926 	bl	800d2b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b090:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e0af      	b.n	800b208 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d03f      	beq.n	800b134 <USBD_CDC_Setup+0xb4>
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	f040 809f 	bne.w	800b1f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	88db      	ldrh	r3, [r3, #6]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d02e      	beq.n	800b120 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	b25b      	sxtb	r3, r3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	da16      	bge.n	800b0fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b0d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	88d2      	ldrh	r2, [r2, #6]
 800b0de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	88db      	ldrh	r3, [r3, #6]
 800b0e4:	2b07      	cmp	r3, #7
 800b0e6:	bf28      	it	cs
 800b0e8:	2307      	movcs	r3, #7
 800b0ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	89fa      	ldrh	r2, [r7, #14]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 fb13 	bl	800c71e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b0f8:	e085      	b.n	800b206 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	785a      	ldrb	r2, [r3, #1]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	88db      	ldrh	r3, [r3, #6]
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b110:	6939      	ldr	r1, [r7, #16]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	88db      	ldrh	r3, [r3, #6]
 800b116:	461a      	mov	r2, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 fb2c 	bl	800c776 <USBD_CtlPrepareRx>
      break;
 800b11e:	e072      	b.n	800b206 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	7850      	ldrb	r0, [r2, #1]
 800b12c:	2200      	movs	r2, #0
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	4798      	blx	r3
      break;
 800b132:	e068      	b.n	800b206 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b0b      	cmp	r3, #11
 800b13a:	d852      	bhi.n	800b1e2 <USBD_CDC_Setup+0x162>
 800b13c:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <USBD_CDC_Setup+0xc4>)
 800b13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b142:	bf00      	nop
 800b144:	0800b175 	.word	0x0800b175
 800b148:	0800b1f1 	.word	0x0800b1f1
 800b14c:	0800b1e3 	.word	0x0800b1e3
 800b150:	0800b1e3 	.word	0x0800b1e3
 800b154:	0800b1e3 	.word	0x0800b1e3
 800b158:	0800b1e3 	.word	0x0800b1e3
 800b15c:	0800b1e3 	.word	0x0800b1e3
 800b160:	0800b1e3 	.word	0x0800b1e3
 800b164:	0800b1e3 	.word	0x0800b1e3
 800b168:	0800b1e3 	.word	0x0800b1e3
 800b16c:	0800b19f 	.word	0x0800b19f
 800b170:	0800b1c9 	.word	0x0800b1c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d107      	bne.n	800b190 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b180:	f107 030a 	add.w	r3, r7, #10
 800b184:	2202      	movs	r2, #2
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 fac8 	bl	800c71e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b18e:	e032      	b.n	800b1f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f001 fa52 	bl	800c63c <USBD_CtlError>
            ret = USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	75fb      	strb	r3, [r7, #23]
          break;
 800b19c:	e02b      	b.n	800b1f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d107      	bne.n	800b1ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b1aa:	f107 030d 	add.w	r3, r7, #13
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 fab3 	bl	800c71e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1b8:	e01d      	b.n	800b1f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f001 fa3d 	bl	800c63c <USBD_CtlError>
            ret = USBD_FAIL;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b1c6:	e016      	b.n	800b1f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d00f      	beq.n	800b1f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f001 fa30 	bl	800c63c <USBD_CtlError>
            ret = USBD_FAIL;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1e0:	e008      	b.n	800b1f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f001 fa29 	bl	800c63c <USBD_CtlError>
          ret = USBD_FAIL;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b1ee:	e002      	b.n	800b1f6 <USBD_CDC_Setup+0x176>
          break;
 800b1f0:	bf00      	nop
 800b1f2:	e008      	b.n	800b206 <USBD_CDC_Setup+0x186>
          break;
 800b1f4:	bf00      	nop
      }
      break;
 800b1f6:	e006      	b.n	800b206 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f001 fa1e 	bl	800c63c <USBD_CtlError>
      ret = USBD_FAIL;
 800b200:	2303      	movs	r3, #3
 800b202:	75fb      	strb	r3, [r7, #23]
      break;
 800b204:	bf00      	nop
  }

  return (uint8_t)ret;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b222:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b22e:	2303      	movs	r3, #3
 800b230:	e04f      	b.n	800b2d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b238:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b23a:	78fa      	ldrb	r2, [r7, #3]
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	440b      	add	r3, r1
 800b248:	3318      	adds	r3, #24
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d029      	beq.n	800b2a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b250:	78fa      	ldrb	r2, [r7, #3]
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	440b      	add	r3, r1
 800b25e:	3318      	adds	r3, #24
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	78f9      	ldrb	r1, [r7, #3]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	460b      	mov	r3, r1
 800b268:	00db      	lsls	r3, r3, #3
 800b26a:	1a5b      	subs	r3, r3, r1
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4403      	add	r3, r0
 800b270:	3344      	adds	r3, #68	; 0x44
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	fbb2 f1f3 	udiv	r1, r2, r3
 800b278:	fb03 f301 	mul.w	r3, r3, r1
 800b27c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d110      	bne.n	800b2a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b282:	78fa      	ldrb	r2, [r7, #3]
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	440b      	add	r3, r1
 800b290:	3318      	adds	r3, #24
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b296:	78f9      	ldrb	r1, [r7, #3]
 800b298:	2300      	movs	r3, #0
 800b29a:	2200      	movs	r2, #0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 ff5a 	bl	800d156 <USBD_LL_Transmit>
 800b2a2:	e015      	b.n	800b2d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00b      	beq.n	800b2d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b2cc:	78fa      	ldrb	r2, [r7, #3]
 800b2ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e015      	b.n	800b328 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 ff6a 	bl	800d1da <USBD_LL_GetRxDataSize>
 800b306:	4602      	mov	r2, r0
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b322:	4611      	mov	r1, r2
 800b324:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b33e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b346:	2303      	movs	r3, #3
 800b348:	e01b      	b.n	800b382 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d015      	beq.n	800b380 <USBD_CDC_EP0_RxReady+0x50>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b35a:	2bff      	cmp	r3, #255	; 0xff
 800b35c:	d010      	beq.n	800b380 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b36c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b374:	b292      	uxth	r2, r2
 800b376:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	22ff      	movs	r2, #255	; 0xff
 800b37c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2243      	movs	r2, #67	; 0x43
 800b398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b39a:	4b03      	ldr	r3, [pc, #12]	; (800b3a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	20000094 	.word	0x20000094

0800b3ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2243      	movs	r2, #67	; 0x43
 800b3b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b3ba:	4b03      	ldr	r3, [pc, #12]	; (800b3c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	20000050 	.word	0x20000050

0800b3cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2243      	movs	r2, #67	; 0x43
 800b3d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b3da:	4b03      	ldr	r3, [pc, #12]	; (800b3e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	200000d8 	.word	0x200000d8

0800b3ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	220a      	movs	r2, #10
 800b3f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3fa:	4b03      	ldr	r3, [pc, #12]	; (800b408 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	2000000c 	.word	0x2000000c

0800b40c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e004      	b.n	800b42a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b436:	b480      	push	{r7}
 800b438:	b087      	sub	sp, #28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	60b9      	str	r1, [r7, #8]
 800b440:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b448:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	e008      	b.n	800b466 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b472:	b480      	push	{r7}
 800b474:	b085      	sub	sp, #20
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b482:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e004      	b.n	800b498 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e016      	b.n	800b4f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	7c1b      	ldrb	r3, [r3, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d109      	bne.n	800b4de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 fe5e 	bl	800d198 <USBD_LL_PrepareReceive>
 800b4dc:	e007      	b.n	800b4ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4e4:	2340      	movs	r3, #64	; 0x40
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fe55 	bl	800d198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	4613      	mov	r3, r2
 800b504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e01f      	b.n	800b550 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	79fa      	ldrb	r2, [r7, #7]
 800b542:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f001 fcd1 	bl	800ceec <USBD_LL_Init>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e016      	b.n	800b59e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00b      	beq.n	800b59c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	f107 020e 	add.w	r2, r7, #14
 800b590:	4610      	mov	r0, r2
 800b592:	4798      	blx	r3
 800b594:	4602      	mov	r2, r0
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 fce8 	bl	800cf84 <USBD_LL_Start>
 800b5b4:	4603      	mov	r3, r0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d009      	beq.n	800b602 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	78fa      	ldrb	r2, [r7, #3]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b602:	7bfb      	ldrb	r3, [r7, #15]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d007      	beq.n	800b632 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	4611      	mov	r1, r2
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
  }

  return USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 ffba 	bl	800c5c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b662:	461a      	mov	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b670:	f003 031f 	and.w	r3, r3, #31
 800b674:	2b02      	cmp	r3, #2
 800b676:	d01a      	beq.n	800b6ae <USBD_LL_SetupStage+0x72>
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d822      	bhi.n	800b6c2 <USBD_LL_SetupStage+0x86>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <USBD_LL_SetupStage+0x4a>
 800b680:	2b01      	cmp	r3, #1
 800b682:	d00a      	beq.n	800b69a <USBD_LL_SetupStage+0x5e>
 800b684:	e01d      	b.n	800b6c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa62 	bl	800bb58 <USBD_StdDevReq>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
      break;
 800b698:	e020      	b.n	800b6dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fac6 	bl	800bc34 <USBD_StdItfReq>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ac:	e016      	b.n	800b6dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fb05 	bl	800bcc6 <USBD_StdEPReq>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c0:	e00c      	b.n	800b6dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f001 fcb7 	bl	800d044 <USBD_LL_StallEP>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6da:	bf00      	nop
  }

  return ret;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b086      	sub	sp, #24
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	607a      	str	r2, [r7, #4]
 800b6f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d138      	bne.n	800b76c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b700:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d14a      	bne.n	800b7a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	689a      	ldr	r2, [r3, #8]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	429a      	cmp	r2, r3
 800b716:	d913      	bls.n	800b740 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	689a      	ldr	r2, [r3, #8]
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	1ad2      	subs	r2, r2, r3
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	68da      	ldr	r2, [r3, #12]
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	4293      	cmp	r3, r2
 800b730:	bf28      	it	cs
 800b732:	4613      	movcs	r3, r2
 800b734:	461a      	mov	r2, r3
 800b736:	6879      	ldr	r1, [r7, #4]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f001 f839 	bl	800c7b0 <USBD_CtlContinueRx>
 800b73e:	e030      	b.n	800b7a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d10b      	bne.n	800b764 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d005      	beq.n	800b764 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f001 f834 	bl	800c7d2 <USBD_CtlSendStatus>
 800b76a:	e01a      	b.n	800b7a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b03      	cmp	r3, #3
 800b776:	d114      	bne.n	800b7a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00e      	beq.n	800b7a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78a:	699b      	ldr	r3, [r3, #24]
 800b78c:	7afa      	ldrb	r2, [r7, #11]
 800b78e:	4611      	mov	r1, r2
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	4798      	blx	r3
 800b794:	4603      	mov	r3, r0
 800b796:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	e000      	b.n	800b7a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b7ba:	7afb      	ldrb	r3, [r7, #11]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d16b      	bne.n	800b898 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d156      	bne.n	800b87e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d914      	bls.n	800b806 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	1ad2      	subs	r2, r2, r3
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 ffae 	bl	800c754 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f001 fcca 	bl	800d198 <USBD_LL_PrepareReceive>
 800b804:	e03b      	b.n	800b87e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	68da      	ldr	r2, [r3, #12]
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d11c      	bne.n	800b84c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d316      	bcc.n	800b84c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b828:	429a      	cmp	r2, r3
 800b82a:	d20f      	bcs.n	800b84c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b82c:	2200      	movs	r2, #0
 800b82e:	2100      	movs	r1, #0
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 ff8f 	bl	800c754 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b83e:	2300      	movs	r3, #0
 800b840:	2200      	movs	r2, #0
 800b842:	2100      	movs	r1, #0
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f001 fca7 	bl	800d198 <USBD_LL_PrepareReceive>
 800b84a:	e018      	b.n	800b87e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b03      	cmp	r3, #3
 800b856:	d10b      	bne.n	800b870 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b870:	2180      	movs	r1, #128	; 0x80
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f001 fbe6 	bl	800d044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 ffbd 	bl	800c7f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b884:	2b01      	cmp	r3, #1
 800b886:	d122      	bne.n	800b8ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fe98 	bl	800b5be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b896:	e01a      	b.n	800b8ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b03      	cmp	r3, #3
 800b8a2:	d114      	bne.n	800b8ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00e      	beq.n	800b8ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	7afa      	ldrb	r2, [r7, #11]
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	4798      	blx	r3
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	e000      	b.n	800b8d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b908:	2303      	movs	r3, #3
 800b90a:	e02f      	b.n	800b96c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00f      	beq.n	800b936 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6852      	ldr	r2, [r2, #4]
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	4611      	mov	r1, r2
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b936:	2340      	movs	r3, #64	; 0x40
 800b938:	2200      	movs	r2, #0
 800b93a:	2100      	movs	r1, #0
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 fb3c 	bl	800cfba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2240      	movs	r2, #64	; 0x40
 800b94e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b952:	2340      	movs	r3, #64	; 0x40
 800b954:	2200      	movs	r2, #0
 800b956:	2180      	movs	r1, #128	; 0x80
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f001 fb2e 	bl	800cfba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2240      	movs	r2, #64	; 0x40
 800b968:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	78fa      	ldrb	r2, [r7, #3]
 800b984:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2204      	movs	r2, #4
 800b9ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d106      	bne.n	800b9e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e012      	b.n	800ba2c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d10b      	bne.n	800ba2a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e014      	b.n	800ba78 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d10d      	bne.n	800ba76 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	4611      	mov	r1, r2
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e014      	b.n	800bac4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d10d      	bne.n	800bac2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d007      	beq.n	800bac2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	4611      	mov	r1, r2
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	6852      	ldr	r2, [r2, #4]
 800bb08:	b2d2      	uxtb	r2, r2
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	4798      	blx	r3
  }

  return USBD_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b087      	sub	sp, #28
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb38:	8a3b      	ldrh	r3, [r7, #16]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	b21a      	sxth	r2, r3
 800bb3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	b21b      	sxth	r3, r3
 800bb46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb48:	89fb      	ldrh	r3, [r7, #14]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	371c      	adds	r7, #28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
	...

0800bb58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d005      	beq.n	800bb7e <USBD_StdDevReq+0x26>
 800bb72:	2b40      	cmp	r3, #64	; 0x40
 800bb74:	d853      	bhi.n	800bc1e <USBD_StdDevReq+0xc6>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <USBD_StdDevReq+0x3a>
 800bb7a:	2b20      	cmp	r3, #32
 800bb7c:	d14f      	bne.n	800bc1e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	4798      	blx	r3
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb90:	e04a      	b.n	800bc28 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b09      	cmp	r3, #9
 800bb98:	d83b      	bhi.n	800bc12 <USBD_StdDevReq+0xba>
 800bb9a:	a201      	add	r2, pc, #4	; (adr r2, 800bba0 <USBD_StdDevReq+0x48>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbf5 	.word	0x0800bbf5
 800bba4:	0800bc09 	.word	0x0800bc09
 800bba8:	0800bc13 	.word	0x0800bc13
 800bbac:	0800bbff 	.word	0x0800bbff
 800bbb0:	0800bc13 	.word	0x0800bc13
 800bbb4:	0800bbd3 	.word	0x0800bbd3
 800bbb8:	0800bbc9 	.word	0x0800bbc9
 800bbbc:	0800bc13 	.word	0x0800bc13
 800bbc0:	0800bbeb 	.word	0x0800bbeb
 800bbc4:	0800bbdd 	.word	0x0800bbdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f9de 	bl	800bf8c <USBD_GetDescriptor>
          break;
 800bbd0:	e024      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 fb6d 	bl	800c2b4 <USBD_SetAddress>
          break;
 800bbda:	e01f      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbac 	bl	800c33c <USBD_SetConfig>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]
          break;
 800bbe8:	e018      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fc4b 	bl	800c488 <USBD_GetConfig>
          break;
 800bbf2:	e013      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fc7c 	bl	800c4f4 <USBD_GetStatus>
          break;
 800bbfc:	e00e      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fcab 	bl	800c55c <USBD_SetFeature>
          break;
 800bc06:	e009      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fcba 	bl	800c584 <USBD_ClrFeature>
          break;
 800bc10:	e004      	b.n	800bc1c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fd11 	bl	800c63c <USBD_CtlError>
          break;
 800bc1a:	bf00      	nop
      }
      break;
 800bc1c:	e004      	b.n	800bc28 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fd0b 	bl	800c63c <USBD_CtlError>
      break;
 800bc26:	bf00      	nop
  }

  return ret;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop

0800bc34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d005      	beq.n	800bc5a <USBD_StdItfReq+0x26>
 800bc4e:	2b40      	cmp	r3, #64	; 0x40
 800bc50:	d82f      	bhi.n	800bcb2 <USBD_StdItfReq+0x7e>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <USBD_StdItfReq+0x26>
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d12b      	bne.n	800bcb2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	3b01      	subs	r3, #1
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d81d      	bhi.n	800bca4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	889b      	ldrh	r3, [r3, #4]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d813      	bhi.n	800bc9a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	88db      	ldrh	r3, [r3, #6]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d110      	bne.n	800bcae <USBD_StdItfReq+0x7a>
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10d      	bne.n	800bcae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fd9d 	bl	800c7d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc98:	e009      	b.n	800bcae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fccd 	bl	800c63c <USBD_CtlError>
          break;
 800bca2:	e004      	b.n	800bcae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fcc8 	bl	800c63c <USBD_CtlError>
          break;
 800bcac:	e000      	b.n	800bcb0 <USBD_StdItfReq+0x7c>
          break;
 800bcae:	bf00      	nop
      }
      break;
 800bcb0:	e004      	b.n	800bcbc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fcc1 	bl	800c63c <USBD_CtlError>
      break;
 800bcba:	bf00      	nop
  }

  return ret;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b084      	sub	sp, #16
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	889b      	ldrh	r3, [r3, #4]
 800bcd8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bce2:	2b40      	cmp	r3, #64	; 0x40
 800bce4:	d007      	beq.n	800bcf6 <USBD_StdEPReq+0x30>
 800bce6:	2b40      	cmp	r3, #64	; 0x40
 800bce8:	f200 8145 	bhi.w	800bf76 <USBD_StdEPReq+0x2b0>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00c      	beq.n	800bd0a <USBD_StdEPReq+0x44>
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	f040 8140 	bne.w	800bf76 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	4798      	blx	r3
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
      break;
 800bd08:	e13a      	b.n	800bf80 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d007      	beq.n	800bd22 <USBD_StdEPReq+0x5c>
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	f300 8129 	bgt.w	800bf6a <USBD_StdEPReq+0x2a4>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d07f      	beq.n	800be1c <USBD_StdEPReq+0x156>
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d03c      	beq.n	800bd9a <USBD_StdEPReq+0xd4>
 800bd20:	e123      	b.n	800bf6a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d002      	beq.n	800bd34 <USBD_StdEPReq+0x6e>
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d016      	beq.n	800bd60 <USBD_StdEPReq+0x9a>
 800bd32:	e02c      	b.n	800bd8e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00d      	beq.n	800bd56 <USBD_StdEPReq+0x90>
 800bd3a:	7bbb      	ldrb	r3, [r7, #14]
 800bd3c:	2b80      	cmp	r3, #128	; 0x80
 800bd3e:	d00a      	beq.n	800bd56 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd40:	7bbb      	ldrb	r3, [r7, #14]
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 f97d 	bl	800d044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd4a:	2180      	movs	r1, #128	; 0x80
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 f979 	bl	800d044 <USBD_LL_StallEP>
 800bd52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd54:	e020      	b.n	800bd98 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fc6f 	bl	800c63c <USBD_CtlError>
              break;
 800bd5e:	e01b      	b.n	800bd98 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	885b      	ldrh	r3, [r3, #2]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10e      	bne.n	800bd86 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00b      	beq.n	800bd86 <USBD_StdEPReq+0xc0>
 800bd6e:	7bbb      	ldrb	r3, [r7, #14]
 800bd70:	2b80      	cmp	r3, #128	; 0x80
 800bd72:	d008      	beq.n	800bd86 <USBD_StdEPReq+0xc0>
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	88db      	ldrh	r3, [r3, #6]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d104      	bne.n	800bd86 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 f95f 	bl	800d044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fd23 	bl	800c7d2 <USBD_CtlSendStatus>

              break;
 800bd8c:	e004      	b.n	800bd98 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fc53 	bl	800c63c <USBD_CtlError>
              break;
 800bd96:	bf00      	nop
          }
          break;
 800bd98:	e0ec      	b.n	800bf74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d002      	beq.n	800bdac <USBD_StdEPReq+0xe6>
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d016      	beq.n	800bdd8 <USBD_StdEPReq+0x112>
 800bdaa:	e030      	b.n	800be0e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00d      	beq.n	800bdce <USBD_StdEPReq+0x108>
 800bdb2:	7bbb      	ldrb	r3, [r7, #14]
 800bdb4:	2b80      	cmp	r3, #128	; 0x80
 800bdb6:	d00a      	beq.n	800bdce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 f941 	bl	800d044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdc2:	2180      	movs	r1, #128	; 0x80
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f001 f93d 	bl	800d044 <USBD_LL_StallEP>
 800bdca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdcc:	e025      	b.n	800be1a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fc33 	bl	800c63c <USBD_CtlError>
              break;
 800bdd6:	e020      	b.n	800be1a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	885b      	ldrh	r3, [r3, #2]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d11b      	bne.n	800be18 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d004      	beq.n	800bdf4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdea:	7bbb      	ldrb	r3, [r7, #14]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f947 	bl	800d082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fcec 	bl	800c7d2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800be0c:	e004      	b.n	800be18 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fc13 	bl	800c63c <USBD_CtlError>
              break;
 800be16:	e000      	b.n	800be1a <USBD_StdEPReq+0x154>
              break;
 800be18:	bf00      	nop
          }
          break;
 800be1a:	e0ab      	b.n	800bf74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b02      	cmp	r3, #2
 800be26:	d002      	beq.n	800be2e <USBD_StdEPReq+0x168>
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d032      	beq.n	800be92 <USBD_StdEPReq+0x1cc>
 800be2c:	e097      	b.n	800bf5e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <USBD_StdEPReq+0x17e>
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	2b80      	cmp	r3, #128	; 0x80
 800be38:	d004      	beq.n	800be44 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fbfd 	bl	800c63c <USBD_CtlError>
                break;
 800be42:	e091      	b.n	800bf68 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	da0b      	bge.n	800be64 <USBD_StdEPReq+0x19e>
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be52:	4613      	mov	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4413      	add	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	3310      	adds	r3, #16
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	4413      	add	r3, r2
 800be60:	3304      	adds	r3, #4
 800be62:	e00b      	b.n	800be7c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	4413      	add	r3, r2
 800be7a:	3304      	adds	r3, #4
 800be7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2202      	movs	r2, #2
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fc47 	bl	800c71e <USBD_CtlSendData>
              break;
 800be90:	e06a      	b.n	800bf68 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be96:	2b00      	cmp	r3, #0
 800be98:	da11      	bge.n	800bebe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be9a:	7bbb      	ldrb	r3, [r7, #14]
 800be9c:	f003 020f 	and.w	r2, r3, #15
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	4613      	mov	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	440b      	add	r3, r1
 800beac:	3324      	adds	r3, #36	; 0x24
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d117      	bne.n	800bee4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fbc0 	bl	800c63c <USBD_CtlError>
                  break;
 800bebc:	e054      	b.n	800bf68 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
 800bec0:	f003 020f 	and.w	r2, r3, #15
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d104      	bne.n	800bee4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fbad 	bl	800c63c <USBD_CtlError>
                  break;
 800bee2:	e041      	b.n	800bf68 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	da0b      	bge.n	800bf04 <USBD_StdEPReq+0x23e>
 800beec:	7bbb      	ldrb	r3, [r7, #14]
 800beee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	3310      	adds	r3, #16
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	4413      	add	r3, r2
 800bf00:	3304      	adds	r3, #4
 800bf02:	e00b      	b.n	800bf1c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	4413      	add	r3, r2
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf1e:	7bbb      	ldrb	r3, [r7, #14]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <USBD_StdEPReq+0x264>
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	2b80      	cmp	r3, #128	; 0x80
 800bf28:	d103      	bne.n	800bf32 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	e00e      	b.n	800bf50 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f001 f8c2 	bl	800d0c0 <USBD_LL_IsStallEP>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	2201      	movs	r2, #1
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	e002      	b.n	800bf50 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2202      	movs	r2, #2
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fbe1 	bl	800c71e <USBD_CtlSendData>
              break;
 800bf5c:	e004      	b.n	800bf68 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fb6b 	bl	800c63c <USBD_CtlError>
              break;
 800bf66:	bf00      	nop
          }
          break;
 800bf68:	e004      	b.n	800bf74 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fb65 	bl	800c63c <USBD_CtlError>
          break;
 800bf72:	bf00      	nop
      }
      break;
 800bf74:	e004      	b.n	800bf80 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fb5f 	bl	800c63c <USBD_CtlError>
      break;
 800bf7e:	bf00      	nop
  }

  return ret;
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
	...

0800bf8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	885b      	ldrh	r3, [r3, #2]
 800bfa6:	0a1b      	lsrs	r3, r3, #8
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	2b0e      	cmp	r3, #14
 800bfae:	f200 8152 	bhi.w	800c256 <USBD_GetDescriptor+0x2ca>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <USBD_GetDescriptor+0x2c>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c029 	.word	0x0800c029
 800bfbc:	0800c041 	.word	0x0800c041
 800bfc0:	0800c081 	.word	0x0800c081
 800bfc4:	0800c257 	.word	0x0800c257
 800bfc8:	0800c257 	.word	0x0800c257
 800bfcc:	0800c1f7 	.word	0x0800c1f7
 800bfd0:	0800c223 	.word	0x0800c223
 800bfd4:	0800c257 	.word	0x0800c257
 800bfd8:	0800c257 	.word	0x0800c257
 800bfdc:	0800c257 	.word	0x0800c257
 800bfe0:	0800c257 	.word	0x0800c257
 800bfe4:	0800c257 	.word	0x0800c257
 800bfe8:	0800c257 	.word	0x0800c257
 800bfec:	0800c257 	.word	0x0800c257
 800bff0:	0800bff5 	.word	0x0800bff5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c006:	69db      	ldr	r3, [r3, #28]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	7c12      	ldrb	r2, [r2, #16]
 800c00c:	f107 0108 	add.w	r1, r7, #8
 800c010:	4610      	mov	r0, r2
 800c012:	4798      	blx	r3
 800c014:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c016:	e126      	b.n	800c266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fb0e 	bl	800c63c <USBD_CtlError>
        err++;
 800c020:	7afb      	ldrb	r3, [r7, #11]
 800c022:	3301      	adds	r3, #1
 800c024:	72fb      	strb	r3, [r7, #11]
      break;
 800c026:	e11e      	b.n	800c266 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	7c12      	ldrb	r2, [r2, #16]
 800c034:	f107 0108 	add.w	r1, r7, #8
 800c038:	4610      	mov	r0, r2
 800c03a:	4798      	blx	r3
 800c03c:	60f8      	str	r0, [r7, #12]
      break;
 800c03e:	e112      	b.n	800c266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7c1b      	ldrb	r3, [r3, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10d      	bne.n	800c064 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c050:	f107 0208 	add.w	r2, r7, #8
 800c054:	4610      	mov	r0, r2
 800c056:	4798      	blx	r3
 800c058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3301      	adds	r3, #1
 800c05e:	2202      	movs	r2, #2
 800c060:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c062:	e100      	b.n	800c266 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	f107 0208 	add.w	r2, r7, #8
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
 800c074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3301      	adds	r3, #1
 800c07a:	2202      	movs	r2, #2
 800c07c:	701a      	strb	r2, [r3, #0]
      break;
 800c07e:	e0f2      	b.n	800c266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	885b      	ldrh	r3, [r3, #2]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b05      	cmp	r3, #5
 800c088:	f200 80ac 	bhi.w	800c1e4 <USBD_GetDescriptor+0x258>
 800c08c:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <USBD_GetDescriptor+0x108>)
 800c08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c092:	bf00      	nop
 800c094:	0800c0ad 	.word	0x0800c0ad
 800c098:	0800c0e1 	.word	0x0800c0e1
 800c09c:	0800c115 	.word	0x0800c115
 800c0a0:	0800c149 	.word	0x0800c149
 800c0a4:	0800c17d 	.word	0x0800c17d
 800c0a8:	0800c1b1 	.word	0x0800c1b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00b      	beq.n	800c0d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	7c12      	ldrb	r2, [r2, #16]
 800c0c4:	f107 0108 	add.w	r1, r7, #8
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4798      	blx	r3
 800c0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ce:	e091      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fab2 	bl	800c63c <USBD_CtlError>
            err++;
 800c0d8:	7afb      	ldrb	r3, [r7, #11]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0de:	e089      	b.n	800c1f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	7c12      	ldrb	r2, [r2, #16]
 800c0f8:	f107 0108 	add.w	r1, r7, #8
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	4798      	blx	r3
 800c100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c102:	e077      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa98 	bl	800c63c <USBD_CtlError>
            err++;
 800c10c:	7afb      	ldrb	r3, [r7, #11]
 800c10e:	3301      	adds	r3, #1
 800c110:	72fb      	strb	r3, [r7, #11]
          break;
 800c112:	e06f      	b.n	800c1f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00b      	beq.n	800c138 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	7c12      	ldrb	r2, [r2, #16]
 800c12c:	f107 0108 	add.w	r1, r7, #8
 800c130:	4610      	mov	r0, r2
 800c132:	4798      	blx	r3
 800c134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c136:	e05d      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fa7e 	bl	800c63c <USBD_CtlError>
            err++;
 800c140:	7afb      	ldrb	r3, [r7, #11]
 800c142:	3301      	adds	r3, #1
 800c144:	72fb      	strb	r3, [r7, #11]
          break;
 800c146:	e055      	b.n	800c1f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	7c12      	ldrb	r2, [r2, #16]
 800c160:	f107 0108 	add.w	r1, r7, #8
 800c164:	4610      	mov	r0, r2
 800c166:	4798      	blx	r3
 800c168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c16a:	e043      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fa64 	bl	800c63c <USBD_CtlError>
            err++;
 800c174:	7afb      	ldrb	r3, [r7, #11]
 800c176:	3301      	adds	r3, #1
 800c178:	72fb      	strb	r3, [r7, #11]
          break;
 800c17a:	e03b      	b.n	800c1f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00b      	beq.n	800c1a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c18e:	695b      	ldr	r3, [r3, #20]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	7c12      	ldrb	r2, [r2, #16]
 800c194:	f107 0108 	add.w	r1, r7, #8
 800c198:	4610      	mov	r0, r2
 800c19a:	4798      	blx	r3
 800c19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c19e:	e029      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fa4a 	bl	800c63c <USBD_CtlError>
            err++;
 800c1a8:	7afb      	ldrb	r3, [r7, #11]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ae:	e021      	b.n	800c1f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00b      	beq.n	800c1d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	7c12      	ldrb	r2, [r2, #16]
 800c1c8:	f107 0108 	add.w	r1, r7, #8
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4798      	blx	r3
 800c1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1d2:	e00f      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fa30 	bl	800c63c <USBD_CtlError>
            err++;
 800c1dc:	7afb      	ldrb	r3, [r7, #11]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1e2:	e007      	b.n	800c1f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 fa28 	bl	800c63c <USBD_CtlError>
          err++;
 800c1ec:	7afb      	ldrb	r3, [r7, #11]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c1f2:	bf00      	nop
      }
      break;
 800c1f4:	e037      	b.n	800c266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7c1b      	ldrb	r3, [r3, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d109      	bne.n	800c212 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c206:	f107 0208 	add.w	r2, r7, #8
 800c20a:	4610      	mov	r0, r2
 800c20c:	4798      	blx	r3
 800c20e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c210:	e029      	b.n	800c266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fa11 	bl	800c63c <USBD_CtlError>
        err++;
 800c21a:	7afb      	ldrb	r3, [r7, #11]
 800c21c:	3301      	adds	r3, #1
 800c21e:	72fb      	strb	r3, [r7, #11]
      break;
 800c220:	e021      	b.n	800c266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	7c1b      	ldrb	r3, [r3, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10d      	bne.n	800c246 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	f107 0208 	add.w	r2, r7, #8
 800c236:	4610      	mov	r0, r2
 800c238:	4798      	blx	r3
 800c23a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3301      	adds	r3, #1
 800c240:	2207      	movs	r2, #7
 800c242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c244:	e00f      	b.n	800c266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f9f7 	bl	800c63c <USBD_CtlError>
        err++;
 800c24e:	7afb      	ldrb	r3, [r7, #11]
 800c250:	3301      	adds	r3, #1
 800c252:	72fb      	strb	r3, [r7, #11]
      break;
 800c254:	e007      	b.n	800c266 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f9ef 	bl	800c63c <USBD_CtlError>
      err++;
 800c25e:	7afb      	ldrb	r3, [r7, #11]
 800c260:	3301      	adds	r3, #1
 800c262:	72fb      	strb	r3, [r7, #11]
      break;
 800c264:	bf00      	nop
  }

  if (err != 0U)
 800c266:	7afb      	ldrb	r3, [r7, #11]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d11e      	bne.n	800c2aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	88db      	ldrh	r3, [r3, #6]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d016      	beq.n	800c2a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c274:	893b      	ldrh	r3, [r7, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00e      	beq.n	800c298 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	88da      	ldrh	r2, [r3, #6]
 800c27e:	893b      	ldrh	r3, [r7, #8]
 800c280:	4293      	cmp	r3, r2
 800c282:	bf28      	it	cs
 800c284:	4613      	movcs	r3, r2
 800c286:	b29b      	uxth	r3, r3
 800c288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c28a:	893b      	ldrh	r3, [r7, #8]
 800c28c:	461a      	mov	r2, r3
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fa44 	bl	800c71e <USBD_CtlSendData>
 800c296:	e009      	b.n	800c2ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f9ce 	bl	800c63c <USBD_CtlError>
 800c2a0:	e004      	b.n	800c2ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fa95 	bl	800c7d2 <USBD_CtlSendStatus>
 800c2a8:	e000      	b.n	800c2ac <USBD_GetDescriptor+0x320>
    return;
 800c2aa:	bf00      	nop
  }
}
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop

0800c2b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	889b      	ldrh	r3, [r3, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d131      	bne.n	800c32a <USBD_SetAddress+0x76>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	88db      	ldrh	r3, [r3, #6]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d12d      	bne.n	800c32a <USBD_SetAddress+0x76>
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	885b      	ldrh	r3, [r3, #2]
 800c2d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c2d4:	d829      	bhi.n	800c32a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d104      	bne.n	800c2f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f9a3 	bl	800c63c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f6:	e01d      	b.n	800c334 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	7bfa      	ldrb	r2, [r7, #15]
 800c2fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 ff07 	bl	800d118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fa61 	bl	800c7d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c310:	7bfb      	ldrb	r3, [r7, #15]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d004      	beq.n	800c320 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2202      	movs	r2, #2
 800c31a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c31e:	e009      	b.n	800c334 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c328:	e004      	b.n	800c334 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f985 	bl	800c63c <USBD_CtlError>
  }
}
 800c332:	bf00      	nop
 800c334:	bf00      	nop
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	885b      	ldrh	r3, [r3, #2]
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	4b4c      	ldr	r3, [pc, #304]	; (800c484 <USBD_SetConfig+0x148>)
 800c352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c354:	4b4b      	ldr	r3, [pc, #300]	; (800c484 <USBD_SetConfig+0x148>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d905      	bls.n	800c368 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 f96c 	bl	800c63c <USBD_CtlError>
    return USBD_FAIL;
 800c364:	2303      	movs	r3, #3
 800c366:	e088      	b.n	800c47a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d002      	beq.n	800c37a <USBD_SetConfig+0x3e>
 800c374:	2b03      	cmp	r3, #3
 800c376:	d025      	beq.n	800c3c4 <USBD_SetConfig+0x88>
 800c378:	e071      	b.n	800c45e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c37a:	4b42      	ldr	r3, [pc, #264]	; (800c484 <USBD_SetConfig+0x148>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d01c      	beq.n	800c3bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c382:	4b40      	ldr	r3, [pc, #256]	; (800c484 <USBD_SetConfig+0x148>)
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c38c:	4b3d      	ldr	r3, [pc, #244]	; (800c484 <USBD_SetConfig+0x148>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	4619      	mov	r1, r3
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff f91e 	bl	800b5d4 <USBD_SetClassConfig>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d004      	beq.n	800c3ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f949 	bl	800c63c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3aa:	e065      	b.n	800c478 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fa10 	bl	800c7d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2203      	movs	r2, #3
 800c3b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c3ba:	e05d      	b.n	800c478 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fa08 	bl	800c7d2 <USBD_CtlSendStatus>
      break;
 800c3c2:	e059      	b.n	800c478 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c3c4:	4b2f      	ldr	r3, [pc, #188]	; (800c484 <USBD_SetConfig+0x148>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d112      	bne.n	800c3f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c3d4:	4b2b      	ldr	r3, [pc, #172]	; (800c484 <USBD_SetConfig+0x148>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3de:	4b29      	ldr	r3, [pc, #164]	; (800c484 <USBD_SetConfig+0x148>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff f911 	bl	800b60c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f9f1 	bl	800c7d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3f0:	e042      	b.n	800c478 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <USBD_SetConfig+0x148>)
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d02a      	beq.n	800c456 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff f8ff 	bl	800b60c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c40e:	4b1d      	ldr	r3, [pc, #116]	; (800c484 <USBD_SetConfig+0x148>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c418:	4b1a      	ldr	r3, [pc, #104]	; (800c484 <USBD_SetConfig+0x148>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff f8d8 	bl	800b5d4 <USBD_SetClassConfig>
 800c424:	4603      	mov	r3, r0
 800c426:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00f      	beq.n	800c44e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f903 	bl	800c63c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff f8e4 	bl	800b60c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2202      	movs	r2, #2
 800c448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c44c:	e014      	b.n	800c478 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f9bf 	bl	800c7d2 <USBD_CtlSendStatus>
      break;
 800c454:	e010      	b.n	800c478 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f9bb 	bl	800c7d2 <USBD_CtlSendStatus>
      break;
 800c45c:	e00c      	b.n	800c478 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f8eb 	bl	800c63c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c466:	4b07      	ldr	r3, [pc, #28]	; (800c484 <USBD_SetConfig+0x148>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff f8cd 	bl	800b60c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c472:	2303      	movs	r3, #3
 800c474:	73fb      	strb	r3, [r7, #15]
      break;
 800c476:	bf00      	nop
  }

  return ret;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	200001ac 	.word	0x200001ac

0800c488 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	88db      	ldrh	r3, [r3, #6]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d004      	beq.n	800c4a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f8cd 	bl	800c63c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c4a2:	e023      	b.n	800c4ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	dc02      	bgt.n	800c4b6 <USBD_GetConfig+0x2e>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	dc03      	bgt.n	800c4bc <USBD_GetConfig+0x34>
 800c4b4:	e015      	b.n	800c4e2 <USBD_GetConfig+0x5a>
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d00b      	beq.n	800c4d2 <USBD_GetConfig+0x4a>
 800c4ba:	e012      	b.n	800c4e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f927 	bl	800c71e <USBD_CtlSendData>
        break;
 800c4d0:	e00c      	b.n	800c4ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f91f 	bl	800c71e <USBD_CtlSendData>
        break;
 800c4e0:	e004      	b.n	800c4ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f8a9 	bl	800c63c <USBD_CtlError>
        break;
 800c4ea:	bf00      	nop
}
 800c4ec:	bf00      	nop
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c504:	b2db      	uxtb	r3, r3
 800c506:	3b01      	subs	r3, #1
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d81e      	bhi.n	800c54a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	88db      	ldrh	r3, [r3, #6]
 800c510:	2b02      	cmp	r3, #2
 800c512:	d004      	beq.n	800c51e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f890 	bl	800c63c <USBD_CtlError>
        break;
 800c51c:	e01a      	b.n	800c554 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d005      	beq.n	800c53a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	f043 0202 	orr.w	r2, r3, #2
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	330c      	adds	r3, #12
 800c53e:	2202      	movs	r2, #2
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 f8eb 	bl	800c71e <USBD_CtlSendData>
      break;
 800c548:	e004      	b.n	800c554 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f875 	bl	800c63c <USBD_CtlError>
      break;
 800c552:	bf00      	nop
  }
}
 800c554:	bf00      	nop
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	885b      	ldrh	r3, [r3, #2]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d106      	bne.n	800c57c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f92b 	bl	800c7d2 <USBD_CtlSendStatus>
  }
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c594:	b2db      	uxtb	r3, r3
 800c596:	3b01      	subs	r3, #1
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d80b      	bhi.n	800c5b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	885b      	ldrh	r3, [r3, #2]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d10c      	bne.n	800c5be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f910 	bl	800c7d2 <USBD_CtlSendStatus>
      }
      break;
 800c5b2:	e004      	b.n	800c5be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f840 	bl	800c63c <USBD_CtlError>
      break;
 800c5bc:	e000      	b.n	800c5c0 <USBD_ClrFeature+0x3c>
      break;
 800c5be:	bf00      	nop
  }
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	781a      	ldrb	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	781a      	ldrb	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f7ff fa91 	bl	800bb1a <SWAPBYTE>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3301      	adds	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3301      	adds	r3, #1
 800c60a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7ff fa84 	bl	800bb1a <SWAPBYTE>
 800c612:	4603      	mov	r3, r0
 800c614:	461a      	mov	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3301      	adds	r3, #1
 800c61e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3301      	adds	r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7ff fa77 	bl	800bb1a <SWAPBYTE>
 800c62c:	4603      	mov	r3, r0
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	80da      	strh	r2, [r3, #6]
}
 800c634:	bf00      	nop
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c646:	2180      	movs	r1, #128	; 0x80
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fcfb 	bl	800d044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c64e:	2100      	movs	r1, #0
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fcf7 	bl	800d044 <USBD_LL_StallEP>
}
 800c656:	bf00      	nop
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b086      	sub	sp, #24
 800c662:	af00      	add	r7, sp, #0
 800c664:	60f8      	str	r0, [r7, #12]
 800c666:	60b9      	str	r1, [r7, #8]
 800c668:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d036      	beq.n	800c6e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c678:	6938      	ldr	r0, [r7, #16]
 800c67a:	f000 f836 	bl	800c6ea <USBD_GetLen>
 800c67e:	4603      	mov	r3, r0
 800c680:	3301      	adds	r3, #1
 800c682:	b29b      	uxth	r3, r3
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	b29a      	uxth	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4413      	add	r3, r2
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	7812      	ldrb	r2, [r2, #0]
 800c696:	701a      	strb	r2, [r3, #0]
  idx++;
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	3301      	adds	r3, #1
 800c69c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	2203      	movs	r2, #3
 800c6a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6ae:	e013      	b.n	800c6d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	7812      	ldrb	r2, [r2, #0]
 800c6ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	613b      	str	r3, [r7, #16]
    idx++;
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1e7      	bne.n	800c6b0 <USBD_GetString+0x52>
 800c6e0:	e000      	b.n	800c6e4 <USBD_GetString+0x86>
    return;
 800c6e2:	bf00      	nop
  }
}
 800c6e4:	3718      	adds	r7, #24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c6fa:	e005      	b.n	800c708 <USBD_GetLen+0x1e>
  {
    len++;
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	3301      	adds	r3, #1
 800c700:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	3301      	adds	r3, #1
 800c706:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1f5      	bne.n	800c6fc <USBD_GetLen+0x12>
  }

  return len;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2202      	movs	r2, #2
 800c72e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	2100      	movs	r1, #0
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f000 fd06 	bl	800d156 <USBD_LL_Transmit>

  return USBD_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	2100      	movs	r1, #0
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 fcf5 	bl	800d156 <USBD_LL_Transmit>

  return USBD_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2203      	movs	r2, #3
 800c786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	2100      	movs	r1, #0
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f000 fcf9 	bl	800d198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 fce8 	bl	800d198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b082      	sub	sp, #8
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2204      	movs	r2, #4
 800c7de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fcb4 	bl	800d156 <USBD_LL_Transmit>

  return USBD_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2205      	movs	r2, #5
 800c804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c808:	2300      	movs	r3, #0
 800c80a:	2200      	movs	r2, #0
 800c80c:	2100      	movs	r1, #0
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fcc2 	bl	800d198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
	...

0800c820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c824:	2200      	movs	r2, #0
 800c826:	4912      	ldr	r1, [pc, #72]	; (800c870 <MX_USB_DEVICE_Init+0x50>)
 800c828:	4812      	ldr	r0, [pc, #72]	; (800c874 <MX_USB_DEVICE_Init+0x54>)
 800c82a:	f7fe fe65 	bl	800b4f8 <USBD_Init>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c834:	f7f4 fc66 	bl	8001104 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c838:	490f      	ldr	r1, [pc, #60]	; (800c878 <MX_USB_DEVICE_Init+0x58>)
 800c83a:	480e      	ldr	r0, [pc, #56]	; (800c874 <MX_USB_DEVICE_Init+0x54>)
 800c83c:	f7fe fe8c 	bl	800b558 <USBD_RegisterClass>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c846:	f7f4 fc5d 	bl	8001104 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c84a:	490c      	ldr	r1, [pc, #48]	; (800c87c <MX_USB_DEVICE_Init+0x5c>)
 800c84c:	4809      	ldr	r0, [pc, #36]	; (800c874 <MX_USB_DEVICE_Init+0x54>)
 800c84e:	f7fe fddd 	bl	800b40c <USBD_CDC_RegisterInterface>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c858:	f7f4 fc54 	bl	8001104 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c85c:	4805      	ldr	r0, [pc, #20]	; (800c874 <MX_USB_DEVICE_Init+0x54>)
 800c85e:	f7fe fea2 	bl	800b5a6 <USBD_Start>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c868:	f7f4 fc4c 	bl	8001104 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c86c:	bf00      	nop
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20000130 	.word	0x20000130
 800c874:	200012cc 	.word	0x200012cc
 800c878:	20000018 	.word	0x20000018
 800c87c:	2000011c 	.word	0x2000011c

0800c880 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c884:	2200      	movs	r2, #0
 800c886:	4905      	ldr	r1, [pc, #20]	; (800c89c <CDC_Init_FS+0x1c>)
 800c888:	4805      	ldr	r0, [pc, #20]	; (800c8a0 <CDC_Init_FS+0x20>)
 800c88a:	f7fe fdd4 	bl	800b436 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c88e:	4905      	ldr	r1, [pc, #20]	; (800c8a4 <CDC_Init_FS+0x24>)
 800c890:	4803      	ldr	r0, [pc, #12]	; (800c8a0 <CDC_Init_FS+0x20>)
 800c892:	f7fe fdee 	bl	800b472 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c896:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c898:	4618      	mov	r0, r3
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20001d9c 	.word	0x20001d9c
 800c8a0:	200012cc 	.word	0x200012cc
 800c8a4:	2000159c 	.word	0x2000159c

0800c8a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	6039      	str	r1, [r7, #0]
 800c8c2:	71fb      	strb	r3, [r7, #7]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b23      	cmp	r3, #35	; 0x23
 800c8cc:	d84a      	bhi.n	800c964 <CDC_Control_FS+0xac>
 800c8ce:	a201      	add	r2, pc, #4	; (adr r2, 800c8d4 <CDC_Control_FS+0x1c>)
 800c8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d4:	0800c965 	.word	0x0800c965
 800c8d8:	0800c965 	.word	0x0800c965
 800c8dc:	0800c965 	.word	0x0800c965
 800c8e0:	0800c965 	.word	0x0800c965
 800c8e4:	0800c965 	.word	0x0800c965
 800c8e8:	0800c965 	.word	0x0800c965
 800c8ec:	0800c965 	.word	0x0800c965
 800c8f0:	0800c965 	.word	0x0800c965
 800c8f4:	0800c965 	.word	0x0800c965
 800c8f8:	0800c965 	.word	0x0800c965
 800c8fc:	0800c965 	.word	0x0800c965
 800c900:	0800c965 	.word	0x0800c965
 800c904:	0800c965 	.word	0x0800c965
 800c908:	0800c965 	.word	0x0800c965
 800c90c:	0800c965 	.word	0x0800c965
 800c910:	0800c965 	.word	0x0800c965
 800c914:	0800c965 	.word	0x0800c965
 800c918:	0800c965 	.word	0x0800c965
 800c91c:	0800c965 	.word	0x0800c965
 800c920:	0800c965 	.word	0x0800c965
 800c924:	0800c965 	.word	0x0800c965
 800c928:	0800c965 	.word	0x0800c965
 800c92c:	0800c965 	.word	0x0800c965
 800c930:	0800c965 	.word	0x0800c965
 800c934:	0800c965 	.word	0x0800c965
 800c938:	0800c965 	.word	0x0800c965
 800c93c:	0800c965 	.word	0x0800c965
 800c940:	0800c965 	.word	0x0800c965
 800c944:	0800c965 	.word	0x0800c965
 800c948:	0800c965 	.word	0x0800c965
 800c94c:	0800c965 	.word	0x0800c965
 800c950:	0800c965 	.word	0x0800c965
 800c954:	0800c965 	.word	0x0800c965
 800c958:	0800c965 	.word	0x0800c965
 800c95c:	0800c965 	.word	0x0800c965
 800c960:	0800c965 	.word	0x0800c965
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c964:	bf00      	nop
  }

  return (USBD_OK);
 800c966:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	4805      	ldr	r0, [pc, #20]	; (800c998 <CDC_Receive_FS+0x24>)
 800c982:	f7fe fd76 	bl	800b472 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c986:	4804      	ldr	r0, [pc, #16]	; (800c998 <CDC_Receive_FS+0x24>)
 800c988:	f7fe fd8c 	bl	800b4a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c98c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	200012cc 	.word	0x200012cc

0800c99c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b087      	sub	sp, #28
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	371c      	adds	r7, #28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
	...

0800c9c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2212      	movs	r2, #18
 800c9d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c9d2:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	20000150 	.word	0x20000150

0800c9e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	6039      	str	r1, [r7, #0]
 800c9ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2204      	movs	r2, #4
 800c9f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9f6:	4b03      	ldr	r3, [pc, #12]	; (800ca04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	20000170 	.word	0x20000170

0800ca08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d105      	bne.n	800ca26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	4907      	ldr	r1, [pc, #28]	; (800ca3c <USBD_FS_ProductStrDescriptor+0x34>)
 800ca1e:	4808      	ldr	r0, [pc, #32]	; (800ca40 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca20:	f7ff fe1d 	bl	800c65e <USBD_GetString>
 800ca24:	e004      	b.n	800ca30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	4904      	ldr	r1, [pc, #16]	; (800ca3c <USBD_FS_ProductStrDescriptor+0x34>)
 800ca2a:	4805      	ldr	r0, [pc, #20]	; (800ca40 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca2c:	f7ff fe17 	bl	800c65e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca30:	4b02      	ldr	r3, [pc, #8]	; (800ca3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	2000259c 	.word	0x2000259c
 800ca40:	0800d394 	.word	0x0800d394

0800ca44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	6039      	str	r1, [r7, #0]
 800ca4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	4904      	ldr	r1, [pc, #16]	; (800ca64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca54:	4804      	ldr	r0, [pc, #16]	; (800ca68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca56:	f7ff fe02 	bl	800c65e <USBD_GetString>
  return USBD_StrDesc;
 800ca5a:	4b02      	ldr	r3, [pc, #8]	; (800ca64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	2000259c 	.word	0x2000259c
 800ca68:	0800d3ac 	.word	0x0800d3ac

0800ca6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	221a      	movs	r2, #26
 800ca7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca7e:	f000 f855 	bl	800cb2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca82:	4b02      	ldr	r3, [pc, #8]	; (800ca8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	20000174 	.word	0x20000174

0800ca90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d105      	bne.n	800caae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	4907      	ldr	r1, [pc, #28]	; (800cac4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800caa6:	4808      	ldr	r0, [pc, #32]	; (800cac8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800caa8:	f7ff fdd9 	bl	800c65e <USBD_GetString>
 800caac:	e004      	b.n	800cab8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	4904      	ldr	r1, [pc, #16]	; (800cac4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cab2:	4805      	ldr	r0, [pc, #20]	; (800cac8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cab4:	f7ff fdd3 	bl	800c65e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cab8:	4b02      	ldr	r3, [pc, #8]	; (800cac4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	2000259c 	.word	0x2000259c
 800cac8:	0800d3c0 	.word	0x0800d3c0

0800cacc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	6039      	str	r1, [r7, #0]
 800cad6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d105      	bne.n	800caea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	4907      	ldr	r1, [pc, #28]	; (800cb00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cae2:	4808      	ldr	r0, [pc, #32]	; (800cb04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cae4:	f7ff fdbb 	bl	800c65e <USBD_GetString>
 800cae8:	e004      	b.n	800caf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	4904      	ldr	r1, [pc, #16]	; (800cb00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caee:	4805      	ldr	r0, [pc, #20]	; (800cb04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800caf0:	f7ff fdb5 	bl	800c65e <USBD_GetString>
  }
  return USBD_StrDesc;
 800caf4:	4b02      	ldr	r3, [pc, #8]	; (800cb00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3708      	adds	r7, #8
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	2000259c 	.word	0x2000259c
 800cb04:	0800d3cc 	.word	0x0800d3cc

0800cb08 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	6039      	str	r1, [r7, #0]
 800cb12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	220c      	movs	r2, #12
 800cb18:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cb1a:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	20000164 	.word	0x20000164

0800cb2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb32:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <Get_SerialNum+0x44>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb38:	4b0e      	ldr	r3, [pc, #56]	; (800cb74 <Get_SerialNum+0x48>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	; (800cb78 <Get_SerialNum+0x4c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4413      	add	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb52:	2208      	movs	r2, #8
 800cb54:	4909      	ldr	r1, [pc, #36]	; (800cb7c <Get_SerialNum+0x50>)
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 f814 	bl	800cb84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb5c:	2204      	movs	r2, #4
 800cb5e:	4908      	ldr	r1, [pc, #32]	; (800cb80 <Get_SerialNum+0x54>)
 800cb60:	68b8      	ldr	r0, [r7, #8]
 800cb62:	f000 f80f 	bl	800cb84 <IntToUnicode>
  }
}
 800cb66:	bf00      	nop
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	1fff7a10 	.word	0x1fff7a10
 800cb74:	1fff7a14 	.word	0x1fff7a14
 800cb78:	1fff7a18 	.word	0x1fff7a18
 800cb7c:	20000176 	.word	0x20000176
 800cb80:	20000186 	.word	0x20000186

0800cb84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb96:	2300      	movs	r3, #0
 800cb98:	75fb      	strb	r3, [r7, #23]
 800cb9a:	e027      	b.n	800cbec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	0f1b      	lsrs	r3, r3, #28
 800cba0:	2b09      	cmp	r3, #9
 800cba2:	d80b      	bhi.n	800cbbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	0f1b      	lsrs	r3, r3, #28
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	4619      	mov	r1, r3
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	440b      	add	r3, r1
 800cbb4:	3230      	adds	r2, #48	; 0x30
 800cbb6:	b2d2      	uxtb	r2, r2
 800cbb8:	701a      	strb	r2, [r3, #0]
 800cbba:	e00a      	b.n	800cbd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	0f1b      	lsrs	r3, r3, #28
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	440b      	add	r3, r1
 800cbcc:	3237      	adds	r2, #55	; 0x37
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	011b      	lsls	r3, r3, #4
 800cbd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	3301      	adds	r3, #1
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	75fb      	strb	r3, [r7, #23]
 800cbec:	7dfa      	ldrb	r2, [r7, #23]
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d3d3      	bcc.n	800cb9c <IntToUnicode+0x18>
  }
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
	...

0800cc04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b0a0      	sub	sp, #128	; 0x80
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cc10:	2200      	movs	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	605a      	str	r2, [r3, #4]
 800cc16:	609a      	str	r2, [r3, #8]
 800cc18:	60da      	str	r2, [r3, #12]
 800cc1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc1c:	f107 0310 	add.w	r3, r7, #16
 800cc20:	225c      	movs	r2, #92	; 0x5c
 800cc22:	2100      	movs	r1, #0
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fba1 	bl	800d36c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc32:	d161      	bne.n	800ccf8 <HAL_PCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cc34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 800cc3a:	2304      	movs	r3, #4
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800cc3e:	2360      	movs	r3, #96	; 0x60
 800cc40:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800cc42:	2302      	movs	r3, #2
 800cc44:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800cc46:	2304      	movs	r3, #4
 800cc48:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800cc4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc52:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cc54:	f107 0310 	add.w	r3, r7, #16
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fa fea5 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800cc64:	f7f4 fa4e 	bl	8001104 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc68:	2300      	movs	r3, #0
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	4b24      	ldr	r3, [pc, #144]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc70:	4a23      	ldr	r2, [pc, #140]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800cc72:	f043 0301 	orr.w	r3, r3, #1
 800cc76:	6313      	str	r3, [r2, #48]	; 0x30
 800cc78:	4b21      	ldr	r3, [pc, #132]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	60fb      	str	r3, [r7, #12]
 800cc82:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cc84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cc96:	4619      	mov	r1, r3
 800cc98:	481a      	ldr	r0, [pc, #104]	; (800cd04 <HAL_PCD_MspInit+0x100>)
 800cc9a:	f7f7 fc99 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cca2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cca4:	2302      	movs	r3, #2
 800cca6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccac:	2303      	movs	r3, #3
 800ccae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ccb0:	230a      	movs	r3, #10
 800ccb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4812      	ldr	r0, [pc, #72]	; (800cd04 <HAL_PCD_MspInit+0x100>)
 800ccbc:	f7f7 fc88 	bl	80045d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800ccc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc4:	4a0e      	ldr	r2, [pc, #56]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800ccc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccca:	6353      	str	r3, [r2, #52]	; 0x34
 800cccc:	2300      	movs	r3, #0
 800ccce:	60bb      	str	r3, [r7, #8]
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800ccd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccd4:	4a0a      	ldr	r2, [pc, #40]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800ccd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ccda:	6453      	str	r3, [r2, #68]	; 0x44
 800ccdc:	4b08      	ldr	r3, [pc, #32]	; (800cd00 <HAL_PCD_MspInit+0xfc>)
 800ccde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cce4:	60bb      	str	r3, [r7, #8]
 800cce6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cce8:	2200      	movs	r2, #0
 800ccea:	2100      	movs	r1, #0
 800ccec:	2043      	movs	r0, #67	; 0x43
 800ccee:	f7f7 f91e 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ccf2:	2043      	movs	r0, #67	; 0x43
 800ccf4:	f7f7 f937 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ccf8:	bf00      	nop
 800ccfa:	3780      	adds	r7, #128	; 0x80
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	40023800 	.word	0x40023800
 800cd04:	40020000 	.word	0x40020000

0800cd08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	f7fe fc8c 	bl	800b63c <USBD_LL_SetupStage>
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cd3e:	78fa      	ldrb	r2, [r7, #3]
 800cd40:	6879      	ldr	r1, [r7, #4]
 800cd42:	4613      	mov	r3, r2
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	1a9b      	subs	r3, r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	440b      	add	r3, r1
 800cd4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	4619      	mov	r1, r3
 800cd56:	f7fe fcc6 	bl	800b6e6 <USBD_LL_DataOutStage>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cd74:	78fa      	ldrb	r2, [r7, #3]
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	00db      	lsls	r3, r3, #3
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	440b      	add	r3, r1
 800cd82:	3348      	adds	r3, #72	; 0x48
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	78fb      	ldrb	r3, [r7, #3]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7fe fd0f 	bl	800b7ac <USBD_LL_DataInStage>
}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe fe23 	bl	800b9f0 <USBD_LL_SOF>
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d102      	bne.n	800cdcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
 800cdca:	e008      	b.n	800cdde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d102      	bne.n	800cdda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	73fb      	strb	r3, [r7, #15]
 800cdd8:	e001      	b.n	800cdde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cdda:	f7f4 f993 	bl	8001104 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cde4:	7bfa      	ldrb	r2, [r7, #15]
 800cde6:	4611      	mov	r1, r2
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe fdc3 	bl	800b974 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe fd6f 	bl	800b8d8 <USBD_LL_Reset>
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe fdbe 	bl	800b994 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6812      	ldr	r2, [r2, #0]
 800ce26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce2a:	f043 0301 	orr.w	r3, r3, #1
 800ce2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6a1b      	ldr	r3, [r3, #32]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce38:	4b04      	ldr	r3, [pc, #16]	; (800ce4c <HAL_PCD_SuspendCallback+0x48>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4a03      	ldr	r2, [pc, #12]	; (800ce4c <HAL_PCD_SuspendCallback+0x48>)
 800ce3e:	f043 0306 	orr.w	r3, r3, #6
 800ce42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	e000ed00 	.word	0xe000ed00

0800ce50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe fdae 	bl	800b9c0 <USBD_LL_Resume>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce7e:	78fa      	ldrb	r2, [r7, #3]
 800ce80:	4611      	mov	r1, r2
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fe fdfc 	bl	800ba80 <USBD_LL_IsoOUTIncomplete>
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cea2:	78fa      	ldrb	r2, [r7, #3]
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe fdc4 	bl	800ba34 <USBD_LL_IsoINIncomplete>
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fe02 	bl	800bacc <USBD_LL_DevConnected>
}
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fdff 	bl	800bae2 <USBD_LL_DevDisconnected>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d13c      	bne.n	800cf76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cefc:	4a20      	ldr	r2, [pc, #128]	; (800cf80 <USBD_LL_Init+0x94>)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a1e      	ldr	r2, [pc, #120]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf0c:	4b1c      	ldr	r3, [pc, #112]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cf14:	4b1a      	ldr	r3, [pc, #104]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf16:	2206      	movs	r2, #6
 800cf18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf1a:	4b19      	ldr	r3, [pc, #100]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf20:	4b17      	ldr	r3, [pc, #92]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf26:	4b16      	ldr	r3, [pc, #88]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf28:	2202      	movs	r2, #2
 800cf2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf2c:	4b14      	ldr	r3, [pc, #80]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cf32:	4b13      	ldr	r3, [pc, #76]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cf38:	4b11      	ldr	r3, [pc, #68]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cf3e:	4b10      	ldr	r3, [pc, #64]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf40:	2201      	movs	r2, #1
 800cf42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cf4a:	480d      	ldr	r0, [pc, #52]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf4c:	f7f9 fa07 	bl	800635e <HAL_PCD_Init>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cf56:	f7f4 f8d5 	bl	8001104 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cf5a:	2180      	movs	r1, #128	; 0x80
 800cf5c:	4808      	ldr	r0, [pc, #32]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf5e:	f7fa fb98 	bl	8007692 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cf62:	2240      	movs	r2, #64	; 0x40
 800cf64:	2100      	movs	r1, #0
 800cf66:	4806      	ldr	r0, [pc, #24]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf68:	f7fa fb4c 	bl	8007604 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf6c:	2280      	movs	r2, #128	; 0x80
 800cf6e:	2101      	movs	r1, #1
 800cf70:	4803      	ldr	r0, [pc, #12]	; (800cf80 <USBD_LL_Init+0x94>)
 800cf72:	f7fa fb47 	bl	8007604 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	2000279c 	.word	0x2000279c

0800cf84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7f9 fb03 	bl	80065a6 <HAL_PCD_Start>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f990 	bl	800d2cc <USBD_Get_USB_Status>
 800cfac:	4603      	mov	r3, r0
 800cfae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	4608      	mov	r0, r1
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	4603      	mov	r3, r0
 800cfca:	70fb      	strb	r3, [r7, #3]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70bb      	strb	r3, [r7, #2]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cfe2:	78bb      	ldrb	r3, [r7, #2]
 800cfe4:	883a      	ldrh	r2, [r7, #0]
 800cfe6:	78f9      	ldrb	r1, [r7, #3]
 800cfe8:	f7f9 ff14 	bl	8006e14 <HAL_PCD_EP_Open>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff0:	7bfb      	ldrb	r3, [r7, #15]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 f96a 	bl	800d2cc <USBD_Get_USB_Status>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	460b      	mov	r3, r1
 800d010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d020:	78fa      	ldrb	r2, [r7, #3]
 800d022:	4611      	mov	r1, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f7f9 ff5d 	bl	8006ee4 <HAL_PCD_EP_Close>
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	4618      	mov	r0, r3
 800d032:	f000 f94b 	bl	800d2cc <USBD_Get_USB_Status>
 800d036:	4603      	mov	r3, r0
 800d038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d05e:	78fa      	ldrb	r2, [r7, #3]
 800d060:	4611      	mov	r1, r2
 800d062:	4618      	mov	r0, r3
 800d064:	f7fa f835 	bl	80070d2 <HAL_PCD_EP_SetStall>
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 f92c 	bl	800d2cc <USBD_Get_USB_Status>
 800d074:	4603      	mov	r3, r0
 800d076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d078:	7bbb      	ldrb	r3, [r7, #14]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	460b      	mov	r3, r1
 800d08c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d09c:	78fa      	ldrb	r2, [r7, #3]
 800d09e:	4611      	mov	r1, r2
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fa f87a 	bl	800719a <HAL_PCD_EP_ClrStall>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 f90d 	bl	800d2cc <USBD_Get_USB_Status>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d0d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d0d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da0b      	bge.n	800d0f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0e2:	68f9      	ldr	r1, [r7, #12]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	1a9b      	subs	r3, r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	440b      	add	r3, r1
 800d0ee:	333e      	adds	r3, #62	; 0x3e
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	e00b      	b.n	800d10c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0fa:	68f9      	ldr	r1, [r7, #12]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	1a9b      	subs	r3, r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	440b      	add	r3, r1
 800d106:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d10a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d132:	78fa      	ldrb	r2, [r7, #3]
 800d134:	4611      	mov	r1, r2
 800d136:	4618      	mov	r0, r3
 800d138:	f7f9 fe47 	bl	8006dca <HAL_PCD_SetAddress>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d140:	7bfb      	ldrb	r3, [r7, #15]
 800d142:	4618      	mov	r0, r3
 800d144:	f000 f8c2 	bl	800d2cc <USBD_Get_USB_Status>
 800d148:	4603      	mov	r3, r0
 800d14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b086      	sub	sp, #24
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	60f8      	str	r0, [r7, #12]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	603b      	str	r3, [r7, #0]
 800d162:	460b      	mov	r3, r1
 800d164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d174:	7af9      	ldrb	r1, [r7, #11]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	f7f9 ff60 	bl	800703e <HAL_PCD_EP_Transmit>
 800d17e:	4603      	mov	r3, r0
 800d180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f8a1 	bl	800d2cc <USBD_Get_USB_Status>
 800d18a:	4603      	mov	r3, r0
 800d18c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d18e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d1b6:	7af9      	ldrb	r1, [r7, #11]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	f7f9 fedc 	bl	8006f78 <HAL_PCD_EP_Receive>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 f880 	bl	800d2cc <USBD_Get_USB_Status>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3718      	adds	r7, #24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f9 ff0c 	bl	800700e <HAL_PCD_EP_GetRxCount>
 800d1f6:	4603      	mov	r3, r0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d20c:	78fb      	ldrb	r3, [r7, #3]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <HAL_PCDEx_LPM_Callback+0x18>
 800d212:	2b01      	cmp	r3, #1
 800d214:	d01f      	beq.n	800d256 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d216:	e03b      	b.n	800d290 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6a1b      	ldr	r3, [r3, #32]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d007      	beq.n	800d230 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d220:	f7f3 f9da 	bl	80005d8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d224:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <HAL_PCDEx_LPM_Callback+0x98>)
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	4a1b      	ldr	r2, [pc, #108]	; (800d298 <HAL_PCDEx_LPM_Callback+0x98>)
 800d22a:	f023 0306 	bic.w	r3, r3, #6
 800d22e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	6812      	ldr	r2, [r2, #0]
 800d23e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d242:	f023 0301 	bic.w	r3, r3, #1
 800d246:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fbb6 	bl	800b9c0 <USBD_LL_Resume>
    break;
 800d254:	e01c      	b.n	800d290 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d268:	f043 0301 	orr.w	r3, r3, #1
 800d26c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d274:	4618      	mov	r0, r3
 800d276:	f7fe fb8d 	bl	800b994 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a1b      	ldr	r3, [r3, #32]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d282:	4b05      	ldr	r3, [pc, #20]	; (800d298 <HAL_PCDEx_LPM_Callback+0x98>)
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	4a04      	ldr	r2, [pc, #16]	; (800d298 <HAL_PCDEx_LPM_Callback+0x98>)
 800d288:	f043 0306 	orr.w	r3, r3, #6
 800d28c:	6113      	str	r3, [r2, #16]
    break;
 800d28e:	bf00      	nop
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	e000ed00 	.word	0xe000ed00

0800d29c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2a4:	4b03      	ldr	r3, [pc, #12]	; (800d2b4 <USBD_static_malloc+0x18>)
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	200001b0 	.word	0x200001b0

0800d2b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]

}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2da:	79fb      	ldrb	r3, [r7, #7]
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	d817      	bhi.n	800d310 <USBD_Get_USB_Status+0x44>
 800d2e0:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <USBD_Get_USB_Status+0x1c>)
 800d2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e6:	bf00      	nop
 800d2e8:	0800d2f9 	.word	0x0800d2f9
 800d2ec:	0800d2ff 	.word	0x0800d2ff
 800d2f0:	0800d305 	.word	0x0800d305
 800d2f4:	0800d30b 	.word	0x0800d30b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d2fc:	e00b      	b.n	800d316 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2fe:	2303      	movs	r3, #3
 800d300:	73fb      	strb	r3, [r7, #15]
    break;
 800d302:	e008      	b.n	800d316 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d304:	2301      	movs	r3, #1
 800d306:	73fb      	strb	r3, [r7, #15]
    break;
 800d308:	e005      	b.n	800d316 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d30a:	2303      	movs	r3, #3
 800d30c:	73fb      	strb	r3, [r7, #15]
    break;
 800d30e:	e002      	b.n	800d316 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d310:	2303      	movs	r3, #3
 800d312:	73fb      	strb	r3, [r7, #15]
    break;
 800d314:	bf00      	nop
  }
  return usb_status;
 800d316:	7bfb      	ldrb	r3, [r7, #15]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <__libc_init_array>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	4d0d      	ldr	r5, [pc, #52]	; (800d35c <__libc_init_array+0x38>)
 800d328:	4c0d      	ldr	r4, [pc, #52]	; (800d360 <__libc_init_array+0x3c>)
 800d32a:	1b64      	subs	r4, r4, r5
 800d32c:	10a4      	asrs	r4, r4, #2
 800d32e:	2600      	movs	r6, #0
 800d330:	42a6      	cmp	r6, r4
 800d332:	d109      	bne.n	800d348 <__libc_init_array+0x24>
 800d334:	4d0b      	ldr	r5, [pc, #44]	; (800d364 <__libc_init_array+0x40>)
 800d336:	4c0c      	ldr	r4, [pc, #48]	; (800d368 <__libc_init_array+0x44>)
 800d338:	f000 f820 	bl	800d37c <_init>
 800d33c:	1b64      	subs	r4, r4, r5
 800d33e:	10a4      	asrs	r4, r4, #2
 800d340:	2600      	movs	r6, #0
 800d342:	42a6      	cmp	r6, r4
 800d344:	d105      	bne.n	800d352 <__libc_init_array+0x2e>
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34c:	4798      	blx	r3
 800d34e:	3601      	adds	r6, #1
 800d350:	e7ee      	b.n	800d330 <__libc_init_array+0xc>
 800d352:	f855 3b04 	ldr.w	r3, [r5], #4
 800d356:	4798      	blx	r3
 800d358:	3601      	adds	r6, #1
 800d35a:	e7f2      	b.n	800d342 <__libc_init_array+0x1e>
 800d35c:	0800d404 	.word	0x0800d404
 800d360:	0800d404 	.word	0x0800d404
 800d364:	0800d404 	.word	0x0800d404
 800d368:	0800d408 	.word	0x0800d408

0800d36c <memset>:
 800d36c:	4402      	add	r2, r0
 800d36e:	4603      	mov	r3, r0
 800d370:	4293      	cmp	r3, r2
 800d372:	d100      	bne.n	800d376 <memset+0xa>
 800d374:	4770      	bx	lr
 800d376:	f803 1b01 	strb.w	r1, [r3], #1
 800d37a:	e7f9      	b.n	800d370 <memset+0x4>

0800d37c <_init>:
 800d37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37e:	bf00      	nop
 800d380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d382:	bc08      	pop	{r3}
 800d384:	469e      	mov	lr, r3
 800d386:	4770      	bx	lr

0800d388 <_fini>:
 800d388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38a:	bf00      	nop
 800d38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d38e:	bc08      	pop	{r3}
 800d390:	469e      	mov	lr, r3
 800d392:	4770      	bx	lr

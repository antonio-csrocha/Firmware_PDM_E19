
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e944  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800eb08  0800eb08  0001eb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb70  0800eb70  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb70  0800eb70  0001eb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb78  0800eb78  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb78  0800eb78  0001eb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb7c  0800eb7c  0001eb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800eb80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002954  200001e4  0800ed64  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002b38  0800ed64  00022b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e116  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f6  00000000  00000000  0004e32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00053720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000550a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029169  00000000  00000000  00056810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024054  00000000  00000000  0007f979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6741  00000000  00000000  000a39cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a10e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  0018a164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001e4 	.word	0x200001e4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800eaf0 	.word	0x0800eaf0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e8 	.word	0x200001e8
 8000200:	0800eaf0 	.word	0x0800eaf0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <AT24Cxx_Write_DMA>:
{
	return HAL_I2C_Mem_Write(hi2c, 0xA0 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
}

HAL_StatusTypeDef AT24Cxx_Write_DMA(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	461a      	mov	r2, r3
 8000508:	460b      	mov	r3, r1
 800050a:	817b      	strh	r3, [r7, #10]
 800050c:	4613      	mov	r3, r2
 800050e:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write_DMA(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size);
 8000510:	897b      	ldrh	r3, [r7, #10]
 8000512:	09db      	lsrs	r3, r3, #7
 8000514:	b29b      	uxth	r3, r3
 8000516:	b21b      	sxth	r3, r3
 8000518:	f003 030e 	and.w	r3, r3, #14
 800051c:	b21b      	sxth	r3, r3
 800051e:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 8000522:	b21b      	sxth	r3, r3
 8000524:	b299      	uxth	r1, r3
 8000526:	897a      	ldrh	r2, [r7, #10]
 8000528:	893b      	ldrh	r3, [r7, #8]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f006 fc5c 	bl	8006df0 <HAL_I2C_Mem_Write_DMA>
 8000538:	4603      	mov	r3, r0
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f003 ff2c 	bl	80043a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f89a 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 fcc8 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 fc9e 	bl	8000e94 <MX_DMA_Init>
  MX_ADC1_Init();
 8000558:	f000 f906 	bl	8000768 <MX_ADC1_Init>
  MX_ADC2_Init();
 800055c:	f000 f990 	bl	8000880 <MX_ADC2_Init>
  MX_TIM7_Init();
 8000560:	f000 fbe0 	bl	8000d24 <MX_TIM7_Init>
  MX_CAN1_Init();
 8000564:	f000 fa16 	bl	8000994 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000568:	f000 fa8c 	bl	8000a84 <MX_TIM1_Init>
  MX_TIM2_Init();
 800056c:	f000 fb28 	bl	8000bc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000570:	f000 fb7e 	bl	8000c70 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000574:	f000 fc0a 	bl	8000d8c <MX_TIM8_Init>
  MX_I2C1_Init();
 8000578:	f000 fa56 	bl	8000a28 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800057c:	f00d fc1c 	bl	800ddb8 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000580:	f000 fa3e 	bl	8000a00 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 8000584:	4932      	ldr	r1, [pc, #200]	; (8000650 <main+0x10c>)
 8000586:	4833      	ldr	r0, [pc, #204]	; (8000654 <main+0x110>)
 8000588:	f001 fee4 	bl	8002354 <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(Accumulator_Delay >= READING_DELAY)
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <main+0x114>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b02      	cmp	r3, #2
 8000592:	dd02      	ble.n	800059a <main+0x56>
	  {
		  PDM_Read_Data(&Data_Conversion);
 8000594:	4831      	ldr	r0, [pc, #196]	; (800065c <main+0x118>)
 8000596:	f003 f8bf 	bl	8003718 <PDM_Read_Data>
	  }

	  //check if output currents are below thresholds and timeouts
	  if(Accumulator_Output_Check >= OUTPUT_FUSE_FREQ)
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <main+0x11c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b18      	cmp	r3, #24
 80005a0:	d901      	bls.n	80005a6 <main+0x62>
	  {
		  PDM_Output_Fuse();
 80005a2:	f002 f9ed 	bl	8002980 <PDM_Output_Fuse>
	  }

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_10Hz >= DATA_FREQ_10HZ)
 80005a6:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <main+0x120>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ae:	d306      	bcc.n	80005be <main+0x7a>
	  {
		  Accumulator_Msg_10Hz = 0;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <main+0x120>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 80005b6:	2101      	movs	r1, #1
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <main+0x110>)
 80005ba:	f000 fecb 	bl	8001354 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_25Hz >= DATA_FREQ_25HZ)
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <main+0x124>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005c6:	d306      	bcc.n	80005d6 <main+0x92>
	  {
		  Accumulator_Msg_25Hz = 0;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <main+0x124>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 80005ce:	2102      	movs	r1, #2
 80005d0:	4820      	ldr	r0, [pc, #128]	; (8000654 <main+0x110>)
 80005d2:	f000 febf 	bl	8001354 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_50Hz >= DATA_FREQ_50HZ)
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <main+0x128>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2bc7      	cmp	r3, #199	; 0xc7
 80005dc:	d906      	bls.n	80005ec <main+0xa8>
	  {
		  Accumulator_Msg_50Hz = 0;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <main+0x128>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 80005e4:	2103      	movs	r1, #3
 80005e6:	481b      	ldr	r0, [pc, #108]	; (8000654 <main+0x110>)
 80005e8:	f000 feb4 	bl	8001354 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_80Hz >= DATA_FREQ_80HZ)
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <main+0x12c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b7c      	cmp	r3, #124	; 0x7c
 80005f2:	d906      	bls.n	8000602 <main+0xbe>
	  {
		  Accumulator_Msg_80Hz = 0;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <main+0x12c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 80005fa:	2104      	movs	r1, #4
 80005fc:	4815      	ldr	r0, [pc, #84]	; (8000654 <main+0x110>)
 80005fe:	f000 fea9 	bl	8001354 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(Accumulator_Msg_100Hz >= DATA_FREQ_100HZ)
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <main+0x130>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b63      	cmp	r3, #99	; 0x63
 8000608:	d906      	bls.n	8000618 <main+0xd4>
	  {
		  Accumulator_Msg_100Hz = 0;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <main+0x130>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 8000610:	2105      	movs	r1, #5
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <main+0x110>)
 8000614:	f000 fe9e 	bl	8001354 <PDM_CAN_Transmit_Data>
	  }

	  //Checks if USB accumulator is above time threshold
	  if((Accumulator_USB_Data >= DATA_FREQ_USB) && (USB_Connected_Flag == 1))
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <main+0x134>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000620:	d3b4      	bcc.n	800058c <main+0x48>
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0x138>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1b0      	bne.n	800058c <main+0x48>
	  {
		  Accumulator_USB_Data = 0;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <main+0x134>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]

		  //If connected, send data channels via USB
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <main+0x13c>)
 8000636:	f006 fa27 	bl	8006a88 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d102      	bne.n	8000646 <main+0x102>
			  PDM_USB_Transmit_Data();
 8000640:	f001 ff26 	bl	8002490 <PDM_USB_Transmit_Data>
 8000644:	e7a2      	b.n	800058c <main+0x48>
		  //If disconnected reset flag
		  else
			  USB_Connected_Flag = 0;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <main+0x138>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
	  if(Accumulator_Delay >= READING_DELAY)
 800064c:	e79e      	b.n	800058c <main+0x48>
 800064e:	bf00      	nop
 8000650:	200004d0 	.word	0x200004d0
 8000654:	20001190 	.word	0x20001190
 8000658:	2000112c 	.word	0x2000112c
 800065c:	20000e1c 	.word	0x20000e1c
 8000660:	2000052c 	.word	0x2000052c
 8000664:	200010a4 	.word	0x200010a4
 8000668:	20000e20 	.word	0x20000e20
 800066c:	20000ef8 	.word	0x20000ef8
 8000670:	20000f84 	.word	0x20000f84
 8000674:	20000f1c 	.word	0x20000f1c
 8000678:	200011b8 	.word	0x200011b8
 800067c:	20000f80 	.word	0x20000f80
 8000680:	40020000 	.word	0x40020000

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e f95c 	bl	800e950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xdc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <SystemClock_Config+0xe0>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f8:	23b4      	movs	r3, #180	; 0xb4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f008 ffff 	bl	8009710 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 fd9a 	bl	8001250 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f008 f9c6 	bl	8008aac <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 fd93 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f008 f9ff 	bl	8008b4c <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000754:	f000 fd7c 	bl	8001250 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077a:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <MX_ADC1_Init+0x108>)
 800077c:	4a3d      	ldr	r2, [pc, #244]	; (8000874 <MX_ADC1_Init+0x10c>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000780:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <MX_ADC1_Init+0x108>)
 8000782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	4b39      	ldr	r3, [pc, #228]	; (8000870 <MX_ADC1_Init+0x108>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800078e:	4b38      	ldr	r3, [pc, #224]	; (8000870 <MX_ADC1_Init+0x108>)
 8000790:	2201      	movs	r2, #1
 8000792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000794:	4b36      	ldr	r3, [pc, #216]	; (8000870 <MX_ADC1_Init+0x108>)
 8000796:	2201      	movs	r2, #1
 8000798:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079a:	4b35      	ldr	r3, [pc, #212]	; (8000870 <MX_ADC1_Init+0x108>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <MX_ADC1_Init+0x108>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <MX_ADC1_Init+0x108>)
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <MX_ADC1_Init+0x110>)
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <MX_ADC1_Init+0x108>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80007b4:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <MX_ADC1_Init+0x108>)
 80007b6:	2205      	movs	r2, #5
 80007b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <MX_ADC1_Init+0x108>)
 80007bc:	2201      	movs	r2, #1
 80007be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <MX_ADC1_Init+0x108>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c8:	4829      	ldr	r0, [pc, #164]	; (8000870 <MX_ADC1_Init+0x108>)
 80007ca:	f003 fe81 	bl	80044d0 <HAL_ADC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d4:	f000 fd3c 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d8:	2305      	movs	r3, #5
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007e0:	2307      	movs	r3, #7
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_ADC1_Init+0x108>)
 80007ea:	f003 ffe3 	bl	80047b4 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 fd2c 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007f8:	2306      	movs	r3, #6
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_ADC1_Init+0x108>)
 8000806:	f003 ffd5 	bl	80047b4 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000810:	f000 fd1e 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000814:	2307      	movs	r3, #7
 8000816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_ADC1_Init+0x108>)
 8000822:	f003 ffc7 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800082c:	f000 fd10 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000830:	230e      	movs	r3, #14
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ADC1_Init+0x108>)
 800083e:	f003 ffb9 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000848:	f000 fd02 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_ADC1_Init+0x114>)
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000850:	2305      	movs	r3, #5
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_ADC1_Init+0x108>)
 800085a:	f003 ffab 	bl	80047b4 <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000864:	f000 fcf4 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000e3c 	.word	0x20000e3c
 8000874:	40012000 	.word	0x40012000
 8000878:	0f000001 	.word	0x0f000001
 800087c:	10000012 	.word	0x10000012

08000880 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000892:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <MX_ADC2_Init+0x108>)
 8000894:	4a3d      	ldr	r2, [pc, #244]	; (800098c <MX_ADC2_Init+0x10c>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <MX_ADC2_Init+0x108>)
 800089a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800089e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b39      	ldr	r3, [pc, #228]	; (8000988 <MX_ADC2_Init+0x108>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <MX_ADC2_Init+0x108>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <MX_ADC2_Init+0x108>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_ADC2_Init+0x108>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_ADC2_Init+0x108>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_ADC2_Init+0x108>)
 80008c2:	4a33      	ldr	r2, [pc, #204]	; (8000990 <MX_ADC2_Init+0x110>)
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_ADC2_Init+0x108>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_ADC2_Init+0x108>)
 80008ce:	2205      	movs	r2, #5
 80008d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_ADC2_Init+0x108>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_ADC2_Init+0x108>)
 80008dc:	2201      	movs	r2, #1
 80008de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_ADC2_Init+0x108>)
 80008e2:	f003 fdf5 	bl	80044d0 <HAL_ADC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008ec:	f000 fcb0 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008f8:	2307      	movs	r3, #7
 80008fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_ADC2_Init+0x108>)
 8000902:	f003 ff57 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 fca0 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000910:	2301      	movs	r3, #1
 8000912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	481a      	ldr	r0, [pc, #104]	; (8000988 <MX_ADC2_Init+0x108>)
 800091e:	f003 ff49 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000928:	f000 fc92 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800092c:	2302      	movs	r3, #2
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000930:	2303      	movs	r3, #3
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_ADC2_Init+0x108>)
 800093a:	f003 ff3b 	bl	80047b4 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000944:	f000 fc84 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000948:	2303      	movs	r3, #3
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_ADC2_Init+0x108>)
 8000956:	f003 ff2d 	bl	80047b4 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000960:	f000 fc76 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000964:	2304      	movs	r3, #4
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000968:	2305      	movs	r3, #5
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_ADC2_Init+0x108>)
 8000972:	f003 ff1f 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800097c:	f000 fc68 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000488 	.word	0x20000488
 800098c:	40012100 	.word	0x40012100
 8000990:	0f000001 	.word	0x0f000001

08000994 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_CAN1_Init+0x64>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_CAN1_Init+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009a0:	2205      	movs	r2, #5
 80009a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ac:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009b0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009b4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80009b8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009e6:	f004 f995 	bl	8004d14 <HAL_CAN_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009f0:	f000 fc2e 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20001190 	.word	0x20001190
 80009fc:	40006400 	.word	0x40006400

08000a00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_CRC_Init+0x20>)
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <MX_CRC_Init+0x24>)
 8000a08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_CRC_Init+0x20>)
 8000a0c:	f005 f9c7 	bl	8005d9e <HAL_CRC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a16:	f000 fc1b 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000524 	.word	0x20000524
 8000a24:	40023000 	.word	0x40023000

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f006 f87f 	bl	8006b68 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 fbee 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200004d0 	.word	0x200004d0
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	00061a80 	.word	0x00061a80

08000a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	; 0x58
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2220      	movs	r2, #32
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f00d ff47 	bl	800e950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000ac4:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17;
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000aca:	2211      	movs	r2, #17
 8000acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aee:	4832      	ldr	r0, [pc, #200]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000af0:	f009 f8ac 	bl	8009c4c <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000afa:	f000 fba9 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b08:	4619      	mov	r1, r3
 8000b0a:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000b0c:	f009 fc6e 	bl	800a3ec <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 fb9b 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b1a:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000b1c:	f009 f985 	bl	8009e2a <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b26:	f000 fb93 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b36:	4619      	mov	r1, r3
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000b3a:	f00a f857 	bl	800abec <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b44:	f000 fb84 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b48:	2360      	movs	r3, #96	; 0x60
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	220c      	movs	r2, #12
 8000b66:	4619      	mov	r1, r3
 8000b68:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000b6a:	f009 fb7d 	bl	800a268 <HAL_TIM_PWM_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b74:	f000 fb6c 	bl	8001250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000b9c:	f00a f8a2 	bl	800ace4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000ba6:	f000 fb53 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM1_Init+0x134>)
 8000bac:	f003 fa28 	bl	8004000 <HAL_TIM_MspPostInit>

}
 8000bb0:	bf00      	nop
 8000bb2:	3758      	adds	r7, #88	; 0x58
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000f88 	.word	0x20000f88
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000bec:	2208      	movs	r2, #8
 8000bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0a:	4818      	ldr	r0, [pc, #96]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000c0c:	f009 f90d 	bl	8009e2a <HAL_TIM_PWM_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c16:	f000 fb1b 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	4619      	mov	r1, r3
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000c2a:	f009 ffdf 	bl	800abec <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c34:	f000 fb0c 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c38:	2360      	movs	r3, #96	; 0x60
 8000c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000c50:	f009 fb0a 	bl	800a268 <HAL_TIM_PWM_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c5a:	f000 faf9 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_TIM2_Init+0xac>)
 8000c60:	f003 f9ce 	bl	8004000 <HAL_TIM_MspPostInit>

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200010a8 	.word	0x200010a8

08000c70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <MX_TIM3_Init+0xb0>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000ca6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000caa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000cba:	f009 f8b6 	bl	8009e2a <HAL_TIM_PWM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 fac4 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000cd8:	f009 ff88 	bl	800abec <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ce2:	f000 fab5 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce6:	2360      	movs	r3, #96	; 0x60
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000cfe:	f009 fab3 	bl	800a268 <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d08:	f000 faa2 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_TIM3_Init+0xac>)
 8000d0e:	f003 f977 	bl	8004000 <HAL_TIM_MspPostInit>

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000dd4 	.word	0x20000dd4
 8000d20:	40000400 	.word	0x40000400

08000d24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <MX_TIM7_Init+0x64>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d3a:	2259      	movs	r2, #89	; 0x59
 8000d3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d46:	2263      	movs	r2, #99	; 0x63
 8000d48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d52:	f008 ff7b 	bl	8009c4c <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000d5c:	f000 fa78 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_TIM7_Init+0x60>)
 8000d6e:	f009 ff3d 	bl	800abec <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000d78:	f000 fa6a 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200011f8 	.word	0x200011f8
 8000d88:	40001400 	.word	0x40001400

08000d8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b092      	sub	sp, #72	; 0x48
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2220      	movs	r2, #32
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00d fdca 	bl	800e950 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <MX_TIM8_Init+0x104>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dc4:	2211      	movs	r2, #17
 8000dc6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000dea:	f009 f81e 	bl	8009e2a <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000df4:	f000 fa2c 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e04:	4619      	mov	r1, r3
 8000e06:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000e08:	f009 fef0 	bl	800abec <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e12:	f000 fa1d 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e16:	2370      	movs	r3, #112	; 0x70
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	2204      	movs	r2, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000e3c:	f009 fa14 	bl	800a268 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000e46:	f000 fa03 	bl	8001250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000e6e:	f009 ff39 	bl	800ace4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000e78:	f000 f9ea 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM8_Init+0x100>)
 8000e7e:	f003 f8bf 	bl	8004000 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3748      	adds	r7, #72	; 0x48
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000043c 	.word	0x2000043c
 8000e90:	40010400 	.word	0x40010400

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_DMA_Init+0x4c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <MX_DMA_Init+0x4c>)
 8000ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_DMA_Init+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2038      	movs	r0, #56	; 0x38
 8000ebc:	f004 ff2b 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ec0:	2038      	movs	r0, #56	; 0x38
 8000ec2:	f004 ff44 	bl	8005d4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	203a      	movs	r0, #58	; 0x3a
 8000ecc:	f004 ff23 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ed0:	203a      	movs	r0, #58	; 0x3a
 8000ed2:	f004 ff3c 	bl	8005d4e <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a87      	ldr	r2, [pc, #540]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b85      	ldr	r3, [pc, #532]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	4b81      	ldr	r3, [pc, #516]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a80      	ldr	r2, [pc, #512]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b7e      	ldr	r3, [pc, #504]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4b7a      	ldr	r3, [pc, #488]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a79      	ldr	r2, [pc, #484]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b77      	ldr	r3, [pc, #476]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b73      	ldr	r3, [pc, #460]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a72      	ldr	r2, [pc, #456]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b70      	ldr	r3, [pc, #448]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b69      	ldr	r3, [pc, #420]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b65      	ldr	r3, [pc, #404]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a64      	ldr	r2, [pc, #400]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b62      	ldr	r3, [pc, #392]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a5d      	ldr	r2, [pc, #372]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a56      	ldr	r2, [pc, #344]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b54      	ldr	r3, [pc, #336]	; (8001120 <MX_GPIO_Init+0x23c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	213c      	movs	r1, #60	; 0x3c
 8000fde:	4851      	ldr	r0, [pc, #324]	; (8001124 <MX_GPIO_Init+0x240>)
 8000fe0:	f005 fd6a 	bl	8006ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000fea:	484f      	ldr	r0, [pc, #316]	; (8001128 <MX_GPIO_Init+0x244>)
 8000fec:	f005 fd64 	bl	8006ab8 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000ff6:	484d      	ldr	r0, [pc, #308]	; (800112c <MX_GPIO_Init+0x248>)
 8000ff8:	f005 fd5e 	bl	8006ab8 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8000ffc:	233c      	movs	r3, #60	; 0x3c
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001000:	2311      	movs	r3, #17
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4844      	ldr	r0, [pc, #272]	; (8001124 <MX_GPIO_Init+0x240>)
 8001014:	f005 fab0 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001018:	230f      	movs	r3, #15
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800101c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4840      	ldr	r0, [pc, #256]	; (8001130 <MX_GPIO_Init+0x24c>)
 800102e:	f005 faa3 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 8001032:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001038:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	483a      	ldr	r0, [pc, #232]	; (8001134 <MX_GPIO_Init+0x250>)
 800104a:	f005 fa95 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800104e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001054:	2311      	movs	r3, #17
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4830      	ldr	r0, [pc, #192]	; (8001128 <MX_GPIO_Init+0x244>)
 8001068:	f005 fa86 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 800106c:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001072:	2311      	movs	r3, #17
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4829      	ldr	r0, [pc, #164]	; (800112c <MX_GPIO_Init+0x248>)
 8001086:	f005 fa77 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 800108a:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001090:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4825      	ldr	r0, [pc, #148]	; (8001138 <MX_GPIO_Init+0x254>)
 80010a2:	f005 fa69 	bl	8006578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	2006      	movs	r0, #6
 80010ac:	f004 fe33 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010b0:	2006      	movs	r0, #6
 80010b2:	f004 fe4c 	bl	8005d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2007      	movs	r0, #7
 80010bc:	f004 fe2b 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010c0:	2007      	movs	r0, #7
 80010c2:	f004 fe44 	bl	8005d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	2008      	movs	r0, #8
 80010cc:	f004 fe23 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010d0:	2008      	movs	r0, #8
 80010d2:	f004 fe3c 	bl	8005d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	2009      	movs	r0, #9
 80010dc:	f004 fe1b 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010e0:	2009      	movs	r0, #9
 80010e2:	f004 fe34 	bl	8005d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	200a      	movs	r0, #10
 80010ec:	f004 fe13 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f004 fe2c 	bl	8005d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2101      	movs	r1, #1
 80010fa:	2017      	movs	r0, #23
 80010fc:	f004 fe0b 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001100:	2017      	movs	r0, #23
 8001102:	f004 fe24 	bl	8005d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2101      	movs	r1, #1
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f004 fe03 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001110:	2028      	movs	r0, #40	; 0x28
 8001112:	f004 fe1c 	bl	8005d4e <HAL_NVIC_EnableIRQ>

}
 8001116:	bf00      	nop
 8001118:	3738      	adds	r7, #56	; 0x38
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40021000 	.word	0x40021000
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021800 	.word	0x40021800
 8001130:	40021400 	.word	0x40021400
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800

0800113c <PDM_Hard_Code_Config>:

/* USER CODE BEGIN 4 */
void PDM_Hard_Code_Config()
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	CAN_Baud_Rate = CAN_1000kbps;
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <PDM_Hard_Code_Config+0x104>)
 8001142:	2204      	movs	r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
	PWM_Pin_Status = 0x11;
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <PDM_Hard_Code_Config+0x108>)
 8001148:	2211      	movs	r2, #17
 800114a:	701a      	strb	r2, [r3, #0]

	Output_Pin[0].Enabled_Inputs[0] = 0x0003;
 800114c:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <PDM_Hard_Code_Config+0x10c>)
 800114e:	2203      	movs	r2, #3
 8001150:	801a      	strh	r2, [r3, #0]
	Output_Pin[0].Input_Levels[0] = 0x0001;
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <PDM_Hard_Code_Config+0x10c>)
 8001154:	2201      	movs	r2, #1
 8001156:	809a      	strh	r2, [r3, #4]
	PWM_Pins[0].PWM_Frequency = PWM_FREQ_1000HZ;
 8001158:	4b3c      	ldr	r3, [pc, #240]	; (800124c <PDM_Hard_Code_Config+0x110>)
 800115a:	f242 720f 	movw	r2, #9999	; 0x270f
 800115e:	805a      	strh	r2, [r3, #2]
	PWM_Pins[0].Input_DC_Preset_Enable[0] = 0x0004;
 8001160:	4b3a      	ldr	r3, [pc, #232]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001162:	2204      	movs	r2, #4
 8001164:	809a      	strh	r2, [r3, #4]
	PWM_Pins[0].Input_DC_Preset[0] = 0x0004;
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001168:	2204      	movs	r2, #4
 800116a:	811a      	strh	r2, [r3, #8]
	PWM_Pins[0].Duty_Cycle_Preset[0] = 500;
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <PDM_Hard_Code_Config+0x110>)
 800116e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001172:	819a      	strh	r2, [r3, #12]

	PWM_Pins[0].Command_Var_Lim[0][0] = 0;
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001176:	2200      	movs	r2, #0
 8001178:	845a      	strh	r2, [r3, #34]	; 0x22
	PWM_Pins[0].Command_Var_Lim[0][1] = 1000;
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <PDM_Hard_Code_Config+0x110>)
 800117c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001180:	849a      	strh	r2, [r3, #36]	; 0x24
	PWM_Pins[0].Command_Var_Lim[1][0] = 700;
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001184:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001188:	84da      	strh	r2, [r3, #38]	; 0x26
	PWM_Pins[0].Command_Var_Lim[1][1] = 900;
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <PDM_Hard_Code_Config+0x110>)
 800118c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001190:	851a      	strh	r2, [r3, #40]	; 0x28
	PWM_Pins[0].Map_Lengths[0] = 3;
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001194:	2203      	movs	r2, #3
 8001196:	771a      	strb	r2, [r3, #28]
	PWM_Pins[0].Map_Lengths[1] = 3;
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <PDM_Hard_Code_Config+0x110>)
 800119a:	2203      	movs	r2, #3
 800119c:	775a      	strb	r2, [r3, #29]
	PWM_Pins[0].Duty_Cycle_Map[0][0] = 0;
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	PWM_Pins[0].Duty_Cycle_Map[0][1] = 200;
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011a8:	22c8      	movs	r2, #200	; 0xc8
 80011aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	PWM_Pins[0].Duty_Cycle_Map[0][2] = 500;
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	PWM_Pins[0].Duty_Cycle_Map[0][3] = 1000;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011be:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	PWM_Pins[0].Duty_Cycle_Map[1][0] = 0;
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	PWM_Pins[0].Duty_Cycle_Map[1][1] = 333;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011cc:	f240 124d 	movw	r2, #333	; 0x14d
 80011d0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PWM_Pins[0].Duty_Cycle_Map[1][2] = 667;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011d6:	f240 229b 	movw	r2, #667	; 0x29b
 80011da:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PWM_Pins[0].Duty_Cycle_Map[1][3] = 1000;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PWM_Pins[0].Duty_Cycle_Map[2][0] = 0;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	PWM_Pins[0].Duty_Cycle_Map[2][1] = 500;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011f6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	PWM_Pins[0].Duty_Cycle_Map[2][2] = 750;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <PDM_Hard_Code_Config+0x110>)
 80011fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001200:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	PWM_Pins[0].Duty_Cycle_Map[2][3] = 1000;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001206:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800120a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	PWM_Pins[0].Duty_Cycle_Map[3][0] = 0;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001210:	2200      	movs	r2, #0
 8001212:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	PWM_Pins[0].Duty_Cycle_Map[3][1] = 600;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001218:	f44f 7216 	mov.w	r2, #600	; 0x258
 800121c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	PWM_Pins[0].Duty_Cycle_Map[3][2] = 900;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <PDM_Hard_Code_Config+0x110>)
 8001222:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001226:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	PWM_Pins[0].Duty_Cycle_Map[3][3] = 1000;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <PDM_Hard_Code_Config+0x110>)
 800122c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001230:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000fd0 	.word	0x20000fd0
 8001244:	20000e84 	.word	0x20000e84
 8001248:	20000fdc 	.word	0x20000fdc
 800124c:	20000534 	.word	0x20000534

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, uint8_t CAN_BaudRate)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f003 fe4e 	bl	8004f0a <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	if(CAN_BaudRate == CAN_Disable)
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <PDM_CAN_Init+0x1c>
	{
		return HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	e02b      	b.n	80012d0 <PDM_CAN_Init+0x74>
	}
	else if(CAN_BaudRate == CAN_125kbps)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d103      	bne.n	8001286 <PDM_CAN_Init+0x2a>
	{
		hcan->Init.Prescaler = 40;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2228      	movs	r2, #40	; 0x28
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	e013      	b.n	80012ae <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_250kbps)
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d103      	bne.n	8001294 <PDM_CAN_Init+0x38>
	{
		hcan->Init.Prescaler = 20;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2214      	movs	r2, #20
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	e00c      	b.n	80012ae <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_500kbps)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d103      	bne.n	80012a2 <PDM_CAN_Init+0x46>
	{
		hcan->Init.Prescaler = 10;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	220a      	movs	r2, #10
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	e005      	b.n	80012ae <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_1000kbps)
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d102      	bne.n	80012ae <PDM_CAN_Init+0x52>
	{
		hcan->Init.Prescaler = 5;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2205      	movs	r2, #5
 80012ac:	605a      	str	r2, [r3, #4]
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f003 fd30 	bl	8004d14 <HAL_CAN_Init>

	//Initialize receive callbacks if there is at least one PWM CAN enabled
	if((PWM_Pin_Status & 0xF0) != 0x00)
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <PDM_CAN_Init+0x7c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <PDM_CAN_Init+0x6c>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012c0:	2102      	movs	r1, #2
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f004 f9d3 	bl	800566e <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f003 ff21 	bl	8005110 <HAL_CAN_Start>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000e84 	.word	0x20000e84

080012dc <PDM_PWM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
HAL_StatusTypeDef PDM_PWM_CAN_Filter_Config(CAN_HandleTypeDef *hcan, PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	4613      	mov	r3, r2
 80012e8:	71fb      	strb	r3, [r7, #7]
	//Double check if PWM CAN is enabled for this specific output
	if(((PWM_Pin_Status >> pwm_out_number) & 0x10) != OUTPUT_PWM_CAN_ENABLE)
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <PDM_PWM_CAN_Filter_Config+0x74>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	fa42 f303 	asr.w	r3, r2, r3
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <PDM_PWM_CAN_Filter_Config+0x26>
		return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e022      	b.n	8001348 <PDM_PWM_CAN_Filter_Config+0x6c>

	CAN_FilterTypeDef CAN_Filter_Config;

	//Sets CAN filter configuration
	CAN_Filter_Config.FilterBank = pwm_out_number;
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 8001306:	2301      	movs	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 800130a:	2301      	movs	r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_Filter_Config.FilterIdHigh = pwm_struct->Command_Var_CAN_ID[0] >> 13;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	0b5b      	lsrs	r3, r3, #13
 8001314:	613b      	str	r3, [r7, #16]
	CAN_Filter_Config.FilterIdLow = (pwm_struct->Command_Var_CAN_ID[0] << 3) & 0xFFF8;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	b29b      	uxth	r3, r3
 800131e:	617b      	str	r3, [r7, #20]
	CAN_Filter_Config.FilterMaskIdHigh = pwm_struct->Command_Var_CAN_ID[1] >> 13;
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	0b5b      	lsrs	r3, r3, #13
 8001326:	61bb      	str	r3, [r7, #24]
	CAN_Filter_Config.FilterMaskIdLow = (pwm_struct->Command_Var_CAN_ID[1] << 3) & 0xFFF8;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	b29b      	uxth	r3, r3
 8001330:	61fb      	str	r3, [r7, #28]
	CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
	CAN_Filter_Config.FilterActivation = ENABLE;
 8001336:	2301      	movs	r3, #1
 8001338:	633b      	str	r3, [r7, #48]	; 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &CAN_Filter_Config);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f003 fe05 	bl	8004f50 <HAL_CAN_ConfigFilter>
 8001346:	4603      	mov	r3, r0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3738      	adds	r7, #56	; 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000e84 	.word	0x20000e84

08001354 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]

	//Selects CAN transmission ID based on data transmission frequency
	switch(data_freq)
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	3b01      	subs	r3, #1
 8001368:	2b04      	cmp	r3, #4
 800136a:	d821      	bhi.n	80013b0 <PDM_CAN_Transmit_Data+0x5c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <PDM_CAN_Transmit_Data+0x20>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	080013a9 	.word	0x080013a9
 8001378:	080013a1 	.word	0x080013a1
 800137c:	08001399 	.word	0x08001399
 8001380:	08001391 	.word	0x08001391
 8001384:	08001389 	.word	0x08001389
	{
	case Data_Freq_100Hz:
		CAN_Tx_Message.ExtId = 0x1E35C003;
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 800138a:	4a59      	ldr	r2, [pc, #356]	; (80014f0 <PDM_CAN_Transmit_Data+0x19c>)
 800138c:	605a      	str	r2, [r3, #4]
		break;
 800138e:	e011      	b.n	80013b4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_80Hz:
		CAN_Tx_Message.ExtId = 0x1E35C004;
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <PDM_CAN_Transmit_Data+0x1a0>)
 8001394:	605a      	str	r2, [r3, #4]
		break;
 8001396:	e00d      	b.n	80013b4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_50Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 800139a:	4a57      	ldr	r2, [pc, #348]	; (80014f8 <PDM_CAN_Transmit_Data+0x1a4>)
 800139c:	605a      	str	r2, [r3, #4]
		break;
 800139e:	e009      	b.n	80013b4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_25Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 80013a0:	4b52      	ldr	r3, [pc, #328]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013a2:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <PDM_CAN_Transmit_Data+0x1a4>)
 80013a4:	605a      	str	r2, [r3, #4]
		break;
 80013a6:	e005      	b.n	80013b4 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_10Hz:
		CAN_Tx_Message.ExtId = 0x1E35C006;
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <PDM_CAN_Transmit_Data+0x1a8>)
 80013ac:	605a      	str	r2, [r3, #4]
		break;
 80013ae:	e001      	b.n	80013b4 <PDM_CAN_Transmit_Data+0x60>
	default:
		return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e096      	b.n	80014e2 <PDM_CAN_Transmit_Data+0x18e>
	}

	//Prepares transmission header
	CAN_Tx_Message.DLC = 0;
 80013b4:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
	CAN_Tx_Message.IDE = CAN_ID_EXT;
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013bc:	2204      	movs	r2, #4
 80013be:	609a      	str	r2, [r3, #8]
	CAN_Tx_Message.RTR = CAN_RTR_DATA;
 80013c0:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
	CAN_Tx_Message.TransmitGlobalTime = DISABLE;
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	73bb      	strb	r3, [r7, #14]
 80013d0:	e068      	b.n	80014a4 <PDM_CAN_Transmit_Data+0x150>
	{
		//Place data and ID inside transmission buffer if the data has the same frequency as selected
		if(Data_Freq_Buffer[i] == data_freq)
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <PDM_CAN_Transmit_Data+0x1ac>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d141      	bne.n	8001462 <PDM_CAN_Transmit_Data+0x10e>
		{
			CAN_Tx_Data[CAN_Tx_Message.DLC]		 = Data_ID_Buffer[i] >> 8;
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	4a48      	ldr	r2, [pc, #288]	; (8001504 <PDM_CAN_Transmit_Data+0x1b0>)
 80013e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	b2d1      	uxtb	r1, r2
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 80013f2:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 1] |= Data_ID_Buffer[i] & 0xFF;
 80013f4:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a43      	ldr	r2, [pc, #268]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	4940      	ldr	r1, [pc, #256]	; (8001504 <PDM_CAN_Transmit_Data+0x1b0>)
 8001404:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b25a      	sxtb	r2, r3
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	3301      	adds	r3, #1
 8001414:	b2d1      	uxtb	r1, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 8001418:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 2]  = Data_Buffer[i] >> 8;
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	4a3b      	ldr	r2, [pc, #236]	; (800150c <PDM_CAN_Transmit_Data+0x1b8>)
 800141e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	b29a      	uxth	r2, r3
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	3302      	adds	r3, #2
 800142c:	b2d1      	uxtb	r1, r2
 800142e:	4a36      	ldr	r2, [pc, #216]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 8001430:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 3] |= Data_Buffer[i] & 0xFF;
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	3303      	adds	r3, #3
 8001438:	4a33      	ldr	r2, [pc, #204]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	b25a      	sxtb	r2, r3
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	4932      	ldr	r1, [pc, #200]	; (800150c <PDM_CAN_Transmit_Data+0x1b8>)
 8001442:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b25a      	sxtb	r2, r3
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	3303      	adds	r3, #3
 8001452:	b2d1      	uxtb	r1, r2
 8001454:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 8001456:	54d1      	strb	r1, [r2, r3]

			CAN_Tx_Message.DLC += 4;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	3304      	adds	r3, #4
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001460:	6113      	str	r3, [r2, #16]
		}

		//Sends transmission buffer if it's full
		if(CAN_Tx_Message.DLC == 8)
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	2b08      	cmp	r3, #8
 8001468:	d119      	bne.n	800149e <PDM_CAN_Transmit_Data+0x14a>
		{
			ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <PDM_CAN_Transmit_Data+0x1bc>)
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 800146e:	491f      	ldr	r1, [pc, #124]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 feda 	bl	800522a <HAL_CAN_AddTxMessage>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]

			//Wait Transmission finish
			for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800147a:	2300      	movs	r3, #0
 800147c:	737b      	strb	r3, [r7, #13]
 800147e:	e002      	b.n	8001486 <PDM_CAN_Transmit_Data+0x132>
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	3301      	adds	r3, #1
 8001484:	737b      	strb	r3, [r7, #13]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f003 ffaa 	bl	80053e0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b03      	cmp	r3, #3
 8001490:	d002      	beq.n	8001498 <PDM_CAN_Transmit_Data+0x144>
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d9f3      	bls.n	8001480 <PDM_CAN_Transmit_Data+0x12c>

			CAN_Tx_Message.DLC = 0;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73bb      	strb	r3, [r7, #14]
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b1d      	cmp	r3, #29
 80014a8:	d993      	bls.n	80013d2 <PDM_CAN_Transmit_Data+0x7e>
		}
	}

	//If there is only one data channel not sent, send it alone
	if(CAN_Tx_Message.DLC == 4)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d116      	bne.n	80014e0 <PDM_CAN_Transmit_Data+0x18c>
	{
		ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <PDM_CAN_Transmit_Data+0x1bc>)
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <PDM_CAN_Transmit_Data+0x1b4>)
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <PDM_CAN_Transmit_Data+0x198>)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f003 feb6 	bl	800522a <HAL_CAN_AddTxMessage>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80014c2:	2300      	movs	r3, #0
 80014c4:	733b      	strb	r3, [r7, #12]
 80014c6:	e002      	b.n	80014ce <PDM_CAN_Transmit_Data+0x17a>
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	733b      	strb	r3, [r7, #12]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f003 ff86 	bl	80053e0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d002      	beq.n	80014e0 <PDM_CAN_Transmit_Data+0x18c>
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d9f3      	bls.n	80014c8 <PDM_CAN_Transmit_Data+0x174>
	}

	return ret_val;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000e24 	.word	0x20000e24
 80014f0:	1e35c003 	.word	0x1e35c003
 80014f4:	1e35c004 	.word	0x1e35c004
 80014f8:	1e35c005 	.word	0x1e35c005
 80014fc:	1e35c006 	.word	0x1e35c006
 8001500:	20000efc 	.word	0x20000efc
 8001504:	200010f0 	.word	0x200010f0
 8001508:	20001240 	.word	0x20001240
 800150c:	200011bc 	.word	0x200011bc
 8001510:	20000438 	.word	0x20000438

08001514 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
	uint8_t receive_flag = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
	uint32_t rx_id = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]

	if(CAN_Rx_Message.IDE == CAN_ID_STD)
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <PDM_CAN_Process_Rx_Data+0x184>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <PDM_CAN_Process_Rx_Data+0x1e>
	{
		rx_id = CAN_Rx_Message.StdId;
 800152a:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <PDM_CAN_Process_Rx_Data+0x184>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	e002      	b.n	8001538 <PDM_CAN_Process_Rx_Data+0x24>
	}else{
		rx_id = CAN_Rx_Message.ExtId;
 8001532:	4b59      	ldr	r3, [pc, #356]	; (8001698 <PDM_CAN_Process_Rx_Data+0x184>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i = 0; i < 4; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	e0a4      	b.n	8001688 <PDM_CAN_Process_Rx_Data+0x174>
	{
		//Checks if received message contains data to any PWN CAN output
		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[0])
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4a56      	ldr	r2, [pc, #344]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 8001542:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3314      	adds	r3, #20
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	d13c      	bne.n	80015d0 <PDM_CAN_Process_Rx_Data+0xbc>
		{
			PWM_Pins[i].Command_Var[0]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0]]) << 8;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4a50      	ldr	r2, [pc, #320]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 800155a:	f44f 710a 	mov.w	r1, #552	; 0x228
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	3310      	adds	r3, #16
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <PDM_CAN_Process_Rx_Data+0x18c>)
 800156c:	5c9b      	ldrb	r3, [r3, r2]
 800156e:	021a      	lsls	r2, r3, #8
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	b210      	sxth	r0, r2
 8001574:	4a49      	ldr	r2, [pc, #292]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 8001576:	f44f 710a 	mov.w	r1, #552	; 0x228
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	331e      	adds	r3, #30
 8001582:	4602      	mov	r2, r0
 8001584:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[0] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0] + 1]) & 0xFF;
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4a44      	ldr	r2, [pc, #272]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 800158a:	f44f 710a 	mov.w	r1, #552	; 0x228
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	331e      	adds	r3, #30
 8001596:	f9b3 1000 	ldrsh.w	r1, [r3]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4a3f      	ldr	r2, [pc, #252]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 800159e:	f44f 700a 	mov.w	r0, #552	; 0x228
 80015a2:	fb00 f303 	mul.w	r3, r0, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	3310      	adds	r3, #16
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a3c      	ldr	r2, [pc, #240]	; (80016a0 <PDM_CAN_Process_Rx_Data+0x18c>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	b210      	sxth	r0, r2
 80015ba:	4a38      	ldr	r2, [pc, #224]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 80015bc:	f44f 710a 	mov.w	r1, #552	; 0x228
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	331e      	adds	r3, #30
 80015c8:	4602      	mov	r2, r0
 80015ca:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
		}

		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[1])
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 80015d4:	f44f 710a 	mov.w	r1, #552	; 0x228
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3318      	adds	r3, #24
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d13c      	bne.n	8001662 <PDM_CAN_Process_Rx_Data+0x14e>
		{
			PWM_Pins[i].Command_Var[1]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1]]) << 8;
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4a2c      	ldr	r2, [pc, #176]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 80015ec:	f44f 710a 	mov.w	r1, #552	; 0x228
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	3311      	adds	r3, #17
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <PDM_CAN_Process_Rx_Data+0x18c>)
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	021a      	lsls	r2, r3, #8
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	b210      	sxth	r0, r2
 8001606:	4a25      	ldr	r2, [pc, #148]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 8001608:	f44f 710a 	mov.w	r1, #552	; 0x228
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	3320      	adds	r3, #32
 8001614:	4602      	mov	r2, r0
 8001616:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[1] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1] + 1]) & 0xFF;
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a20      	ldr	r2, [pc, #128]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 800161c:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	3320      	adds	r3, #32
 8001628:	f9b3 1000 	ldrsh.w	r1, [r3]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 8001630:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001634:	fb00 f303 	mul.w	r3, r0, r3
 8001638:	4413      	add	r3, r2
 800163a:	3311      	adds	r3, #17
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	b21a      	sxth	r2, r3
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	430a      	orrs	r2, r1
 800164a:	b210      	sxth	r0, r2
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 800164e:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	3320      	adds	r3, #32
 800165a:	4602      	mov	r2, r0
 800165c:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
		}

		//If the received message contains data to any PWM CAN output, set it's duty cycle
		if(receive_flag == 1)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10c      	bne.n	8001682 <PDM_CAN_Process_Rx_Data+0x16e>
		{
			PDM_PWM_Output_Process(&PWM_Pins[i], i);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <PDM_CAN_Process_Rx_Data+0x188>)
 8001674:	4413      	add	r3, r2
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fee0 	bl	8003440 <PDM_PWM_Output_Process>
			return;
 8001680:	e007      	b.n	8001692 <PDM_CAN_Process_Rx_Data+0x17e>
	for(uint8_t i = 0; i < 4; i++)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3301      	adds	r3, #1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b03      	cmp	r3, #3
 800168c:	f67f af57 	bls.w	800153e <PDM_CAN_Process_Rx_Data+0x2a>
		}
	}

	return;
 8001690:	bf00      	nop
}
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000e9c 	.word	0x20000e9c
 800169c:	20000534 	.word	0x20000534
 80016a0:	2000109c 	.word	0x2000109c

080016a4 <PDM_Load_Config_Buffer>:

//Use to load pin, current limit and basic pwm control into a buffer
//uint8_t *data_buffer - buffer to receive configuration
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Load_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 80016a4:	b4b0      	push	{r4, r5, r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	f640 028c 	movw	r2, #2188	; 0x88c
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 833b 	bne.w	8001d32 <PDM_Load_Config_Buffer+0x68e>
		return;

	uint16_t data_index = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	82fb      	strh	r3, [r7, #22]

	//Loads output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e0e4      	b.n	8001890 <PDM_Load_Config_Buffer+0x1ec>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	74fb      	strb	r3, [r7, #19]
 80016ca:	e073      	b.n	80017b4 <PDM_Load_Config_Buffer+0x110>
		{
			Output_Pin[i].Enabled_Inputs[j]  = data_buffer[data_index++] << 8;
 80016cc:	8afb      	ldrh	r3, [r7, #22]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	82fa      	strh	r2, [r7, #22]
 80016d2:	461a      	mov	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	8aba      	ldrh	r2, [r7, #20]
 80016de:	7cf9      	ldrb	r1, [r7, #19]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b29c      	uxth	r4, r3
 80016e4:	488b      	ldr	r0, [pc, #556]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	440b      	add	r3, r1
 80016f0:	4622      	mov	r2, r4
 80016f2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			Output_Pin[i].Enabled_Inputs[j] |= data_buffer[data_index++] & 0xFF;
 80016f6:	8afb      	ldrh	r3, [r7, #22]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	82fa      	strh	r2, [r7, #22]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461c      	mov	r4, r3
 8001706:	8aba      	ldrh	r2, [r7, #20]
 8001708:	7cf9      	ldrb	r1, [r7, #19]
 800170a:	4882      	ldr	r0, [pc, #520]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800171a:	b21a      	sxth	r2, r3
 800171c:	b223      	sxth	r3, r4
 800171e:	4313      	orrs	r3, r2
 8001720:	b21b      	sxth	r3, r3
 8001722:	8aba      	ldrh	r2, [r7, #20]
 8001724:	7cf9      	ldrb	r1, [r7, #19]
 8001726:	b29c      	uxth	r4, r3
 8001728:	487a      	ldr	r0, [pc, #488]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	440b      	add	r3, r1
 8001734:	4622      	mov	r2, r4
 8001736:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

			Output_Pin[i].Input_Levels[j]	 = data_buffer[data_index++] << 8;
 800173a:	8afb      	ldrh	r3, [r7, #22]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	82fa      	strh	r2, [r7, #22]
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	8aba      	ldrh	r2, [r7, #20]
 800174c:	7cf9      	ldrb	r1, [r7, #19]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b29c      	uxth	r4, r3
 8001752:	4870      	ldr	r0, [pc, #448]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	440b      	add	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4403      	add	r3, r0
 8001762:	4622      	mov	r2, r4
 8001764:	809a      	strh	r2, [r3, #4]
			Output_Pin[i].Input_Levels[j]	|= data_buffer[data_index++] & 0xFF;
 8001766:	8afb      	ldrh	r3, [r7, #22]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	82fa      	strh	r2, [r7, #22]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461c      	mov	r4, r3
 8001776:	8aba      	ldrh	r2, [r7, #20]
 8001778:	7cf9      	ldrb	r1, [r7, #19]
 800177a:	4866      	ldr	r0, [pc, #408]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	440b      	add	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4403      	add	r3, r0
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	b21a      	sxth	r2, r3
 800178e:	b223      	sxth	r3, r4
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	8aba      	ldrh	r2, [r7, #20]
 8001796:	7cf9      	ldrb	r1, [r7, #19]
 8001798:	b29c      	uxth	r4, r3
 800179a:	485e      	ldr	r0, [pc, #376]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4403      	add	r3, r0
 80017aa:	4622      	mov	r2, r4
 80017ac:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 2 ; j++)
 80017ae:	7cfb      	ldrb	r3, [r7, #19]
 80017b0:	3301      	adds	r3, #1
 80017b2:	74fb      	strb	r3, [r7, #19]
 80017b4:	7cfb      	ldrb	r3, [r7, #19]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d988      	bls.n	80016cc <PDM_Load_Config_Buffer+0x28>
		}
		Output_Pin[i].Current_Thresholds   = data_buffer[data_index++] << 8;
 80017ba:	8afb      	ldrh	r3, [r7, #22]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	82fa      	strh	r2, [r7, #22]
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	8aba      	ldrh	r2, [r7, #20]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b298      	uxth	r0, r3
 80017d0:	4950      	ldr	r1, [pc, #320]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3308      	adds	r3, #8
 80017de:	4602      	mov	r2, r0
 80017e0:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Current_Thresholds  |= data_buffer[data_index++] & 0xFF;
 80017e2:	8afb      	ldrh	r3, [r7, #22]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	82fa      	strh	r2, [r7, #22]
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	8aba      	ldrh	r2, [r7, #20]
 80017f4:	4947      	ldr	r1, [pc, #284]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3308      	adds	r3, #8
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b21a      	sxth	r2, r3
 8001806:	b203      	sxth	r3, r0
 8001808:	4313      	orrs	r3, r2
 800180a:	b21b      	sxth	r3, r3
 800180c:	8aba      	ldrh	r2, [r7, #20]
 800180e:	b298      	uxth	r0, r3
 8001810:	4940      	ldr	r1, [pc, #256]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3308      	adds	r3, #8
 800181e:	4602      	mov	r2, r0
 8001820:	801a      	strh	r2, [r3, #0]

		Output_Pin[i].Timeout_Output_Fuse  = data_buffer[data_index++] << 8;
 8001822:	8afb      	ldrh	r3, [r7, #22]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	82fa      	strh	r2, [r7, #22]
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	8aba      	ldrh	r2, [r7, #20]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b298      	uxth	r0, r3
 8001838:	4936      	ldr	r1, [pc, #216]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	330a      	adds	r3, #10
 8001846:	4602      	mov	r2, r0
 8001848:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Timeout_Output_Fuse |= data_buffer[data_index++] & 0xFF;
 800184a:	8afb      	ldrh	r3, [r7, #22]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	82fa      	strh	r2, [r7, #22]
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	8aba      	ldrh	r2, [r7, #20]
 800185c:	492d      	ldr	r1, [pc, #180]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	330a      	adds	r3, #10
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b21a      	sxth	r2, r3
 800186e:	b203      	sxth	r3, r0
 8001870:	4313      	orrs	r3, r2
 8001872:	b21b      	sxth	r3, r3
 8001874:	8aba      	ldrh	r2, [r7, #20]
 8001876:	b298      	uxth	r0, r3
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <PDM_Load_Config_Buffer+0x270>)
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	330a      	adds	r3, #10
 8001886:	4602      	mov	r2, r0
 8001888:	801a      	strh	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 800188a:	8abb      	ldrh	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	82bb      	strh	r3, [r7, #20]
 8001890:	8abb      	ldrh	r3, [r7, #20]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f af17 	bls.w	80016c6 <PDM_Load_Config_Buffer+0x22>
	}

	//Loads each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001898:	2300      	movs	r3, #0
 800189a:	823b      	strh	r3, [r7, #16]
 800189c:	e00c      	b.n	80018b8 <PDM_Load_Config_Buffer+0x214>
	{
		Data_Freq_Buffer[i] = data_buffer[data_index++];
 800189e:	8afb      	ldrh	r3, [r7, #22]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	82fa      	strh	r2, [r7, #22]
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	441a      	add	r2, r3
 80018aa:	8a3b      	ldrh	r3, [r7, #16]
 80018ac:	7811      	ldrb	r1, [r2, #0]
 80018ae:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <PDM_Load_Config_Buffer+0x274>)
 80018b0:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80018b2:	8a3b      	ldrh	r3, [r7, #16]
 80018b4:	3301      	adds	r3, #1
 80018b6:	823b      	strh	r3, [r7, #16]
 80018b8:	8a3b      	ldrh	r3, [r7, #16]
 80018ba:	2b1d      	cmp	r3, #29
 80018bc:	d9ef      	bls.n	800189e <PDM_Load_Config_Buffer+0x1fa>
	}

	//Loads CAN bus baud rate
	CAN_Baud_Rate = data_buffer[data_index++];
 80018be:	8afb      	ldrh	r3, [r7, #22]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	82fa      	strh	r2, [r7, #22]
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <PDM_Load_Config_Buffer+0x278>)
 80018ce:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs general configuration (PWM CAN and PWM enabled)
	PWM_Pin_Status = data_buffer[data_index++];
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	82fa      	strh	r2, [r7, #22]
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <PDM_Load_Config_Buffer+0x27c>)
 80018e0:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	81fb      	strh	r3, [r7, #14]
 80018e6:	e1b6      	b.n	8001c56 <PDM_Load_Config_Buffer+0x5b2>
	{
		PWM_Pins[i].PWM_Frequency = data_buffer[data_index++];
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	82fa      	strh	r2, [r7, #22]
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	b290      	uxth	r0, r2
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <PDM_Load_Config_Buffer+0x280>)
 80018fc:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3302      	adds	r3, #2
 8001908:	4602      	mov	r2, r0
 800190a:	801a      	strh	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 800190c:	2300      	movs	r3, #0
 800190e:	737b      	strb	r3, [r7, #13]
 8001910:	e081      	b.n	8001a16 <PDM_Load_Config_Buffer+0x372>
 8001912:	bf00      	nop
 8001914:	20000fdc 	.word	0x20000fdc
 8001918:	20000efc 	.word	0x20000efc
 800191c:	20000fd0 	.word	0x20000fd0
 8001920:	20000e84 	.word	0x20000e84
 8001924:	20000534 	.word	0x20000534
		{
			PWM_Pins[i].Input_DC_Preset_Enable[j]  = data_buffer[data_index++] << 8;
 8001928:	8afb      	ldrh	r3, [r7, #22]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	82fa      	strh	r2, [r7, #22]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b299      	uxth	r1, r3
 8001938:	89fa      	ldrh	r2, [r7, #14]
 800193a:	7b7b      	ldrb	r3, [r7, #13]
 800193c:	0209      	lsls	r1, r1, #8
 800193e:	b28c      	uxth	r4, r1
 8001940:	4938      	ldr	r1, [pc, #224]	; (8001a24 <PDM_Load_Config_Buffer+0x380>)
 8001942:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001946:	fb00 f202 	mul.w	r2, r0, r2
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	440b      	add	r3, r1
 8001950:	4622      	mov	r2, r4
 8001952:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset_Enable[j] |= data_buffer[data_index++] & 0xFF;
 8001954:	8afb      	ldrh	r3, [r7, #22]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	82fa      	strh	r2, [r7, #22]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461c      	mov	r4, r3
 8001964:	89fa      	ldrh	r2, [r7, #14]
 8001966:	7b7b      	ldrb	r3, [r7, #13]
 8001968:	492e      	ldr	r1, [pc, #184]	; (8001a24 <PDM_Load_Config_Buffer+0x380>)
 800196a:	f44f 708a 	mov.w	r0, #276	; 0x114
 800196e:	fb00 f202 	mul.w	r2, r0, r2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	889b      	ldrh	r3, [r3, #4]
 800197a:	b21a      	sxth	r2, r3
 800197c:	b223      	sxth	r3, r4
 800197e:	4313      	orrs	r3, r2
 8001980:	b219      	sxth	r1, r3
 8001982:	89fa      	ldrh	r2, [r7, #14]
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	b28c      	uxth	r4, r1
 8001988:	4926      	ldr	r1, [pc, #152]	; (8001a24 <PDM_Load_Config_Buffer+0x380>)
 800198a:	f44f 708a 	mov.w	r0, #276	; 0x114
 800198e:	fb00 f202 	mul.w	r2, r0, r2
 8001992:	4413      	add	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	440b      	add	r3, r1
 8001998:	4622      	mov	r2, r4
 800199a:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Input_DC_Preset[j] 		   = data_buffer[data_index++] << 8;
 800199c:	8afb      	ldrh	r3, [r7, #22]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	82fa      	strh	r2, [r7, #22]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b299      	uxth	r1, r3
 80019ac:	89fa      	ldrh	r2, [r7, #14]
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	0209      	lsls	r1, r1, #8
 80019b2:	b28c      	uxth	r4, r1
 80019b4:	491b      	ldr	r1, [pc, #108]	; (8001a24 <PDM_Load_Config_Buffer+0x380>)
 80019b6:	f44f 708a 	mov.w	r0, #276	; 0x114
 80019ba:	fb00 f202 	mul.w	r2, r0, r2
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	4622      	mov	r2, r4
 80019c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PWM_Pins[i].Input_DC_Preset[j] 		  |= data_buffer[data_index++] & 0xFF;
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	82fa      	strh	r2, [r7, #22]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461c      	mov	r4, r3
 80019d8:	89fa      	ldrh	r2, [r7, #14]
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	4911      	ldr	r1, [pc, #68]	; (8001a24 <PDM_Load_Config_Buffer+0x380>)
 80019de:	f44f 708a 	mov.w	r0, #276	; 0x114
 80019e2:	fb00 f202 	mul.w	r2, r0, r2
 80019e6:	4413      	add	r3, r2
 80019e8:	3304      	adds	r3, #4
 80019ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	b223      	sxth	r3, r4
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b219      	sxth	r1, r3
 80019f6:	89fa      	ldrh	r2, [r7, #14]
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	b28c      	uxth	r4, r1
 80019fc:	4909      	ldr	r1, [pc, #36]	; (8001a24 <PDM_Load_Config_Buffer+0x380>)
 80019fe:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001a02:	fb00 f202 	mul.w	r2, r0, r2
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t j = 0; j < 4; j++)
 8001a10:	7b7b      	ldrb	r3, [r7, #13]
 8001a12:	3301      	adds	r3, #1
 8001a14:	737b      	strb	r3, [r7, #13]
 8001a16:	7b7b      	ldrb	r3, [r7, #13]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d985      	bls.n	8001928 <PDM_Load_Config_Buffer+0x284>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	733b      	strb	r3, [r7, #12]
 8001a20:	e112      	b.n	8001c48 <PDM_Load_Config_Buffer+0x5a4>
 8001a22:	bf00      	nop
 8001a24:	20000534 	.word	0x20000534
		{
			PWM_Pins[i].Duty_Cycle_Preset[j]	 = data_buffer[data_index++] << 8;
 8001a28:	8afb      	ldrh	r3, [r7, #22]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	82fa      	strh	r2, [r7, #22]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b299      	uxth	r1, r3
 8001a38:	89fa      	ldrh	r2, [r7, #14]
 8001a3a:	7b3b      	ldrb	r3, [r7, #12]
 8001a3c:	0209      	lsls	r1, r1, #8
 8001a3e:	b28c      	uxth	r4, r1
 8001a40:	498b      	ldr	r1, [pc, #556]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001a42:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001a46:	fb00 f202 	mul.w	r2, r0, r2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	440b      	add	r3, r1
 8001a52:	4622      	mov	r2, r4
 8001a54:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Duty_Cycle_Preset[j]	|= data_buffer[data_index++] & 0xFF;
 8001a56:	8afb      	ldrh	r3, [r7, #22]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	82fa      	strh	r2, [r7, #22]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461c      	mov	r4, r3
 8001a66:	89fa      	ldrh	r2, [r7, #14]
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	4981      	ldr	r1, [pc, #516]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001a6c:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001a70:	fb00 f202 	mul.w	r2, r0, r2
 8001a74:	4413      	add	r3, r2
 8001a76:	3304      	adds	r3, #4
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	440b      	add	r3, r1
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	b223      	sxth	r3, r4
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b219      	sxth	r1, r3
 8001a86:	89fa      	ldrh	r2, [r7, #14]
 8001a88:	7b3b      	ldrb	r3, [r7, #12]
 8001a8a:	b28c      	uxth	r4, r1
 8001a8c:	4978      	ldr	r1, [pc, #480]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001a8e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001a92:	fb00 f202 	mul.w	r2, r0, r2
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	440b      	add	r3, r1
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Command_Var_Position[j]  = data_buffer[data_index++];
 8001aa2:	8afb      	ldrh	r3, [r7, #22]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	82fa      	strh	r2, [r7, #22]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	1899      	adds	r1, r3, r2
 8001aae:	89fa      	ldrh	r2, [r7, #14]
 8001ab0:	7b3b      	ldrb	r3, [r7, #12]
 8001ab2:	780c      	ldrb	r4, [r1, #0]
 8001ab4:	496e      	ldr	r1, [pc, #440]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001ab6:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001aba:	fb00 f202 	mul.w	r2, r0, r2
 8001abe:	440a      	add	r2, r1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3310      	adds	r3, #16
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_CAN_ID[j]	 = data_buffer[data_index++] << 24;
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	82fa      	strh	r2, [r7, #22]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	0619      	lsls	r1, r3, #24
 8001ad8:	89fa      	ldrh	r2, [r7, #14]
 8001ada:	7b3b      	ldrb	r3, [r7, #12]
 8001adc:	460c      	mov	r4, r1
 8001ade:	4964      	ldr	r1, [pc, #400]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001ae0:	208a      	movs	r0, #138	; 0x8a
 8001ae2:	fb00 f202 	mul.w	r2, r0, r2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	605c      	str	r4, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 16;
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	82fa      	strh	r2, [r7, #22]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	041c      	lsls	r4, r3, #16
 8001b00:	89fa      	ldrh	r2, [r7, #14]
 8001b02:	7b3b      	ldrb	r3, [r7, #12]
 8001b04:	495a      	ldr	r1, [pc, #360]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001b06:	208a      	movs	r0, #138	; 0x8a
 8001b08:	fb00 f202 	mul.w	r2, r0, r2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3304      	adds	r3, #4
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4620      	mov	r0, r4
 8001b18:	89f9      	ldrh	r1, [r7, #14]
 8001b1a:	7b3b      	ldrb	r3, [r7, #12]
 8001b1c:	4302      	orrs	r2, r0
 8001b1e:	4854      	ldr	r0, [pc, #336]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001b20:	248a      	movs	r4, #138	; 0x8a
 8001b22:	fb04 f101 	mul.w	r1, r4, r1
 8001b26:	440b      	add	r3, r1
 8001b28:	3304      	adds	r3, #4
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4403      	add	r3, r0
 8001b2e:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 8;
 8001b30:	8afb      	ldrh	r3, [r7, #22]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	82fa      	strh	r2, [r7, #22]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021c      	lsls	r4, r3, #8
 8001b40:	89fa      	ldrh	r2, [r7, #14]
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	494a      	ldr	r1, [pc, #296]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001b46:	208a      	movs	r0, #138	; 0x8a
 8001b48:	fb00 f202 	mul.w	r2, r0, r2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4620      	mov	r0, r4
 8001b58:	89f9      	ldrh	r1, [r7, #14]
 8001b5a:	7b3b      	ldrb	r3, [r7, #12]
 8001b5c:	4302      	orrs	r2, r0
 8001b5e:	4844      	ldr	r0, [pc, #272]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001b60:	248a      	movs	r4, #138	; 0x8a
 8001b62:	fb04 f101 	mul.w	r1, r4, r1
 8001b66:	440b      	add	r3, r1
 8001b68:	3304      	adds	r3, #4
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4403      	add	r3, r0
 8001b6e:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] & 0xFF;
 8001b70:	8afb      	ldrh	r3, [r7, #22]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	82fa      	strh	r2, [r7, #22]
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461c      	mov	r4, r3
 8001b80:	89fa      	ldrh	r2, [r7, #14]
 8001b82:	7b3b      	ldrb	r3, [r7, #12]
 8001b84:	493a      	ldr	r1, [pc, #232]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001b86:	208a      	movs	r0, #138	; 0x8a
 8001b88:	fb00 f202 	mul.w	r2, r0, r2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4620      	mov	r0, r4
 8001b98:	89f9      	ldrh	r1, [r7, #14]
 8001b9a:	7b3b      	ldrb	r3, [r7, #12]
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	4834      	ldr	r0, [pc, #208]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001ba0:	248a      	movs	r4, #138	; 0x8a
 8001ba2:	fb04 f101 	mul.w	r1, r4, r1
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3304      	adds	r3, #4
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4403      	add	r3, r0
 8001bae:	605a      	str	r2, [r3, #4]

			PWM_Pins[i].Map_Lengths[j]			 = data_buffer[data_index++] & 0xFF;
 8001bb0:	8afb      	ldrh	r3, [r7, #22]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	82fa      	strh	r2, [r7, #22]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1899      	adds	r1, r3, r2
 8001bbc:	89fa      	ldrh	r2, [r7, #14]
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	780c      	ldrb	r4, [r1, #0]
 8001bc2:	492b      	ldr	r1, [pc, #172]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001bc4:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001bc8:	fb00 f202 	mul.w	r2, r0, r2
 8001bcc:	440a      	add	r2, r1
 8001bce:	4413      	add	r3, r2
 8001bd0:	331c      	adds	r3, #28
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_Lim[j][0]	 = data_buffer[data_index++] << 8;
 8001bd6:	8afb      	ldrh	r3, [r7, #22]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	82fa      	strh	r2, [r7, #22]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	0219      	lsls	r1, r3, #8
 8001be6:	89fa      	ldrh	r2, [r7, #14]
 8001be8:	7b3b      	ldrb	r3, [r7, #12]
 8001bea:	b20c      	sxth	r4, r1
 8001bec:	4920      	ldr	r1, [pc, #128]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001bee:	208a      	movs	r0, #138	; 0x8a
 8001bf0:	fb00 f202 	mul.w	r2, r0, r2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	805a      	strh	r2, [r3, #2]
			PWM_Pins[i].Command_Var_Lim[j][1]	|= data_buffer[data_index++] & 0xFF;
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	82fa      	strh	r2, [r7, #22]
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461c      	mov	r4, r3
 8001c10:	89fa      	ldrh	r2, [r7, #14]
 8001c12:	7b3b      	ldrb	r3, [r7, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001c16:	208a      	movs	r0, #138	; 0x8a
 8001c18:	fb00 f202 	mul.w	r2, r0, r2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	f9b3 0024 	ldrsh.w	r0, [r3, #36]	; 0x24
 8001c26:	b221      	sxth	r1, r4
 8001c28:	89fa      	ldrh	r2, [r7, #14]
 8001c2a:	7b3b      	ldrb	r3, [r7, #12]
 8001c2c:	4301      	orrs	r1, r0
 8001c2e:	b20c      	sxth	r4, r1
 8001c30:	490f      	ldr	r1, [pc, #60]	; (8001c70 <PDM_Load_Config_Buffer+0x5cc>)
 8001c32:	208a      	movs	r0, #138	; 0x8a
 8001c34:	fb00 f202 	mul.w	r2, r0, r2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	4622      	mov	r2, r4
 8001c40:	849a      	strh	r2, [r3, #36]	; 0x24
		for(uint8_t j = 0; j < 2; j++)
 8001c42:	7b3b      	ldrb	r3, [r7, #12]
 8001c44:	3301      	adds	r3, #1
 8001c46:	733b      	strb	r3, [r7, #12]
 8001c48:	7b3b      	ldrb	r3, [r7, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	f67f aeec 	bls.w	8001a28 <PDM_Load_Config_Buffer+0x384>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	3301      	adds	r3, #1
 8001c54:	81fb      	strh	r3, [r7, #14]
 8001c56:	89fb      	ldrh	r3, [r7, #14]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	f67f ae45 	bls.w	80018e8 <PDM_Load_Config_Buffer+0x244>
		}
	}

	//Loads PWM 3D maps
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	e062      	b.n	8001d2a <PDM_Load_Config_Buffer+0x686>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	727b      	strb	r3, [r7, #9]
 8001c68:	e059      	b.n	8001d1e <PDM_Load_Config_Buffer+0x67a>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	723b      	strb	r3, [r7, #8]
 8001c6e:	e050      	b.n	8001d12 <PDM_Load_Config_Buffer+0x66e>
 8001c70:	20000534 	.word	0x20000534
			{
				PWM_Pins[i].Duty_Cycle_Map[j][k]  = data_buffer[data_index++] << 8;
 8001c74:	8afb      	ldrh	r3, [r7, #22]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	82fa      	strh	r2, [r7, #22]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	8978      	ldrh	r0, [r7, #10]
 8001c86:	7a7a      	ldrb	r2, [r7, #9]
 8001c88:	7a39      	ldrb	r1, [r7, #8]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b29d      	uxth	r5, r3
 8001c8e:	4c2b      	ldr	r4, [pc, #172]	; (8001d3c <PDM_Load_Config_Buffer+0x698>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001c9a:	fb02 f200 	mul.w	r2, r2, r0
 8001c9e:	4413      	add	r3, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3330      	adds	r3, #48	; 0x30
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4423      	add	r3, r4
 8001ca8:	462a      	mov	r2, r5
 8001caa:	80da      	strh	r2, [r3, #6]
				PWM_Pins[i].Duty_Cycle_Map[j][k] |= data_buffer[data_index++] & 0xFF;
 8001cac:	8afb      	ldrh	r3, [r7, #22]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	82fa      	strh	r2, [r7, #22]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461d      	mov	r5, r3
 8001cbc:	8978      	ldrh	r0, [r7, #10]
 8001cbe:	7a7a      	ldrb	r2, [r7, #9]
 8001cc0:	7a39      	ldrb	r1, [r7, #8]
 8001cc2:	4c1e      	ldr	r4, [pc, #120]	; (8001d3c <PDM_Load_Config_Buffer+0x698>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001cce:	fb02 f200 	mul.w	r2, r2, r0
 8001cd2:	4413      	add	r3, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3330      	adds	r3, #48	; 0x30
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4423      	add	r3, r4
 8001cdc:	88db      	ldrh	r3, [r3, #6]
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	b22b      	sxth	r3, r5
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	8978      	ldrh	r0, [r7, #10]
 8001ce8:	7a7a      	ldrb	r2, [r7, #9]
 8001cea:	7a39      	ldrb	r1, [r7, #8]
 8001cec:	b29d      	uxth	r5, r3
 8001cee:	4c13      	ldr	r4, [pc, #76]	; (8001d3c <PDM_Load_Config_Buffer+0x698>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001cfa:	fb02 f200 	mul.w	r2, r2, r0
 8001cfe:	4413      	add	r3, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	3330      	adds	r3, #48	; 0x30
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4423      	add	r3, r4
 8001d08:	462a      	mov	r2, r5
 8001d0a:	80da      	strh	r2, [r3, #6]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001d0c:	7a3b      	ldrb	r3, [r7, #8]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	723b      	strb	r3, [r7, #8]
 8001d12:	7a3b      	ldrb	r3, [r7, #8]
 8001d14:	2b0e      	cmp	r3, #14
 8001d16:	d9ad      	bls.n	8001c74 <PDM_Load_Config_Buffer+0x5d0>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	727b      	strb	r3, [r7, #9]
 8001d1e:	7a7b      	ldrb	r3, [r7, #9]
 8001d20:	2b0e      	cmp	r3, #14
 8001d22:	d9a2      	bls.n	8001c6a <PDM_Load_Config_Buffer+0x5c6>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001d24:	897b      	ldrh	r3, [r7, #10]
 8001d26:	3301      	adds	r3, #1
 8001d28:	817b      	strh	r3, [r7, #10]
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d999      	bls.n	8001c64 <PDM_Load_Config_Buffer+0x5c0>
			}
		}
	}

	return;
 8001d30:	e000      	b.n	8001d34 <PDM_Load_Config_Buffer+0x690>
		return;
 8001d32:	bf00      	nop
}
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bcb0      	pop	{r4, r5, r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000534 	.word	0x20000534

08001d40 <PDM_Write_Config_Buffer>:

//Use to write pin, current limit and basic pwm control into their respective variables
//uint8_t *data_buffer - buffer to send config
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Write_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001d40:	b490      	push	{r4, r7}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	f640 028c 	movw	r2, #2188	; 0x88c
 8001d52:	4293      	cmp	r3, r2
 8001d54:	f040 826f 	bne.w	8002236 <PDM_Write_Config_Buffer+0x4f6>
		return;

	uint16_t data_index = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	82fb      	strh	r3, [r7, #22]

	//Writes output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	82bb      	strh	r3, [r7, #20]
 8001d60:	e0a1      	b.n	8001ea6 <PDM_Write_Config_Buffer+0x166>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	74fb      	strb	r3, [r7, #19]
 8001d66:	e050      	b.n	8001e0a <PDM_Write_Config_Buffer+0xca>
		{
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] >> 8;
 8001d68:	8aba      	ldrh	r2, [r7, #20]
 8001d6a:	7cf9      	ldrb	r1, [r7, #19]
 8001d6c:	489a      	ldr	r0, [pc, #616]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	82f9      	strh	r1, [r7, #22]
 8001d86:	4619      	mov	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	440b      	add	r3, r1
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] & 0xFF;
 8001d90:	8aba      	ldrh	r2, [r7, #20]
 8001d92:	7cf9      	ldrb	r1, [r7, #19]
 8001d94:	4890      	ldr	r0, [pc, #576]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	440b      	add	r3, r1
 8001da0:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8001da4:	8afb      	ldrh	r3, [r7, #22]
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	82f9      	strh	r1, [r7, #22]
 8001daa:	4619      	mov	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	440b      	add	r3, r1
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] >> 8;
 8001db4:	8aba      	ldrh	r2, [r7, #20]
 8001db6:	7cf9      	ldrb	r1, [r7, #19]
 8001db8:	4887      	ldr	r0, [pc, #540]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4403      	add	r3, r0
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	8afb      	ldrh	r3, [r7, #22]
 8001dd0:	1c59      	adds	r1, r3, #1
 8001dd2:	82f9      	strh	r1, [r7, #22]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	440b      	add	r3, r1
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] & 0xFF;
 8001dde:	8aba      	ldrh	r2, [r7, #20]
 8001de0:	7cf9      	ldrb	r1, [r7, #19]
 8001de2:	487d      	ldr	r0, [pc, #500]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	440b      	add	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4403      	add	r3, r0
 8001df2:	889a      	ldrh	r2, [r3, #4]
 8001df4:	8afb      	ldrh	r3, [r7, #22]
 8001df6:	1c59      	adds	r1, r3, #1
 8001df8:	82f9      	strh	r1, [r7, #22]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	440b      	add	r3, r1
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2 ; j++)
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	3301      	adds	r3, #1
 8001e08:	74fb      	strb	r3, [r7, #19]
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d9ab      	bls.n	8001d68 <PDM_Write_Config_Buffer+0x28>
		}
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds >> 8;
 8001e10:	8aba      	ldrh	r2, [r7, #20]
 8001e12:	4971      	ldr	r1, [pc, #452]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3308      	adds	r3, #8
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	8afb      	ldrh	r3, [r7, #22]
 8001e28:	1c59      	adds	r1, r3, #1
 8001e2a:	82f9      	strh	r1, [r7, #22]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	440b      	add	r3, r1
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds & 0xFF;
 8001e36:	8aba      	ldrh	r2, [r7, #20]
 8001e38:	4967      	ldr	r1, [pc, #412]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3308      	adds	r3, #8
 8001e46:	881a      	ldrh	r2, [r3, #0]
 8001e48:	8afb      	ldrh	r3, [r7, #22]
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	82f9      	strh	r1, [r7, #22]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	440b      	add	r3, r1
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse >> 8;
 8001e58:	8aba      	ldrh	r2, [r7, #20]
 8001e5a:	495f      	ldr	r1, [pc, #380]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	330a      	adds	r3, #10
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	8afb      	ldrh	r3, [r7, #22]
 8001e70:	1c59      	adds	r1, r3, #1
 8001e72:	82f9      	strh	r1, [r7, #22]
 8001e74:	4619      	mov	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	440b      	add	r3, r1
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse & 0xFF;
 8001e7e:	8aba      	ldrh	r2, [r7, #20]
 8001e80:	4955      	ldr	r1, [pc, #340]	; (8001fd8 <PDM_Write_Config_Buffer+0x298>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	330a      	adds	r3, #10
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	1c59      	adds	r1, r3, #1
 8001e94:	82f9      	strh	r1, [r7, #22]
 8001e96:	4619      	mov	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001ea0:	8abb      	ldrh	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	82bb      	strh	r3, [r7, #20]
 8001ea6:	8abb      	ldrh	r3, [r7, #20]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	f67f af5a 	bls.w	8001d62 <PDM_Write_Config_Buffer+0x22>
	}

	//Writes each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	823b      	strh	r3, [r7, #16]
 8001eb2:	e00c      	b.n	8001ece <PDM_Write_Config_Buffer+0x18e>
	{
		data_buffer[data_index++] = Data_Freq_Buffer[i];
 8001eb4:	8a3a      	ldrh	r2, [r7, #16]
 8001eb6:	8afb      	ldrh	r3, [r7, #22]
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	82f9      	strh	r1, [r7, #22]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	4946      	ldr	r1, [pc, #280]	; (8001fdc <PDM_Write_Config_Buffer+0x29c>)
 8001ec4:	5c8a      	ldrb	r2, [r1, r2]
 8001ec6:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001ec8:	8a3b      	ldrh	r3, [r7, #16]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	823b      	strh	r3, [r7, #16]
 8001ece:	8a3b      	ldrh	r3, [r7, #16]
 8001ed0:	2b1d      	cmp	r3, #29
 8001ed2:	d9ef      	bls.n	8001eb4 <PDM_Write_Config_Buffer+0x174>
	}

	//Writes CAN bus baud rate
	data_buffer[data_index++] = CAN_Baud_Rate;
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	82fa      	strh	r2, [r7, #22]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <PDM_Write_Config_Buffer+0x2a0>)
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs general configuration (PWM CAN and PWM enabled)
	data_buffer[data_index++] = PWM_Pin_Status;
 8001ee6:	8afb      	ldrh	r3, [r7, #22]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	82fa      	strh	r2, [r7, #22]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <PDM_Write_Config_Buffer+0x2a4>)
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	81fb      	strh	r3, [r7, #14]
 8001efc:	e147      	b.n	800218e <PDM_Write_Config_Buffer+0x44e>
	{
		data_buffer[data_index++] = PWM_Pins[i].PWM_Frequency;
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <PDM_Write_Config_Buffer+0x2a8>)
 8001f02:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	881a      	ldrh	r2, [r3, #0]
 8001f10:	8afb      	ldrh	r3, [r7, #22]
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	82f9      	strh	r1, [r7, #22]
 8001f16:	4619      	mov	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	737b      	strb	r3, [r7, #13]
 8001f24:	e052      	b.n	8001fcc <PDM_Write_Config_Buffer+0x28c>
		{
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] >> 8;
 8001f26:	89fa      	ldrh	r2, [r7, #14]
 8001f28:	7b7b      	ldrb	r3, [r7, #13]
 8001f2a:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <PDM_Write_Config_Buffer+0x2a8>)
 8001f2c:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001f30:	fb00 f202 	mul.w	r2, r0, r2
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	440b      	add	r3, r1
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	8afb      	ldrh	r3, [r7, #22]
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	82f9      	strh	r1, [r7, #22]
 8001f46:	4619      	mov	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] & 0xFF;
 8001f50:	89fa      	ldrh	r2, [r7, #14]
 8001f52:	7b7b      	ldrb	r3, [r7, #13]
 8001f54:	4924      	ldr	r1, [pc, #144]	; (8001fe8 <PDM_Write_Config_Buffer+0x2a8>)
 8001f56:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001f5a:	fb00 f202 	mul.w	r2, r0, r2
 8001f5e:	4413      	add	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	889a      	ldrh	r2, [r3, #4]
 8001f66:	8afb      	ldrh	r3, [r7, #22]
 8001f68:	1c59      	adds	r1, r3, #1
 8001f6a:	82f9      	strh	r1, [r7, #22]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	440b      	add	r3, r1
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] >> 8;
 8001f76:	89fa      	ldrh	r2, [r7, #14]
 8001f78:	7b7b      	ldrb	r3, [r7, #13]
 8001f7a:	491b      	ldr	r1, [pc, #108]	; (8001fe8 <PDM_Write_Config_Buffer+0x2a8>)
 8001f7c:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001f80:	fb00 f202 	mul.w	r2, r0, r2
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	8afb      	ldrh	r3, [r7, #22]
 8001f92:	1c59      	adds	r1, r3, #1
 8001f94:	82f9      	strh	r1, [r7, #22]
 8001f96:	4619      	mov	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	440b      	add	r3, r1
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] & 0xFF;
 8001fa0:	89fa      	ldrh	r2, [r7, #14]
 8001fa2:	7b7b      	ldrb	r3, [r7, #13]
 8001fa4:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <PDM_Write_Config_Buffer+0x2a8>)
 8001fa6:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001faa:	fb00 f202 	mul.w	r2, r0, r2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001fb6:	8afb      	ldrh	r3, [r7, #22]
 8001fb8:	1c59      	adds	r1, r3, #1
 8001fba:	82f9      	strh	r1, [r7, #22]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 4; j++)
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	737b      	strb	r3, [r7, #13]
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9a9      	bls.n	8001f26 <PDM_Write_Config_Buffer+0x1e6>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	733b      	strb	r3, [r7, #12]
 8001fd6:	e0d3      	b.n	8002180 <PDM_Write_Config_Buffer+0x440>
 8001fd8:	20000fdc 	.word	0x20000fdc
 8001fdc:	20000efc 	.word	0x20000efc
 8001fe0:	20000fd0 	.word	0x20000fd0
 8001fe4:	20000e84 	.word	0x20000e84
 8001fe8:	20000534 	.word	0x20000534
		{
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] >> 8;
 8001fec:	89fa      	ldrh	r2, [r7, #14]
 8001fee:	7b3b      	ldrb	r3, [r7, #12]
 8001ff0:	4993      	ldr	r1, [pc, #588]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 8001ff2:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001ff6:	fb00 f202 	mul.w	r2, r0, r2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29a      	uxth	r2, r3
 8002008:	8afb      	ldrh	r3, [r7, #22]
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	82f9      	strh	r1, [r7, #22]
 800200e:	4619      	mov	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	440b      	add	r3, r1
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] & 0xFF;
 8002018:	89fa      	ldrh	r2, [r7, #14]
 800201a:	7b3b      	ldrb	r3, [r7, #12]
 800201c:	4988      	ldr	r1, [pc, #544]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 800201e:	f44f 708a 	mov.w	r0, #276	; 0x114
 8002022:	fb00 f202 	mul.w	r2, r0, r2
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	889a      	ldrh	r2, [r3, #4]
 8002030:	8afb      	ldrh	r3, [r7, #22]
 8002032:	1c59      	adds	r1, r3, #1
 8002034:	82f9      	strh	r1, [r7, #22]
 8002036:	4619      	mov	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	440b      	add	r3, r1
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Position[j];
 8002040:	89f9      	ldrh	r1, [r7, #14]
 8002042:	7b3a      	ldrb	r2, [r7, #12]
 8002044:	8afb      	ldrh	r3, [r7, #22]
 8002046:	1c58      	adds	r0, r3, #1
 8002048:	82f8      	strh	r0, [r7, #22]
 800204a:	4618      	mov	r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4403      	add	r3, r0
 8002050:	487b      	ldr	r0, [pc, #492]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 8002052:	f44f 740a 	mov.w	r4, #552	; 0x228
 8002056:	fb04 f101 	mul.w	r1, r4, r1
 800205a:	4401      	add	r1, r0
 800205c:	440a      	add	r2, r1
 800205e:	3210      	adds	r2, #16
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 24;
 8002064:	89fa      	ldrh	r2, [r7, #14]
 8002066:	7b3b      	ldrb	r3, [r7, #12]
 8002068:	4975      	ldr	r1, [pc, #468]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 800206a:	208a      	movs	r0, #138	; 0x8a
 800206c:	fb00 f202 	mul.w	r2, r0, r2
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0e1a      	lsrs	r2, r3, #24
 800207c:	8afb      	ldrh	r3, [r7, #22]
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	82f9      	strh	r1, [r7, #22]
 8002082:	4619      	mov	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	440b      	add	r3, r1
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 16;
 800208c:	89fa      	ldrh	r2, [r7, #14]
 800208e:	7b3b      	ldrb	r3, [r7, #12]
 8002090:	496b      	ldr	r1, [pc, #428]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 8002092:	208a      	movs	r0, #138	; 0x8a
 8002094:	fb00 f202 	mul.w	r2, r0, r2
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0c1a      	lsrs	r2, r3, #16
 80020a4:	8afb      	ldrh	r3, [r7, #22]
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	82f9      	strh	r1, [r7, #22]
 80020aa:	4619      	mov	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	440b      	add	r3, r1
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 8;
 80020b4:	89fa      	ldrh	r2, [r7, #14]
 80020b6:	7b3b      	ldrb	r3, [r7, #12]
 80020b8:	4961      	ldr	r1, [pc, #388]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 80020ba:	208a      	movs	r0, #138	; 0x8a
 80020bc:	fb00 f202 	mul.w	r2, r0, r2
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1a      	lsrs	r2, r3, #8
 80020cc:	8afb      	ldrh	r3, [r7, #22]
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	82f9      	strh	r1, [r7, #22]
 80020d2:	4619      	mov	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	440b      	add	r3, r1
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] & 0xFF;
 80020dc:	89fa      	ldrh	r2, [r7, #14]
 80020de:	7b3b      	ldrb	r3, [r7, #12]
 80020e0:	4957      	ldr	r1, [pc, #348]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 80020e2:	208a      	movs	r0, #138	; 0x8a
 80020e4:	fb00 f202 	mul.w	r2, r0, r2
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	8afb      	ldrh	r3, [r7, #22]
 80020f4:	1c59      	adds	r1, r3, #1
 80020f6:	82f9      	strh	r1, [r7, #22]
 80020f8:	4619      	mov	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	440b      	add	r3, r1
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Map_Lengths[j];
 8002102:	89f9      	ldrh	r1, [r7, #14]
 8002104:	7b3a      	ldrb	r2, [r7, #12]
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	1c58      	adds	r0, r3, #1
 800210a:	82f8      	strh	r0, [r7, #22]
 800210c:	4618      	mov	r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4403      	add	r3, r0
 8002112:	484b      	ldr	r0, [pc, #300]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 8002114:	f44f 740a 	mov.w	r4, #552	; 0x228
 8002118:	fb04 f101 	mul.w	r1, r4, r1
 800211c:	4401      	add	r1, r0
 800211e:	440a      	add	r2, r1
 8002120:	321c      	adds	r2, #28
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] >> 8;
 8002126:	89fa      	ldrh	r2, [r7, #14]
 8002128:	7b3b      	ldrb	r3, [r7, #12]
 800212a:	4945      	ldr	r1, [pc, #276]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 800212c:	208a      	movs	r0, #138	; 0x8a
 800212e:	fb00 f202 	mul.w	r2, r0, r2
 8002132:	4413      	add	r3, r2
 8002134:	3308      	adds	r3, #8
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800213e:	121b      	asrs	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	8afb      	ldrh	r3, [r7, #22]
 8002144:	1c59      	adds	r1, r3, #1
 8002146:	82f9      	strh	r1, [r7, #22]
 8002148:	4619      	mov	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	440b      	add	r3, r1
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] & 0xFF;
 8002152:	89fa      	ldrh	r2, [r7, #14]
 8002154:	7b3b      	ldrb	r3, [r7, #12]
 8002156:	493a      	ldr	r1, [pc, #232]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 8002158:	208a      	movs	r0, #138	; 0x8a
 800215a:	fb00 f202 	mul.w	r2, r0, r2
 800215e:	4413      	add	r3, r2
 8002160:	3308      	adds	r3, #8
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800216a:	8afb      	ldrh	r3, [r7, #22]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	82f9      	strh	r1, [r7, #22]
 8002170:	4619      	mov	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	440b      	add	r3, r1
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2; j++)
 800217a:	7b3b      	ldrb	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	733b      	strb	r3, [r7, #12]
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	f67f af32 	bls.w	8001fec <PDM_Write_Config_Buffer+0x2ac>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	3301      	adds	r3, #1
 800218c:	81fb      	strh	r3, [r7, #14]
 800218e:	89fb      	ldrh	r3, [r7, #14]
 8002190:	2b03      	cmp	r3, #3
 8002192:	f67f aeb4 	bls.w	8001efe <PDM_Write_Config_Buffer+0x1be>
		}
	}

	//Writes PWM 3D maps
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	e048      	b.n	800222e <PDM_Write_Config_Buffer+0x4ee>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 800219c:	2300      	movs	r3, #0
 800219e:	727b      	strb	r3, [r7, #9]
 80021a0:	e03f      	b.n	8002222 <PDM_Write_Config_Buffer+0x4e2>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	723b      	strb	r3, [r7, #8]
 80021a6:	e036      	b.n	8002216 <PDM_Write_Config_Buffer+0x4d6>
			{
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] >> 8;
 80021a8:	8978      	ldrh	r0, [r7, #10]
 80021aa:	7a7a      	ldrb	r2, [r7, #9]
 80021ac:	7a39      	ldrb	r1, [r7, #8]
 80021ae:	4c24      	ldr	r4, [pc, #144]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	f44f 728a 	mov.w	r2, #276	; 0x114
 80021ba:	fb02 f200 	mul.w	r2, r2, r0
 80021be:	4413      	add	r3, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	3330      	adds	r3, #48	; 0x30
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4423      	add	r3, r4
 80021c8:	88db      	ldrh	r3, [r3, #6]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	8afb      	ldrh	r3, [r7, #22]
 80021d0:	1c59      	adds	r1, r3, #1
 80021d2:	82f9      	strh	r1, [r7, #22]
 80021d4:	4619      	mov	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	440b      	add	r3, r1
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] & 0xFF;
 80021de:	8978      	ldrh	r0, [r7, #10]
 80021e0:	7a7a      	ldrb	r2, [r7, #9]
 80021e2:	7a39      	ldrb	r1, [r7, #8]
 80021e4:	4c16      	ldr	r4, [pc, #88]	; (8002240 <PDM_Write_Config_Buffer+0x500>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	f44f 728a 	mov.w	r2, #276	; 0x114
 80021f0:	fb02 f200 	mul.w	r2, r2, r0
 80021f4:	4413      	add	r3, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	3330      	adds	r3, #48	; 0x30
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4423      	add	r3, r4
 80021fe:	88da      	ldrh	r2, [r3, #6]
 8002200:	8afb      	ldrh	r3, [r7, #22]
 8002202:	1c59      	adds	r1, r3, #1
 8002204:	82f9      	strh	r1, [r7, #22]
 8002206:	4619      	mov	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	440b      	add	r3, r1
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8002210:	7a3b      	ldrb	r3, [r7, #8]
 8002212:	3301      	adds	r3, #1
 8002214:	723b      	strb	r3, [r7, #8]
 8002216:	7a3b      	ldrb	r3, [r7, #8]
 8002218:	2b0e      	cmp	r3, #14
 800221a:	d9c5      	bls.n	80021a8 <PDM_Write_Config_Buffer+0x468>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 800221c:	7a7b      	ldrb	r3, [r7, #9]
 800221e:	3301      	adds	r3, #1
 8002220:	727b      	strb	r3, [r7, #9]
 8002222:	7a7b      	ldrb	r3, [r7, #9]
 8002224:	2b0e      	cmp	r3, #14
 8002226:	d9bc      	bls.n	80021a2 <PDM_Write_Config_Buffer+0x462>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	3301      	adds	r3, #1
 800222c:	817b      	strh	r3, [r7, #10]
 800222e:	897b      	ldrh	r3, [r7, #10]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d9b3      	bls.n	800219c <PDM_Write_Config_Buffer+0x45c>
			}
		}
	}

	return;
 8002234:	e000      	b.n	8002238 <PDM_Write_Config_Buffer+0x4f8>
		return;
 8002236:	bf00      	nop
}
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc90      	pop	{r4, r7}
 800223e:	4770      	bx	lr
 8002240:	20000534 	.word	0x20000534

08002244 <PDM_USB_Receive_Config>:

//Sets up pins, current limits, pwm controls and pwm 3D maps with received data from USB port
//uint8_t *Data - buffer received via USB port
//uint16_t Size - size of the buffer must be 5 bytes bigger than the information received (1 byte of command and 4 bytes of CRC)
static void PDM_USB_Receive_Config(uint8_t *Data, uint16_t Size)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
	uint32_t crc[2];

	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) &Data[5], (EEPROM_BUFFER_SIZE / sizeof(uint32_t)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3305      	adds	r3, #5
 8002254:	f240 2223 	movw	r2, #547	; 0x223
 8002258:	4619      	mov	r1, r3
 800225a:	481b      	ldr	r0, [pc, #108]	; (80022c8 <PDM_USB_Receive_Config+0x84>)
 800225c:	f003 fdbb 	bl	8005dd6 <HAL_CRC_Calculate>
 8002260:	4603      	mov	r3, r0
 8002262:	60bb      	str	r3, [r7, #8]

	crc[1]  = Data[1] << 24;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3301      	adds	r3, #1
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[2] << 16;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	3202      	adds	r2, #2
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[3] << 8;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	3203      	adds	r2, #3
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	0212      	lsls	r2, r2, #8
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
	crc[1] |= Data[4];
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	3204      	adds	r2, #4
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

	if(crc[0] != crc[1])
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	d10f      	bne.n	80022be <PDM_USB_Receive_Config+0x7a>
		return;

	PDM_Write_Config_Buffer(&Data[5], EEPROM_BUFFER_SIZE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3305      	adds	r3, #5
 80022a2:	f640 018c 	movw	r1, #2188	; 0x88c
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fd4a 	bl	8001d40 <PDM_Write_Config_Buffer>

	AT24Cxx_Write_DMA(&hi2c1, 0x0000, &Data[5], EEPROM_BUFFER_SIZE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1d5a      	adds	r2, r3, #5
 80022b0:	f640 038c 	movw	r3, #2188	; 0x88c
 80022b4:	2100      	movs	r1, #0
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <PDM_USB_Receive_Config+0x88>)
 80022b8:	f7fe f920 	bl	80004fc <AT24Cxx_Write_DMA>

	return;
 80022bc:	e000      	b.n	80022c0 <PDM_USB_Receive_Config+0x7c>
		return;
 80022be:	bf00      	nop
}
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000524 	.word	0x20000524
 80022cc:	200004d0 	.word	0x200004d0

080022d0 <PDM_USB_Transmit_Config>:

//Sends pins, current limits, pwm controls and pwm 3D maps via USB port
static void PDM_USB_Transmit_Config()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
	uint8_t *data_buffer = malloc((EEPROM_BUFFER_SIZE + 5) * sizeof(uint8_t));
 80022d6:	f640 0091 	movw	r0, #2193	; 0x891
 80022da:	f00c fb29 	bl	800e930 <malloc>
 80022de:	4603      	mov	r3, r0
 80022e0:	607b      	str	r3, [r7, #4]
	uint32_t crc = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]

	PDM_Load_Config_Buffer(&data_buffer[5], EEPROM_BUFFER_SIZE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3305      	adds	r3, #5
 80022ea:	f640 018c 	movw	r1, #2188	; 0x88c
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f9d8 	bl	80016a4 <PDM_Load_Config_Buffer>

	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[5], (EEPROM_BUFFER_SIZE / sizeof(uint32_t)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3305      	adds	r3, #5
 80022f8:	f240 2223 	movw	r2, #547	; 0x223
 80022fc:	4619      	mov	r1, r3
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <PDM_USB_Transmit_Config+0x80>)
 8002300:	f003 fd69 	bl	8005dd6 <HAL_CRC_Calculate>
 8002304:	6038      	str	r0, [r7, #0]

	data_buffer[1] = crc >> 24;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	0e1a      	lsrs	r2, r3, #24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3301      	adds	r3, #1
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = crc >> 16;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	0c1a      	lsrs	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3302      	adds	r3, #2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = crc >> 8;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	0a1a      	lsrs	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3303      	adds	r3, #3
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = crc & 0xFF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

	CDC_Transmit_FS(data_buffer, (EEPROM_BUFFER_SIZE + 5));
 8002334:	f640 0191 	movw	r1, #2193	; 0x891
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f00b fe45 	bl	800dfc8 <CDC_Transmit_FS>

	free(data_buffer);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f00c fafe 	bl	800e940 <free>
	data_buffer = NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]

	return;
 8002348:	bf00      	nop
}
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000524 	.word	0x20000524

08002354 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
//	uint8_t data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE];
	uint8_t *data_buffer = malloc(EEPROM_BUFFER_SIZE * sizeof(uint8_t));
 800235e:	f640 008c 	movw	r0, #2188	; 0x88c
 8002362:	f00c fae5 	bl	800e930 <malloc>
 8002366:	4603      	mov	r3, r0
 8002368:	60bb      	str	r3, [r7, #8]
//	AT24Cxx_Read(hi2c, EEPROM_BUFFER_SIZE, &data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);

	//Load maps into global PWM structs
//	PDM_Load_Map_Buffer(&data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);

	free(data_buffer);
 800236a:	68b8      	ldr	r0, [r7, #8]
 800236c:	f00c fae8 	bl	800e940 <free>
	data_buffer = NULL;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 8002374:	f7fe fee2 	bl	800113c <PDM_Hard_Code_Config>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 8002378:	2300      	movs	r3, #0
 800237a:	81fb      	strh	r3, [r7, #14]
 800237c:	e009      	b.n	8002392 <PDM_Init+0x3e>
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	89fa      	ldrh	r2, [r7, #14]
 8002382:	0052      	lsls	r2, r2, #1
 8002384:	b291      	uxth	r1, r2
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <PDM_Init+0xa4>)
 8002388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800238c:	89fb      	ldrh	r3, [r7, #14]
 800238e:	3301      	adds	r3, #1
 8002390:	81fb      	strh	r3, [r7, #14]
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	2b1d      	cmp	r3, #29
 8002396:	d9f2      	bls.n	800237e <PDM_Init+0x2a>

	//Initializes each PWM able output
	for(uint8_t i = 0; i < 4; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	737b      	strb	r3, [r7, #13]
 800239c:	e00e      	b.n	80023bc <PDM_Init+0x68>
		PDM_PWM_Init(hcan, &PWM_Pins[i], i);
 800239e:	7b7b      	ldrb	r3, [r7, #13]
 80023a0:	f44f 720a 	mov.w	r2, #552	; 0x228
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <PDM_Init+0xa8>)
 80023aa:	4413      	add	r3, r2
 80023ac:	7b7a      	ldrb	r2, [r7, #13]
 80023ae:	4619      	mov	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 ff53 	bl	800325c <PDM_PWM_Init>
	for(uint8_t i = 0; i < 4; i++)
 80023b6:	7b7b      	ldrb	r3, [r7, #13]
 80023b8:	3301      	adds	r3, #1
 80023ba:	737b      	strb	r3, [r7, #13]
 80023bc:	7b7b      	ldrb	r3, [r7, #13]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d9ed      	bls.n	800239e <PDM_Init+0x4a>

	//Checks input pin levels
	PDM_Input_Process();
 80023c2:	f000 f96b 	bl	800269c <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, CAN_Baud_Rate);
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <PDM_Init+0xac>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7fe ff45 	bl	800125c <PDM_CAN_Init>

	//Sets outputs based on input levels
	PDM_Output_Process();
 80023d2:	f000 fa63 	bl	800289c <PDM_Output_Process>

	//Initializates timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_BUFFER[5], 5);
 80023d6:	2205      	movs	r2, #5
 80023d8:	490a      	ldr	r1, [pc, #40]	; (8002404 <PDM_Init+0xb0>)
 80023da:	480b      	ldr	r0, [pc, #44]	; (8002408 <PDM_Init+0xb4>)
 80023dc:	f002 f8bc 	bl	8004558 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_BUFFER[0], 5);
 80023e0:	2205      	movs	r2, #5
 80023e2:	490a      	ldr	r1, [pc, #40]	; (800240c <PDM_Init+0xb8>)
 80023e4:	480a      	ldr	r0, [pc, #40]	; (8002410 <PDM_Init+0xbc>)
 80023e6:	f002 f8b7 	bl	8004558 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 80023ea:	480a      	ldr	r0, [pc, #40]	; (8002414 <PDM_Init+0xc0>)
 80023ec:	f007 fc7e 	bl	8009cec <HAL_TIM_Base_Start_IT>

	return;
 80023f0:	bf00      	nop
}
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200010f0 	.word	0x200010f0
 80023fc:	20000534 	.word	0x20000534
 8002400:	20000fd0 	.word	0x20000fd0
 8002404:	20000e92 	.word	0x20000e92
 8002408:	20000e3c 	.word	0x20000e3c
 800240c:	20000e88 	.word	0x20000e88
 8002410:	20000488 	.word	0x20000488
 8002414:	200011f8 	.word	0x200011f8

08002418 <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
	if((Data[0] == USB_COMMAND_READ_CONFIG) && (Size == 1))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d105      	bne.n	8002438 <PDM_USB_Process+0x20>
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <PDM_USB_Process+0x20>
		PDM_USB_Transmit_Config();
 8002432:	f7ff ff4d 	bl	80022d0 <PDM_USB_Transmit_Config>
 8002436:	e024      	b.n	8002482 <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_WRITE_CONFIG) && (Size == (EEPROM_BUFFER_SIZE + 5)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d10a      	bne.n	8002456 <PDM_USB_Process+0x3e>
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	f640 0291 	movw	r2, #2193	; 0x891
 8002446:	4293      	cmp	r3, r2
 8002448:	d105      	bne.n	8002456 <PDM_USB_Process+0x3e>
		PDM_USB_Receive_Config(Data, Size);
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fef8 	bl	8002244 <PDM_USB_Receive_Config>
 8002454:	e015      	b.n	8002482 <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_CONNECT) && (Size == 1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d106      	bne.n	800246c <PDM_USB_Process+0x54>
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d103      	bne.n	800246c <PDM_USB_Process+0x54>
		USB_Connected_Flag = 1;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <PDM_USB_Process+0x74>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e00a      	b.n	8002482 <PDM_USB_Process+0x6a>

	else if((Data[0] == USB_COMMAND_DISCONNECT) && (Size == 1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d106      	bne.n	8002482 <PDM_USB_Process+0x6a>
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d103      	bne.n	8002482 <PDM_USB_Process+0x6a>
		USB_Connected_Flag = 0;
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <PDM_USB_Process+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
}
 8002480:	e7ff      	b.n	8002482 <PDM_USB_Process+0x6a>
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000f80 	.word	0x20000f80

08002490 <PDM_USB_Transmit_Data>:

//Sends data channels via USB
void PDM_USB_Transmit_Data()
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
	uint8_t *data_buffer = malloc((NBR_OF_DATA_CHANNELS * 2) * sizeof(uint8_t));
 8002496:	203c      	movs	r0, #60	; 0x3c
 8002498:	f00c fa4a 	bl	800e930 <malloc>
 800249c:	4603      	mov	r3, r0
 800249e:	60bb      	str	r3, [r7, #8]
	uint32_t crc = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]

	//Load data channels inside transmission buffer
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e024      	b.n	80024f4 <PDM_USB_Transmit_Data+0x64>
	{
		data_buffer[(i * 2) + 5]  = Data_Buffer[i] >> 8;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	4a32      	ldr	r2, [pc, #200]	; (8002578 <PDM_USB_Transmit_Data+0xe8>)
 80024ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	b299      	uxth	r1, r3
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	3305      	adds	r3, #5
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	4413      	add	r3, r2
 80024c0:	b2ca      	uxtb	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
		data_buffer[(i * 2) + 6] |= Data_Buffer[i] & 0xFF;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	3306      	adds	r3, #6
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b25a      	sxtb	r2, r3
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	4928      	ldr	r1, [pc, #160]	; (8002578 <PDM_USB_Transmit_Data+0xe8>)
 80024d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	b259      	sxtb	r1, r3
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	3306      	adds	r3, #6
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b1d      	cmp	r3, #29
 80024f8:	d9d7      	bls.n	80024aa <PDM_USB_Transmit_Data+0x1a>
	}

	//Load command into transmission buffer
	data_buffer[0] = USB_COMMAND_READ_DATA & 0xFF;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2205      	movs	r2, #5
 80024fe:	701a      	strb	r2, [r3, #0]

	//Calculate buffer CRC
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[5], (NBR_OF_DATA_CHANNELS / sizeof(uint32_t)));
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3305      	adds	r3, #5
 8002504:	2207      	movs	r2, #7
 8002506:	4619      	mov	r1, r3
 8002508:	481c      	ldr	r0, [pc, #112]	; (800257c <PDM_USB_Transmit_Data+0xec>)
 800250a:	f003 fc64 	bl	8005dd6 <HAL_CRC_Calculate>
 800250e:	6078      	str	r0, [r7, #4]

	//Load CRC into transmission buffer
	data_buffer[1]  = crc >> 24;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0e1a      	lsrs	r2, r3, #24
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	3301      	adds	r3, #1
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]
	data_buffer[2] |= crc >> 16;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3302      	adds	r3, #2
 8002520:	7819      	ldrb	r1, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3302      	adds	r3, #2
 800252c:	430a      	orrs	r2, r1
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]
	data_buffer[3] |= crc >> 8;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3303      	adds	r3, #3
 8002536:	7819      	ldrb	r1, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3303      	adds	r3, #3
 8002542:	430a      	orrs	r2, r1
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
	data_buffer[4] |= crc;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3304      	adds	r3, #4
 800254c:	7819      	ldrb	r1, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3304      	adds	r3, #4
 8002556:	430a      	orrs	r2, r1
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

	//Transmit data buffer via USB
	CDC_Transmit_FS(data_buffer, EEPROM_BUFFER_SIZE + 5);
 800255c:	f640 0191 	movw	r1, #2193	; 0x891
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f00b fd31 	bl	800dfc8 <CDC_Transmit_FS>

	free(data_buffer);
 8002566:	68b8      	ldr	r0, [r7, #8]
 8002568:	f00c f9ea 	bl	800e940 <free>
	data_buffer = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]

	return;
 8002570:	bf00      	nop
}
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200011bc 	.word	0x200011bc
 800257c:	20000524 	.word	0x20000524

08002580 <PDM_Output_Set>:

//Sets output pin levels
//uint8_t output_pin - number of output
//uint8_t output_level - level of output
static void PDM_Output_Set(uint8_t output_pin, uint8_t output_level)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	460a      	mov	r2, r1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	4613      	mov	r3, r2
 800258e:	71bb      	strb	r3, [r7, #6]
	switch(output_pin)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	3b04      	subs	r3, #4
 8002594:	2b0b      	cmp	r3, #11
 8002596:	d878      	bhi.n	800268a <PDM_Output_Set+0x10a>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <PDM_Output_Set+0x20>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025d1 	.word	0x080025d1
 80025a4:	080025e1 	.word	0x080025e1
 80025a8:	080025f1 	.word	0x080025f1
 80025ac:	08002601 	.word	0x08002601
 80025b0:	08002611 	.word	0x08002611
 80025b4:	08002621 	.word	0x08002621
 80025b8:	08002631 	.word	0x08002631
 80025bc:	08002641 	.word	0x08002641
 80025c0:	08002651 	.word	0x08002651
 80025c4:	0800265f 	.word	0x0800265f
 80025c8:	0800266d 	.word	0x0800266d
 80025cc:	0800267b 	.word	0x0800267b
	{
	case 4:
		HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_level);
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d8:	482e      	ldr	r0, [pc, #184]	; (8002694 <PDM_Output_Set+0x114>)
 80025da:	f004 fa6d 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 80025de:	e053      	b.n	8002688 <PDM_Output_Set+0x108>

	case 5:
		HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_level);
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e8:	482a      	ldr	r0, [pc, #168]	; (8002694 <PDM_Output_Set+0x114>)
 80025ea:	f004 fa65 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 80025ee:	e04b      	b.n	8002688 <PDM_Output_Set+0x108>

	case 6:
		HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_level);
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f8:	4826      	ldr	r0, [pc, #152]	; (8002694 <PDM_Output_Set+0x114>)
 80025fa:	f004 fa5d 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 80025fe:	e043      	b.n	8002688 <PDM_Output_Set+0x108>

	case 7:
		HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_level);
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002608:	4822      	ldr	r0, [pc, #136]	; (8002694 <PDM_Output_Set+0x114>)
 800260a:	f004 fa55 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800260e:	e03b      	b.n	8002688 <PDM_Output_Set+0x108>

#ifndef LQFP64
	case 8:
		HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_level);
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	461a      	mov	r2, r3
 8002614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002618:	481e      	ldr	r0, [pc, #120]	; (8002694 <PDM_Output_Set+0x114>)
 800261a:	f004 fa4d 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800261e:	e033      	b.n	8002688 <PDM_Output_Set+0x108>

	case 9:
		HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_level);
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	461a      	mov	r2, r3
 8002624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002628:	481a      	ldr	r0, [pc, #104]	; (8002694 <PDM_Output_Set+0x114>)
 800262a:	f004 fa45 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800262e:	e02b      	b.n	8002688 <PDM_Output_Set+0x108>

	case 10:
		HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_level);
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	461a      	mov	r2, r3
 8002634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002638:	4816      	ldr	r0, [pc, #88]	; (8002694 <PDM_Output_Set+0x114>)
 800263a:	f004 fa3d 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800263e:	e023      	b.n	8002688 <PDM_Output_Set+0x108>

	case 11:
		HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_level);
 8002640:	79bb      	ldrb	r3, [r7, #6]
 8002642:	461a      	mov	r2, r3
 8002644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002648:	4812      	ldr	r0, [pc, #72]	; (8002694 <PDM_Output_Set+0x114>)
 800264a:	f004 fa35 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800264e:	e01b      	b.n	8002688 <PDM_Output_Set+0x108>

	case 12:
		HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_level);
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	461a      	mov	r2, r3
 8002654:	2108      	movs	r1, #8
 8002656:	4810      	ldr	r0, [pc, #64]	; (8002698 <PDM_Output_Set+0x118>)
 8002658:	f004 fa2e 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800265c:	e014      	b.n	8002688 <PDM_Output_Set+0x108>

	case 13:
		HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_level);
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	461a      	mov	r2, r3
 8002662:	2104      	movs	r1, #4
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <PDM_Output_Set+0x118>)
 8002666:	f004 fa27 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 800266a:	e00d      	b.n	8002688 <PDM_Output_Set+0x108>

	case 14:
		HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_level);
 800266c:	79bb      	ldrb	r3, [r7, #6]
 800266e:	461a      	mov	r2, r3
 8002670:	2120      	movs	r1, #32
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <PDM_Output_Set+0x118>)
 8002674:	f004 fa20 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 8002678:	e006      	b.n	8002688 <PDM_Output_Set+0x108>

	case 15:
		HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_level);
 800267a:	79bb      	ldrb	r3, [r7, #6]
 800267c:	461a      	mov	r2, r3
 800267e:	2110      	movs	r1, #16
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <PDM_Output_Set+0x118>)
 8002682:	f004 fa19 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 8002686:	bf00      	nop
#endif
	}

	return;
 8002688:	bf00      	nop
 800268a:	bf00      	nop
}
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021800 	.word	0x40021800

0800269c <PDM_Input_Process>:

//Process input pin levels
void PDM_Input_Process()
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	Input_Pin_Levels = 0x0000;
 80026a0:	4b7a      	ldr	r3, [pc, #488]	; (800288c <PDM_Input_Process+0x1f0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels  = HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 80026a6:	2101      	movs	r1, #1
 80026a8:	4879      	ldr	r0, [pc, #484]	; (8002890 <PDM_Input_Process+0x1f4>)
 80026aa:	f004 f9ed 	bl	8006a88 <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b76      	ldr	r3, [pc, #472]	; (800288c <PDM_Input_Process+0x1f0>)
 80026b4:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 80026b6:	2102      	movs	r1, #2
 80026b8:	4875      	ldr	r0, [pc, #468]	; (8002890 <PDM_Input_Process+0x1f4>)
 80026ba:	f004 f9e5 	bl	8006a88 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <PDM_Input_Process+0x1f0>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b6e      	ldr	r3, [pc, #440]	; (800288c <PDM_Input_Process+0x1f0>)
 80026d2:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 80026d4:	2104      	movs	r1, #4
 80026d6:	486e      	ldr	r0, [pc, #440]	; (8002890 <PDM_Input_Process+0x1f4>)
 80026d8:	f004 f9d6 	bl	8006a88 <HAL_GPIO_ReadPin>
 80026dc:	4603      	mov	r3, r0
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <PDM_Input_Process+0x1f0>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <PDM_Input_Process+0x1f0>)
 80026f0:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 80026f2:	2108      	movs	r1, #8
 80026f4:	4866      	ldr	r0, [pc, #408]	; (8002890 <PDM_Input_Process+0x1f4>)
 80026f6:	f004 f9c7 	bl	8006a88 <HAL_GPIO_ReadPin>
 80026fa:	4603      	mov	r3, r0
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	b21a      	sxth	r2, r3
 8002700:	4b62      	ldr	r3, [pc, #392]	; (800288c <PDM_Input_Process+0x1f0>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b21b      	sxth	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b21b      	sxth	r3, r3
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b5f      	ldr	r3, [pc, #380]	; (800288c <PDM_Input_Process+0x1f0>)
 800270e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8002710:	2110      	movs	r1, #16
 8002712:	4860      	ldr	r0, [pc, #384]	; (8002894 <PDM_Input_Process+0x1f8>)
 8002714:	f004 f9b8 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	b21a      	sxth	r2, r3
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <PDM_Input_Process+0x1f0>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b21b      	sxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b21b      	sxth	r3, r3
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b58      	ldr	r3, [pc, #352]	; (800288c <PDM_Input_Process+0x1f0>)
 800272c:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 800272e:	2120      	movs	r1, #32
 8002730:	4858      	ldr	r0, [pc, #352]	; (8002894 <PDM_Input_Process+0x1f8>)
 8002732:	f004 f9a9 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	015b      	lsls	r3, r3, #5
 800273a:	b21a      	sxth	r2, r3
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <PDM_Input_Process+0x1f0>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b21b      	sxth	r3, r3
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <PDM_Input_Process+0x1f0>)
 800274a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 800274c:	2140      	movs	r1, #64	; 0x40
 800274e:	4852      	ldr	r0, [pc, #328]	; (8002898 <PDM_Input_Process+0x1fc>)
 8002750:	f004 f99a 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002754:	4603      	mov	r3, r0
 8002756:	019b      	lsls	r3, r3, #6
 8002758:	b21a      	sxth	r2, r3
 800275a:	4b4c      	ldr	r3, [pc, #304]	; (800288c <PDM_Input_Process+0x1f0>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b21b      	sxth	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b21b      	sxth	r3, r3
 8002764:	b29a      	uxth	r2, r3
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <PDM_Input_Process+0x1f0>)
 8002768:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	484a      	ldr	r0, [pc, #296]	; (8002898 <PDM_Input_Process+0x1fc>)
 800276e:	f004 f98b 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002772:	4603      	mov	r3, r0
 8002774:	01db      	lsls	r3, r3, #7
 8002776:	b21a      	sxth	r2, r3
 8002778:	4b44      	ldr	r3, [pc, #272]	; (800288c <PDM_Input_Process+0x1f0>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b21b      	sxth	r3, r3
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b41      	ldr	r3, [pc, #260]	; (800288c <PDM_Input_Process+0x1f0>)
 8002786:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 8002788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800278c:	4842      	ldr	r0, [pc, #264]	; (8002898 <PDM_Input_Process+0x1fc>)
 800278e:	f004 f97b 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002792:	4603      	mov	r3, r0
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b21a      	sxth	r2, r3
 8002798:	4b3c      	ldr	r3, [pc, #240]	; (800288c <PDM_Input_Process+0x1f0>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b21b      	sxth	r3, r3
 800279e:	4313      	orrs	r3, r2
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <PDM_Input_Process+0x1f0>)
 80027a6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 80027a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ac:	483a      	ldr	r0, [pc, #232]	; (8002898 <PDM_Input_Process+0x1fc>)
 80027ae:	f004 f96b 	bl	8006a88 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	025b      	lsls	r3, r3, #9
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <PDM_Input_Process+0x1f0>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <PDM_Input_Process+0x1f0>)
 80027c6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 80027c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027cc:	4832      	ldr	r0, [pc, #200]	; (8002898 <PDM_Input_Process+0x1fc>)
 80027ce:	f004 f95b 	bl	8006a88 <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <PDM_Input_Process+0x1f0>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <PDM_Input_Process+0x1f0>)
 80027e6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 80027e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027ec:	482a      	ldr	r0, [pc, #168]	; (8002898 <PDM_Input_Process+0x1fc>)
 80027ee:	f004 f94b 	bl	8006a88 <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	02db      	lsls	r3, r3, #11
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <PDM_Input_Process+0x1f0>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b21b      	sxth	r3, r3
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <PDM_Input_Process+0x1f0>)
 8002806:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8002808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800280c:	4821      	ldr	r0, [pc, #132]	; (8002894 <PDM_Input_Process+0x1f8>)
 800280e:	f004 f93b 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002812:	4603      	mov	r3, r0
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	b21a      	sxth	r2, r3
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <PDM_Input_Process+0x1f0>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b21b      	sxth	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	b21b      	sxth	r3, r3
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <PDM_Input_Process+0x1f0>)
 8002826:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8002828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800282c:	4819      	ldr	r0, [pc, #100]	; (8002894 <PDM_Input_Process+0x1f8>)
 800282e:	f004 f92b 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002832:	4603      	mov	r3, r0
 8002834:	035b      	lsls	r3, r3, #13
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <PDM_Input_Process+0x1f0>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b21b      	sxth	r3, r3
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <PDM_Input_Process+0x1f0>)
 8002846:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 8002848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800284c:	4811      	ldr	r0, [pc, #68]	; (8002894 <PDM_Input_Process+0x1f8>)
 800284e:	f004 f91b 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002852:	4603      	mov	r3, r0
 8002854:	039b      	lsls	r3, r3, #14
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <PDM_Input_Process+0x1f0>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b21b      	sxth	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b21b      	sxth	r3, r3
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <PDM_Input_Process+0x1f0>)
 8002866:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8002868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286c:	4809      	ldr	r0, [pc, #36]	; (8002894 <PDM_Input_Process+0x1f8>)
 800286e:	f004 f90b 	bl	8006a88 <HAL_GPIO_ReadPin>
 8002872:	4603      	mov	r3, r0
 8002874:	03db      	lsls	r3, r3, #15
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <PDM_Input_Process+0x1f0>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b21b      	sxth	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b21b      	sxth	r3, r3
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b01      	ldr	r3, [pc, #4]	; (800288c <PDM_Input_Process+0x1f0>)
 8002886:	801a      	strh	r2, [r3, #0]

	return;
 8002888:	bf00      	nop
}
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20001248 	.word	0x20001248
 8002890:	40021400 	.word	0x40021400
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800

0800289c <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
#ifndef LQFP64
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 80028a2:	2304      	movs	r3, #4
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	e046      	b.n	8002936 <PDM_Output_Process+0x9a>
#else
	for(uint8_t i = 4; i < (NBR_OF_OUTPUTS - 8); i++)
#endif
	{
		//Check if virtual fuse isn't tripped and if the input pins match their enabled states
		if((((Driver_Safety_Flag >> i) & 0x01) == 0)
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <PDM_Output_Process+0xd4>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	fa42 f303 	asr.w	r3, r2, r3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d134      	bne.n	8002926 <PDM_Output_Process+0x8a>
				&& (__PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[0], Output_Pin[i].Input_Levels[0])
 80028bc:	79fa      	ldrb	r2, [r7, #7]
 80028be:	492d      	ldr	r1, [pc, #180]	; (8002974 <PDM_Output_Process+0xd8>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <PDM_Output_Process+0xdc>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b299      	uxth	r1, r3
 80028d4:	79fa      	ldrb	r2, [r7, #7]
 80028d6:	4827      	ldr	r0, [pc, #156]	; (8002974 <PDM_Output_Process+0xd8>)
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4403      	add	r3, r0
 80028e2:	3304      	adds	r3, #4
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	4299      	cmp	r1, r3
 80028e8:	d017      	beq.n	800291a <PDM_Output_Process+0x7e>
				||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[1], Output_Pin[i].Input_Levels[1])))
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	4921      	ldr	r1, [pc, #132]	; (8002974 <PDM_Output_Process+0xd8>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3302      	adds	r3, #2
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <PDM_Output_Process+0xdc>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	4013      	ands	r3, r2
 8002902:	b299      	uxth	r1, r3
 8002904:	79fa      	ldrb	r2, [r7, #7]
 8002906:	481b      	ldr	r0, [pc, #108]	; (8002974 <PDM_Output_Process+0xd8>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	3306      	adds	r3, #6
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	4299      	cmp	r1, r3
 8002918:	d105      	bne.n	8002926 <PDM_Output_Process+0x8a>
		{
			PDM_Output_Set(i, GPIO_PIN_SET);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2101      	movs	r1, #1
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fe2e 	bl	8002580 <PDM_Output_Set>
 8002924:	e004      	b.n	8002930 <PDM_Output_Process+0x94>
		}else{
			PDM_Output_Set(i, GPIO_PIN_RESET);
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fe28 	bl	8002580 <PDM_Output_Set>
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	3301      	adds	r3, #1
 8002934:	71fb      	strb	r3, [r7, #7]
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	2b0f      	cmp	r3, #15
 800293a:	d9b5      	bls.n	80028a8 <PDM_Output_Process+0xc>
#ifdef LQFP64
	PDM_Output_Expander_Set(&hi2c1);
#endif

	//Checks each PWM able output individually
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800293c:	2300      	movs	r3, #0
 800293e:	71bb      	strb	r3, [r7, #6]
 8002940:	e00e      	b.n	8002960 <PDM_Output_Process+0xc4>
	{
		PDM_PWM_Output_Process(&PWM_Pins[i], i);
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <PDM_Output_Process+0xe0>)
 800294e:	4413      	add	r3, r2
 8002950:	79ba      	ldrb	r2, [r7, #6]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fd73 	bl	8003440 <PDM_PWM_Output_Process>
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800295a:	79bb      	ldrb	r3, [r7, #6]
 800295c:	3301      	adds	r3, #1
 800295e:	71bb      	strb	r3, [r7, #6]
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d9ed      	bls.n	8002942 <PDM_Output_Process+0xa6>
	}

	return;
 8002966:	bf00      	nop
}
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000530 	.word	0x20000530
 8002974:	20000fdc 	.word	0x20000fdc
 8002978:	20001248 	.word	0x20001248
 800297c:	20000534 	.word	0x20000534

08002980 <PDM_Output_Fuse>:

//Checks output currents and compares with thresholds and timeouts, if over both, processes outputs
void PDM_Output_Fuse()
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	uint8_t fuse_flag = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	71bb      	strb	r3, [r7, #6]
 800298e:	e066      	b.n	8002a5e <PDM_Output_Fuse+0xde>
	{
		if(Output_Pin[i].Current_Thresholds == 0)
 8002990:	79ba      	ldrb	r2, [r7, #6]
 8002992:	493c      	ldr	r1, [pc, #240]	; (8002a84 <PDM_Output_Fuse+0x104>)
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3308      	adds	r3, #8
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d057      	beq.n	8002a56 <PDM_Output_Fuse+0xd6>
			continue;

		if(Data_Buffer[i] > Output_Pin[i].Current_Thresholds)
 80029a6:	79bb      	ldrb	r3, [r7, #6]
 80029a8:	4a37      	ldr	r2, [pc, #220]	; (8002a88 <PDM_Output_Fuse+0x108>)
 80029aa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80029ae:	79ba      	ldrb	r2, [r7, #6]
 80029b0:	4834      	ldr	r0, [pc, #208]	; (8002a84 <PDM_Output_Fuse+0x104>)
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4403      	add	r3, r0
 80029bc:	3308      	adds	r3, #8
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	4299      	cmp	r1, r3
 80029c2:	d933      	bls.n	8002a2c <PDM_Output_Fuse+0xac>
		{
			Accumulator_Output_Fuse[i] += Accumulator_Output_Check;
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <PDM_Output_Fuse+0x10c>)
 80029c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <PDM_Output_Fuse+0x110>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	440a      	add	r2, r1
 80029d4:	492d      	ldr	r1, [pc, #180]	; (8002a8c <PDM_Output_Fuse+0x10c>)
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(Accumulator_Output_Fuse[i] >= (Output_Pin[i].Timeout_Output_Fuse * 10))
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	4a2b      	ldr	r2, [pc, #172]	; (8002a8c <PDM_Output_Fuse+0x10c>)
 80029de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029e2:	79ba      	ldrb	r2, [r7, #6]
 80029e4:	4827      	ldr	r0, [pc, #156]	; (8002a84 <PDM_Output_Fuse+0x104>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4403      	add	r3, r0
 80029f0:	330a      	adds	r3, #10
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4299      	cmp	r1, r3
 8002a00:	d32a      	bcc.n	8002a58 <PDM_Output_Fuse+0xd8>
			{
				Driver_Safety_Flag |= (1 << i);
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <PDM_Output_Fuse+0x114>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <PDM_Output_Fuse+0x114>)
 8002a1a:	801a      	strh	r2, [r3, #0]
				Accumulator_Output_Fuse[i] = 0;
 8002a1c:	79bb      	ldrb	r3, [r7, #6]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <PDM_Output_Fuse+0x10c>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				fuse_flag = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	e015      	b.n	8002a58 <PDM_Output_Fuse+0xd8>
			}

		}else{
			Driver_Overcurrent_Flag &= ~(1 << i);
 8002a2c:	79bb      	ldrb	r3, [r7, #6]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	b21a      	sxth	r2, r3
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <PDM_Output_Fuse+0x118>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <PDM_Output_Fuse+0x118>)
 8002a48:	801a      	strh	r2, [r3, #0]
			Accumulator_Output_Fuse[i] = 0;
 8002a4a:	79bb      	ldrb	r3, [r7, #6]
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <PDM_Output_Fuse+0x10c>)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002a54:	e000      	b.n	8002a58 <PDM_Output_Fuse+0xd8>
			continue;
 8002a56:	bf00      	nop
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002a58:	79bb      	ldrb	r3, [r7, #6]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	71bb      	strb	r3, [r7, #6]
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	d995      	bls.n	8002990 <PDM_Output_Fuse+0x10>
		}
	}

	Accumulator_Output_Check -= OUTPUT_FUSE_FREQ;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <PDM_Output_Fuse+0x110>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3b19      	subs	r3, #25
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <PDM_Output_Fuse+0x110>)
 8002a6c:	6013      	str	r3, [r2, #0]

	if(fuse_flag == 1)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <PDM_Output_Fuse+0xfa>
		PDM_Output_Process();
 8002a74:	f7ff ff12 	bl	800289c <PDM_Output_Process>

	return;
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
}
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000fdc 	.word	0x20000fdc
 8002a88:	200011bc 	.word	0x200011bc
 8002a8c:	20000eb8 	.word	0x20000eb8
 8002a90:	2000052c 	.word	0x2000052c
 8002a94:	20000530 	.word	0x20000530
 8002a98:	20000484 	.word	0x20000484

08002a9c <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "pdm.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Message, CAN_Rx_Data) == HAL_OK)
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f002 fccd 	bl	800544a <HAL_CAN_GetRxMessage>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002ab6:	f7fe fd2d 	bl	8001514 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002abe:	f004 f814 	bl	8006aea <HAL_GPIO_TogglePin>
	}

	return;
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
}
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000109c 	.word	0x2000109c
 8002ad0:	20000e9c 	.word	0x20000e9c
 8002ad4:	40021800 	.word	0x40021800

08002ad8 <HAL_TIM_PeriodElapsedCallback>:
//{
//	return;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d132      	bne.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		Accumulator_Msg_10Hz++;
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002af2:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25Hz++;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002afc:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50Hz++;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b06:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_80Hz++,
 8002b08:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b10:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100Hz++;
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b1a:	6013      	str	r3, [r2, #0]

		Accumulator_Delay++;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b24:	6013      	str	r3, [r2, #0]
		Accumulator_Output_Check++;
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002b2e:	6013      	str	r3, [r2, #0]
		Accumulator_Temp_Read++;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002b38:	6013      	str	r3, [r2, #0]
		Accumulator_Volt_Read++;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002b42:	6013      	str	r3, [r2, #0]

		Accumulator_USB_Data++;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002b4c:	6013      	str	r3, [r2, #0]
	}

	return;
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
}
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40001400 	.word	0x40001400
 8002b60:	200010a4 	.word	0x200010a4
 8002b64:	20000e20 	.word	0x20000e20
 8002b68:	20000ef8 	.word	0x20000ef8
 8002b6c:	20000f84 	.word	0x20000f84
 8002b70:	20000f1c 	.word	0x20000f1c
 8002b74:	2000112c 	.word	0x2000112c
 8002b78:	2000052c 	.word	0x2000052c
 8002b7c:	20000fd4 	.word	0x20000fd4
 8002b80:	20000fd8 	.word	0x20000fd8
 8002b84:	200011b8 	.word	0x200011b8

08002b88 <PDM_PWM_Duty_Cycle_Set>:

#include "pdm.h"

//Sets PWM output duty cycle using its command variables
static void PDM_PWM_Duty_Cycle_Set(PWM_Control_Struct* pwm_struct)
{
 8002b88:	b4f0      	push	{r4, r5, r6, r7}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	//Checks if both command variables are above the collum and line limits and attributes the map's closest corner value
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dc0d      	bgt.n	8002bbc <PDM_PWM_Duty_Cycle_Set+0x34>
		&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dc05      	bgt.n	8002bbc <PDM_PWM_Duty_Cycle_Set+0x34>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][0];
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	801a      	strh	r2, [r3, #0]
		return;
 8002bba:	e34b      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	db11      	blt.n	8002bf0 <PDM_PWM_Duty_Cycle_Set+0x68>
			 && (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dc09      	bgt.n	8002bf0 <PDM_PWM_Duty_Cycle_Set+0x68>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][pwm_struct->Map_Lengths[0]];
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7f1b      	ldrb	r3, [r3, #28]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	3330      	adds	r3, #48	; 0x30
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	88da      	ldrh	r2, [r3, #6]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	801a      	strh	r2, [r3, #0]
		return;
 8002bee:	e331      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dc15      	bgt.n	8002c2c <PDM_PWM_Duty_Cycle_Set+0xa4>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	db0d      	blt.n	8002c2c <PDM_PWM_Duty_Cycle_Set+0xa4>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][0];
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7f5b      	ldrb	r3, [r3, #29]
 8002c14:	4619      	mov	r1, r3
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a5b      	subs	r3, r3, r1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	3366      	adds	r3, #102	; 0x66
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	801a      	strh	r2, [r3, #0]
		return;
 8002c2a:	e313      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	db19      	blt.n	8002c70 <PDM_PWM_Duty_Cycle_Set+0xe8>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	db11      	blt.n	8002c70 <PDM_PWM_Duty_Cycle_Set+0xe8>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][pwm_struct->Map_Lengths[0]];
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7f5b      	ldrb	r3, [r3, #29]
 8002c50:	4619      	mov	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7f1b      	ldrb	r3, [r3, #28]
 8002c56:	4618      	mov	r0, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a5b      	subs	r3, r3, r1
 8002c60:	4403      	add	r3, r0
 8002c62:	3330      	adds	r3, #48	; 0x30
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	88da      	ldrh	r2, [r3, #6]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	801a      	strh	r2, [r3, #0]
		return;
 8002c6e:	e2f1      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
	}

	//Check if the command variable point is outside the collums (x limits) of the 3D map
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dd08      	ble.n	8002c92 <PDM_PWM_Duty_Cycle_Set+0x10a>
		|| (pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1]))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	f2c0 80c5 	blt.w	8002e1c <PDM_PWM_Duty_Cycle_Set+0x294>
	{
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e0bb      	b.n	8002e10 <PDM_PWM_Duty_Cycle_Set+0x288>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	3323      	adds	r3, #35	; 0x23
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f2c0 80ac 	blt.w	8002e0a <PDM_PWM_Duty_Cycle_Set+0x282>
				&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	3323      	adds	r3, #35	; 0x23
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f300 809e 	bgt.w	8002e0a <PDM_PWM_Duty_Cycle_Set+0x282>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dc44      	bgt.n	8002d68 <PDM_PWM_Duty_Cycle_Set+0x1e0>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	3323      	adds	r3, #35	; 0x23
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf4:	1ac9      	subs	r1, r1, r3
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4403      	add	r3, r0
 8002d06:	3366      	adds	r3, #102	; 0x66
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4403      	add	r3, r0
 8002d1a:	3366      	adds	r3, #102	; 0x66
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	1ae3      	subs	r3, r4, r3
 8002d20:	fb03 f201 	mul.w	r2, r3, r1
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	3301      	adds	r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	3323      	adds	r3, #35	; 0x23
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	440b      	add	r3, r1
 8002d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d34:	4618      	mov	r0, r3
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	3323      	adds	r3, #35	; 0x23
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d44:	1ac3      	subs	r3, r0, r3
 8002d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d4a:	b299      	uxth	r1, r3
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4403      	add	r3, r0
 8002d5a:	3366      	adds	r3, #102	; 0x66
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	440b      	add	r3, r1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	801a      	strh	r2, [r3, #0]
																  	    pwm_struct->Command_Var_Step[1][y],
																		pwm_struct->Command_Var_Step[1][y + 1],
																		pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
																		pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
				}
				return;
 8002d66:	e275      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	3323      	adds	r3, #35	; 0x23
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d7e:	1ac9      	subs	r1, r1, r3
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7f1b      	ldrb	r3, [r3, #28]
 8002d88:	461c      	mov	r4, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	4423      	add	r3, r4
 8002d94:	3330      	adds	r3, #48	; 0x30
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4403      	add	r3, r0
 8002d9a:	88db      	ldrh	r3, [r3, #6]
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7f1b      	ldrb	r3, [r3, #28]
 8002da4:	461d      	mov	r5, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	442b      	add	r3, r5
 8002db0:	3330      	adds	r3, #48	; 0x30
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4403      	add	r3, r0
 8002db6:	88db      	ldrh	r3, [r3, #6]
 8002db8:	1ae3      	subs	r3, r4, r3
 8002dba:	fb03 f201 	mul.w	r2, r3, r1
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	3323      	adds	r3, #35	; 0x23
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	3323      	adds	r3, #35	; 0x23
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	440b      	add	r3, r1
 8002dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dde:	1ac3      	subs	r3, r0, r3
 8002de0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002de4:	b299      	uxth	r1, r3
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7f1b      	ldrb	r3, [r3, #28]
 8002dec:	461c      	mov	r4, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	4423      	add	r3, r4
 8002df8:	3330      	adds	r3, #48	; 0x30
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4403      	add	r3, r0
 8002dfe:	88db      	ldrh	r3, [r3, #6]
 8002e00:	440b      	add	r3, r1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	801a      	strh	r2, [r3, #0]
				return;
 8002e08:	e224      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7f5b      	ldrb	r3, [r3, #29]
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	f4ff af3e 	bcc.w	8002c98 <PDM_PWM_Duty_Cycle_Set+0x110>
			}
		}
	}

	//Check if the command variable point is outside the lines (y limits) of the 3D map
	if((pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	dd08      	ble.n	8002e3e <PDM_PWM_Duty_Cycle_Set+0x2b6>
		|| (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f2c0 80bc 	blt.w	8002fb6 <PDM_PWM_Duty_Cycle_Set+0x42e>
	{
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73bb      	strb	r3, [r7, #14]
 8002e42:	e0b2      	b.n	8002faa <PDM_PWM_Duty_Cycle_Set+0x422>
		{
			//Checks if the command variable point is inside the x, x + 1 collum
			if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e4a:	7bbb      	ldrb	r3, [r7, #14]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	440b      	add	r3, r1
 8002e54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f2c0 80a3 	blt.w	8002fa4 <PDM_PWM_Duty_Cycle_Set+0x41c>
				&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	3301      	adds	r3, #1
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f300 8095 	bgt.w	8002fa4 <PDM_PWM_Duty_Cycle_Set+0x41c>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002e86:	429a      	cmp	r2, r3
 8002e88:	dc3b      	bgt.n	8002f02 <PDM_PWM_Duty_Cycle_Set+0x37a>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e90:	4619      	mov	r1, r3
 8002e92:	7bbb      	ldrb	r3, [r7, #14]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	3314      	adds	r3, #20
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ea0:	1aca      	subs	r2, r1, r3
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	3330      	adds	r3, #48	; 0x30
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	440b      	add	r3, r1
 8002eae:	88db      	ldrh	r3, [r3, #6]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	7bbb      	ldrb	r3, [r7, #14]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	3330      	adds	r3, #48	; 0x30
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	88db      	ldrh	r3, [r3, #6]
 8002ebe:	1ac3      	subs	r3, r0, r3
 8002ec0:	fb03 f202 	mul.w	r2, r3, r2
 8002ec4:	7bbb      	ldrb	r3, [r7, #14]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	3314      	adds	r3, #20
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	3314      	adds	r3, #20
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ee4:	1ac3      	subs	r3, r0, r3
 8002ee6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	7bbb      	ldrb	r3, [r7, #14]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	3330      	adds	r3, #48	; 0x30
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	440b      	add	r3, r1
 8002ef6:	88db      	ldrh	r3, [r3, #6]
 8002ef8:	4413      	add	r3, r2
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	801a      	strh	r2, [r3, #0]
																  	    pwm_struct->Command_Var_Step[0][x],
																		pwm_struct->Command_Var_Step[0][x + 1],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
				}
				return;
 8002f00:	e1a8      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	7bbb      	ldrb	r3, [r7, #14]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f18:	1aca      	subs	r2, r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7f5b      	ldrb	r3, [r3, #29]
 8002f1e:	461c      	mov	r4, r3
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	1c58      	adds	r0, r3, #1
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4623      	mov	r3, r4
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1b1b      	subs	r3, r3, r4
 8002f2c:	4403      	add	r3, r0
 8002f2e:	3330      	adds	r3, #48	; 0x30
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	440b      	add	r3, r1
 8002f34:	88db      	ldrh	r3, [r3, #6]
 8002f36:	461d      	mov	r5, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7f5b      	ldrb	r3, [r3, #29]
 8002f3c:	461c      	mov	r4, r3
 8002f3e:	7bb8      	ldrb	r0, [r7, #14]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4623      	mov	r3, r4
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1b1b      	subs	r3, r3, r4
 8002f48:	4403      	add	r3, r0
 8002f4a:	3330      	adds	r3, #48	; 0x30
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	440b      	add	r3, r1
 8002f50:	88db      	ldrh	r3, [r3, #6]
 8002f52:	1aeb      	subs	r3, r5, r3
 8002f54:	fb03 f202 	mul.w	r2, r3, r2
 8002f58:	7bbb      	ldrb	r3, [r7, #14]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	3314      	adds	r3, #20
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	440b      	add	r3, r1
 8002f64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	440b      	add	r3, r1
 8002f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f78:	1ac3      	subs	r3, r0, r3
 8002f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7f5b      	ldrb	r3, [r3, #29]
 8002f84:	461c      	mov	r4, r3
 8002f86:	7bb8      	ldrb	r0, [r7, #14]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1b1b      	subs	r3, r3, r4
 8002f90:	4403      	add	r3, r0
 8002f92:	3330      	adds	r3, #48	; 0x30
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	440b      	add	r3, r1
 8002f98:	88db      	ldrh	r3, [r3, #6]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	801a      	strh	r2, [r3, #0]
				return;
 8002fa2:	e157      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	73bb      	strb	r3, [r7, #14]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7f1b      	ldrb	r3, [r3, #28]
 8002fae:	7bba      	ldrb	r2, [r7, #14]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f4ff af47 	bcc.w	8002e44 <PDM_PWM_Duty_Cycle_Set+0x2bc>
			}
		}
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	737b      	strb	r3, [r7, #13]
 8002fba:	e144      	b.n	8003246 <PDM_PWM_Duty_Cycle_Set+0x6be>
	{
		//Checks if the command variable point is inside the x, x + 1 collum
		if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002fc2:	7b7b      	ldrb	r3, [r7, #13]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	440b      	add	r3, r1
 8002fcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f2c0 8135 	blt.w	8003240 <PDM_PWM_Duty_Cycle_Set+0x6b8>
			&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f300 8127 	bgt.w	8003240 <PDM_PWM_Duty_Cycle_Set+0x6b8>
		{
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	733b      	strb	r3, [r7, #12]
 8002ff6:	e11d      	b.n	8003234 <PDM_PWM_Duty_Cycle_Set+0x6ac>
			{
				//Checks if the command variable point is inside the y, y + 1 line
				if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002ffe:	7b3b      	ldrb	r3, [r7, #12]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	3323      	adds	r3, #35	; 0x23
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	440b      	add	r3, r1
 8003008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800300c:	429a      	cmp	r2, r3
 800300e:	f2c0 810e 	blt.w	800322e <PDM_PWM_Duty_Cycle_Set+0x6a6>
					&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8003018:	7b3b      	ldrb	r3, [r7, #12]
 800301a:	3301      	adds	r3, #1
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	3323      	adds	r3, #35	; 0x23
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	440b      	add	r3, r1
 8003024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003028:	429a      	cmp	r2, r3
 800302a:	f300 8100 	bgt.w	800322e <PDM_PWM_Duty_Cycle_Set+0x6a6>
				{
					pwm_struct->Duty_Cycle = __PDM_BILINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003034:	4619      	mov	r1, r3
 8003036:	7b3b      	ldrb	r3, [r7, #12]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	3323      	adds	r3, #35	; 0x23
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003044:	1ac9      	subs	r1, r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800304c:	4618      	mov	r0, r3
 800304e:	7b7b      	ldrb	r3, [r7, #13]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	3314      	adds	r3, #20
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800305c:	1ac0      	subs	r0, r0, r3
 800305e:	7b3b      	ldrb	r3, [r7, #12]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	7b7b      	ldrb	r3, [r7, #13]
 8003064:	1c5d      	adds	r5, r3, #1
 8003066:	687c      	ldr	r4, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	442b      	add	r3, r5
 8003070:	3330      	adds	r3, #48	; 0x30
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4423      	add	r3, r4
 8003076:	88db      	ldrh	r3, [r3, #6]
 8003078:	461e      	mov	r6, r3
 800307a:	7b3b      	ldrb	r3, [r7, #12]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	7b7d      	ldrb	r5, [r7, #13]
 8003080:	687c      	ldr	r4, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	442b      	add	r3, r5
 800308a:	3330      	adds	r3, #48	; 0x30
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4423      	add	r3, r4
 8003090:	88db      	ldrh	r3, [r3, #6]
 8003092:	1af3      	subs	r3, r6, r3
 8003094:	fb03 f200 	mul.w	r2, r3, r0
 8003098:	7b7b      	ldrb	r3, [r7, #13]
 800309a:	3301      	adds	r3, #1
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	3314      	adds	r3, #20
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4403      	add	r3, r0
 80030a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030a8:	461c      	mov	r4, r3
 80030aa:	7b7b      	ldrb	r3, [r7, #13]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	3314      	adds	r3, #20
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4403      	add	r3, r0
 80030b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030b8:	1ae3      	subs	r3, r4, r3
 80030ba:	fb92 f0f3 	sdiv	r0, r2, r3
 80030be:	7b3b      	ldrb	r3, [r7, #12]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	7b7d      	ldrb	r5, [r7, #13]
 80030c4:	687c      	ldr	r4, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	442b      	add	r3, r5
 80030ce:	3330      	adds	r3, #48	; 0x30
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4423      	add	r3, r4
 80030d4:	88db      	ldrh	r3, [r3, #6]
 80030d6:	4418      	add	r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80030de:	461c      	mov	r4, r3
 80030e0:	7b7b      	ldrb	r3, [r7, #13]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	3314      	adds	r3, #20
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030ee:	1ae4      	subs	r4, r4, r3
 80030f0:	7b3a      	ldrb	r2, [r7, #12]
 80030f2:	7b7b      	ldrb	r3, [r7, #13]
 80030f4:	1c5e      	adds	r6, r3, #1
 80030f6:	687d      	ldr	r5, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	4433      	add	r3, r6
 8003100:	3330      	adds	r3, #48	; 0x30
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	442b      	add	r3, r5
 8003106:	88db      	ldrh	r3, [r3, #6]
 8003108:	469c      	mov	ip, r3
 800310a:	7b3a      	ldrb	r2, [r7, #12]
 800310c:	7b7e      	ldrb	r6, [r7, #13]
 800310e:	687d      	ldr	r5, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	4433      	add	r3, r6
 8003118:	3330      	adds	r3, #48	; 0x30
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	442b      	add	r3, r5
 800311e:	88db      	ldrh	r3, [r3, #6]
 8003120:	ebac 0303 	sub.w	r3, ip, r3
 8003124:	fb03 f204 	mul.w	r2, r3, r4
 8003128:	7b7b      	ldrb	r3, [r7, #13]
 800312a:	3301      	adds	r3, #1
 800312c:	687c      	ldr	r4, [r7, #4]
 800312e:	3314      	adds	r3, #20
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4423      	add	r3, r4
 8003134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003138:	461d      	mov	r5, r3
 800313a:	7b7b      	ldrb	r3, [r7, #13]
 800313c:	687c      	ldr	r4, [r7, #4]
 800313e:	3314      	adds	r3, #20
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4423      	add	r3, r4
 8003144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003148:	1aeb      	subs	r3, r5, r3
 800314a:	fb92 f4f3 	sdiv	r4, r2, r3
 800314e:	7b3a      	ldrb	r2, [r7, #12]
 8003150:	7b7e      	ldrb	r6, [r7, #13]
 8003152:	687d      	ldr	r5, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	4433      	add	r3, r6
 800315c:	3330      	adds	r3, #48	; 0x30
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	442b      	add	r3, r5
 8003162:	88db      	ldrh	r3, [r3, #6]
 8003164:	4423      	add	r3, r4
 8003166:	1ac3      	subs	r3, r0, r3
 8003168:	fb03 f201 	mul.w	r2, r3, r1
 800316c:	7b3b      	ldrb	r3, [r7, #12]
 800316e:	3301      	adds	r3, #1
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	3323      	adds	r3, #35	; 0x23
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	440b      	add	r3, r1
 8003178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800317c:	4618      	mov	r0, r3
 800317e:	7b3b      	ldrb	r3, [r7, #12]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	3323      	adds	r3, #35	; 0x23
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	440b      	add	r3, r1
 8003188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800318c:	1ac3      	subs	r3, r0, r3
 800318e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003192:	b299      	uxth	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800319a:	4618      	mov	r0, r3
 800319c:	7b7b      	ldrb	r3, [r7, #13]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	3314      	adds	r3, #20
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031aa:	1ac0      	subs	r0, r0, r3
 80031ac:	7b3a      	ldrb	r2, [r7, #12]
 80031ae:	7b7b      	ldrb	r3, [r7, #13]
 80031b0:	1c5d      	adds	r5, r3, #1
 80031b2:	687c      	ldr	r4, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	442b      	add	r3, r5
 80031bc:	3330      	adds	r3, #48	; 0x30
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4423      	add	r3, r4
 80031c2:	88db      	ldrh	r3, [r3, #6]
 80031c4:	461e      	mov	r6, r3
 80031c6:	7b3a      	ldrb	r2, [r7, #12]
 80031c8:	7b7d      	ldrb	r5, [r7, #13]
 80031ca:	687c      	ldr	r4, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	442b      	add	r3, r5
 80031d4:	3330      	adds	r3, #48	; 0x30
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4423      	add	r3, r4
 80031da:	88db      	ldrh	r3, [r3, #6]
 80031dc:	1af3      	subs	r3, r6, r3
 80031de:	fb03 f200 	mul.w	r2, r3, r0
 80031e2:	7b7b      	ldrb	r3, [r7, #13]
 80031e4:	3301      	adds	r3, #1
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	3314      	adds	r3, #20
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4403      	add	r3, r0
 80031ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031f2:	461c      	mov	r4, r3
 80031f4:	7b7b      	ldrb	r3, [r7, #13]
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	3314      	adds	r3, #20
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4403      	add	r3, r0
 80031fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003202:	1ae3      	subs	r3, r4, r3
 8003204:	fb92 f3f3 	sdiv	r3, r2, r3
 8003208:	b298      	uxth	r0, r3
 800320a:	7b3a      	ldrb	r2, [r7, #12]
 800320c:	7b7d      	ldrb	r5, [r7, #13]
 800320e:	687c      	ldr	r4, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	442b      	add	r3, r5
 8003218:	3330      	adds	r3, #48	; 0x30
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4423      	add	r3, r4
 800321e:	88db      	ldrh	r3, [r3, #6]
 8003220:	4403      	add	r3, r0
 8003222:	b29b      	uxth	r3, r3
 8003224:	440b      	add	r3, r1
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	801a      	strh	r2, [r3, #0]
																		  pwm_struct->Command_Var_Step[1][y + 1],
																		  pwm_struct->Duty_Cycle_Map[y][x],
																		  pwm_struct->Duty_Cycle_Map[y][x + 1],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x + 1]);
					return;
 800322c:	e012      	b.n	8003254 <PDM_PWM_Duty_Cycle_Set+0x6cc>
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 800322e:	7b3b      	ldrb	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
 8003232:	733b      	strb	r3, [r7, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7f5b      	ldrb	r3, [r3, #29]
 8003238:	7b3a      	ldrb	r2, [r7, #12]
 800323a:	429a      	cmp	r2, r3
 800323c:	f4ff aedc 	bcc.w	8002ff8 <PDM_PWM_Duty_Cycle_Set+0x470>
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003240:	7b7b      	ldrb	r3, [r7, #13]
 8003242:	3301      	adds	r3, #1
 8003244:	737b      	strb	r3, [r7, #13]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f1b      	ldrb	r3, [r3, #28]
 800324a:	7b7a      	ldrb	r2, [r7, #13]
 800324c:	429a      	cmp	r2, r3
 800324e:	f4ff aeb5 	bcc.w	8002fbc <PDM_PWM_Duty_Cycle_Set+0x434>
				}
			}
		}
	}
	return;
 8003252:	bf00      	nop
}
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bcf0      	pop	{r4, r5, r6, r7}
 800325a:	4770      	bx	lr

0800325c <PDM_PWM_Init>:

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (PWM_Pin_Status >> pwm_out_number) & 0x01;
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	331a      	adds	r3, #26
 800326e:	4a6d      	ldr	r2, [pc, #436]	; (8003424 <PDM_PWM_Init+0x1c8>)
 8003270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003274:	b21a      	sxth	r2, r3
 8003276:	4b6c      	ldr	r3, [pc, #432]	; (8003428 <PDM_PWM_Init+0x1cc>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	4619      	mov	r1, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	fa41 f303 	asr.w	r3, r1, r3
 8003282:	b21b      	sxth	r3, r3
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	b21b      	sxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b21a      	sxth	r2, r3
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	331a      	adds	r3, #26
 8003292:	b291      	uxth	r1, r2
 8003294:	4a63      	ldr	r2, [pc, #396]	; (8003424 <PDM_PWM_Init+0x1c8>)
 8003296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b03      	cmp	r3, #3
 800329e:	f200 80ba 	bhi.w	8003416 <PDM_PWM_Init+0x1ba>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <PDM_PWM_Init+0x4c>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032c3 	.word	0x080032c3
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	080032d7 	.word	0x080032d7
 80032b8:	4b5c      	ldr	r3, [pc, #368]	; (800342c <PDM_PWM_Init+0x1d0>)
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	230c      	movs	r3, #12
 80032be:	837b      	strh	r3, [r7, #26]
 80032c0:	e00d      	b.n	80032de <PDM_PWM_Init+0x82>
 80032c2:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <PDM_PWM_Init+0x1d4>)
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	2304      	movs	r3, #4
 80032c8:	837b      	strh	r3, [r7, #26]
 80032ca:	e008      	b.n	80032de <PDM_PWM_Init+0x82>
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <PDM_PWM_Init+0x1d8>)
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	2308      	movs	r3, #8
 80032d2:	837b      	strh	r3, [r7, #26]
 80032d4:	e003      	b.n	80032de <PDM_PWM_Init+0x82>
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <PDM_PWM_Init+0x1dc>)
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	230c      	movs	r3, #12
 80032dc:	837b      	strh	r3, [r7, #26]
 80032de:	bf00      	nop

	//Sets PWM parameters if PWM is enabled
	if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 80032e0:	4b51      	ldr	r3, [pc, #324]	; (8003428 <PDM_PWM_Init+0x1cc>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	fa42 f303 	asr.w	r3, r2, r3
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d075      	beq.n	80033e0 <PDM_PWM_Init+0x184>
	{
		//Sets the PWM frequency
		__HAL_TIM_SET_AUTORELOAD(htim, pwm_struct->PWM_Frequency);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	885a      	ldrh	r2, [r3, #2]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	885b      	ldrh	r3, [r3, #2]
 8003302:	461a      	mov	r2, r3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	60da      	str	r2, [r3, #12]

		//Sets CAN filter and duty cycle map steps if PWM CAN is enabled and map lengths are bigger than zero
		if((((PWM_Pin_Status >> pwm_out_number) & 0x10) == OUTPUT_PWM_CAN_ENABLE)
 8003308:	4b47      	ldr	r3, [pc, #284]	; (8003428 <PDM_PWM_Init+0x1cc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	fa42 f303 	asr.w	r3, r2, r3
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d061      	beq.n	80033e0 <PDM_PWM_Init+0x184>
				&& (pwm_struct->Map_Lengths[0] != 0) && (pwm_struct->Map_Lengths[1] != 0))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	7f1b      	ldrb	r3, [r3, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05d      	beq.n	80033e0 <PDM_PWM_Init+0x184>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	7f5b      	ldrb	r3, [r3, #29]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d059      	beq.n	80033e0 <PDM_PWM_Init+0x184>
		{
			PDM_PWM_CAN_Filter_Config(hcan, pwm_struct, pwm_out_number);
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	461a      	mov	r2, r3
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7fd ffd2 	bl	80012dc <PDM_PWM_CAN_Filter_Config>

			for(uint16_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 8003338:	2300      	movs	r3, #0
 800333a:	833b      	strh	r3, [r7, #24]
 800333c:	e020      	b.n	8003380 <PDM_PWM_Init+0x124>
				pwm_struct->Command_Var_Step[0][i] = ((i * (pwm_struct->Command_Var_Lim[0][1] - pwm_struct->Command_Var_Lim[0][0])) / pwm_struct->Map_Lengths[0]) + pwm_struct->Command_Var_Lim[0][0];
 800333e:	8b3b      	ldrh	r3, [r7, #24]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8003346:	4611      	mov	r1, r2
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800334e:	1a8a      	subs	r2, r1, r2
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	7f12      	ldrb	r2, [r2, #28]
 8003358:	fb93 f3f2 	sdiv	r3, r3, r2
 800335c:	b29a      	uxth	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003364:	b29b      	uxth	r3, r3
 8003366:	4413      	add	r3, r2
 8003368:	b29a      	uxth	r2, r3
 800336a:	8b3b      	ldrh	r3, [r7, #24]
 800336c:	b211      	sxth	r1, r2
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	3314      	adds	r3, #20
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	460a      	mov	r2, r1
 8003378:	805a      	strh	r2, [r3, #2]
			for(uint16_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 800337a:	8b3b      	ldrh	r3, [r7, #24]
 800337c:	3301      	adds	r3, #1
 800337e:	833b      	strh	r3, [r7, #24]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	7f1b      	ldrb	r3, [r3, #28]
 8003384:	b29b      	uxth	r3, r3
 8003386:	8b3a      	ldrh	r2, [r7, #24]
 8003388:	429a      	cmp	r2, r3
 800338a:	d9d8      	bls.n	800333e <PDM_PWM_Init+0xe2>

			for(uint16_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 800338c:	2300      	movs	r3, #0
 800338e:	82fb      	strh	r3, [r7, #22]
 8003390:	e020      	b.n	80033d4 <PDM_PWM_Init+0x178>
				pwm_struct->Command_Var_Step[1][j] = ((j * (pwm_struct->Command_Var_Lim[1][1] - pwm_struct->Command_Var_Lim[1][0])) / pwm_struct->Map_Lengths[1]) + pwm_struct->Command_Var_Lim[1][0];
 8003392:	8afb      	ldrh	r3, [r7, #22]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 800339a:	4611      	mov	r1, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 80033a2:	1a8a      	subs	r2, r1, r2
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	7f52      	ldrb	r2, [r2, #29]
 80033ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	b29a      	uxth	r2, r3
 80033be:	8afb      	ldrh	r3, [r7, #22]
 80033c0:	b211      	sxth	r1, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	3323      	adds	r3, #35	; 0x23
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	460a      	mov	r2, r1
 80033cc:	805a      	strh	r2, [r3, #2]
			for(uint16_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 80033ce:	8afb      	ldrh	r3, [r7, #22]
 80033d0:	3301      	adds	r3, #1
 80033d2:	82fb      	strh	r3, [r7, #22]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	7f5b      	ldrb	r3, [r3, #29]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	8afa      	ldrh	r2, [r7, #22]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d9d8      	bls.n	8003392 <PDM_PWM_Init+0x136>
		}
	}

	//Start the PWM timer if output is enabled
	if((Output_Pin[pwm_out_number].Enabled_Inputs[0] != 0)
 80033e0:	79fa      	ldrb	r2, [r7, #7]
 80033e2:	4916      	ldr	r1, [pc, #88]	; (800343c <PDM_PWM_Init+0x1e0>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <PDM_PWM_Init+0x1be>
			&& (Output_Pin[pwm_out_number].Enabled_Inputs[1] != 0))
 80033f4:	79fa      	ldrb	r2, [r7, #7]
 80033f6:	4911      	ldr	r1, [pc, #68]	; (800343c <PDM_PWM_Init+0x1e0>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3302      	adds	r3, #2
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <PDM_PWM_Init+0x1be>
		HAL_TIM_PWM_Start(htim, tim_channel);
 800340a:	8b7b      	ldrh	r3, [r7, #26]
 800340c:	4619      	mov	r1, r3
 800340e:	69f8      	ldr	r0, [r7, #28]
 8003410:	f006 fd5a 	bl	8009ec8 <HAL_TIM_PWM_Start>

	return;
 8003414:	e001      	b.n	800341a <PDM_PWM_Init+0x1be>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <PDM_PWM_Init+0x1c0>
	return;
 800341a:	bf00      	nop
}
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200010f0 	.word	0x200010f0
 8003428:	20000e84 	.word	0x20000e84
 800342c:	20000dd4 	.word	0x20000dd4
 8003430:	2000043c 	.word	0x2000043c
 8003434:	200010a8 	.word	0x200010a8
 8003438:	20000f88 	.word	0x20000f88
 800343c:	20000fdc 	.word	0x20000fdc

08003440 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b03      	cmp	r3, #3
 8003450:	f200 80ed 	bhi.w	800362e <PDM_PWM_Output_Process+0x1ee>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <PDM_PWM_Output_Process+0x1c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003477 	.word	0x08003477
 8003464:	08003481 	.word	0x08003481
 8003468:	0800348b 	.word	0x0800348b
 800346c:	4b72      	ldr	r3, [pc, #456]	; (8003638 <PDM_PWM_Output_Process+0x1f8>)
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	230c      	movs	r3, #12
 8003472:	817b      	strh	r3, [r7, #10]
 8003474:	e00d      	b.n	8003492 <PDM_PWM_Output_Process+0x52>
 8003476:	4b71      	ldr	r3, [pc, #452]	; (800363c <PDM_PWM_Output_Process+0x1fc>)
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	2304      	movs	r3, #4
 800347c:	817b      	strh	r3, [r7, #10]
 800347e:	e008      	b.n	8003492 <PDM_PWM_Output_Process+0x52>
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <PDM_PWM_Output_Process+0x200>)
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	2308      	movs	r3, #8
 8003486:	817b      	strh	r3, [r7, #10]
 8003488:	e003      	b.n	8003492 <PDM_PWM_Output_Process+0x52>
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <PDM_PWM_Output_Process+0x204>)
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	230c      	movs	r3, #12
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	bf00      	nop

	//Check if virtual fuse isn't tripped and if the input pins match their enabled states
	if((((Driver_Safety_Flag >> pwm_out_number) & 0x0001) == 0)
 8003494:	4b6c      	ldr	r3, [pc, #432]	; (8003648 <PDM_PWM_Output_Process+0x208>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	fa42 f303 	asr.w	r3, r2, r3
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d175      	bne.n	8003594 <PDM_PWM_Output_Process+0x154>
			&& (__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0])
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	4968      	ldr	r1, [pc, #416]	; (800364c <PDM_PWM_Output_Process+0x20c>)
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	4b65      	ldr	r3, [pc, #404]	; (8003650 <PDM_PWM_Output_Process+0x210>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	4013      	ands	r3, r2
 80034be:	b299      	uxth	r1, r3
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	4862      	ldr	r0, [pc, #392]	; (800364c <PDM_PWM_Output_Process+0x20c>)
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	3304      	adds	r3, #4
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	4299      	cmp	r1, r3
 80034d4:	d017      	beq.n	8003506 <PDM_PWM_Output_Process+0xc6>
			||  __PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1])))
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	495c      	ldr	r1, [pc, #368]	; (800364c <PDM_PWM_Output_Process+0x20c>)
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3302      	adds	r3, #2
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	4b59      	ldr	r3, [pc, #356]	; (8003650 <PDM_PWM_Output_Process+0x210>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b299      	uxth	r1, r3
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	4856      	ldr	r0, [pc, #344]	; (800364c <PDM_PWM_Output_Process+0x20c>)
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4403      	add	r3, r0
 80034fe:	3306      	adds	r3, #6
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	4299      	cmp	r1, r3
 8003504:	d146      	bne.n	8003594 <PDM_PWM_Output_Process+0x154>
	{
		//Checks if the output is enabled as PWM, if i isn't, just sets it at 100%
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003506:	4b53      	ldr	r3, [pc, #332]	; (8003654 <PDM_PWM_Output_Process+0x214>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	fa42 f303 	asr.w	r3, r2, r3
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d037      	beq.n	800358a <PDM_PWM_Output_Process+0x14a>
		{
			//Checks if the inputs match the first PWM preset
			if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[0], pwm_struct->Input_DC_Preset[0]))
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f44f 720a 	mov.w	r2, #552	; 0x228
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	889a      	ldrh	r2, [r3, #4]
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <PDM_PWM_Output_Process+0x210>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	4013      	ands	r3, r2
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	891b      	ldrh	r3, [r3, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d104      	bne.n	8003544 <PDM_PWM_Output_Process+0x104>
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[0];
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	899a      	ldrh	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	801a      	strh	r2, [r3, #0]
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003542:	e02b      	b.n	800359c <PDM_PWM_Output_Process+0x15c>

			//Checks if the inputs match the second PWM preset
			else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[1], pwm_struct->Input_DC_Preset[1]))
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f44f 720a 	mov.w	r2, #552	; 0x228
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	88da      	ldrh	r2, [r3, #6]
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <PDM_PWM_Output_Process+0x210>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	4013      	ands	r3, r2
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	895b      	ldrh	r3, [r3, #10]
 8003560:	429a      	cmp	r2, r3
 8003562:	d104      	bne.n	800356e <PDM_PWM_Output_Process+0x12e>
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[1];
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	89da      	ldrh	r2, [r3, #14]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	801a      	strh	r2, [r3, #0]
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 800356c:	e016      	b.n	800359c <PDM_PWM_Output_Process+0x15c>

			//If no preset is matched, set PWM duty cycle using the 3D map
			else if(((PWM_Pin_Status >> pwm_out_number) & 0x10) == OUTPUT_PWM_CAN_ENABLE)
 800356e:	4b39      	ldr	r3, [pc, #228]	; (8003654 <PDM_PWM_Output_Process+0x214>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	fa42 f303 	asr.w	r3, r2, r3
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <PDM_PWM_Output_Process+0x15c>
				PDM_PWM_Duty_Cycle_Set(pwm_struct);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fb00 	bl	8002b88 <PDM_PWM_Duty_Cycle_Set>
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003588:	e008      	b.n	800359c <PDM_PWM_Output_Process+0x15c>

		}else{
			pwm_struct->Duty_Cycle = 1010;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8003590:	801a      	strh	r2, [r3, #0]
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003592:	e003      	b.n	800359c <PDM_PWM_Output_Process+0x15c>
		}
	}else
		pwm_struct->Duty_Cycle = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	e000      	b.n	800359e <PDM_PWM_Output_Process+0x15e>
		if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 800359c:	bf00      	nop


	__HAL_TIM_SET_COMPARE(htim, tim_channel, (htim->Init.Period * pwm_struct->Duty_Cycle) / 1000);
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <PDM_PWM_Output_Process+0x180>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	8812      	ldrh	r2, [r2, #0]
 80035ac:	fb02 f203 	mul.w	r2, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4928      	ldr	r1, [pc, #160]	; (8003658 <PDM_PWM_Output_Process+0x218>)
 80035b6:	fba1 1202 	umull	r1, r2, r1, r2
 80035ba:	0992      	lsrs	r2, r2, #6
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34
 80035be:	e02e      	b.n	800361e <PDM_PWM_Output_Process+0x1de>
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d10d      	bne.n	80035e2 <PDM_PWM_Output_Process+0x1a2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	4920      	ldr	r1, [pc, #128]	; (8003658 <PDM_PWM_Output_Process+0x218>)
 80035d8:	fba1 1303 	umull	r1, r3, r1, r3
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	6393      	str	r3, [r2, #56]	; 0x38
 80035e0:	e01d      	b.n	800361e <PDM_PWM_Output_Process+0x1de>
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d10d      	bne.n	8003604 <PDM_PWM_Output_Process+0x1c4>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4917      	ldr	r1, [pc, #92]	; (8003658 <PDM_PWM_Output_Process+0x218>)
 80035fa:	fba1 1303 	umull	r1, r3, r1, r3
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003602:	e00c      	b.n	800361e <PDM_PWM_Output_Process+0x1de>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	4910      	ldr	r1, [pc, #64]	; (8003658 <PDM_PWM_Output_Process+0x218>)
 8003616:	fba1 1303 	umull	r1, r3, r1, r3
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	6413      	str	r3, [r2, #64]	; 0x40

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	Data_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->Duty_Cycle;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	331a      	adds	r3, #26
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	8811      	ldrh	r1, [r2, #0]
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <PDM_PWM_Output_Process+0x21c>)
 8003628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 800362c:	e000      	b.n	8003630 <PDM_PWM_Output_Process+0x1f0>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800362e:	bf00      	nop
}
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000dd4 	.word	0x20000dd4
 800363c:	2000043c 	.word	0x2000043c
 8003640:	200010a8 	.word	0x200010a8
 8003644:	20000f88 	.word	0x20000f88
 8003648:	20000530 	.word	0x20000530
 800364c:	20000fdc 	.word	0x20000fdc
 8003650:	20001248 	.word	0x20001248
 8003654:	20000e84 	.word	0x20000e84
 8003658:	10624dd3 	.word	0x10624dd3
 800365c:	200011bc 	.word	0x200011bc

08003660 <PDM_Next_Data_Conversion>:
//uint8_t next_data - next data to be converted:	0: Output current 0
//													1: Output current 1
//													2: Driver temperature
//													3: Driver voltage
static void PDM_Next_Data_Conversion(uint8_t next_data)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
	switch(next_data)
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d84c      	bhi.n	800370a <PDM_Next_Data_Conversion+0xaa>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <PDM_Next_Data_Conversion+0x18>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	08003689 	.word	0x08003689
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036c9 	.word	0x080036c9
 8003684:	080036e9 	.word	0x080036e9
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003688:	2201      	movs	r2, #1
 800368a:	2120      	movs	r1, #32
 800368c:	4821      	ldr	r0, [pc, #132]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 800368e:	f003 fa13 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003692:	2200      	movs	r2, #0
 8003694:	2108      	movs	r1, #8
 8003696:	481f      	ldr	r0, [pc, #124]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 8003698:	f003 fa0e 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800369c:	2200      	movs	r2, #0
 800369e:	2104      	movs	r1, #4
 80036a0:	481c      	ldr	r0, [pc, #112]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036a2:	f003 fa09 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 80036a6:	e02f      	b.n	8003708 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80036a8:	2201      	movs	r2, #1
 80036aa:	2120      	movs	r1, #32
 80036ac:	4819      	ldr	r0, [pc, #100]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036ae:	f003 fa03 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2108      	movs	r1, #8
 80036b6:	4817      	ldr	r0, [pc, #92]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036b8:	f003 f9fe 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80036bc:	2201      	movs	r2, #1
 80036be:	2104      	movs	r1, #4
 80036c0:	4814      	ldr	r0, [pc, #80]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036c2:	f003 f9f9 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 80036c6:	e01f      	b.n	8003708 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80036c8:	2201      	movs	r2, #1
 80036ca:	2120      	movs	r1, #32
 80036cc:	4811      	ldr	r0, [pc, #68]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036ce:	f003 f9f3 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80036d2:	2201      	movs	r2, #1
 80036d4:	2108      	movs	r1, #8
 80036d6:	480f      	ldr	r0, [pc, #60]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036d8:	f003 f9ee 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80036dc:	2200      	movs	r2, #0
 80036de:	2104      	movs	r1, #4
 80036e0:	480c      	ldr	r0, [pc, #48]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036e2:	f003 f9e9 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 80036e6:	e00f      	b.n	8003708 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80036e8:	2201      	movs	r2, #1
 80036ea:	2120      	movs	r1, #32
 80036ec:	4809      	ldr	r0, [pc, #36]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036ee:	f003 f9e3 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80036f2:	2201      	movs	r2, #1
 80036f4:	2108      	movs	r1, #8
 80036f6:	4807      	ldr	r0, [pc, #28]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 80036f8:	f003 f9de 	bl	8006ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80036fc:	2201      	movs	r2, #1
 80036fe:	2104      	movs	r1, #4
 8003700:	4804      	ldr	r0, [pc, #16]	; (8003714 <PDM_Next_Data_Conversion+0xb4>)
 8003702:	f003 f9d9 	bl	8006ab8 <HAL_GPIO_WritePin>
		break;
 8003706:	bf00      	nop
	}

	return;
 8003708:	bf00      	nop
 800370a:	bf00      	nop
}
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000

08003718 <PDM_Read_Data>:
//										1: Output current 1
//										2: Driver temperature
//										3: Driver voltage
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Read_Data(uint8_t *data_read)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	//Stop us timer to reduce processing cost
	HAL_TIM_Base_Stop_IT(&htim7);
 8003720:	48b1      	ldr	r0, [pc, #708]	; (80039e8 <PDM_Read_Data+0x2d0>)
 8003722:	f006 fb53 	bl	8009dcc <HAL_TIM_Base_Stop_IT>

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(*data_read)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b03      	cmp	r3, #3
 800372c:	f200 81af 	bhi.w	8003a8e <PDM_Read_Data+0x376>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <PDM_Read_Data+0x20>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	08003815 	.word	0x08003815
 8003740:	08003911 	.word	0x08003911
 8003744:	080039ad 	.word	0x080039ad
	{
	case Data_Read_Current0:
		*data_read = Data_Read_Current1;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e05b      	b.n	800380c <PDM_Read_Data+0xf4>
		{
			//Convert ADC into current
			Data_Buffer[i * 2] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4aa5      	ldr	r2, [pc, #660]	; (80039ec <PDM_Read_Data+0x2d4>)
 8003758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800375c:	461a      	mov	r2, r3
 800375e:	f241 63f7 	movw	r3, #5879	; 0x16f7
 8003762:	fb03 f302 	mul.w	r3, r3, r2
 8003766:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 800376a:	33dc      	adds	r3, #220	; 0xdc
 800376c:	4aa0      	ldr	r2, [pc, #640]	; (80039f0 <PDM_Read_Data+0x2d8>)
 800376e:	fb82 1203 	smull	r1, r2, r2, r3
 8003772:	1312      	asrs	r2, r2, #12
 8003774:	17db      	asrs	r3, r3, #31
 8003776:	1ad2      	subs	r2, r2, r3
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	b291      	uxth	r1, r2
 800377e:	4a9d      	ldr	r2, [pc, #628]	; (80039f4 <PDM_Read_Data+0x2dc>)
 8003780:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[i * 2] > Output_Pin[i * 2].Current_Thresholds)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4a9a      	ldr	r2, [pc, #616]	; (80039f4 <PDM_Read_Data+0x2dc>)
 800378a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	005a      	lsls	r2, r3, #1
 8003792:	4899      	ldr	r0, [pc, #612]	; (80039f8 <PDM_Read_Data+0x2e0>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4403      	add	r3, r0
 800379e:	3308      	adds	r3, #8
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	4299      	cmp	r1, r3
 80037a4:	d90d      	bls.n	80037c2 <PDM_Read_Data+0xaa>
				Driver_Overcurrent_Flag |= (1 << (i * 2));
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	b21a      	sxth	r2, r3
 80037b2:	4b92      	ldr	r3, [pc, #584]	; (80039fc <PDM_Read_Data+0x2e4>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b21b      	sxth	r3, r3
 80037b8:	4313      	orrs	r3, r2
 80037ba:	b21b      	sxth	r3, r3
 80037bc:	b29a      	uxth	r2, r3
 80037be:	4b8f      	ldr	r3, [pc, #572]	; (80039fc <PDM_Read_Data+0x2e4>)
 80037c0:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	4a89      	ldr	r2, [pc, #548]	; (80039ec <PDM_Read_Data+0x2d4>)
 80037c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ca:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80037ce:	d20d      	bcs.n	80037ec <PDM_Read_Data+0xd4>
				Data_ID_Buffer[i * 2] |= 1;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4a8a      	ldr	r2, [pc, #552]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80037d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	b291      	uxth	r1, r2
 80037e4:	4a86      	ldr	r2, [pc, #536]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80037e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80037ea:	e00c      	b.n	8003806 <PDM_Read_Data+0xee>
			else
				Data_ID_Buffer[i * 2] &= 0xFFFE;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4a83      	ldr	r2, [pc, #524]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80037f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	b291      	uxth	r1, r2
 8003800:	4a7f      	ldr	r2, [pc, #508]	; (8003a00 <PDM_Read_Data+0x2e8>)
 8003802:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	3301      	adds	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b07      	cmp	r3, #7
 8003810:	d9a0      	bls.n	8003754 <PDM_Read_Data+0x3c>
		}
		break;
 8003812:	e13c      	b.n	8003a8e <PDM_Read_Data+0x376>

	case Data_Read_Current1:
		*data_read = Data_Read_Current0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800381a:	2300      	movs	r3, #0
 800381c:	73bb      	strb	r3, [r7, #14]
 800381e:	e063      	b.n	80038e8 <PDM_Read_Data+0x1d0>
		{
			//Convert ADC into current
			Data_Buffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 8003820:	7bbb      	ldrb	r3, [r7, #14]
 8003822:	4a72      	ldr	r2, [pc, #456]	; (80039ec <PDM_Read_Data+0x2d4>)
 8003824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003828:	461a      	mov	r2, r3
 800382a:	f241 63f7 	movw	r3, #5879	; 0x16f7
 800382e:	fb03 f302 	mul.w	r3, r3, r2
 8003832:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 8003836:	33dc      	adds	r3, #220	; 0xdc
 8003838:	4a6d      	ldr	r2, [pc, #436]	; (80039f0 <PDM_Read_Data+0x2d8>)
 800383a:	fb82 1203 	smull	r1, r2, r2, r3
 800383e:	1312      	asrs	r2, r2, #12
 8003840:	17db      	asrs	r3, r3, #31
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	7bbb      	ldrb	r3, [r7, #14]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	3301      	adds	r3, #1
 800384a:	b291      	uxth	r1, r2
 800384c:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <PDM_Read_Data+0x2dc>)
 800384e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[(i * 2) + 1] > Output_Pin[(i * 2) + 1].Current_Thresholds)
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	3301      	adds	r3, #1
 8003858:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <PDM_Read_Data+0x2dc>)
 800385a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	4864      	ldr	r0, [pc, #400]	; (80039f8 <PDM_Read_Data+0x2e0>)
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4403      	add	r3, r0
 8003870:	3308      	adds	r3, #8
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	4299      	cmp	r1, r3
 8003876:	d90e      	bls.n	8003896 <PDM_Read_Data+0x17e>
				Driver_Overcurrent_Flag |= (1 << ((i * 2) + 1));
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	3301      	adds	r3, #1
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	b21a      	sxth	r2, r3
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <PDM_Read_Data+0x2e4>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b21b      	sxth	r3, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	b21b      	sxth	r3, r3
 8003890:	b29a      	uxth	r2, r3
 8003892:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <PDM_Read_Data+0x2e4>)
 8003894:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003896:	7bbb      	ldrb	r3, [r7, #14]
 8003898:	4a54      	ldr	r2, [pc, #336]	; (80039ec <PDM_Read_Data+0x2d4>)
 800389a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80038a2:	d20f      	bcs.n	80038c4 <PDM_Read_Data+0x1ac>
				Data_ID_Buffer[(i * 2) + 1] |= 1;
 80038a4:	7bbb      	ldrb	r3, [r7, #14]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a55      	ldr	r2, [pc, #340]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80038ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	3301      	adds	r3, #1
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	b291      	uxth	r1, r2
 80038bc:	4a50      	ldr	r2, [pc, #320]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80038be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80038c2:	e00e      	b.n	80038e2 <PDM_Read_Data+0x1ca>
			else
				Data_ID_Buffer[(i * 2) + 1] &= 0xFFFE;
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a4d      	ldr	r2, [pc, #308]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80038cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80038d0:	7bbb      	ldrb	r3, [r7, #14]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	3301      	adds	r3, #1
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	b291      	uxth	r1, r2
 80038dc:	4a48      	ldr	r2, [pc, #288]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80038de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	3301      	adds	r3, #1
 80038e6:	73bb      	strb	r3, [r7, #14]
 80038e8:	7bbb      	ldrb	r3, [r7, #14]
 80038ea:	2b07      	cmp	r3, #7
 80038ec:	d998      	bls.n	8003820 <PDM_Read_Data+0x108>
		}

		if(Accumulator_Temp_Read >= READING_DELAY_TEMP)
 80038ee:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <PDM_Read_Data+0x2ec>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b09      	cmp	r3, #9
 80038f4:	d903      	bls.n	80038fe <PDM_Read_Data+0x1e6>
			*data_read = Data_Read_Temperature;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	701a      	strb	r2, [r3, #0]

		else if(Accumulator_Volt_Read >= READING_DELAY_VOLT)
			*data_read = Data_Read_Voltage;

		break;
 80038fc:	e0c4      	b.n	8003a88 <PDM_Read_Data+0x370>
		else if(Accumulator_Volt_Read >= READING_DELAY_VOLT)
 80038fe:	4b42      	ldr	r3, [pc, #264]	; (8003a08 <PDM_Read_Data+0x2f0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b09      	cmp	r3, #9
 8003904:	f240 80c0 	bls.w	8003a88 <PDM_Read_Data+0x370>
			*data_read = Data_Read_Voltage;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2203      	movs	r2, #3
 800390c:	701a      	strb	r2, [r3, #0]
		break;
 800390e:	e0bb      	b.n	8003a88 <PDM_Read_Data+0x370>

	case Data_Read_Temperature:
		*data_read = Data_Read_Current0;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	737b      	strb	r3, [r7, #13]
 800391a:	e043      	b.n	80039a4 <PDM_Read_Data+0x28c>
		{
			//Convert ADC into temperature
			Data_Buffer[16 + i] = __PDM_CONVERT_TEMPERATURE(ADC_BUFFER[i], ADC_BUFFER[8]);
 800391c:	7b7b      	ldrb	r3, [r7, #13]
 800391e:	4a33      	ldr	r2, [pc, #204]	; (80039ec <PDM_Read_Data+0x2d4>)
 8003920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003924:	461a      	mov	r2, r3
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <PDM_Read_Data+0x2d4>)
 8003928:	8a1b      	ldrh	r3, [r3, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f06f 0215 	mvn.w	r2, #21
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	4a35      	ldr	r2, [pc, #212]	; (8003a0c <PDM_Read_Data+0x2f4>)
 8003938:	fb82 1203 	smull	r1, r2, r2, r3
 800393c:	1092      	asrs	r2, r2, #2
 800393e:	17db      	asrs	r3, r3, #31
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	7b7b      	ldrb	r3, [r7, #13]
 8003944:	3310      	adds	r3, #16
 8003946:	b291      	uxth	r1, r2
 8003948:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <PDM_Read_Data+0x2dc>)
 800394a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 800394e:	7b7b      	ldrb	r3, [r7, #13]
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <PDM_Read_Data+0x2d4>)
 8003952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003956:	2b09      	cmp	r3, #9
 8003958:	d906      	bls.n	8003968 <PDM_Read_Data+0x250>
 800395a:	7b7b      	ldrb	r3, [r7, #13]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <PDM_Read_Data+0x2d4>)
 800395e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003962:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003966:	d90d      	bls.n	8003984 <PDM_Read_Data+0x26c>
				Data_ID_Buffer[16 + i] |= 1;
 8003968:	7b7b      	ldrb	r3, [r7, #13]
 800396a:	3310      	adds	r3, #16
 800396c:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <PDM_Read_Data+0x2e8>)
 800396e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003972:	7b7b      	ldrb	r3, [r7, #13]
 8003974:	3310      	adds	r3, #16
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	b291      	uxth	r1, r2
 800397c:	4a20      	ldr	r2, [pc, #128]	; (8003a00 <PDM_Read_Data+0x2e8>)
 800397e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003982:	e00c      	b.n	800399e <PDM_Read_Data+0x286>
			else
				Data_ID_Buffer[16 + i] &= 0xFFFE;
 8003984:	7b7b      	ldrb	r3, [r7, #13]
 8003986:	3310      	adds	r3, #16
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <PDM_Read_Data+0x2e8>)
 800398a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800398e:	7b7b      	ldrb	r3, [r7, #13]
 8003990:	3310      	adds	r3, #16
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	b291      	uxth	r1, r2
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <PDM_Read_Data+0x2e8>)
 800399a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800399e:	7b7b      	ldrb	r3, [r7, #13]
 80039a0:	3301      	adds	r3, #1
 80039a2:	737b      	strb	r3, [r7, #13]
 80039a4:	7b7b      	ldrb	r3, [r7, #13]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d9b8      	bls.n	800391c <PDM_Read_Data+0x204>
		}
		break;
 80039aa:	e070      	b.n	8003a8e <PDM_Read_Data+0x376>

	case Data_Read_Voltage:
		*data_read = Data_Read_Current0;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	733b      	strb	r3, [r7, #12]
 80039b6:	e048      	b.n	8003a4a <PDM_Read_Data+0x332>
		{
			//Convert ADC into voltage if the ADC value is valid
			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 80039b8:	7b3b      	ldrb	r3, [r7, #12]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <PDM_Read_Data+0x2d4>)
 80039bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c0:	2b09      	cmp	r3, #9
 80039c2:	d906      	bls.n	80039d2 <PDM_Read_Data+0x2ba>
 80039c4:	7b3b      	ldrb	r3, [r7, #12]
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <PDM_Read_Data+0x2d4>)
 80039c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039cc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80039d0:	d91e      	bls.n	8003a10 <PDM_Read_Data+0x2f8>
				Data_ID_Buffer[24] &= 0xFFFE;
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80039d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <PDM_Read_Data+0x2e8>)
 80039de:	861a      	strh	r2, [r3, #48]	; 0x30
		for(uint8_t i = 0; i < 8; i++)
 80039e0:	7b3b      	ldrb	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	733b      	strb	r3, [r7, #12]
 80039e6:	e030      	b.n	8003a4a <PDM_Read_Data+0x332>
 80039e8:	200011f8 	.word	0x200011f8
 80039ec:	20000e88 	.word	0x20000e88
 80039f0:	68db8bad 	.word	0x68db8bad
 80039f4:	200011bc 	.word	0x200011bc
 80039f8:	20000fdc 	.word	0x20000fdc
 80039fc:	20000484 	.word	0x20000484
 8003a00:	200010f0 	.word	0x200010f0
 8003a04:	20000fd4 	.word	0x20000fd4
 8003a08:	20000fd8 	.word	0x20000fd8
 8003a0c:	66666667 	.word	0x66666667
			else
			{
				Data_Buffer[24] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003a10:	7b3b      	ldrb	r3, [r7, #12]
 8003a12:	4a30      	ldr	r2, [pc, #192]	; (8003ad4 <PDM_Read_Data+0x3bc>)
 8003a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <PDM_Read_Data+0x3bc>)
 8003a1c:	8a1b      	ldrh	r3, [r3, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <PDM_Read_Data+0x3c0>)
 8003a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003a2e:	1312      	asrs	r2, r2, #12
 8003a30:	17db      	asrs	r3, r3, #31
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <PDM_Read_Data+0x3c4>)
 8003a38:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_ID_Buffer[24] |= 1;
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <PDM_Read_Data+0x3c8>)
 8003a3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <PDM_Read_Data+0x3c8>)
 8003a46:	861a      	strh	r2, [r3, #48]	; 0x30
				break;
 8003a48:	e002      	b.n	8003a50 <PDM_Read_Data+0x338>
		for(uint8_t i = 0; i < 8; i++)
 8003a4a:	7b3b      	ldrb	r3, [r7, #12]
 8003a4c:	2b07      	cmp	r3, #7
 8003a4e:	d9b3      	bls.n	80039b8 <PDM_Read_Data+0x2a0>
			}
		}

		//If no ADC value is valid, calculate voltage with Driver 1 reading
		if((Data_ID_Buffer[24] & 0xFFFE) == 0)
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <PDM_Read_Data+0x3c8>)
 8003a52:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d115      	bne.n	8003a8c <PDM_Read_Data+0x374>
			Data_Buffer[0] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[0], ADC_BUFFER[8]);
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <PDM_Read_Data+0x3bc>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <PDM_Read_Data+0x3bc>)
 8003a68:	8a1b      	ldrh	r3, [r3, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <PDM_Read_Data+0x3c0>)
 8003a76:	fb82 1203 	smull	r1, r2, r2, r3
 8003a7a:	1312      	asrs	r2, r2, #12
 8003a7c:	17db      	asrs	r3, r3, #31
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <PDM_Read_Data+0x3c4>)
 8003a84:	801a      	strh	r2, [r3, #0]

		break;
 8003a86:	e001      	b.n	8003a8c <PDM_Read_Data+0x374>
		break;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <PDM_Read_Data+0x376>
		break;
 8003a8c:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	Data_Buffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(ADC_BUFFER[9]);
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <PDM_Read_Data+0x3bc>)
 8003a90:	8a5b      	ldrh	r3, [r3, #18]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f647 53ea 	movw	r3, #32234	; 0x7dea
 8003a98:	fb03 f202 	mul.w	r2, r3, r2
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <PDM_Read_Data+0x3cc>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <PDM_Read_Data+0x3d0>)
 8003aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8003aa6:	1192      	asrs	r2, r2, #6
 8003aa8:	17db      	asrs	r3, r3, #31
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <PDM_Read_Data+0x3c4>)
 8003ab0:	865a      	strh	r2, [r3, #50]	; 0x32

	//Sets multiplexer for next data conversion
	PDM_Next_Data_Conversion(*data_read);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fdd2 	bl	8003660 <PDM_Next_Data_Conversion>

	Accumulator_Delay = 0;
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <PDM_Read_Data+0x3d4>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]

	//Restart us timer
	return HAL_TIM_Base_Start_IT(&htim7);
 8003ac2:	480b      	ldr	r0, [pc, #44]	; (8003af0 <PDM_Read_Data+0x3d8>)
 8003ac4:	f006 f912 	bl	8009cec <HAL_TIM_Base_Start_IT>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000e88 	.word	0x20000e88
 8003ad8:	68db8bad 	.word	0x68db8bad
 8003adc:	200011bc 	.word	0x200011bc
 8003ae0:	200010f0 	.word	0x200010f0
 8003ae4:	ffd56d90 	.word	0xffd56d90
 8003ae8:	10624dd3 	.word	0x10624dd3
 8003aec:	2000112c 	.word	0x2000112c
 8003af0:	200011f8 	.word	0x200011f8

08003af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_MspInit+0x4c>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <HAL_MspInit+0x4c>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_MspInit+0x4c>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_MspInit+0x4c>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <HAL_MspInit+0x4c>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_MspInit+0x4c>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	; 0x30
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 031c 	add.w	r3, r7, #28
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6b      	ldr	r2, [pc, #428]	; (8003d10 <HAL_ADC_MspInit+0x1cc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d172      	bne.n	8003c4c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	4a69      	ldr	r2, [pc, #420]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6453      	str	r3, [r2, #68]	; 0x44
 8003b76:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a62      	ldr	r2, [pc, #392]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b60      	ldr	r3, [pc, #384]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8003bba:	23e0      	movs	r3, #224	; 0xe0
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc6:	f107 031c 	add.w	r3, r7, #28
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4852      	ldr	r0, [pc, #328]	; (8003d18 <HAL_ADC_MspInit+0x1d4>)
 8003bce:	f002 fcd3 	bl	8006578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	484d      	ldr	r0, [pc, #308]	; (8003d1c <HAL_ADC_MspInit+0x1d8>)
 8003be6:	f002 fcc7 	bl	8006578 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003bea:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003bec:	4a4d      	ldr	r2, [pc, #308]	; (8003d24 <HAL_ADC_MspInit+0x1e0>)
 8003bee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bfc:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c0a:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c12:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c22:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c28:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c2e:	483c      	ldr	r0, [pc, #240]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c30:	f002 f904 	bl	8005e3c <HAL_DMA_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003c3a:	f7fd fb09 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a37      	ldr	r2, [pc, #220]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
 8003c44:	4a36      	ldr	r2, [pc, #216]	; (8003d20 <HAL_ADC_MspInit+0x1dc>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003c4a:	e05d      	b.n	8003d08 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a35      	ldr	r2, [pc, #212]	; (8003d28 <HAL_ADC_MspInit+0x1e4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d158      	bne.n	8003d08 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c64:	6453      	str	r3, [r2, #68]	; 0x44
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_ADC_MspInit+0x1d0>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 8003c8e:	231f      	movs	r3, #31
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c92:	2303      	movs	r3, #3
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 031c 	add.w	r3, r7, #28
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	481d      	ldr	r0, [pc, #116]	; (8003d18 <HAL_ADC_MspInit+0x1d4>)
 8003ca2:	f002 fc69 	bl	8006578 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <HAL_ADC_MspInit+0x1ec>)
 8003caa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cce:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cde:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003cec:	480f      	ldr	r0, [pc, #60]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003cee:	f002 f8a5 	bl	8005e3c <HAL_DMA_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8003cf8:	f7fd faaa 	bl	8001250 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_ADC_MspInit+0x1e8>)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d08:	bf00      	nop
 8003d0a:	3730      	adds	r7, #48	; 0x30
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40012000 	.word	0x40012000
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	20000f20 	.word	0x20000f20
 8003d24:	40026410 	.word	0x40026410
 8003d28:	40012100 	.word	0x40012100
 8003d2c:	20001130 	.word	0x20001130
 8003d30:	40026440 	.word	0x40026440

08003d34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_CAN_MspInit+0x94>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d134      	bne.n	8003dc0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <HAL_CAN_MspInit+0x98>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_CAN_MspInit+0x98>)
 8003d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_CAN_MspInit+0x98>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_CAN_MspInit+0x98>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_CAN_MspInit+0x98>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_CAN_MspInit+0x98>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d94:	2302      	movs	r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003da0:	2309      	movs	r3, #9
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	4619      	mov	r1, r3
 8003daa:	4809      	ldr	r0, [pc, #36]	; (8003dd0 <HAL_CAN_MspInit+0x9c>)
 8003dac:	f002 fbe4 	bl	8006578 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	2102      	movs	r1, #2
 8003db4:	2014      	movs	r0, #20
 8003db6:	f001 ffae 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003dba:	2014      	movs	r0, #20
 8003dbc:	f001 ffc7 	bl	8005d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003dc0:	bf00      	nop
 8003dc2:	3728      	adds	r7, #40	; 0x28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40006400 	.word	0x40006400
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40020400 	.word	0x40020400

08003dd4 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_CAN_MspDeInit+0x38>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10d      	bne.n	8003e02 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_CAN_MspDeInit+0x3c>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_CAN_MspDeInit+0x3c>)
 8003dec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003df2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003df6:	4807      	ldr	r0, [pc, #28]	; (8003e14 <HAL_CAN_MspDeInit+0x40>)
 8003df8:	f002 fd52 	bl	80068a0 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8003dfc:	2014      	movs	r0, #20
 8003dfe:	f001 ffb4 	bl	8005d6a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40006400 	.word	0x40006400
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40020400 	.word	0x40020400

08003e18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <HAL_CRC_MspInit+0x3c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10d      	bne.n	8003e46 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_CRC_MspInit+0x40>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_CRC_MspInit+0x40>)
 8003e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_CRC_MspInit+0x40>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023000 	.word	0x40023000
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_I2C_MspInit+0x84>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d12b      	bne.n	8003ed6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e9a:	23c0      	movs	r3, #192	; 0xc0
 8003e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e9e:	2312      	movs	r3, #18
 8003ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003eaa:	2304      	movs	r3, #4
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <HAL_I2C_MspInit+0x8c>)
 8003eb6:	f002 fb5f 	bl	8006578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3728      	adds	r7, #40	; 0x28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40005400 	.word	0x40005400
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020400 	.word	0x40020400

08003eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_TIM_Base_MspInit+0x70>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <HAL_TIM_Base_MspInit+0x74>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <HAL_TIM_Base_MspInit+0x74>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0e:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <HAL_TIM_Base_MspInit+0x74>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003f1a:	e01a      	b.n	8003f52 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <HAL_TIM_Base_MspInit+0x78>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d115      	bne.n	8003f52 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <HAL_TIM_Base_MspInit+0x74>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <HAL_TIM_Base_MspInit+0x74>)
 8003f30:	f043 0320 	orr.w	r3, r3, #32
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <HAL_TIM_Base_MspInit+0x74>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	2037      	movs	r0, #55	; 0x37
 8003f48:	f001 fee5 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f4c:	2037      	movs	r0, #55	; 0x37
 8003f4e:	f001 fefe 	bl	8005d4e <HAL_NVIC_EnableIRQ>
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40001400 	.word	0x40001400

08003f68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f96:	e026      	b.n	8003fe6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIM_PWM_MspInit+0x90>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
}
 8003fbe:	e012      	b.n	8003fe6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_TIM_PWM_MspInit+0x94>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fd4:	f043 0302 	orr.w	r3, r3, #2
 8003fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40010400 	.word	0x40010400

08004000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 031c 	add.w	r3, r7, #28
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a49      	ldr	r2, [pc, #292]	; (8004144 <HAL_TIM_MspPostInit+0x144>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d11f      	bne.n	8004062 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	4b48      	ldr	r3, [pc, #288]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a47      	ldr	r2, [pc, #284]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 800402c:	f043 0310 	orr.w	r3, r3, #16
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 800403e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004044:	2312      	movs	r3, #18
 8004046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404c:	2300      	movs	r3, #0
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004050:	2301      	movs	r3, #1
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	483c      	ldr	r0, [pc, #240]	; (800414c <HAL_TIM_MspPostInit+0x14c>)
 800405c:	f002 fa8c 	bl	8006578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004060:	e06b      	b.n	800413a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d11f      	bne.n	80040ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	4b35      	ldr	r3, [pc, #212]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a34      	ldr	r2, [pc, #208]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	6313      	str	r3, [r2, #48]	; 0x30
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8004088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800408c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800408e:	2312      	movs	r3, #18
 8004090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004096:	2300      	movs	r3, #0
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800409a:	2301      	movs	r3, #1
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 800409e:	f107 031c 	add.w	r3, r7, #28
 80040a2:	4619      	mov	r1, r3
 80040a4:	482a      	ldr	r0, [pc, #168]	; (8004150 <HAL_TIM_MspPostInit+0x150>)
 80040a6:	f002 fa67 	bl	8006578 <HAL_GPIO_Init>
}
 80040aa:	e046      	b.n	800413a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a28      	ldr	r2, [pc, #160]	; (8004154 <HAL_TIM_MspPostInit+0x154>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d11e      	bne.n	80040f4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80040d2:	2302      	movs	r3, #2
 80040d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040d6:	2312      	movs	r3, #18
 80040d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040de:	2300      	movs	r3, #0
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040e2:	2302      	movs	r3, #2
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	4818      	ldr	r0, [pc, #96]	; (8004150 <HAL_TIM_MspPostInit+0x150>)
 80040ee:	f002 fa43 	bl	8006578 <HAL_GPIO_Init>
}
 80040f2:	e022      	b.n	800413a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_TIM_MspPostInit+0x158>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d11d      	bne.n	800413a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_TIM_MspPostInit+0x148>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800411e:	2312      	movs	r3, #18
 8004120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004126:	2300      	movs	r3, #0
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800412a:	2303      	movs	r3, #3
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 800412e:	f107 031c 	add.w	r3, r7, #28
 8004132:	4619      	mov	r1, r3
 8004134:	4806      	ldr	r0, [pc, #24]	; (8004150 <HAL_TIM_MspPostInit+0x150>)
 8004136:	f002 fa1f 	bl	8006578 <HAL_GPIO_Init>
}
 800413a:	bf00      	nop
 800413c:	3730      	adds	r7, #48	; 0x30
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40010000 	.word	0x40010000
 8004148:	40023800 	.word	0x40023800
 800414c:	40021000 	.word	0x40021000
 8004150:	40020400 	.word	0x40020400
 8004154:	40000400 	.word	0x40000400
 8004158:	40010400 	.word	0x40010400

0800415c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004160:	e7fe      	b.n	8004160 <NMI_Handler+0x4>

08004162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <HardFault_Handler+0x4>

08004168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800416c:	e7fe      	b.n	800416c <MemManage_Handler+0x4>

0800416e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <BusFault_Handler+0x4>

08004174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004178:	e7fe      	b.n	8004178 <UsageFault_Handler+0x4>

0800417a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a8:	f000 f94e 	bl	8004448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 80041b4:	2001      	movs	r0, #1
 80041b6:	f002 fcb3 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}

080041be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 80041c2:	2002      	movs	r0, #2
 80041c4:	f002 fcac 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}

080041cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEL1_Pin);
 80041d0:	2004      	movs	r0, #4
 80041d2:	f002 fca5 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}

080041da <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEL0_Pin);
 80041de:	2008      	movs	r0, #8
 80041e0:	f002 fc9e 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAULTRST_Pin);
 80041ec:	2010      	movs	r0, #16
 80041ee:	f002 fc97 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <CAN1_RX0_IRQHandler+0x10>)
 80041fe:	f001 fa5c 	bl	80056ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20001190 	.word	0x20001190

0800420c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_Pin);
 8004210:	2020      	movs	r0, #32
 8004212:	f002 fc85 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ANALOG7_Pin);
 8004216:	2040      	movs	r0, #64	; 0x40
 8004218:	f002 fc82 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ANALOG8_Pin);
 800421c:	2080      	movs	r0, #128	; 0x80
 800421e:	f002 fc7f 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT6_Pin);
 8004222:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004226:	f002 fc7b 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT5_Pin);
 800422a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800422e:	f002 fc77 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}

08004236 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OUTPUT3_Pin);
 800423a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800423e:	f002 fc6f 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT7_Pin);
 8004242:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004246:	f002 fc6b 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT13_Pin);
 800424a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800424e:	f002 fc67 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT14_Pin);
 8004252:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004256:	f002 fc63 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OUTPUT4_Pin);
 800425a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800425e:	f002 fc5f 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT16_Pin);
 8004262:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004266:	f002 fc5b 	bl	8006b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <TIM7_IRQHandler+0x10>)
 8004276:	f005 feef 	bl	800a058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200011f8 	.word	0x200011f8

08004284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004288:	4802      	ldr	r0, [pc, #8]	; (8004294 <DMA2_Stream0_IRQHandler+0x10>)
 800428a:	f001 feff 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000f20 	.word	0x20000f20

08004298 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <DMA2_Stream2_IRQHandler+0x10>)
 800429e:	f001 fef5 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20001130 	.word	0x20001130

080042ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <OTG_FS_IRQHandler+0x10>)
 80042b2:	f003 fb76 	bl	80079a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20002720 	.word	0x20002720

080042c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <_sbrk+0x5c>)
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <_sbrk+0x60>)
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <_sbrk+0x64>)
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <_sbrk+0x68>)
 80042e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <_sbrk+0x64>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d207      	bcs.n	8004300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f0:	f00a faf4 	bl	800e8dc <__errno>
 80042f4:	4603      	mov	r3, r0
 80042f6:	220c      	movs	r2, #12
 80042f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	e009      	b.n	8004314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <_sbrk+0x64>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <_sbrk+0x64>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <_sbrk+0x64>)
 8004310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20020000 	.word	0x20020000
 8004320:	00004000 	.word	0x00004000
 8004324:	20000200 	.word	0x20000200
 8004328:	20002b38 	.word	0x20002b38

0800432c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <SystemInit+0x20>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <SystemInit+0x20>)
 8004338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800433c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004354:	480d      	ldr	r0, [pc, #52]	; (800438c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004356:	490e      	ldr	r1, [pc, #56]	; (8004390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004358:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800435a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800435c:	e002      	b.n	8004364 <LoopCopyDataInit>

0800435e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800435e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004362:	3304      	adds	r3, #4

08004364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004368:	d3f9      	bcc.n	800435e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800436a:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800436c:	4c0b      	ldr	r4, [pc, #44]	; (800439c <LoopFillZerobss+0x26>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004370:	e001      	b.n	8004376 <LoopFillZerobss>

08004372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004374:	3204      	adds	r2, #4

08004376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004378:	d3fb      	bcc.n	8004372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800437a:	f7ff ffd7 	bl	800432c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800437e:	f00a fab3 	bl	800e8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004382:	f7fc f8df 	bl	8000544 <main>
  bx  lr    
 8004386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800438c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004390:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004394:	0800eb80 	.word	0x0800eb80
  ldr r2, =_sbss
 8004398:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800439c:	20002b38 	.word	0x20002b38

080043a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043a0:	e7fe      	b.n	80043a0 <ADC_IRQHandler>
	...

080043a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_Init+0x40>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <HAL_Init+0x40>)
 80043ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_Init+0x40>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <HAL_Init+0x40>)
 80043ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_Init+0x40>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <HAL_Init+0x40>)
 80043c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043cc:	2003      	movs	r0, #3
 80043ce:	f001 fc97 	bl	8005d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043d2:	200f      	movs	r0, #15
 80043d4:	f000 f808 	bl	80043e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043d8:	f7ff fb8c 	bl	8003af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00

080043e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_InitTick+0x54>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_InitTick+0x58>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	4618      	mov	r0, r3
 8004408:	f001 fcbd 	bl	8005d86 <HAL_SYSTICK_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e00e      	b.n	8004434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b0f      	cmp	r3, #15
 800441a:	d80a      	bhi.n	8004432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800441c:	2200      	movs	r2, #0
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f001 fc77 	bl	8005d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004428:	4a06      	ldr	r2, [pc, #24]	; (8004444 <HAL_InitTick+0x5c>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e000      	b.n	8004434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000000 	.word	0x20000000
 8004440:	20000008 	.word	0x20000008
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_IncTick+0x20>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_IncTick+0x24>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4413      	add	r3, r2
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <HAL_IncTick+0x24>)
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000008 	.word	0x20000008
 800446c:	2000124c 	.word	0x2000124c

08004470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return uwTick;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_GetTick+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000124c 	.word	0x2000124c

08004488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7ff ffee 	bl	8004470 <HAL_GetTick>
 8004494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d005      	beq.n	80044ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <HAL_Delay+0x44>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044ae:	bf00      	nop
 80044b0:	f7ff ffde 	bl	8004470 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d8f7      	bhi.n	80044b0 <HAL_Delay+0x28>
  {
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000008 	.word	0x20000008

080044d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e033      	b.n	800454e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fb28 	bl	8003b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d118      	bne.n	8004540 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004516:	f023 0302 	bic.w	r3, r3, #2
 800451a:	f043 0202 	orr.w	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa78 	bl	8004a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
 800453e:	e001      	b.n	8004544 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_ADC_Start_DMA+0x1e>
 8004572:	2302      	movs	r3, #2
 8004574:	e0e9      	b.n	800474a <HAL_ADC_Start_DMA+0x1f2>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d018      	beq.n	80045be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800459c:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_ADC_Start_DMA+0x1fc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6d      	ldr	r2, [pc, #436]	; (8004758 <HAL_ADC_Start_DMA+0x200>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0c9a      	lsrs	r2, r3, #18
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045b0:	e002      	b.n	80045b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f9      	bne.n	80045b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045cc:	d107      	bne.n	80045de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 80a1 	bne.w	8004730 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004618:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d106      	bne.n	800463c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f023 0206 	bic.w	r2, r3, #6
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
 800463a:	e002      	b.n	8004642 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800464a:	4b44      	ldr	r3, [pc, #272]	; (800475c <HAL_ADC_Start_DMA+0x204>)
 800464c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	4a43      	ldr	r2, [pc, #268]	; (8004760 <HAL_ADC_Start_DMA+0x208>)
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_ADC_Start_DMA+0x20c>)
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_ADC_Start_DMA+0x210>)
 8004664:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800466e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800467e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	334c      	adds	r3, #76	; 0x4c
 800469a:	4619      	mov	r1, r3
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f001 fc7a 	bl	8005f98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d12a      	bne.n	8004706 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_ADC_Start_DMA+0x214>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d015      	beq.n	80046e6 <HAL_ADC_Start_DMA+0x18e>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2c      	ldr	r2, [pc, #176]	; (8004770 <HAL_ADC_Start_DMA+0x218>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d105      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x178>
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_ADC_Start_DMA+0x204>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a27      	ldr	r2, [pc, #156]	; (8004774 <HAL_ADC_Start_DMA+0x21c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d136      	bne.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <HAL_ADC_Start_DMA+0x204>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d130      	bne.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d129      	bne.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	e020      	b.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <HAL_ADC_Start_DMA+0x214>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d11b      	bne.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d114      	bne.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800472c:	609a      	str	r2, [r3, #8]
 800472e:	e00b      	b.n	8004748 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0210 	orr.w	r2, r3, #16
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000000 	.word	0x20000000
 8004758:	431bde83 	.word	0x431bde83
 800475c:	40012300 	.word	0x40012300
 8004760:	08004c11 	.word	0x08004c11
 8004764:	08004ccb 	.word	0x08004ccb
 8004768:	08004ce7 	.word	0x08004ce7
 800476c:	40012000 	.word	0x40012000
 8004770:	40012100 	.word	0x40012100
 8004774:	40012200 	.word	0x40012200

08004778 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x1c>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e113      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x244>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b09      	cmp	r3, #9
 80047de:	d925      	bls.n	800482c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68d9      	ldr	r1, [r3, #12]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	3b1e      	subs	r3, #30
 80047f6:	2207      	movs	r2, #7
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43da      	mvns	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	400a      	ands	r2, r1
 8004804:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68d9      	ldr	r1, [r3, #12]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	4618      	mov	r0, r3
 8004818:	4603      	mov	r3, r0
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4403      	add	r3, r0
 800481e:	3b1e      	subs	r3, #30
 8004820:	409a      	lsls	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	e022      	b.n	8004872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6919      	ldr	r1, [r3, #16]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	2207      	movs	r2, #7
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43da      	mvns	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	400a      	ands	r2, r1
 800484e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6919      	ldr	r1, [r3, #16]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	4618      	mov	r0, r3
 8004862:	4603      	mov	r3, r0
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4403      	add	r3, r0
 8004868:	409a      	lsls	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d824      	bhi.n	80048c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	3b05      	subs	r3, #5
 800488c:	221f      	movs	r2, #31
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	400a      	ands	r2, r1
 800489a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4618      	mov	r0, r3
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	3b05      	subs	r3, #5
 80048b6:	fa00 f203 	lsl.w	r2, r0, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34
 80048c2:	e04c      	b.n	800495e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d824      	bhi.n	8004916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	3b23      	subs	r3, #35	; 0x23
 80048de:	221f      	movs	r2, #31
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43da      	mvns	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	400a      	ands	r2, r1
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	3b23      	subs	r3, #35	; 0x23
 8004908:	fa00 f203 	lsl.w	r2, r0, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
 8004914:	e023      	b.n	800495e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	3b41      	subs	r3, #65	; 0x41
 8004928:	221f      	movs	r2, #31
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	400a      	ands	r2, r1
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	4618      	mov	r0, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	3b41      	subs	r3, #65	; 0x41
 8004952:	fa00 f203 	lsl.w	r2, r0, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <HAL_ADC_ConfigChannel+0x250>)
 8004960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a28      	ldr	r2, [pc, #160]	; (8004a08 <HAL_ADC_ConfigChannel+0x254>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10f      	bne.n	800498c <HAL_ADC_ConfigChannel+0x1d8>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b12      	cmp	r3, #18
 8004972:	d10b      	bne.n	800498c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <HAL_ADC_ConfigChannel+0x254>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d12b      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x23a>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <HAL_ADC_ConfigChannel+0x258>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <HAL_ADC_ConfigChannel+0x1f4>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b11      	cmp	r3, #17
 80049a6:	d122      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <HAL_ADC_ConfigChannel+0x258>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d111      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <HAL_ADC_ConfigChannel+0x25c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <HAL_ADC_ConfigChannel+0x260>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	0c9a      	lsrs	r2, r3, #18
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049e0:	e002      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f9      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40012300 	.word	0x40012300
 8004a08:	40012000 	.word	0x40012000
 8004a0c:	10000012 	.word	0x10000012
 8004a10:	20000000 	.word	0x20000000
 8004a14:	431bde83 	.word	0x431bde83

08004a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a20:	4b79      	ldr	r3, [pc, #484]	; (8004c08 <ADC_Init+0x1f0>)
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	021a      	lsls	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <ADC_Init+0x1f4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004abe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	e00f      	b.n	8004b16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0202 	bic.w	r2, r2, #2
 8004b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6899      	ldr	r1, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7e1b      	ldrb	r3, [r3, #24]
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	035a      	lsls	r2, r3, #13
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	e007      	b.n	8004b8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	051a      	lsls	r2, r3, #20
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bce:	025a      	lsls	r2, r3, #9
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	029a      	lsls	r2, r3, #10
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40012300 	.word	0x40012300
 8004c0c:	0f000001 	.word	0x0f000001

08004c10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d13c      	bne.n	8004ca4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d12b      	bne.n	8004c9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d127      	bne.n	8004c9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d119      	bne.n	8004c9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0220 	bic.w	r2, r2, #32
 8004c76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f7ff fd6b 	bl	8004778 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ca2:	e00e      	b.n	8004cc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fd75 	bl	80047a0 <HAL_ADC_ErrorCallback>
}
 8004cb6:	e004      	b.n	8004cc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff fd57 	bl	800478c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2240      	movs	r2, #64	; 0x40
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fd4a 	bl	80047a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0ed      	b.n	8004f02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe fffe 	bl	8003d34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d48:	f7ff fb92 	bl	8004470 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d4e:	e012      	b.n	8004d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d50:	f7ff fb8e 	bl	8004470 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b0a      	cmp	r3, #10
 8004d5c:	d90b      	bls.n	8004d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0c5      	b.n	8004f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0e5      	beq.n	8004d50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0202 	bic.w	r2, r2, #2
 8004d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d94:	f7ff fb6c 	bl	8004470 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d9a:	e012      	b.n	8004dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d9c:	f7ff fb68 	bl	8004470 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b0a      	cmp	r3, #10
 8004da8:	d90b      	bls.n	8004dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2205      	movs	r2, #5
 8004dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e09f      	b.n	8004f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e5      	bne.n	8004d9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7e1b      	ldrb	r3, [r3, #24]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e007      	b.n	8004dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7e5b      	ldrb	r3, [r3, #25]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d108      	bne.n	8004e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e007      	b.n	8004e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7e9b      	ldrb	r3, [r3, #26]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d108      	bne.n	8004e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0220 	orr.w	r2, r2, #32
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e007      	b.n	8004e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0220 	bic.w	r2, r2, #32
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7edb      	ldrb	r3, [r3, #27]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d108      	bne.n	8004e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0210 	bic.w	r2, r2, #16
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0210 	orr.w	r2, r2, #16
 8004e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	7f1b      	ldrb	r3, [r3, #28]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e007      	b.n	8004ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0208 	bic.w	r2, r2, #8
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7f5b      	ldrb	r3, [r3, #29]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d108      	bne.n	8004ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0204 	orr.w	r2, r2, #4
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e007      	b.n	8004ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0204 	bic.w	r2, r2, #4
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e015      	b.n	8004f48 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f93b 	bl	8005198 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fe ff56 	bl	8003dd4 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f36:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d003      	beq.n	8004f76 <HAL_CAN_ConfigFilter+0x26>
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	f040 80be 	bne.w	80050f2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f76:	4b65      	ldr	r3, [pc, #404]	; (800510c <HAL_CAN_ConfigFilter+0x1bc>)
 8004f78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f80:	f043 0201 	orr.w	r2, r3, #1
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	401a      	ands	r2, r3
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d123      	bne.n	8005020 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ffa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3248      	adds	r2, #72	; 0x48
 8005000:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005014:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	3348      	adds	r3, #72	; 0x48
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d122      	bne.n	800506e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	431a      	orrs	r2, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005048:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3248      	adds	r2, #72	; 0x48
 800504e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005062:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005064:	6979      	ldr	r1, [r7, #20]
 8005066:	3348      	adds	r3, #72	; 0x48
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	43db      	mvns	r3, r3
 8005080:	401a      	ands	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005088:	e007      	b.n	800509a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	431a      	orrs	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	401a      	ands	r2, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80050b4:	e007      	b.n	80050c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	431a      	orrs	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d107      	bne.n	80050de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050e4:	f023 0201 	bic.w	r2, r3, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e006      	b.n	8005100 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40006400 	.word	0x40006400

08005110 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d12e      	bne.n	8005182 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800513c:	f7ff f998 	bl	8004470 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005142:	e012      	b.n	800516a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005144:	f7ff f994 	bl	8004470 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b0a      	cmp	r3, #10
 8005150:	d90b      	bls.n	800516a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2205      	movs	r2, #5
 8005162:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e012      	b.n	8005190 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e006      	b.n	8005190 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d133      	bne.n	8005214 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051bc:	f7ff f958 	bl	8004470 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051c2:	e012      	b.n	80051ea <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051c4:	f7ff f954 	bl	8004470 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b0a      	cmp	r3, #10
 80051d0:	d90b      	bls.n	80051ea <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2205      	movs	r2, #5
 80051e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e01b      	b.n	8005222 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0e5      	beq.n	80051c4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0202 	bic.w	r2, r2, #2
 8005206:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e006      	b.n	8005222 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800522a:	b480      	push	{r7}
 800522c:	b089      	sub	sp, #36	; 0x24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800523e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005248:	7ffb      	ldrb	r3, [r7, #31]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d003      	beq.n	8005256 <HAL_CAN_AddTxMessage+0x2c>
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	2b02      	cmp	r3, #2
 8005252:	f040 80b8 	bne.w	80053c6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a0 	beq.w	80053b6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d907      	bls.n	8005296 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e09e      	b.n	80053d4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005296:	2201      	movs	r2, #1
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	409a      	lsls	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6809      	ldr	r1, [r1, #0]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	3318      	adds	r3, #24
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	440b      	add	r3, r1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e00f      	b.n	80052e4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	3318      	adds	r3, #24
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	440b      	add	r3, r1
 80052e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6819      	ldr	r1, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3318      	adds	r3, #24
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	440b      	add	r3, r1
 80052f4:	3304      	adds	r3, #4
 80052f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	7d1b      	ldrb	r3, [r3, #20]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d111      	bne.n	8005324 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3318      	adds	r3, #24
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	4413      	add	r3, r2
 800530c:	3304      	adds	r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	6811      	ldr	r1, [r2, #0]
 8005314:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3318      	adds	r3, #24
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	440b      	add	r3, r1
 8005320:	3304      	adds	r3, #4
 8005322:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3307      	adds	r3, #7
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	061a      	lsls	r2, r3, #24
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3306      	adds	r3, #6
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3305      	adds	r3, #5
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	4313      	orrs	r3, r2
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	3204      	adds	r2, #4
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	4610      	mov	r0, r2
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	6811      	ldr	r1, [r2, #0]
 800534c:	ea43 0200 	orr.w	r2, r3, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	440b      	add	r3, r1
 8005356:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800535a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3303      	adds	r3, #3
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	061a      	lsls	r2, r3, #24
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3302      	adds	r3, #2
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3301      	adds	r3, #1
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	4313      	orrs	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	4610      	mov	r0, r2
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	ea43 0200 	orr.w	r2, r3, r0
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	440b      	add	r3, r1
 800538c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005390:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3318      	adds	r3, #24
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	4413      	add	r3, r2
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	6811      	ldr	r1, [r2, #0]
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3318      	adds	r3, #24
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	440b      	add	r3, r1
 80053b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e00e      	b.n	80053d4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e006      	b.n	80053d4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3724      	adds	r7, #36	; 0x24
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053f2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80053f4:	7afb      	ldrb	r3, [r7, #11]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d002      	beq.n	8005400 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d11d      	bne.n	800543c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800544a:	b480      	push	{r7}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800545e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d003      	beq.n	800546e <HAL_CAN_GetRxMessage+0x24>
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b02      	cmp	r3, #2
 800546a:	f040 80f3 	bne.w	8005654 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10e      	bne.n	8005492 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d116      	bne.n	80054b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0e7      	b.n	8005662 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0d8      	b.n	8005662 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	331b      	adds	r3, #27
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	4413      	add	r3, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0204 	and.w	r2, r3, #4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	331b      	adds	r3, #27
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	4413      	add	r3, r2
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0d5b      	lsrs	r3, r3, #21
 80054de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e00b      	b.n	8005500 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	331b      	adds	r3, #27
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4413      	add	r3, r2
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	08db      	lsrs	r3, r3, #3
 80054f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	331b      	adds	r3, #27
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	4413      	add	r3, r2
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0202 	and.w	r2, r3, #2
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	331b      	adds	r3, #27
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	4413      	add	r3, r2
 8005522:	3304      	adds	r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 020f 	and.w	r2, r3, #15
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	331b      	adds	r3, #27
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	4413      	add	r3, r2
 800553a:	3304      	adds	r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	331b      	adds	r3, #27
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	4413      	add	r3, r2
 8005552:	3304      	adds	r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0c1b      	lsrs	r3, r3, #16
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	4413      	add	r3, r2
 8005568:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4413      	add	r3, r2
 800557e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	0a1a      	lsrs	r2, r3, #8
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	3301      	adds	r3, #1
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4413      	add	r3, r2
 8005598:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	0c1a      	lsrs	r2, r3, #16
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	3302      	adds	r3, #2
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0e1a      	lsrs	r2, r3, #24
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3303      	adds	r3, #3
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	3304      	adds	r3, #4
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	0a1a      	lsrs	r2, r3, #8
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	3305      	adds	r3, #5
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	0c1a      	lsrs	r2, r3, #16
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	3306      	adds	r3, #6
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	4413      	add	r3, r2
 8005618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0e1a      	lsrs	r2, r3, #24
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	3307      	adds	r3, #7
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0220 	orr.w	r2, r2, #32
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e007      	b.n	8005650 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0220 	orr.w	r2, r2, #32
 800564e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e006      	b.n	8005662 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800567e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d002      	beq.n	800568c <HAL_CAN_ActivateNotification+0x1e>
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d109      	bne.n	80056a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6959      	ldr	r1, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	e006      	b.n	80056ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08a      	sub	sp, #40	; 0x28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d07c      	beq.n	80057fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d023      	beq.n	8005752 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f983 	bl	8005a28 <HAL_CAN_TxMailbox0CompleteCallback>
 8005722:	e016      	b.n	8005752 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	e00c      	b.n	8005752 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	e002      	b.n	8005752 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f989 	bl	8005a64 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d024      	beq.n	80057a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005764:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f963 	bl	8005a3c <HAL_CAN_TxMailbox1CompleteCallback>
 8005776:	e016      	b.n	80057a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	e00c      	b.n	80057a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
 800579e:	e002      	b.n	80057a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f969 	bl	8005a78 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d024      	beq.n	80057fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f943 	bl	8005a50 <HAL_CAN_TxMailbox2CompleteCallback>
 80057ca:	e016      	b.n	80057fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
 80057de:	e00c      	b.n	80057fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	e002      	b.n	80057fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f949 	bl	8005a8c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005814:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2210      	movs	r2, #16
 800581c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d006      	beq.n	8005840 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2208      	movs	r2, #8
 8005838:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f930 	bl	8005aa0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fd f91f 	bl	8002a9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00c      	beq.n	8005882 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005878:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2210      	movs	r2, #16
 8005880:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2208      	movs	r2, #8
 800589c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f912 	bl	8005ac8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8f9 	bl	8005ab4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2210      	movs	r2, #16
 80058dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8fc 	bl	8005adc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8f5 	bl	8005af0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d07b      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d072      	beq.n	8005a00 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	f043 0304 	orr.w	r3, r3, #4
 800596c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005974:	2b00      	cmp	r3, #0
 8005976:	d043      	beq.n	8005a00 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d03e      	beq.n	8005a00 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d02b      	beq.n	80059e4 <HAL_CAN_IRQHandler+0x32a>
 800598c:	2b60      	cmp	r3, #96	; 0x60
 800598e:	d82e      	bhi.n	80059ee <HAL_CAN_IRQHandler+0x334>
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d022      	beq.n	80059da <HAL_CAN_IRQHandler+0x320>
 8005994:	2b50      	cmp	r3, #80	; 0x50
 8005996:	d82a      	bhi.n	80059ee <HAL_CAN_IRQHandler+0x334>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d019      	beq.n	80059d0 <HAL_CAN_IRQHandler+0x316>
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d826      	bhi.n	80059ee <HAL_CAN_IRQHandler+0x334>
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d010      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x30c>
 80059a4:	2b30      	cmp	r3, #48	; 0x30
 80059a6:	d822      	bhi.n	80059ee <HAL_CAN_IRQHandler+0x334>
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d002      	beq.n	80059b2 <HAL_CAN_IRQHandler+0x2f8>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d005      	beq.n	80059bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80059b0:	e01d      	b.n	80059ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059ba:	e019      	b.n	80059f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	f043 0310 	orr.w	r3, r3, #16
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059c4:	e014      	b.n	80059f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	f043 0320 	orr.w	r3, r3, #32
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059ce:	e00f      	b.n	80059f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059d8:	e00a      	b.n	80059f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059e2:	e005      	b.n	80059f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059ec:	e000      	b.n	80059f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80059ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2204      	movs	r2, #4
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f872 	bl	8005b04 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a20:	bf00      	nop
 8005a22:	3728      	adds	r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <__NVIC_SetPriorityGrouping+0x44>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b34:	4013      	ands	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b4a:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <__NVIC_SetPriorityGrouping+0x44>)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	60d3      	str	r3, [r2, #12]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000ed00 	.word	0xe000ed00

08005b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <__NVIC_GetPriorityGrouping+0x18>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0a1b      	lsrs	r3, r3, #8
 8005b6a:	f003 0307 	and.w	r3, r3, #7
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	db0b      	blt.n	8005ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	4907      	ldr	r1, [pc, #28]	; (8005bb4 <__NVIC_EnableIRQ+0x38>)
 8005b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	e000e100 	.word	0xe000e100

08005bb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	db12      	blt.n	8005bf0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	f003 021f 	and.w	r2, r3, #31
 8005bd0:	490a      	ldr	r1, [pc, #40]	; (8005bfc <__NVIC_DisableIRQ+0x44>)
 8005bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2001      	movs	r0, #1
 8005bda:	fa00 f202 	lsl.w	r2, r0, r2
 8005bde:	3320      	adds	r3, #32
 8005be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005be4:	f3bf 8f4f 	dsb	sy
}
 8005be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005bea:	f3bf 8f6f 	isb	sy
}
 8005bee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	e000e100 	.word	0xe000e100

08005c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db0a      	blt.n	8005c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	490c      	ldr	r1, [pc, #48]	; (8005c4c <__NVIC_SetPriority+0x4c>)
 8005c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1e:	0112      	lsls	r2, r2, #4
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	440b      	add	r3, r1
 8005c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c28:	e00a      	b.n	8005c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4908      	ldr	r1, [pc, #32]	; (8005c50 <__NVIC_SetPriority+0x50>)
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	3b04      	subs	r3, #4
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	761a      	strb	r2, [r3, #24]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000e100 	.word	0xe000e100
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f1c3 0307 	rsb	r3, r3, #7
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	bf28      	it	cs
 8005c72:	2304      	movcs	r3, #4
 8005c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d902      	bls.n	8005c84 <NVIC_EncodePriority+0x30>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3b03      	subs	r3, #3
 8005c82:	e000      	b.n	8005c86 <NVIC_EncodePriority+0x32>
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43da      	mvns	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	401a      	ands	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43d9      	mvns	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cac:	4313      	orrs	r3, r2
         );
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ccc:	d301      	bcc.n	8005cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e00f      	b.n	8005cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <SysTick_Config+0x40>)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cda:	210f      	movs	r1, #15
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	f7ff ff8e 	bl	8005c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <SysTick_Config+0x40>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cea:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <SysTick_Config+0x40>)
 8005cec:	2207      	movs	r2, #7
 8005cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000e010 	.word	0xe000e010

08005d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff05 	bl	8005b18 <__NVIC_SetPriorityGrouping>
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b086      	sub	sp, #24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d28:	f7ff ff1a 	bl	8005b60 <__NVIC_GetPriorityGrouping>
 8005d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f7ff ff8e 	bl	8005c54 <NVIC_EncodePriority>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff ff5d 	bl	8005c00 <__NVIC_SetPriority>
}
 8005d46:	bf00      	nop
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff0d 	bl	8005b7c <__NVIC_EnableIRQ>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	4603      	mov	r3, r0
 8005d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff1d 	bl	8005bb8 <__NVIC_DisableIRQ>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ff94 	bl	8005cbc <SysTick_Config>
 8005d94:	4603      	mov	r3, r0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e00e      	b.n	8005dce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	795b      	ldrb	r3, [r3, #5]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fe f829 	bl	8003e18 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2202      	movs	r2, #2
 8005dea:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e00a      	b.n	8005e18 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	441a      	add	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3301      	adds	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f0      	bcc.n	8005e02 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8005e2e:	693b      	ldr	r3, [r7, #16]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e48:	f7fe fb12 	bl	8004470 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e099      	b.n	8005f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e78:	e00f      	b.n	8005e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e7a:	f7fe faf9 	bl	8004470 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b05      	cmp	r3, #5
 8005e86:	d908      	bls.n	8005e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2203      	movs	r2, #3
 8005e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e078      	b.n	8005f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e8      	bne.n	8005e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4b38      	ldr	r3, [pc, #224]	; (8005f94 <HAL_DMA_Init+0x158>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d107      	bne.n	8005f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	4313      	orrs	r3, r2
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0307 	bic.w	r3, r3, #7
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d117      	bne.n	8005f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fa9d 	bl	8006480 <DMA_CheckFifoParam>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2240      	movs	r2, #64	; 0x40
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e016      	b.n	8005f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa54 	bl	8006414 <DMA_CalcBaseAndBitshift>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f74:	223f      	movs	r2, #63	; 0x3f
 8005f76:	409a      	lsls	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	f010803f 	.word	0xf010803f

08005f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_DMA_Start_IT+0x26>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e040      	b.n	8006040 <HAL_DMA_Start_IT+0xa8>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d12f      	bne.n	8006032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f9e6 	bl	80063b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	223f      	movs	r2, #63	; 0x3f
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0216 	orr.w	r2, r2, #22
 8006006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0208 	orr.w	r2, r2, #8
 800601e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e005      	b.n	800603e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800603a:	2302      	movs	r3, #2
 800603c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d004      	beq.n	8006066 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2280      	movs	r2, #128	; 0x80
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e00c      	b.n	8006080 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2205      	movs	r2, #5
 800606a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006098:	4b92      	ldr	r3, [pc, #584]	; (80062e4 <HAL_DMA_IRQHandler+0x258>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a92      	ldr	r2, [pc, #584]	; (80062e8 <HAL_DMA_IRQHandler+0x25c>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	0a9b      	lsrs	r3, r3, #10
 80060a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b6:	2208      	movs	r2, #8
 80060b8:	409a      	lsls	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01a      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0204 	bic.w	r2, r2, #4
 80060de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e4:	2208      	movs	r2, #8
 80060e6:	409a      	lsls	r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	f043 0201 	orr.w	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fc:	2201      	movs	r2, #1
 80060fe:	409a      	lsls	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4013      	ands	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611a:	2201      	movs	r2, #1
 800611c:	409a      	lsls	r2, r3
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	f043 0202 	orr.w	r2, r3, #2
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	2204      	movs	r2, #4
 8006134:	409a      	lsls	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d012      	beq.n	8006164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	2204      	movs	r2, #4
 8006152:	409a      	lsls	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	f043 0204 	orr.w	r2, r3, #4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	2210      	movs	r2, #16
 800616a:	409a      	lsls	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d043      	beq.n	80061fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d03c      	beq.n	80061fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006186:	2210      	movs	r2, #16
 8006188:	409a      	lsls	r2, r3
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d018      	beq.n	80061ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d108      	bne.n	80061bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d024      	beq.n	80061fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
 80061ba:	e01f      	b.n	80061fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
 80061cc:	e016      	b.n	80061fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d107      	bne.n	80061ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0208 	bic.w	r2, r2, #8
 80061ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	2220      	movs	r2, #32
 8006202:	409a      	lsls	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 808e 	beq.w	800632a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8086 	beq.w	800632a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	2220      	movs	r2, #32
 8006224:	409a      	lsls	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b05      	cmp	r3, #5
 8006234:	d136      	bne.n	80062a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0216 	bic.w	r2, r2, #22
 8006244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <HAL_DMA_IRQHandler+0x1da>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0208 	bic.w	r2, r2, #8
 8006274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627a:	223f      	movs	r2, #63	; 0x3f
 800627c:	409a      	lsls	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006296:	2b00      	cmp	r3, #0
 8006298:	d07d      	beq.n	8006396 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
        }
        return;
 80062a2:	e078      	b.n	8006396 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01c      	beq.n	80062ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d108      	bne.n	80062d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d030      	beq.n	800632a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
 80062d0:	e02b      	b.n	800632a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d027      	beq.n	800632a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
 80062e2:	e022      	b.n	800632a <HAL_DMA_IRQHandler+0x29e>
 80062e4:	20000000 	.word	0x20000000
 80062e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10f      	bne.n	800631a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0210 	bic.w	r2, r2, #16
 8006308:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	2b00      	cmp	r3, #0
 8006330:	d032      	beq.n	8006398 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d022      	beq.n	8006384 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2205      	movs	r2, #5
 8006342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3301      	adds	r3, #1
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	429a      	cmp	r2, r3
 8006360:	d307      	bcc.n	8006372 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f2      	bne.n	8006356 <HAL_DMA_IRQHandler+0x2ca>
 8006370:	e000      	b.n	8006374 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006372:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
 8006394:	e000      	b.n	8006398 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006396:	bf00      	nop
    }
  }
}
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d108      	bne.n	80063f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063f6:	e007      	b.n	8006408 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	3b10      	subs	r3, #16
 8006424:	4a14      	ldr	r2, [pc, #80]	; (8006478 <DMA_CalcBaseAndBitshift+0x64>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800642e:	4a13      	ldr	r2, [pc, #76]	; (800647c <DMA_CalcBaseAndBitshift+0x68>)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b03      	cmp	r3, #3
 8006440:	d909      	bls.n	8006456 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	659a      	str	r2, [r3, #88]	; 0x58
 8006454:	e007      	b.n	8006466 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	aaaaaaab 	.word	0xaaaaaaab
 800647c:	0800eb68 	.word	0x0800eb68

08006480 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11f      	bne.n	80064da <DMA_CheckFifoParam+0x5a>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d856      	bhi.n	800654e <DMA_CheckFifoParam+0xce>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <DMA_CheckFifoParam+0x28>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064b9 	.word	0x080064b9
 80064ac:	080064cb 	.word	0x080064cb
 80064b0:	080064b9 	.word	0x080064b9
 80064b4:	0800654f 	.word	0x0800654f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d046      	beq.n	8006552 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c8:	e043      	b.n	8006552 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064d2:	d140      	bne.n	8006556 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e03d      	b.n	8006556 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e2:	d121      	bne.n	8006528 <DMA_CheckFifoParam+0xa8>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d837      	bhi.n	800655a <DMA_CheckFifoParam+0xda>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <DMA_CheckFifoParam+0x70>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006507 	.word	0x08006507
 80064f8:	08006501 	.word	0x08006501
 80064fc:	08006519 	.word	0x08006519
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
      break;
 8006504:	e030      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d025      	beq.n	800655e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006516:	e022      	b.n	800655e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006520:	d11f      	bne.n	8006562 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006526:	e01c      	b.n	8006562 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d903      	bls.n	8006536 <DMA_CheckFifoParam+0xb6>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b03      	cmp	r3, #3
 8006532:	d003      	beq.n	800653c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006534:	e018      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
      break;
 800653a:	e015      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00e      	beq.n	8006566 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
      break;
 800654c:	e00b      	b.n	8006566 <DMA_CheckFifoParam+0xe6>
      break;
 800654e:	bf00      	nop
 8006550:	e00a      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      break;
 8006552:	bf00      	nop
 8006554:	e008      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      break;
 8006556:	bf00      	nop
 8006558:	e006      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      break;
 800655a:	bf00      	nop
 800655c:	e004      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      break;
 800655e:	bf00      	nop
 8006560:	e002      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      break;   
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <DMA_CheckFifoParam+0xe8>
      break;
 8006566:	bf00      	nop
    }
  } 
  
  return status; 
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop

08006578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	e165      	b.n	8006860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006594:	2201      	movs	r2, #1
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	f040 8154 	bne.w	800685a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d005      	beq.n	80065ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d130      	bne.n	800662c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	2203      	movs	r2, #3
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006600:	2201      	movs	r2, #1
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	43db      	mvns	r3, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 0201 	and.w	r2, r3, #1
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	4313      	orrs	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	2b03      	cmp	r3, #3
 8006636:	d017      	beq.n	8006668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	2203      	movs	r2, #3
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	43db      	mvns	r3, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4013      	ands	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4313      	orrs	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d123      	bne.n	80066bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	08da      	lsrs	r2, r3, #3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3208      	adds	r2, #8
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	220f      	movs	r2, #15
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	43db      	mvns	r3, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	4013      	ands	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	08da      	lsrs	r2, r3, #3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3208      	adds	r2, #8
 80066b6:	69b9      	ldr	r1, [r7, #24]
 80066b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	2203      	movs	r2, #3
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 0203 	and.w	r2, r3, #3
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80ae 	beq.w	800685a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	4b5d      	ldr	r3, [pc, #372]	; (8006878 <HAL_GPIO_Init+0x300>)
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	4a5c      	ldr	r2, [pc, #368]	; (8006878 <HAL_GPIO_Init+0x300>)
 8006708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800670c:	6453      	str	r3, [r2, #68]	; 0x44
 800670e:	4b5a      	ldr	r3, [pc, #360]	; (8006878 <HAL_GPIO_Init+0x300>)
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800671a:	4a58      	ldr	r2, [pc, #352]	; (800687c <HAL_GPIO_Init+0x304>)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	3302      	adds	r3, #2
 8006722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	220f      	movs	r2, #15
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a4f      	ldr	r2, [pc, #316]	; (8006880 <HAL_GPIO_Init+0x308>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d025      	beq.n	8006792 <HAL_GPIO_Init+0x21a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a4e      	ldr	r2, [pc, #312]	; (8006884 <HAL_GPIO_Init+0x30c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01f      	beq.n	800678e <HAL_GPIO_Init+0x216>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a4d      	ldr	r2, [pc, #308]	; (8006888 <HAL_GPIO_Init+0x310>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d019      	beq.n	800678a <HAL_GPIO_Init+0x212>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a4c      	ldr	r2, [pc, #304]	; (800688c <HAL_GPIO_Init+0x314>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_GPIO_Init+0x20e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a4b      	ldr	r2, [pc, #300]	; (8006890 <HAL_GPIO_Init+0x318>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00d      	beq.n	8006782 <HAL_GPIO_Init+0x20a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a4a      	ldr	r2, [pc, #296]	; (8006894 <HAL_GPIO_Init+0x31c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <HAL_GPIO_Init+0x206>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a49      	ldr	r2, [pc, #292]	; (8006898 <HAL_GPIO_Init+0x320>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <HAL_GPIO_Init+0x202>
 8006776:	2306      	movs	r3, #6
 8006778:	e00c      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 800677a:	2307      	movs	r3, #7
 800677c:	e00a      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 800677e:	2305      	movs	r3, #5
 8006780:	e008      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 8006782:	2304      	movs	r3, #4
 8006784:	e006      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 8006786:	2303      	movs	r3, #3
 8006788:	e004      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 800678a:	2302      	movs	r3, #2
 800678c:	e002      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <HAL_GPIO_Init+0x21c>
 8006792:	2300      	movs	r3, #0
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	f002 0203 	and.w	r2, r2, #3
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	4093      	lsls	r3, r2
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067a4:	4935      	ldr	r1, [pc, #212]	; (800687c <HAL_GPIO_Init+0x304>)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	3302      	adds	r3, #2
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067b2:	4b3a      	ldr	r3, [pc, #232]	; (800689c <HAL_GPIO_Init+0x324>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4013      	ands	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067d6:	4a31      	ldr	r2, [pc, #196]	; (800689c <HAL_GPIO_Init+0x324>)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067dc:	4b2f      	ldr	r3, [pc, #188]	; (800689c <HAL_GPIO_Init+0x324>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	43db      	mvns	r3, r3
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	4013      	ands	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006800:	4a26      	ldr	r2, [pc, #152]	; (800689c <HAL_GPIO_Init+0x324>)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006806:	4b25      	ldr	r3, [pc, #148]	; (800689c <HAL_GPIO_Init+0x324>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	43db      	mvns	r3, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4013      	ands	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800682a:	4a1c      	ldr	r2, [pc, #112]	; (800689c <HAL_GPIO_Init+0x324>)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <HAL_GPIO_Init+0x324>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006854:	4a11      	ldr	r2, [pc, #68]	; (800689c <HAL_GPIO_Init+0x324>)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b0f      	cmp	r3, #15
 8006864:	f67f ae96 	bls.w	8006594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3724      	adds	r7, #36	; 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40023800 	.word	0x40023800
 800687c:	40013800 	.word	0x40013800
 8006880:	40020000 	.word	0x40020000
 8006884:	40020400 	.word	0x40020400
 8006888:	40020800 	.word	0x40020800
 800688c:	40020c00 	.word	0x40020c00
 8006890:	40021000 	.word	0x40021000
 8006894:	40021400 	.word	0x40021400
 8006898:	40021800 	.word	0x40021800
 800689c:	40013c00 	.word	0x40013c00

080068a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	e0c7      	b.n	8006a4c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068bc:	2201      	movs	r2, #1
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	f040 80b7 	bne.w	8006a46 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80068d8:	4a62      	ldr	r2, [pc, #392]	; (8006a64 <HAL_GPIO_DeInit+0x1c4>)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	3302      	adds	r3, #2
 80068e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	220f      	movs	r2, #15
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	4013      	ands	r3, r2
 80068f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a5a      	ldr	r2, [pc, #360]	; (8006a68 <HAL_GPIO_DeInit+0x1c8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d025      	beq.n	800694e <HAL_GPIO_DeInit+0xae>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a59      	ldr	r2, [pc, #356]	; (8006a6c <HAL_GPIO_DeInit+0x1cc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <HAL_GPIO_DeInit+0xaa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a58      	ldr	r2, [pc, #352]	; (8006a70 <HAL_GPIO_DeInit+0x1d0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d019      	beq.n	8006946 <HAL_GPIO_DeInit+0xa6>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a57      	ldr	r2, [pc, #348]	; (8006a74 <HAL_GPIO_DeInit+0x1d4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d013      	beq.n	8006942 <HAL_GPIO_DeInit+0xa2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a56      	ldr	r2, [pc, #344]	; (8006a78 <HAL_GPIO_DeInit+0x1d8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00d      	beq.n	800693e <HAL_GPIO_DeInit+0x9e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a55      	ldr	r2, [pc, #340]	; (8006a7c <HAL_GPIO_DeInit+0x1dc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <HAL_GPIO_DeInit+0x9a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a54      	ldr	r2, [pc, #336]	; (8006a80 <HAL_GPIO_DeInit+0x1e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_GPIO_DeInit+0x96>
 8006932:	2306      	movs	r3, #6
 8006934:	e00c      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 8006936:	2307      	movs	r3, #7
 8006938:	e00a      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 800693a:	2305      	movs	r3, #5
 800693c:	e008      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 800693e:	2304      	movs	r3, #4
 8006940:	e006      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 8006942:	2303      	movs	r3, #3
 8006944:	e004      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 8006946:	2302      	movs	r3, #2
 8006948:	e002      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <HAL_GPIO_DeInit+0xb0>
 800694e:	2300      	movs	r3, #0
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	f002 0203 	and.w	r2, r2, #3
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	4093      	lsls	r3, r2
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	d132      	bne.n	80069c6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006960:	4b48      	ldr	r3, [pc, #288]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	43db      	mvns	r3, r3
 8006968:	4946      	ldr	r1, [pc, #280]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 800696a:	4013      	ands	r3, r2
 800696c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800696e:	4b45      	ldr	r3, [pc, #276]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	43db      	mvns	r3, r3
 8006976:	4943      	ldr	r1, [pc, #268]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 8006978:	4013      	ands	r3, r2
 800697a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800697c:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	43db      	mvns	r3, r3
 8006984:	493f      	ldr	r1, [pc, #252]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 8006986:	4013      	ands	r3, r2
 8006988:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800698a:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	43db      	mvns	r3, r3
 8006992:	493c      	ldr	r1, [pc, #240]	; (8006a84 <HAL_GPIO_DeInit+0x1e4>)
 8006994:	4013      	ands	r3, r2
 8006996:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	220f      	movs	r2, #15
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80069a8:	4a2e      	ldr	r2, [pc, #184]	; (8006a64 <HAL_GPIO_DeInit+0x1c4>)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	089b      	lsrs	r3, r3, #2
 80069ae:	3302      	adds	r3, #2
 80069b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	43da      	mvns	r2, r3
 80069b8:	482a      	ldr	r0, [pc, #168]	; (8006a64 <HAL_GPIO_DeInit+0x1c4>)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	089b      	lsrs	r3, r3, #2
 80069be:	400a      	ands	r2, r1
 80069c0:	3302      	adds	r3, #2
 80069c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	2103      	movs	r1, #3
 80069d0:	fa01 f303 	lsl.w	r3, r1, r3
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	08da      	lsrs	r2, r3, #3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3208      	adds	r2, #8
 80069e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	220f      	movs	r2, #15
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	08d2      	lsrs	r2, r2, #3
 80069fc:	4019      	ands	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3208      	adds	r2, #8
 8006a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	2103      	movs	r1, #3
 8006a10:	fa01 f303 	lsl.w	r3, r1, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	401a      	ands	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	2101      	movs	r1, #1
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	fa01 f303 	lsl.w	r3, r1, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	401a      	ands	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	2103      	movs	r1, #3
 8006a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	401a      	ands	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b0f      	cmp	r3, #15
 8006a50:	f67f af34 	bls.w	80068bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40013800 	.word	0x40013800
 8006a68:	40020000 	.word	0x40020000
 8006a6c:	40020400 	.word	0x40020400
 8006a70:	40020800 	.word	0x40020800
 8006a74:	40020c00 	.word	0x40020c00
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	40021400 	.word	0x40021400
 8006a80:	40021800 	.word	0x40021800
 8006a84:	40013c00 	.word	0x40013c00

08006a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	887b      	ldrh	r3, [r7, #2]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
 8006aa4:	e001      	b.n	8006aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	807b      	strh	r3, [r7, #2]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ac8:	787b      	ldrb	r3, [r7, #1]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ace:	887a      	ldrh	r2, [r7, #2]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ad4:	e003      	b.n	8006ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ad6:	887b      	ldrh	r3, [r7, #2]
 8006ad8:	041a      	lsls	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	619a      	str	r2, [r3, #24]
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006afc:	887a      	ldrh	r2, [r7, #2]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4013      	ands	r3, r2
 8006b02:	041a      	lsls	r2, r3, #16
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	43d9      	mvns	r1, r3
 8006b08:	887b      	ldrh	r3, [r7, #2]
 8006b0a:	400b      	ands	r3, r1
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	619a      	str	r2, [r3, #24]
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b2a:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b2c:	695a      	ldr	r2, [r3, #20]
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d006      	beq.n	8006b44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b36:	4a05      	ldr	r2, [pc, #20]	; (8006b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 f806 	bl	8006b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40013c00 	.word	0x40013c00

08006b50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e12b      	b.n	8006dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fd f964 	bl	8003e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	; 0x24
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bcc:	f002 f8b0 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 8006bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4a81      	ldr	r2, [pc, #516]	; (8006ddc <HAL_I2C_Init+0x274>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d807      	bhi.n	8006bec <HAL_I2C_Init+0x84>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a80      	ldr	r2, [pc, #512]	; (8006de0 <HAL_I2C_Init+0x278>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	bf94      	ite	ls
 8006be4:	2301      	movls	r3, #1
 8006be6:	2300      	movhi	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e006      	b.n	8006bfa <HAL_I2C_Init+0x92>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a7d      	ldr	r2, [pc, #500]	; (8006de4 <HAL_I2C_Init+0x27c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	bf94      	ite	ls
 8006bf4:	2301      	movls	r3, #1
 8006bf6:	2300      	movhi	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e0e7      	b.n	8006dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a78      	ldr	r2, [pc, #480]	; (8006de8 <HAL_I2C_Init+0x280>)
 8006c06:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0a:	0c9b      	lsrs	r3, r3, #18
 8006c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a6a      	ldr	r2, [pc, #424]	; (8006ddc <HAL_I2C_Init+0x274>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d802      	bhi.n	8006c3c <HAL_I2C_Init+0xd4>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	e009      	b.n	8006c50 <HAL_I2C_Init+0xe8>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
 8006c46:	4a69      	ldr	r2, [pc, #420]	; (8006dec <HAL_I2C_Init+0x284>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	099b      	lsrs	r3, r3, #6
 8006c4e:	3301      	adds	r3, #1
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	495c      	ldr	r1, [pc, #368]	; (8006ddc <HAL_I2C_Init+0x274>)
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	d819      	bhi.n	8006ca4 <HAL_I2C_Init+0x13c>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	1e59      	subs	r1, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c84:	400b      	ands	r3, r1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_I2C_Init+0x138>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	1e59      	subs	r1, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c9e:	e051      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	e04f      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d111      	bne.n	8006cd0 <HAL_I2C_Init+0x168>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1e58      	subs	r0, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	440b      	add	r3, r1
 8006cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e012      	b.n	8006cf6 <HAL_I2C_Init+0x18e>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1e58      	subs	r0, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	0099      	lsls	r1, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf0c      	ite	eq
 8006cf0:	2301      	moveq	r3, #1
 8006cf2:	2300      	movne	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_I2C_Init+0x196>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e022      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10e      	bne.n	8006d24 <HAL_I2C_Init+0x1bc>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1e58      	subs	r0, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6859      	ldr	r1, [r3, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	440b      	add	r3, r1
 8006d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d22:	e00f      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	1e58      	subs	r0, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6859      	ldr	r1, [r3, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	0099      	lsls	r1, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	6809      	ldr	r1, [r1, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69da      	ldr	r2, [r3, #28]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6911      	ldr	r1, [r2, #16]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68d2      	ldr	r2, [r2, #12]
 8006d7e:	4311      	orrs	r1, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	000186a0 	.word	0x000186a0
 8006de0:	001e847f 	.word	0x001e847f
 8006de4:	003d08ff 	.word	0x003d08ff
 8006de8:	431bde83 	.word	0x431bde83
 8006dec:	10624dd3 	.word	0x10624dd3

08006df0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	4608      	mov	r0, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4603      	mov	r3, r0
 8006e00:	817b      	strh	r3, [r7, #10]
 8006e02:	460b      	mov	r3, r1
 8006e04:	813b      	strh	r3, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e0e:	f7fd fb2f 	bl	8004470 <HAL_GetTick>
 8006e12:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	f040 813a 	bne.w	8007096 <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e22:	4b9f      	ldr	r3, [pc, #636]	; (80070a0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	08db      	lsrs	r3, r3, #3
 8006e28:	4a9e      	ldr	r2, [pc, #632]	; (80070a4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0a1a      	lsrs	r2, r3, #8
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009a      	lsls	r2, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d116      	bne.n	8006e76 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f043 0220 	orr.w	r2, r3, #32
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e110      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d0db      	beq.n	8006e3c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2C_Mem_Write_DMA+0xa2>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e102      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d007      	beq.n	8006eb8 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2221      	movs	r2, #33	; 0x21
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2240      	movs	r2, #64	; 0x40
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a6c      	ldr	r2, [pc, #432]	; (80070a8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8006ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006efa:	897a      	ldrh	r2, [r7, #10]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006f00:	893a      	ldrh	r2, [r7, #8]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a9 	beq.w	800706e <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d02a      	beq.n	8006f7a <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	4a60      	ldr	r2, [pc, #384]	; (80070ac <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	4a5f      	ldr	r2, [pc, #380]	; (80070b0 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8006f32:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	2200      	movs	r2, #0
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	2200      	movs	r2, #0
 8006f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	2200      	movs	r2, #0
 8006f4a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	2200      	movs	r2, #0
 8006f52:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3310      	adds	r3, #16
 8006f64:	461a      	mov	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6a:	f7ff f815 	bl	8005f98 <HAL_DMA_Start_IT>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006f72:	7efb      	ldrb	r3, [r7, #27]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d166      	bne.n	8007046 <HAL_I2C_Mem_Write_DMA+0x256>
 8006f78:	e013      	b.n	8006fa2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e07a      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006fa2:	88f8      	ldrh	r0, [r7, #6]
 8006fa4:	893a      	ldrh	r2, [r7, #8]
 8006fa6:	8979      	ldrh	r1, [r7, #10]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	2323      	movs	r3, #35	; 0x23
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f8b0 	bl	8007118 <I2C_RequestMemoryWrite>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d022      	beq.n	8007004 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff f840 	bl	8006048 <HAL_DMA_Abort_IT>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e049      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007030:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007040:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e028      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f043 0210 	orr.w	r2, r3, #16
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e014      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007096:	2302      	movs	r3, #2
  }
}
 8007098:	4618      	mov	r0, r3
 800709a:	3720      	adds	r7, #32
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000000 	.word	0x20000000
 80070a4:	14f8b589 	.word	0x14f8b589
 80070a8:	ffff0000 	.word	0xffff0000
 80070ac:	08007245 	.word	0x08007245
 80070b0:	080073ef 	.word	0x080073ef

080070b4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	4603      	mov	r3, r0
 8007128:	817b      	strh	r3, [r7, #10]
 800712a:	460b      	mov	r3, r1
 800712c:	813b      	strh	r3, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	2200      	movs	r2, #0
 800714a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f98a 	bl	8007468 <I2C_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007168:	d103      	bne.n	8007172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e05f      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007176:	897b      	ldrh	r3, [r7, #10]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	492d      	ldr	r1, [pc, #180]	; (8007240 <I2C_RequestMemoryWrite+0x128>)
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f9c2 	bl	8007516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e04c      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b4:	6a39      	ldr	r1, [r7, #32]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fa2c 	bl	8007614 <I2C_WaitOnTXEFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00d      	beq.n	80071de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d107      	bne.n	80071da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e02b      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071e4:	893b      	ldrh	r3, [r7, #8]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]
 80071ee:	e021      	b.n	8007234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	6a39      	ldr	r1, [r7, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fa06 	bl	8007614 <I2C_WaitOnTXEFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b04      	cmp	r3, #4
 8007214:	d107      	bne.n	8007226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e005      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800722a:	893b      	ldrh	r3, [r7, #8]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	00010002 	.word	0x00010002

08007244 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007260:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007276:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	2200      	movs	r2, #0
 8007286:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	2200      	movs	r2, #0
 8007296:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007298:	7cfb      	ldrb	r3, [r7, #19]
 800729a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800729e:	2b21      	cmp	r3, #33	; 0x21
 80072a0:	d007      	beq.n	80072b2 <I2C_DMAXferCplt+0x6e>
 80072a2:	7cfb      	ldrb	r3, [r7, #19]
 80072a4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80072a8:	2b22      	cmp	r3, #34	; 0x22
 80072aa:	d131      	bne.n	8007310 <I2C_DMAXferCplt+0xcc>
 80072ac:	7cbb      	ldrb	r3, [r7, #18]
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d12e      	bne.n	8007310 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2200      	movs	r2, #0
 80072c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80072c8:	7cfb      	ldrb	r3, [r7, #19]
 80072ca:	2b29      	cmp	r3, #41	; 0x29
 80072cc:	d10a      	bne.n	80072e4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2221      	movs	r2, #33	; 0x21
 80072d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2228      	movs	r2, #40	; 0x28
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f7ff fef3 	bl	80070c8 <HAL_I2C_SlaveTxCpltCallback>
 80072e2:	e00c      	b.n	80072fe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072e4:	7cfb      	ldrb	r3, [r7, #19]
 80072e6:	2b2a      	cmp	r3, #42	; 0x2a
 80072e8:	d109      	bne.n	80072fe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2222      	movs	r2, #34	; 0x22
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2228      	movs	r2, #40	; 0x28
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f7ff feef 	bl	80070dc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800730c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800730e:	e06a      	b.n	80073e6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d064      	beq.n	80073e6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d107      	bne.n	8007336 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007344:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800734c:	d009      	beq.n	8007362 <I2C_DMAXferCplt+0x11e>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b08      	cmp	r3, #8
 8007352:	d006      	beq.n	8007362 <I2C_DMAXferCplt+0x11e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800735a:	d002      	beq.n	8007362 <I2C_DMAXferCplt+0x11e>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b20      	cmp	r3, #32
 8007360:	d107      	bne.n	8007372 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007370:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007380:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007390:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80073a0:	6978      	ldr	r0, [r7, #20]
 80073a2:	f7ff feaf 	bl	8007104 <HAL_I2C_ErrorCallback>
}
 80073a6:	e01e      	b.n	80073e6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d10a      	bne.n	80073d2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80073ca:	6978      	ldr	r0, [r7, #20]
 80073cc:	f7ff fe90 	bl	80070f0 <HAL_I2C_MemRxCpltCallback>
}
 80073d0:	e009      	b.n	80073e6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2212      	movs	r2, #18
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80073e0:	6978      	ldr	r0, [r7, #20]
 80073e2:	f7ff fe67 	bl	80070b4 <HAL_I2C_MasterRxCpltCallback>
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	2200      	movs	r2, #0
 800740a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	2200      	movs	r2, #0
 800741a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fe ffbf 	bl	80063a0 <HAL_DMA_GetError>
 8007422:	4603      	mov	r3, r0
 8007424:	2b02      	cmp	r3, #2
 8007426:	d01b      	beq.n	8007460 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007436:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f043 0210 	orr.w	r2, r3, #16
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fe52 	bl	8007104 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007478:	e025      	b.n	80074c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007480:	d021      	beq.n	80074c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007482:	f7fc fff5 	bl	8004470 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d116      	bne.n	80074c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e023      	b.n	800750e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d10d      	bne.n	80074ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	43da      	mvns	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4013      	ands	r3, r2
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	e00c      	b.n	8007506 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	43da      	mvns	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4013      	ands	r3, r2
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf0c      	ite	eq
 80074fe:	2301      	moveq	r3, #1
 8007500:	2300      	movne	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	429a      	cmp	r2, r3
 800750a:	d0b6      	beq.n	800747a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007524:	e051      	b.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007534:	d123      	bne.n	800757e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007544:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800754e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0204 	orr.w	r2, r3, #4
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e046      	b.n	800760c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d021      	beq.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007586:	f7fc ff73 	bl	8004470 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	429a      	cmp	r2, r3
 8007594:	d302      	bcc.n	800759c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d116      	bne.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e020      	b.n	800760c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d10c      	bne.n	80075ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	43da      	mvns	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4013      	ands	r3, r2
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	e00b      	b.n	8007606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	43da      	mvns	r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4013      	ands	r3, r2
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf14      	ite	ne
 8007600:	2301      	movne	r3, #1
 8007602:	2300      	moveq	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d18d      	bne.n	8007526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007620:	e02d      	b.n	800767e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f837 	bl	8007696 <I2C_IsAcknowledgeFailed>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e02d      	b.n	800768e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d021      	beq.n	800767e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763a:	f7fc ff19 	bl	8004470 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	429a      	cmp	r2, r3
 8007648:	d302      	bcc.n	8007650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d116      	bne.n	800767e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e007      	b.n	800768e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007688:	2b80      	cmp	r3, #128	; 0x80
 800768a:	d1ca      	bne.n	8007622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ac:	d11b      	bne.n	80076e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f043 0204 	orr.w	r2, r3, #4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80076f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f6:	b08f      	sub	sp, #60	; 0x3c
 80076f8:	af0a      	add	r7, sp, #40	; 0x28
 80076fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e116      	b.n	8007934 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f006 fd99 	bl	800e258 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2203      	movs	r2, #3
 800772a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f003 fc48 	bl	800afda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	687e      	ldr	r6, [r7, #4]
 8007752:	466d      	mov	r5, sp
 8007754:	f106 0410 	add.w	r4, r6, #16
 8007758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800775a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800775c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800775e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007764:	e885 0003 	stmia.w	r5, {r0, r1}
 8007768:	1d33      	adds	r3, r6, #4
 800776a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800776c:	6838      	ldr	r0, [r7, #0]
 800776e:	f003 fb1f 	bl	800adb0 <USB_CoreInit>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0d7      	b.n	8007934 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f003 fc36 	bl	800affc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]
 8007794:	e04a      	b.n	800782c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007796:	7bfa      	ldrb	r2, [r7, #15]
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	333d      	adds	r3, #61	; 0x3d
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80077aa:	7bfa      	ldrb	r2, [r7, #15]
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	333c      	adds	r3, #60	; 0x3c
 80077ba:	7bfa      	ldrb	r2, [r7, #15]
 80077bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077be:	7bfa      	ldrb	r2, [r7, #15]
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	b298      	uxth	r0, r3
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	3342      	adds	r3, #66	; 0x42
 80077d2:	4602      	mov	r2, r0
 80077d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80077d6:	7bfa      	ldrb	r2, [r7, #15]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	333f      	adds	r3, #63	; 0x3f
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077ea:	7bfa      	ldrb	r2, [r7, #15]
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	3344      	adds	r3, #68	; 0x44
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3348      	adds	r3, #72	; 0x48
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007812:	7bfa      	ldrb	r2, [r7, #15]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3350      	adds	r3, #80	; 0x50
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	3301      	adds	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3af      	bcc.n	8007796 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
 800783a:	e044      	b.n	80078c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800783c:	7bfa      	ldrb	r2, [r7, #15]
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007864:	7bfa      	ldrb	r2, [r7, #15]
 8007866:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800787e:	7bfa      	ldrb	r2, [r7, #15]
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007894:	7bfa      	ldrb	r2, [r7, #15]
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4613      	mov	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80078aa:	7bfa      	ldrb	r2, [r7, #15]
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	3301      	adds	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
 80078c6:	7bfa      	ldrb	r2, [r7, #15]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d3b5      	bcc.n	800783c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	687e      	ldr	r6, [r7, #4]
 80078d8:	466d      	mov	r5, sp
 80078da:	f106 0410 	add.w	r4, r6, #16
 80078de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80078ee:	1d33      	adds	r3, r6, #4
 80078f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078f2:	6838      	ldr	r0, [r7, #0]
 80078f4:	f003 fbce 	bl	800b094 <USB_DevInit>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e014      	b.n	8007934 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b01      	cmp	r3, #1
 8007920:	d102      	bne.n	8007928 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 f892 	bl	8008a4c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f004 fc3d 	bl	800c1ac <USB_DevDisconnect>

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800793c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_PCD_Start+0x1c>
 8007954:	2302      	movs	r3, #2
 8007956:	e020      	b.n	800799a <HAL_PCD_Start+0x5e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	2b01      	cmp	r3, #1
 8007966:	d109      	bne.n	800797c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800796c:	2b01      	cmp	r3, #1
 800796e:	d005      	beq.n	800797c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f003 fb19 	bl	800afb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f004 fbed 	bl	800c16a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80079a2:	b590      	push	{r4, r7, lr}
 80079a4:	b08d      	sub	sp, #52	; 0x34
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f004 fcab 	bl	800c314 <USB_GetMode>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 83ca 	bne.w	800815a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f004 fc0f 	bl	800c1ee <USB_ReadInterrupts>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 83c0 	beq.w	8008158 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 fc06 	bl	800c1ee <USB_ReadInterrupts>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d107      	bne.n	80079fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695a      	ldr	r2, [r3, #20]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f002 0202 	and.w	r2, r2, #2
 80079fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f004 fbf4 	bl	800c1ee <USB_ReadInterrupts>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b10      	cmp	r3, #16
 8007a0e:	d161      	bne.n	8007ad4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0210 	bic.w	r2, r2, #16
 8007a1e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	0c5b      	lsrs	r3, r3, #17
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d124      	bne.n	8007a96 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007a52:	4013      	ands	r3, r2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d035      	beq.n	8007ac4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6a38      	ldr	r0, [r7, #32]
 8007a6c:	f004 fa2b 	bl	800bec6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a7c:	441a      	add	r2, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	091b      	lsrs	r3, r3, #4
 8007a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a8e:	441a      	add	r2, r3
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	619a      	str	r2, [r3, #24]
 8007a94:	e016      	b.n	8007ac4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	0c5b      	lsrs	r3, r3, #17
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	2b06      	cmp	r3, #6
 8007aa0:	d110      	bne.n	8007ac4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6a38      	ldr	r0, [r7, #32]
 8007aae:	f004 fa0a 	bl	800bec6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	091b      	lsrs	r3, r3, #4
 8007aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007abe:	441a      	add	r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0210 	orr.w	r2, r2, #16
 8007ad2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f004 fb88 	bl	800c1ee <USB_ReadInterrupts>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ae4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ae8:	d16e      	bne.n	8007bc8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f004 fb8e 	bl	800c214 <USB_ReadDevAllOutEpInterrupt>
 8007af8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007afa:	e062      	b.n	8007bc2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d057      	beq.n	8007bb6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f004 fbb3 	bl	800c27c <USB_ReadDevOutEPInterrupt>
 8007b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	461a      	mov	r2, r3
 8007b30:	2301      	movs	r3, #1
 8007b32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fdde 	bl	80086f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00c      	beq.n	8007b60 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	461a      	mov	r2, r3
 8007b54:	2308      	movs	r3, #8
 8007b56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fed8 	bl	8008910 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b76:	461a      	mov	r2, r3
 8007b78:	2310      	movs	r3, #16
 8007b7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d008      	beq.n	8007b98 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	461a      	mov	r2, r3
 8007b94:	2320      	movs	r3, #32
 8007b96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bb4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	3301      	adds	r3, #1
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d199      	bne.n	8007afc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f004 fb0e 	bl	800c1ee <USB_ReadInterrupts>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bdc:	f040 80c0 	bne.w	8007d60 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f004 fb2f 	bl	800c248 <USB_ReadDevAllInEpInterrupt>
 8007bea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007bf0:	e0b2      	b.n	8007d58 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80a7 	beq.w	8007d4c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f004 fb55 	bl	800c2b8 <USB_ReadDevInEPInterrupt>
 8007c0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d057      	beq.n	8007cca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	2201      	movs	r2, #1
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d132      	bne.n	8007cbe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	3348      	adds	r3, #72	; 0x48
 8007c68:	6819      	ldr	r1, [r3, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6e:	4613      	mov	r3, r2
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4403      	add	r3, r0
 8007c78:	3344      	adds	r3, #68	; 0x44
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4419      	add	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c82:	4613      	mov	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4403      	add	r3, r0
 8007c8c:	3348      	adds	r3, #72	; 0x48
 8007c8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d113      	bne.n	8007cbe <HAL_PCD_IRQHandler+0x31c>
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3350      	adds	r3, #80	; 0x50
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2101      	movs	r1, #1
 8007cba:	f004 fb5d 	bl	800c378 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f006 fb76 	bl	800e3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2310      	movs	r3, #16
 8007d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d008      	beq.n	8007d1e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2340      	movs	r3, #64	; 0x40
 8007d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	461a      	mov	r2, r3
 8007d36:	2302      	movs	r3, #2
 8007d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fc48 	bl	80085dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	3301      	adds	r3, #1
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f47f af49 	bne.w	8007bf2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f004 fa42 	bl	800c1ee <USB_ReadInterrupts>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d74:	d122      	bne.n	8007dbc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d108      	bne.n	8007da6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fe78 	bl	8008a94 <HAL_PCDEx_LPM_Callback>
 8007da4:	e002      	b.n	8007dac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f006 fb7c 	bl	800e4a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695a      	ldr	r2, [r3, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f004 fa14 	bl	800c1ee <USB_ReadInterrupts>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd0:	d112      	bne.n	8007df8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d102      	bne.n	8007de8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f006 fb38 	bl	800e458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007df6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f004 f9f6 	bl	800c1ee <USB_ReadInterrupts>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e0c:	d121      	bne.n	8007e52 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007e1c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d111      	bne.n	8007e4c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e42:	2101      	movs	r1, #1
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fe25 	bl	8008a94 <HAL_PCDEx_LPM_Callback>
 8007e4a:	e002      	b.n	8007e52 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f006 fb03 	bl	800e458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f004 f9c9 	bl	800c1ee <USB_ReadInterrupts>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e66:	f040 80c7 	bne.w	8007ff8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2110      	movs	r1, #16
 8007e84:	4618      	mov	r0, r3
 8007e86:	f003 fa63 	bl	800b350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8e:	e056      	b.n	8007f3e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ea2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ec2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ee2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ef6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d3a3      	bcc.n	8007e90 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d016      	beq.n	8007f92 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f74:	f043 030b 	orr.w	r3, r3, #11
 8007f78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f8a:	f043 030b 	orr.w	r3, r3, #11
 8007f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8007f90:	e015      	b.n	8007fbe <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fa4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007fa8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb8:	f043 030b 	orr.w	r3, r3, #11
 8007fbc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fd0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f004 f9c8 	bl	800c378 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695a      	ldr	r2, [r3, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f004 f8f6 	bl	800c1ee <USB_ReadInterrupts>
 8008002:	4603      	mov	r3, r0
 8008004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800c:	d124      	bne.n	8008058 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f004 f98c 	bl	800c330 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f003 f9f4 	bl	800b40a <USB_GetDevSpeed>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681c      	ldr	r4, [r3, #0]
 800802e:	f000 fe73 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008032:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	4620      	mov	r0, r4
 800803e:	f002 ff19 	bl	800ae74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f006 f9df 	bl	800e406 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008056:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f004 f8c6 	bl	800c1ee <USB_ReadInterrupts>
 8008062:	4603      	mov	r3, r0
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b08      	cmp	r3, #8
 800806a:	d10a      	bne.n	8008082 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f006 f9bc 	bl	800e3ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695a      	ldr	r2, [r3, #20]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f002 0208 	and.w	r2, r2, #8
 8008080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f004 f8b1 	bl	800c1ee <USB_ReadInterrupts>
 800808c:	4603      	mov	r3, r0
 800808e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008096:	d10f      	bne.n	80080b8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f006 fa1e 	bl	800e4e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695a      	ldr	r2, [r3, #20]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80080b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f004 f896 	bl	800c1ee <USB_ReadInterrupts>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080cc:	d10f      	bne.n	80080ee <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f006 f9f1 	bl	800e4c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695a      	ldr	r2, [r3, #20]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80080ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f004 f87b 	bl	800c1ee <USB_ReadInterrupts>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008102:	d10a      	bne.n	800811a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f006 f9ff 	bl	800e508 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695a      	ldr	r2, [r3, #20]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f004 f865 	bl	800c1ee <USB_ReadInterrupts>
 8008124:	4603      	mov	r3, r0
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b04      	cmp	r3, #4
 800812c:	d115      	bne.n	800815a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f006 f9ef 	bl	800e524 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6859      	ldr	r1, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	e000      	b.n	800815a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008158:	bf00      	nop
    }
  }
}
 800815a:	3734      	adds	r7, #52	; 0x34
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}

08008160 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_PCD_SetAddress+0x1a>
 8008176:	2302      	movs	r3, #2
 8008178:	e013      	b.n	80081a2 <HAL_PCD_SetAddress+0x42>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f003 ffc3 	bl	800c11e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	4608      	mov	r0, r1
 80081b4:	4611      	mov	r1, r2
 80081b6:	461a      	mov	r2, r3
 80081b8:	4603      	mov	r3, r0
 80081ba:	70fb      	strb	r3, [r7, #3]
 80081bc:	460b      	mov	r3, r1
 80081be:	803b      	strh	r3, [r7, #0]
 80081c0:	4613      	mov	r3, r2
 80081c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da0f      	bge.n	80081f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	f003 020f 	and.w	r2, r3, #15
 80081d6:	4613      	mov	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	3338      	adds	r3, #56	; 0x38
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	3304      	adds	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	705a      	strb	r2, [r3, #1]
 80081ee:	e00f      	b.n	8008210 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	f003 020f 	and.w	r2, r3, #15
 80081f6:	4613      	mov	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	3304      	adds	r3, #4
 8008208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	b2da      	uxtb	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800821c:	883a      	ldrh	r2, [r7, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	78ba      	ldrb	r2, [r7, #2]
 8008226:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800823a:	78bb      	ldrb	r3, [r7, #2]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d102      	bne.n	8008246 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_PCD_EP_Open+0xaa>
 8008250:	2302      	movs	r3, #2
 8008252:	e00e      	b.n	8008272 <HAL_PCD_EP_Open+0xc8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	4618      	mov	r0, r3
 8008264:	f003 f8f6 	bl	800b454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008270:	7afb      	ldrb	r3, [r7, #11]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800828a:	2b00      	cmp	r3, #0
 800828c:	da0f      	bge.n	80082ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	4613      	mov	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	3338      	adds	r3, #56	; 0x38
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4413      	add	r3, r2
 80082a2:	3304      	adds	r3, #4
 80082a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	705a      	strb	r2, [r3, #1]
 80082ac:	e00f      	b.n	80082ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	f003 020f 	and.w	r2, r3, #15
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4413      	add	r3, r2
 80082c4:	3304      	adds	r3, #4
 80082c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_PCD_EP_Close+0x6e>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e00e      	b.n	8008306 <HAL_PCD_EP_Close+0x8c>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f003 f934 	bl	800b564 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b086      	sub	sp, #24
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	460b      	mov	r3, r1
 800831c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	4613      	mov	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4413      	add	r3, r2
 8008334:	3304      	adds	r3, #4
 8008336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2200      	movs	r2, #0
 8008348:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	b2da      	uxtb	r2, r3
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d102      	bne.n	800836a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	461a      	mov	r2, r3
 8008380:	6979      	ldr	r1, [r7, #20]
 8008382:	f003 fc0f 	bl	800bba4 <USB_EP0StartXfer>
 8008386:	e008      	b.n	800839a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	461a      	mov	r2, r3
 8008394:	6979      	ldr	r1, [r7, #20]
 8008396:	f003 f9c1 	bl	800b71c <USB_EPStartXfer>
  }

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	f003 020f 	and.w	r2, r3, #15
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80083c6:	681b      	ldr	r3, [r3, #0]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	460b      	mov	r3, r1
 80083e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	f003 020f 	and.w	r2, r3, #15
 80083ea:	4613      	mov	r3, r2
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3338      	adds	r3, #56	; 0x38
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2200      	movs	r2, #0
 800840c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2201      	movs	r2, #1
 8008412:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	b2da      	uxtb	r2, r3
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d102      	bne.n	800842e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	461a      	mov	r2, r3
 8008444:	6979      	ldr	r1, [r7, #20]
 8008446:	f003 fbad 	bl	800bba4 <USB_EP0StartXfer>
 800844a:	e008      	b.n	800845e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	461a      	mov	r2, r3
 8008458:	6979      	ldr	r1, [r7, #20]
 800845a:	f003 f95f 	bl	800b71c <USB_EPStartXfer>
  }

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	f003 020f 	and.w	r2, r3, #15
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	429a      	cmp	r2, r3
 8008480:	d901      	bls.n	8008486 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e050      	b.n	8008528 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800848a:	2b00      	cmp	r3, #0
 800848c:	da0f      	bge.n	80084ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	3338      	adds	r3, #56	; 0x38
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	3304      	adds	r3, #4
 80084a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	705a      	strb	r2, [r3, #1]
 80084ac:	e00d      	b.n	80084ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	4613      	mov	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	4413      	add	r3, r2
 80084c0:	3304      	adds	r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <HAL_PCD_EP_SetStall+0x82>
 80084e6:	2302      	movs	r3, #2
 80084e8:	e01e      	b.n	8008528 <HAL_PCD_EP_SetStall+0xc0>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f003 fd3c 	bl	800bf76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	b2d9      	uxtb	r1, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008518:	461a      	mov	r2, r3
 800851a:	f003 ff2d 	bl	800c378 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	f003 020f 	and.w	r2, r3, #15
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d901      	bls.n	800854e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e042      	b.n	80085d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800854e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008552:	2b00      	cmp	r3, #0
 8008554:	da0f      	bge.n	8008576 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	f003 020f 	and.w	r2, r3, #15
 800855c:	4613      	mov	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	3338      	adds	r3, #56	; 0x38
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	3304      	adds	r3, #4
 800856c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	705a      	strb	r2, [r3, #1]
 8008574:	e00f      	b.n	8008596 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	3304      	adds	r3, #4
 800858e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_PCD_EP_ClrStall+0x86>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e00e      	b.n	80085d4 <HAL_PCD_EP_ClrStall+0xa4>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f003 fd44 	bl	800c052 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	3338      	adds	r3, #56	; 0x38
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4413      	add	r3, r2
 8008600:	3304      	adds	r3, #4
 8008602:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	429a      	cmp	r2, r3
 800860e:	d901      	bls.n	8008614 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e06c      	b.n	80086ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	695a      	ldr	r2, [r3, #20]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	429a      	cmp	r2, r3
 8008628:	d902      	bls.n	8008630 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	3303      	adds	r3, #3
 8008634:	089b      	lsrs	r3, r3, #2
 8008636:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008638:	e02b      	b.n	8008692 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	429a      	cmp	r2, r3
 800864e:	d902      	bls.n	8008656 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	3303      	adds	r3, #3
 800865a:	089b      	lsrs	r3, r3, #2
 800865c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	68d9      	ldr	r1, [r3, #12]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	b2da      	uxtb	r2, r3
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800866e:	b2db      	uxtb	r3, r3
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	4603      	mov	r3, r0
 8008674:	6978      	ldr	r0, [r7, #20]
 8008676:	f003 fbe8 	bl	800be4a <USB_WritePacket>

    ep->xfer_buff  += len;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	441a      	add	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	441a      	add	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d809      	bhi.n	80086bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d203      	bcs.n	80086bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1be      	bne.n	800863a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	695a      	ldr	r2, [r3, #20]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d811      	bhi.n	80086ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	2201      	movs	r2, #1
 80086d0:	fa02 f303 	lsl.w	r3, r2, r3
 80086d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	6939      	ldr	r1, [r7, #16]
 80086e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e8:	4013      	ands	r3, r2
 80086ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	333c      	adds	r3, #60	; 0x3c
 8008710:	3304      	adds	r3, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b01      	cmp	r3, #1
 800872c:	f040 80a0 	bne.w	8008870 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d015      	beq.n	8008766 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4a72      	ldr	r2, [pc, #456]	; (8008908 <PCD_EP_OutXfrComplete_int+0x210>)
 800873e:	4293      	cmp	r3, r2
 8008740:	f240 80dd 	bls.w	80088fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 80d7 	beq.w	80088fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875c:	461a      	mov	r2, r3
 800875e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008762:	6093      	str	r3, [r2, #8]
 8008764:	e0cb      	b.n	80088fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	461a      	mov	r2, r3
 800877e:	2320      	movs	r3, #32
 8008780:	6093      	str	r3, [r2, #8]
 8008782:	e0bc      	b.n	80088fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	f040 80b7 	bne.w	80088fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a5d      	ldr	r2, [pc, #372]	; (8008908 <PCD_EP_OutXfrComplete_int+0x210>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d90f      	bls.n	80087b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	461a      	mov	r2, r3
 80087b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b4:	6093      	str	r3, [r2, #8]
 80087b6:	e0a2      	b.n	80088fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	4613      	mov	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80087ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	0159      	lsls	r1, r3, #5
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	440b      	add	r3, r1
 80087d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80087de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	4613      	mov	r3, r2
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4403      	add	r3, r0
 80087ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80087f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008806:	6819      	ldr	r1, [r3, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4403      	add	r3, r0
 8008816:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4419      	add	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4403      	add	r3, r0
 800882c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008830:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d114      	bne.n	8008862 <PCD_EP_OutXfrComplete_int+0x16a>
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d108      	bne.n	8008862 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800885a:	461a      	mov	r2, r3
 800885c:	2101      	movs	r1, #1
 800885e:	f003 fd8b 	bl	800c378 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f005 fd89 	bl	800e380 <HAL_PCD_DataOutStageCallback>
 800886e:	e046      	b.n	80088fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4a26      	ldr	r2, [pc, #152]	; (800890c <PCD_EP_OutXfrComplete_int+0x214>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d124      	bne.n	80088c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	461a      	mov	r2, r3
 8008890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008894:	6093      	str	r3, [r2, #8]
 8008896:	e032      	b.n	80088fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d008      	beq.n	80088b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	461a      	mov	r2, r3
 80088b0:	2320      	movs	r3, #32
 80088b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f005 fd60 	bl	800e380 <HAL_PCD_DataOutStageCallback>
 80088c0:	e01d      	b.n	80088fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d114      	bne.n	80088f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	1a9b      	subs	r3, r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d108      	bne.n	80088f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088ea:	461a      	mov	r2, r3
 80088ec:	2100      	movs	r1, #0
 80088ee:	f003 fd43 	bl	800c378 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f005 fd41 	bl	800e380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	4f54300a 	.word	0x4f54300a
 800890c:	4f54310a 	.word	0x4f54310a

08008910 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	333c      	adds	r3, #60	; 0x3c
 8008928:	3304      	adds	r3, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4a15      	ldr	r2, [pc, #84]	; (8008998 <PCD_EP_OutSetupPacket_int+0x88>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d90e      	bls.n	8008964 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800894c:	2b00      	cmp	r3, #0
 800894e:	d009      	beq.n	8008964 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	461a      	mov	r2, r3
 800895e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008962:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f005 fcf9 	bl	800e35c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4a0a      	ldr	r2, [pc, #40]	; (8008998 <PCD_EP_OutSetupPacket_int+0x88>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d90c      	bls.n	800898c <PCD_EP_OutSetupPacket_int+0x7c>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d108      	bne.n	800898c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008984:	461a      	mov	r2, r3
 8008986:	2101      	movs	r1, #1
 8008988:	f003 fcf6 	bl	800c378 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	4f54300a 	.word	0x4f54300a

0800899c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
 80089a8:	4613      	mov	r3, r2
 80089aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d107      	bne.n	80089ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089ba:	883b      	ldrh	r3, [r7, #0]
 80089bc:	0419      	lsls	r1, r3, #16
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28
 80089c8:	e028      	b.n	8008a1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	0c1b      	lsrs	r3, r3, #16
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
 80089dc:	e00d      	b.n	80089fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	3340      	adds	r3, #64	; 0x40
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	0c1b      	lsrs	r3, r3, #16
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	3301      	adds	r3, #1
 80089f8:	73fb      	strb	r3, [r7, #15]
 80089fa:	7bfa      	ldrb	r2, [r7, #15]
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d3ec      	bcc.n	80089de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a04:	883b      	ldrh	r3, [r7, #0]
 8008a06:	0418      	lsls	r0, r3, #16
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6819      	ldr	r1, [r3, #0]
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4302      	orrs	r2, r0
 8008a14:	3340      	adds	r3, #64	; 0x40
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	887a      	ldrh	r2, [r7, #2]
 8008a3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	f043 0303 	orr.w	r3, r3, #3
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	603b      	str	r3, [r7, #0]
 8008aba:	4b20      	ldr	r3, [pc, #128]	; (8008b3c <HAL_PWREx_EnableOverDrive+0x90>)
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <HAL_PWREx_EnableOverDrive+0x90>)
 8008ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <HAL_PWREx_EnableOverDrive+0x90>)
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008ad2:	4b1b      	ldr	r3, [pc, #108]	; (8008b40 <HAL_PWREx_EnableOverDrive+0x94>)
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ad8:	f7fb fcca 	bl	8004470 <HAL_GetTick>
 8008adc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ade:	e009      	b.n	8008af4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008ae0:	f7fb fcc6 	bl	8004470 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aee:	d901      	bls.n	8008af4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e01f      	b.n	8008b34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008af4:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b00:	d1ee      	bne.n	8008ae0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008b02:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b04:	2201      	movs	r2, #1
 8008b06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b08:	f7fb fcb2 	bl	8004470 <HAL_GetTick>
 8008b0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b0e:	e009      	b.n	8008b24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b10:	f7fb fcae 	bl	8004470 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b1e:	d901      	bls.n	8008b24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e007      	b.n	8008b34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b30:	d1ee      	bne.n	8008b10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	420e0040 	.word	0x420e0040
 8008b44:	40007000 	.word	0x40007000
 8008b48:	420e0044 	.word	0x420e0044

08008b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e0cc      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b60:	4b68      	ldr	r3, [pc, #416]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d90c      	bls.n	8008b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b6e:	4b65      	ldr	r3, [pc, #404]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b76:	4b63      	ldr	r3, [pc, #396]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d001      	beq.n	8008b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0b8      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d020      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ba0:	4b59      	ldr	r3, [pc, #356]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	4a58      	ldr	r2, [pc, #352]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bb8:	4b53      	ldr	r3, [pc, #332]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4a52      	ldr	r2, [pc, #328]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bc4:	4b50      	ldr	r3, [pc, #320]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	494d      	ldr	r1, [pc, #308]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d044      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bea:	4b47      	ldr	r3, [pc, #284]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d119      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e07f      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d003      	beq.n	8008c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d107      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c0a:	4b3f      	ldr	r3, [pc, #252]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e06f      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c1a:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e067      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c2a:	4b37      	ldr	r3, [pc, #220]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f023 0203 	bic.w	r2, r3, #3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4934      	ldr	r1, [pc, #208]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c3c:	f7fb fc18 	bl	8004470 <HAL_GetTick>
 8008c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c42:	e00a      	b.n	8008c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c44:	f7fb fc14 	bl	8004470 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e04f      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c5a:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 020c 	and.w	r2, r3, #12
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d1eb      	bne.n	8008c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c6c:	4b25      	ldr	r3, [pc, #148]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d20c      	bcs.n	8008c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c7a:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c82:	4b20      	ldr	r3, [pc, #128]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d001      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e032      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4916      	ldr	r1, [pc, #88]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	490e      	ldr	r1, [pc, #56]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cd2:	f000 fb6b 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	091b      	lsrs	r3, r3, #4
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	490a      	ldr	r1, [pc, #40]	; (8008d0c <HAL_RCC_ClockConfig+0x1c0>)
 8008ce4:	5ccb      	ldrb	r3, [r1, r3]
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <HAL_RCC_ClockConfig+0x1c4>)
 8008cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <HAL_RCC_ClockConfig+0x1c8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fb fb78 	bl	80043e8 <HAL_InitTick>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40023c00 	.word	0x40023c00
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	0800eb50 	.word	0x0800eb50
 8008d10:	20000000 	.word	0x20000000
 8008d14:	20000004 	.word	0x20000004

08008d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000000 	.word	0x20000000

08008d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d34:	f7ff fff0 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	0a9b      	lsrs	r3, r3, #10
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	4903      	ldr	r1, [pc, #12]	; (8008d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d46:	5ccb      	ldrb	r3, [r1, r3]
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40023800 	.word	0x40023800
 8008d54:	0800eb60 	.word	0x0800eb60

08008d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08c      	sub	sp, #48	; 0x30
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008d90:	4b6f      	ldr	r3, [pc, #444]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d96:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	496c      	ldr	r1, [pc, #432]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008dae:	2301      	movs	r3, #1
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008dbe:	4b64      	ldr	r3, [pc, #400]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dcc:	4960      	ldr	r1, [pc, #384]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d017      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dec:	4b58      	ldr	r3, [pc, #352]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	4955      	ldr	r1, [pc, #340]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e0a:	d101      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e28:	4b49      	ldr	r3, [pc, #292]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	4946      	ldr	r1, [pc, #280]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e46:	d101      	bne.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008e54:	2301      	movs	r3, #1
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 808a 	beq.w	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
 8008e6a:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	4a38      	ldr	r2, [pc, #224]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e74:	6413      	str	r3, [r2, #64]	; 0x40
 8008e76:	4b36      	ldr	r3, [pc, #216]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	60bb      	str	r3, [r7, #8]
 8008e80:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e82:	4b34      	ldr	r3, [pc, #208]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a33      	ldr	r2, [pc, #204]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e8e:	f7fb faef 	bl	8004470 <HAL_GetTick>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e94:	e008      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e96:	f7fb faeb 	bl	8004470 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e278      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ea8:	4b2a      	ldr	r3, [pc, #168]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d0f0      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008eb4:	4b26      	ldr	r3, [pc, #152]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ebc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02f      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ecc:	6a3a      	ldr	r2, [r7, #32]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d028      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ed2:	4b1f      	ldr	r3, [pc, #124]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eda:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008edc:	4b1e      	ldr	r3, [pc, #120]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ee2:	4b1d      	ldr	r3, [pc, #116]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ee8:	4a19      	ldr	r2, [pc, #100]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008eee:	4b18      	ldr	r3, [pc, #96]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d114      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008efa:	f7fb fab9 	bl	8004470 <HAL_GetTick>
 8008efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f00:	e00a      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f02:	f7fb fab5 	bl	8004470 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d901      	bls.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e240      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f18:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0ee      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f30:	d114      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f46:	4902      	ldr	r1, [pc, #8]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	608b      	str	r3, [r1, #8]
 8008f4c:	e00c      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008f4e:	bf00      	nop
 8008f50:	40023800 	.word	0x40023800
 8008f54:	40007000 	.word	0x40007000
 8008f58:	42470e40 	.word	0x42470e40
 8008f5c:	4b4a      	ldr	r3, [pc, #296]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	4a49      	ldr	r2, [pc, #292]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f66:	6093      	str	r3, [r2, #8]
 8008f68:	4b47      	ldr	r3, [pc, #284]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f74:	4944      	ldr	r1, [pc, #272]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0310 	and.w	r3, r3, #16
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d004      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008f8c:	4b3f      	ldr	r3, [pc, #252]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008f8e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008f9c:	4b3a      	ldr	r3, [pc, #232]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008faa:	4937      	ldr	r1, [pc, #220]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fbe:	4b32      	ldr	r3, [pc, #200]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fcc:	492e      	ldr	r1, [pc, #184]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d011      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fe0:	4b29      	ldr	r3, [pc, #164]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fe6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	4926      	ldr	r1, [pc, #152]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffe:	d101      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009000:	2301      	movs	r3, #1
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00a      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009010:	4b1d      	ldr	r3, [pc, #116]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009016:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	491a      	ldr	r1, [pc, #104]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009020:	4313      	orrs	r3, r2
 8009022:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009038:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009040:	4911      	ldr	r1, [pc, #68]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009042:	4313      	orrs	r3, r2
 8009044:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009050:	d101      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8009052:	2301      	movs	r3, #1
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d005      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009064:	f040 80ff 	bne.w	8009266 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009068:	4b09      	ldr	r3, [pc, #36]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800906e:	f7fb f9ff 	bl	8004470 <HAL_GetTick>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009074:	e00e      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009076:	f7fb f9fb 	bl	8004470 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d907      	bls.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e188      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009088:	40023800 	.word	0x40023800
 800908c:	424711e0 	.word	0x424711e0
 8009090:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009094:	4b7e      	ldr	r3, [pc, #504]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1ea      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d009      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d028      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d124      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80090c8:	4b71      	ldr	r3, [pc, #452]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80090ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ce:	0c1b      	lsrs	r3, r3, #16
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	3301      	adds	r3, #1
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090da:	4b6d      	ldr	r3, [pc, #436]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80090dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e0:	0e1b      	lsrs	r3, r3, #24
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	019b      	lsls	r3, r3, #6
 80090f2:	431a      	orrs	r2, r3
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	085b      	lsrs	r3, r3, #1
 80090f8:	3b01      	subs	r3, #1
 80090fa:	041b      	lsls	r3, r3, #16
 80090fc:	431a      	orrs	r2, r3
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	061b      	lsls	r3, r3, #24
 8009102:	431a      	orrs	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	071b      	lsls	r3, r3, #28
 800910a:	4961      	ldr	r1, [pc, #388]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800910c:	4313      	orrs	r3, r2
 800910e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009126:	d00a      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009130:	2b00      	cmp	r3, #0
 8009132:	d035      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800913c:	d130      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800913e:	4b54      	ldr	r3, [pc, #336]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	3301      	adds	r3, #1
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009150:	4b4f      	ldr	r3, [pc, #316]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009156:	0f1b      	lsrs	r3, r3, #28
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	019b      	lsls	r3, r3, #6
 8009168:	431a      	orrs	r2, r3
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	3b01      	subs	r3, #1
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	431a      	orrs	r2, r3
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	071b      	lsls	r3, r3, #28
 8009180:	4943      	ldr	r1, [pc, #268]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009182:	4313      	orrs	r3, r2
 8009184:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009188:	4b41      	ldr	r3, [pc, #260]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800918a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918e:	f023 021f 	bic.w	r2, r3, #31
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009196:	3b01      	subs	r3, #1
 8009198:	493d      	ldr	r1, [pc, #244]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800919a:	4313      	orrs	r3, r2
 800919c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d029      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b4:	d124      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80091b6:	4b36      	ldr	r3, [pc, #216]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091bc:	0c1b      	lsrs	r3, r3, #16
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	3301      	adds	r3, #1
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091c8:	4b31      	ldr	r3, [pc, #196]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ce:	0f1b      	lsrs	r3, r3, #28
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	019b      	lsls	r3, r3, #6
 80091e0:	431a      	orrs	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	085b      	lsrs	r3, r3, #1
 80091e8:	3b01      	subs	r3, #1
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	431a      	orrs	r2, r3
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	061b      	lsls	r3, r3, #24
 80091f2:	431a      	orrs	r2, r3
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	071b      	lsls	r3, r3, #28
 80091f8:	4925      	ldr	r1, [pc, #148]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009208:	2b00      	cmp	r3, #0
 800920a:	d016      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	019b      	lsls	r3, r3, #6
 8009216:	431a      	orrs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	3b01      	subs	r3, #1
 8009220:	041b      	lsls	r3, r3, #16
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	061b      	lsls	r3, r3, #24
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	071b      	lsls	r3, r3, #28
 8009232:	4917      	ldr	r1, [pc, #92]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800923a:	4b16      	ldr	r3, [pc, #88]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800923c:	2201      	movs	r2, #1
 800923e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009240:	f7fb f916 	bl	8004470 <HAL_GetTick>
 8009244:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009246:	e008      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009248:	f7fb f912 	bl	8004470 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	2b02      	cmp	r3, #2
 8009254:	d901      	bls.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e09f      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800925a:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0f0      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	2b01      	cmp	r3, #1
 800926a:	f040 8095 	bne.w	8009398 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800926e:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009274:	f7fb f8fc 	bl	8004470 <HAL_GetTick>
 8009278:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800927a:	e00f      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800927c:	f7fb f8f8 	bl	8004470 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d908      	bls.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e085      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800928e:	bf00      	nop
 8009290:	40023800 	.word	0x40023800
 8009294:	42470068 	.word	0x42470068
 8009298:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800929c:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a8:	d0e8      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x566>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d02b      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d127      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80092d2:	4b34      	ldr	r3, [pc, #208]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	3301      	adds	r3, #1
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	019b      	lsls	r3, r3, #6
 80092ee:	431a      	orrs	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	3b01      	subs	r3, #1
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	431a      	orrs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	061b      	lsls	r3, r3, #24
 8009300:	4928      	ldr	r1, [pc, #160]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009308:	4b26      	ldr	r3, [pc, #152]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800930a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009316:	3b01      	subs	r3, #1
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	4922      	ldr	r1, [pc, #136]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800931c:	4313      	orrs	r3, r2
 800931e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932a:	2b00      	cmp	r3, #0
 800932c:	d01d      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009336:	d118      	bne.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009338:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933e:	0e1b      	lsrs	r3, r3, #24
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	699a      	ldr	r2, [r3, #24]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	019b      	lsls	r3, r3, #6
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	085b      	lsrs	r3, r3, #1
 8009358:	3b01      	subs	r3, #1
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	431a      	orrs	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	061b      	lsls	r3, r3, #24
 8009362:	4910      	ldr	r1, [pc, #64]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009364:	4313      	orrs	r3, r2
 8009366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800936a:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800936c:	2201      	movs	r2, #1
 800936e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009370:	f7fb f87e 	bl	8004470 <HAL_GetTick>
 8009374:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009376:	e008      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009378:	f7fb f87a 	bl	8004470 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d901      	bls.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e007      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009396:	d1ef      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3730      	adds	r7, #48	; 0x30
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	40023800 	.word	0x40023800
 80093a8:	42470070 	.word	0x42470070

080093ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093c8:	4bce      	ldr	r3, [pc, #824]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 030c 	and.w	r3, r3, #12
 80093d0:	2b0c      	cmp	r3, #12
 80093d2:	f200 818d 	bhi.w	80096f0 <HAL_RCC_GetSysClockFreq+0x344>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <HAL_RCC_GetSysClockFreq+0x30>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	08009411 	.word	0x08009411
 80093e0:	080096f1 	.word	0x080096f1
 80093e4:	080096f1 	.word	0x080096f1
 80093e8:	080096f1 	.word	0x080096f1
 80093ec:	08009417 	.word	0x08009417
 80093f0:	080096f1 	.word	0x080096f1
 80093f4:	080096f1 	.word	0x080096f1
 80093f8:	080096f1 	.word	0x080096f1
 80093fc:	0800941d 	.word	0x0800941d
 8009400:	080096f1 	.word	0x080096f1
 8009404:	080096f1 	.word	0x080096f1
 8009408:	080096f1 	.word	0x080096f1
 800940c:	08009591 	.word	0x08009591
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009410:	4bbd      	ldr	r3, [pc, #756]	; (8009708 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009412:	61bb      	str	r3, [r7, #24]
       break;
 8009414:	e16f      	b.n	80096f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009416:	4bbd      	ldr	r3, [pc, #756]	; (800970c <HAL_RCC_GetSysClockFreq+0x360>)
 8009418:	61bb      	str	r3, [r7, #24]
      break;
 800941a:	e16c      	b.n	80096f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800941c:	4bb9      	ldr	r3, [pc, #740]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009424:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009426:	4bb7      	ldr	r3, [pc, #732]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d053      	beq.n	80094da <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009432:	4bb4      	ldr	r3, [pc, #720]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	099b      	lsrs	r3, r3, #6
 8009438:	461a      	mov	r2, r3
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	ea02 0400 	and.w	r4, r2, r0
 800944a:	603c      	str	r4, [r7, #0]
 800944c:	400b      	ands	r3, r1
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	014b      	lsls	r3, r1, #5
 8009462:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009466:	0142      	lsls	r2, r0, #5
 8009468:	4610      	mov	r0, r2
 800946a:	4619      	mov	r1, r3
 800946c:	4623      	mov	r3, r4
 800946e:	1ac0      	subs	r0, r0, r3
 8009470:	462b      	mov	r3, r5
 8009472:	eb61 0103 	sbc.w	r1, r1, r3
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	f04f 0300 	mov.w	r3, #0
 800947e:	018b      	lsls	r3, r1, #6
 8009480:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009484:	0182      	lsls	r2, r0, #6
 8009486:	1a12      	subs	r2, r2, r0
 8009488:	eb63 0301 	sbc.w	r3, r3, r1
 800948c:	f04f 0000 	mov.w	r0, #0
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	00d9      	lsls	r1, r3, #3
 8009496:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800949a:	00d0      	lsls	r0, r2, #3
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4621      	mov	r1, r4
 80094a2:	1852      	adds	r2, r2, r1
 80094a4:	4629      	mov	r1, r5
 80094a6:	eb43 0101 	adc.w	r1, r3, r1
 80094aa:	460b      	mov	r3, r1
 80094ac:	f04f 0000 	mov.w	r0, #0
 80094b0:	f04f 0100 	mov.w	r1, #0
 80094b4:	0259      	lsls	r1, r3, #9
 80094b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80094ba:	0250      	lsls	r0, r2, #9
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4610      	mov	r0, r2
 80094c2:	4619      	mov	r1, r3
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	f7f6 fe9a 	bl	8000204 <__aeabi_uldivmod>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4613      	mov	r3, r2
 80094d6:	61fb      	str	r3, [r7, #28]
 80094d8:	e04c      	b.n	8009574 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094da:	4b8a      	ldr	r3, [pc, #552]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	099b      	lsrs	r3, r3, #6
 80094e0:	461a      	mov	r2, r3
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80094ea:	f04f 0100 	mov.w	r1, #0
 80094ee:	ea02 0a00 	and.w	sl, r2, r0
 80094f2:	ea03 0b01 	and.w	fp, r3, r1
 80094f6:	4650      	mov	r0, sl
 80094f8:	4659      	mov	r1, fp
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	014b      	lsls	r3, r1, #5
 8009504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009508:	0142      	lsls	r2, r0, #5
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	ebb0 000a 	subs.w	r0, r0, sl
 8009512:	eb61 010b 	sbc.w	r1, r1, fp
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	f04f 0300 	mov.w	r3, #0
 800951e:	018b      	lsls	r3, r1, #6
 8009520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009524:	0182      	lsls	r2, r0, #6
 8009526:	1a12      	subs	r2, r2, r0
 8009528:	eb63 0301 	sbc.w	r3, r3, r1
 800952c:	f04f 0000 	mov.w	r0, #0
 8009530:	f04f 0100 	mov.w	r1, #0
 8009534:	00d9      	lsls	r1, r3, #3
 8009536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800953a:	00d0      	lsls	r0, r2, #3
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	eb12 020a 	adds.w	r2, r2, sl
 8009544:	eb43 030b 	adc.w	r3, r3, fp
 8009548:	f04f 0000 	mov.w	r0, #0
 800954c:	f04f 0100 	mov.w	r1, #0
 8009550:	0299      	lsls	r1, r3, #10
 8009552:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009556:	0290      	lsls	r0, r2, #10
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4610      	mov	r0, r2
 800955e:	4619      	mov	r1, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	461a      	mov	r2, r3
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	f7f6 fe4c 	bl	8000204 <__aeabi_uldivmod>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4613      	mov	r3, r2
 8009572:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009574:	4b63      	ldr	r3, [pc, #396]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	0c1b      	lsrs	r3, r3, #16
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	3301      	adds	r3, #1
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	fbb2 f3f3 	udiv	r3, r2, r3
 800958c:	61bb      	str	r3, [r7, #24]
      break;
 800958e:	e0b2      	b.n	80096f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009590:	4b5c      	ldr	r3, [pc, #368]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009598:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800959a:	4b5a      	ldr	r3, [pc, #360]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d04d      	beq.n	8009642 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095a6:	4b57      	ldr	r3, [pc, #348]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	099b      	lsrs	r3, r3, #6
 80095ac:	461a      	mov	r2, r3
 80095ae:	f04f 0300 	mov.w	r3, #0
 80095b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80095b6:	f04f 0100 	mov.w	r1, #0
 80095ba:	ea02 0800 	and.w	r8, r2, r0
 80095be:	ea03 0901 	and.w	r9, r3, r1
 80095c2:	4640      	mov	r0, r8
 80095c4:	4649      	mov	r1, r9
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	f04f 0300 	mov.w	r3, #0
 80095ce:	014b      	lsls	r3, r1, #5
 80095d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80095d4:	0142      	lsls	r2, r0, #5
 80095d6:	4610      	mov	r0, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	ebb0 0008 	subs.w	r0, r0, r8
 80095de:	eb61 0109 	sbc.w	r1, r1, r9
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	018b      	lsls	r3, r1, #6
 80095ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80095f0:	0182      	lsls	r2, r0, #6
 80095f2:	1a12      	subs	r2, r2, r0
 80095f4:	eb63 0301 	sbc.w	r3, r3, r1
 80095f8:	f04f 0000 	mov.w	r0, #0
 80095fc:	f04f 0100 	mov.w	r1, #0
 8009600:	00d9      	lsls	r1, r3, #3
 8009602:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009606:	00d0      	lsls	r0, r2, #3
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	eb12 0208 	adds.w	r2, r2, r8
 8009610:	eb43 0309 	adc.w	r3, r3, r9
 8009614:	f04f 0000 	mov.w	r0, #0
 8009618:	f04f 0100 	mov.w	r1, #0
 800961c:	0259      	lsls	r1, r3, #9
 800961e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009622:	0250      	lsls	r0, r2, #9
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4610      	mov	r0, r2
 800962a:	4619      	mov	r1, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	461a      	mov	r2, r3
 8009630:	f04f 0300 	mov.w	r3, #0
 8009634:	f7f6 fde6 	bl	8000204 <__aeabi_uldivmod>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4613      	mov	r3, r2
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	e04a      	b.n	80096d8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009642:	4b30      	ldr	r3, [pc, #192]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	099b      	lsrs	r3, r3, #6
 8009648:	461a      	mov	r2, r3
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009652:	f04f 0100 	mov.w	r1, #0
 8009656:	ea02 0400 	and.w	r4, r2, r0
 800965a:	ea03 0501 	and.w	r5, r3, r1
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	f04f 0300 	mov.w	r3, #0
 800966a:	014b      	lsls	r3, r1, #5
 800966c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009670:	0142      	lsls	r2, r0, #5
 8009672:	4610      	mov	r0, r2
 8009674:	4619      	mov	r1, r3
 8009676:	1b00      	subs	r0, r0, r4
 8009678:	eb61 0105 	sbc.w	r1, r1, r5
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	018b      	lsls	r3, r1, #6
 8009686:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800968a:	0182      	lsls	r2, r0, #6
 800968c:	1a12      	subs	r2, r2, r0
 800968e:	eb63 0301 	sbc.w	r3, r3, r1
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f04f 0100 	mov.w	r1, #0
 800969a:	00d9      	lsls	r1, r3, #3
 800969c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80096a0:	00d0      	lsls	r0, r2, #3
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	1912      	adds	r2, r2, r4
 80096a8:	eb45 0303 	adc.w	r3, r5, r3
 80096ac:	f04f 0000 	mov.w	r0, #0
 80096b0:	f04f 0100 	mov.w	r1, #0
 80096b4:	0299      	lsls	r1, r3, #10
 80096b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80096ba:	0290      	lsls	r0, r2, #10
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4610      	mov	r0, r2
 80096c2:	4619      	mov	r1, r3
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	461a      	mov	r2, r3
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	f7f6 fd9a 	bl	8000204 <__aeabi_uldivmod>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4613      	mov	r3, r2
 80096d6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <HAL_RCC_GetSysClockFreq+0x358>)
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	0f1b      	lsrs	r3, r3, #28
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ec:	61bb      	str	r3, [r7, #24]
      break;
 80096ee:	e002      	b.n	80096f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <HAL_RCC_GetSysClockFreq+0x35c>)
 80096f2:	61bb      	str	r3, [r7, #24]
      break;
 80096f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096f6:	69bb      	ldr	r3, [r7, #24]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3720      	adds	r7, #32
 80096fc:	46bd      	mov	sp, r7
 80096fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009702:	bf00      	nop
 8009704:	40023800 	.word	0x40023800
 8009708:	00f42400 	.word	0x00f42400
 800970c:	007a1200 	.word	0x007a1200

08009710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e28d      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8083 	beq.w	8009836 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009730:	4b94      	ldr	r3, [pc, #592]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 030c 	and.w	r3, r3, #12
 8009738:	2b04      	cmp	r3, #4
 800973a:	d019      	beq.n	8009770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800973c:	4b91      	ldr	r3, [pc, #580]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009744:	2b08      	cmp	r3, #8
 8009746:	d106      	bne.n	8009756 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009748:	4b8e      	ldr	r3, [pc, #568]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009754:	d00c      	beq.n	8009770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009756:	4b8b      	ldr	r3, [pc, #556]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800975e:	2b0c      	cmp	r3, #12
 8009760:	d112      	bne.n	8009788 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009762:	4b88      	ldr	r3, [pc, #544]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800976a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800976e:	d10b      	bne.n	8009788 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009770:	4b84      	ldr	r3, [pc, #528]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d05b      	beq.n	8009834 <HAL_RCC_OscConfig+0x124>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d157      	bne.n	8009834 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e25a      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009790:	d106      	bne.n	80097a0 <HAL_RCC_OscConfig+0x90>
 8009792:	4b7c      	ldr	r3, [pc, #496]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a7b      	ldr	r2, [pc, #492]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	e01d      	b.n	80097dc <HAL_RCC_OscConfig+0xcc>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097a8:	d10c      	bne.n	80097c4 <HAL_RCC_OscConfig+0xb4>
 80097aa:	4b76      	ldr	r3, [pc, #472]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a75      	ldr	r2, [pc, #468]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	4b73      	ldr	r3, [pc, #460]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a72      	ldr	r2, [pc, #456]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	e00b      	b.n	80097dc <HAL_RCC_OscConfig+0xcc>
 80097c4:	4b6f      	ldr	r3, [pc, #444]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a6e      	ldr	r2, [pc, #440]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	4b6c      	ldr	r3, [pc, #432]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a6b      	ldr	r2, [pc, #428]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80097d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d013      	beq.n	800980c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e4:	f7fa fe44 	bl	8004470 <HAL_GetTick>
 80097e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ea:	e008      	b.n	80097fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097ec:	f7fa fe40 	bl	8004470 <HAL_GetTick>
 80097f0:	4602      	mov	r2, r0
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	2b64      	cmp	r3, #100	; 0x64
 80097f8:	d901      	bls.n	80097fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e21f      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097fe:	4b61      	ldr	r3, [pc, #388]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0f0      	beq.n	80097ec <HAL_RCC_OscConfig+0xdc>
 800980a:	e014      	b.n	8009836 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800980c:	f7fa fe30 	bl	8004470 <HAL_GetTick>
 8009810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009812:	e008      	b.n	8009826 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009814:	f7fa fe2c 	bl	8004470 <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	2b64      	cmp	r3, #100	; 0x64
 8009820:	d901      	bls.n	8009826 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e20b      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009826:	4b57      	ldr	r3, [pc, #348]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1f0      	bne.n	8009814 <HAL_RCC_OscConfig+0x104>
 8009832:	e000      	b.n	8009836 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d06f      	beq.n	8009922 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009842:	4b50      	ldr	r3, [pc, #320]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 030c 	and.w	r3, r3, #12
 800984a:	2b00      	cmp	r3, #0
 800984c:	d017      	beq.n	800987e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800984e:	4b4d      	ldr	r3, [pc, #308]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009856:	2b08      	cmp	r3, #8
 8009858:	d105      	bne.n	8009866 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800985a:	4b4a      	ldr	r3, [pc, #296]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009866:	4b47      	ldr	r3, [pc, #284]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800986e:	2b0c      	cmp	r3, #12
 8009870:	d11c      	bne.n	80098ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009872:	4b44      	ldr	r3, [pc, #272]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d116      	bne.n	80098ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800987e:	4b41      	ldr	r3, [pc, #260]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <HAL_RCC_OscConfig+0x186>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d001      	beq.n	8009896 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e1d3      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009896:	4b3b      	ldr	r3, [pc, #236]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	4937      	ldr	r1, [pc, #220]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098aa:	e03a      	b.n	8009922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d020      	beq.n	80098f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098b4:	4b34      	ldr	r3, [pc, #208]	; (8009988 <HAL_RCC_OscConfig+0x278>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ba:	f7fa fdd9 	bl	8004470 <HAL_GetTick>
 80098be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098c0:	e008      	b.n	80098d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098c2:	f7fa fdd5 	bl	8004470 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d901      	bls.n	80098d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e1b4      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098d4:	4b2b      	ldr	r3, [pc, #172]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0f0      	beq.n	80098c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e0:	4b28      	ldr	r3, [pc, #160]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	4925      	ldr	r1, [pc, #148]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	600b      	str	r3, [r1, #0]
 80098f4:	e015      	b.n	8009922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098f6:	4b24      	ldr	r3, [pc, #144]	; (8009988 <HAL_RCC_OscConfig+0x278>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098fc:	f7fa fdb8 	bl	8004470 <HAL_GetTick>
 8009900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009902:	e008      	b.n	8009916 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009904:	f7fa fdb4 	bl	8004470 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e193      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009916:	4b1b      	ldr	r3, [pc, #108]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f0      	bne.n	8009904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	d036      	beq.n	800999c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d016      	beq.n	8009964 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009936:	4b15      	ldr	r3, [pc, #84]	; (800998c <HAL_RCC_OscConfig+0x27c>)
 8009938:	2201      	movs	r2, #1
 800993a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800993c:	f7fa fd98 	bl	8004470 <HAL_GetTick>
 8009940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009942:	e008      	b.n	8009956 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009944:	f7fa fd94 	bl	8004470 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d901      	bls.n	8009956 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e173      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <HAL_RCC_OscConfig+0x274>)
 8009958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0f0      	beq.n	8009944 <HAL_RCC_OscConfig+0x234>
 8009962:	e01b      	b.n	800999c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009964:	4b09      	ldr	r3, [pc, #36]	; (800998c <HAL_RCC_OscConfig+0x27c>)
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800996a:	f7fa fd81 	bl	8004470 <HAL_GetTick>
 800996e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009970:	e00e      	b.n	8009990 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009972:	f7fa fd7d 	bl	8004470 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b02      	cmp	r3, #2
 800997e:	d907      	bls.n	8009990 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e15c      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
 8009984:	40023800 	.word	0x40023800
 8009988:	42470000 	.word	0x42470000
 800998c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009990:	4b8a      	ldr	r3, [pc, #552]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1ea      	bne.n	8009972 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0304 	and.w	r3, r3, #4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8097 	beq.w	8009ad8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099aa:	2300      	movs	r3, #0
 80099ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099ae:	4b83      	ldr	r3, [pc, #524]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10f      	bne.n	80099da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	4b7f      	ldr	r3, [pc, #508]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	4a7e      	ldr	r2, [pc, #504]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 80099c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c8:	6413      	str	r3, [r2, #64]	; 0x40
 80099ca:	4b7c      	ldr	r3, [pc, #496]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d2:	60bb      	str	r3, [r7, #8]
 80099d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099da:	4b79      	ldr	r3, [pc, #484]	; (8009bc0 <HAL_RCC_OscConfig+0x4b0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d118      	bne.n	8009a18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099e6:	4b76      	ldr	r3, [pc, #472]	; (8009bc0 <HAL_RCC_OscConfig+0x4b0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a75      	ldr	r2, [pc, #468]	; (8009bc0 <HAL_RCC_OscConfig+0x4b0>)
 80099ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099f2:	f7fa fd3d 	bl	8004470 <HAL_GetTick>
 80099f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099fa:	f7fa fd39 	bl	8004470 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e118      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a0c:	4b6c      	ldr	r3, [pc, #432]	; (8009bc0 <HAL_RCC_OscConfig+0x4b0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0f0      	beq.n	80099fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d106      	bne.n	8009a2e <HAL_RCC_OscConfig+0x31e>
 8009a20:	4b66      	ldr	r3, [pc, #408]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a24:	4a65      	ldr	r2, [pc, #404]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a2c:	e01c      	b.n	8009a68 <HAL_RCC_OscConfig+0x358>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d10c      	bne.n	8009a50 <HAL_RCC_OscConfig+0x340>
 8009a36:	4b61      	ldr	r3, [pc, #388]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3a:	4a60      	ldr	r2, [pc, #384]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a3c:	f043 0304 	orr.w	r3, r3, #4
 8009a40:	6713      	str	r3, [r2, #112]	; 0x70
 8009a42:	4b5e      	ldr	r3, [pc, #376]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a46:	4a5d      	ldr	r2, [pc, #372]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a48:	f043 0301 	orr.w	r3, r3, #1
 8009a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a4e:	e00b      	b.n	8009a68 <HAL_RCC_OscConfig+0x358>
 8009a50:	4b5a      	ldr	r3, [pc, #360]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	4a59      	ldr	r2, [pc, #356]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a56:	f023 0301 	bic.w	r3, r3, #1
 8009a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a5c:	4b57      	ldr	r3, [pc, #348]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a60:	4a56      	ldr	r2, [pc, #344]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a62:	f023 0304 	bic.w	r3, r3, #4
 8009a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d015      	beq.n	8009a9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a70:	f7fa fcfe 	bl	8004470 <HAL_GetTick>
 8009a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a76:	e00a      	b.n	8009a8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a78:	f7fa fcfa 	bl	8004470 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e0d7      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a8e:	4b4b      	ldr	r3, [pc, #300]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ee      	beq.n	8009a78 <HAL_RCC_OscConfig+0x368>
 8009a9a:	e014      	b.n	8009ac6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a9c:	f7fa fce8 	bl	8004470 <HAL_GetTick>
 8009aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aa2:	e00a      	b.n	8009aba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aa4:	f7fa fce4 	bl	8004470 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e0c1      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aba:	4b40      	ldr	r3, [pc, #256]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1ee      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d105      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009acc:	4b3b      	ldr	r3, [pc, #236]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	4a3a      	ldr	r2, [pc, #232]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80ad 	beq.w	8009c3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ae2:	4b36      	ldr	r3, [pc, #216]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f003 030c 	and.w	r3, r3, #12
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d060      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d145      	bne.n	8009b82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009af6:	4b33      	ldr	r3, [pc, #204]	; (8009bc4 <HAL_RCC_OscConfig+0x4b4>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afc:	f7fa fcb8 	bl	8004470 <HAL_GetTick>
 8009b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b02:	e008      	b.n	8009b16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b04:	f7fa fcb4 	bl	8004470 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e093      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b16:	4b29      	ldr	r3, [pc, #164]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1f0      	bne.n	8009b04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69da      	ldr	r2, [r3, #28]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	019b      	lsls	r3, r3, #6
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	041b      	lsls	r3, r3, #16
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	061b      	lsls	r3, r3, #24
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	071b      	lsls	r3, r3, #28
 8009b4e:	491b      	ldr	r1, [pc, #108]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b54:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <HAL_RCC_OscConfig+0x4b4>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5a:	f7fa fc89 	bl	8004470 <HAL_GetTick>
 8009b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b60:	e008      	b.n	8009b74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b62:	f7fa fc85 	bl	8004470 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e064      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b74:	4b11      	ldr	r3, [pc, #68]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0f0      	beq.n	8009b62 <HAL_RCC_OscConfig+0x452>
 8009b80:	e05c      	b.n	8009c3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b82:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <HAL_RCC_OscConfig+0x4b4>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b88:	f7fa fc72 	bl	8004470 <HAL_GetTick>
 8009b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8e:	e008      	b.n	8009ba2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b90:	f7fa fc6e 	bl	8004470 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e04d      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ba2:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <HAL_RCC_OscConfig+0x4ac>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1f0      	bne.n	8009b90 <HAL_RCC_OscConfig+0x480>
 8009bae:	e045      	b.n	8009c3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d107      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e040      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
 8009bbc:	40023800 	.word	0x40023800
 8009bc0:	40007000 	.word	0x40007000
 8009bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bc8:	4b1f      	ldr	r3, [pc, #124]	; (8009c48 <HAL_RCC_OscConfig+0x538>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d030      	beq.n	8009c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d129      	bne.n	8009c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d122      	bne.n	8009c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d119      	bne.n	8009c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	3b01      	subs	r3, #1
 8009c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d10f      	bne.n	8009c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d107      	bne.n	8009c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d001      	beq.n	8009c3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	40023800 	.word	0x40023800

08009c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e041      	b.n	8009ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fa f93a 	bl	8003eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f000 fc9e 	bl	800a5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d001      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e04e      	b.n	8009da2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0201 	orr.w	r2, r2, #1
 8009d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a23      	ldr	r2, [pc, #140]	; (8009db0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d022      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2e:	d01d      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a1f      	ldr	r2, [pc, #124]	; (8009db4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d018      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a1e      	ldr	r2, [pc, #120]	; (8009db8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d013      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a1c      	ldr	r2, [pc, #112]	; (8009dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00e      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a1b      	ldr	r2, [pc, #108]	; (8009dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d009      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a19      	ldr	r2, [pc, #100]	; (8009dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d004      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x80>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a18      	ldr	r2, [pc, #96]	; (8009dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d111      	bne.n	8009d90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b06      	cmp	r3, #6
 8009d7c:	d010      	beq.n	8009da0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f042 0201 	orr.w	r2, r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d8e:	e007      	b.n	8009da0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40000400 	.word	0x40000400
 8009db8:	40000800 	.word	0x40000800
 8009dbc:	40000c00 	.word	0x40000c00
 8009dc0:	40010400 	.word	0x40010400
 8009dc4:	40014000 	.word	0x40014000
 8009dc8:	40001800 	.word	0x40001800

08009dcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10f      	bne.n	8009e14 <HAL_TIM_Base_Stop_IT+0x48>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a1a      	ldr	r2, [r3, #32]
 8009dfa:	f240 4344 	movw	r3, #1092	; 0x444
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d107      	bne.n	8009e14 <HAL_TIM_Base_Stop_IT+0x48>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 0201 	bic.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e041      	b.n	8009ec0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7fa f889 	bl	8003f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f000 fbaf 	bl	800a5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <HAL_TIM_PWM_Start+0x24>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	bf14      	ite	ne
 8009ee4:	2301      	movne	r3, #1
 8009ee6:	2300      	moveq	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	e022      	b.n	8009f32 <HAL_TIM_PWM_Start+0x6a>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d109      	bne.n	8009f06 <HAL_TIM_PWM_Start+0x3e>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	bf14      	ite	ne
 8009efe:	2301      	movne	r3, #1
 8009f00:	2300      	moveq	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	e015      	b.n	8009f32 <HAL_TIM_PWM_Start+0x6a>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d109      	bne.n	8009f20 <HAL_TIM_PWM_Start+0x58>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	bf14      	ite	ne
 8009f18:	2301      	movne	r3, #1
 8009f1a:	2300      	moveq	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	e008      	b.n	8009f32 <HAL_TIM_PWM_Start+0x6a>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	bf14      	ite	ne
 8009f2c:	2301      	movne	r3, #1
 8009f2e:	2300      	moveq	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e07c      	b.n	800a034 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d104      	bne.n	8009f4a <HAL_TIM_PWM_Start+0x82>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f48:	e013      	b.n	8009f72 <HAL_TIM_PWM_Start+0xaa>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d104      	bne.n	8009f5a <HAL_TIM_PWM_Start+0x92>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f58:	e00b      	b.n	8009f72 <HAL_TIM_PWM_Start+0xaa>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b08      	cmp	r3, #8
 8009f5e:	d104      	bne.n	8009f6a <HAL_TIM_PWM_Start+0xa2>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f68:	e003      	b.n	8009f72 <HAL_TIM_PWM_Start+0xaa>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2201      	movs	r2, #1
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fe10 	bl	800aba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a2d      	ldr	r2, [pc, #180]	; (800a03c <HAL_TIM_PWM_Start+0x174>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d004      	beq.n	8009f94 <HAL_TIM_PWM_Start+0xcc>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a2c      	ldr	r2, [pc, #176]	; (800a040 <HAL_TIM_PWM_Start+0x178>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d101      	bne.n	8009f98 <HAL_TIM_PWM_Start+0xd0>
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <HAL_TIM_PWM_Start+0xd2>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a22      	ldr	r2, [pc, #136]	; (800a03c <HAL_TIM_PWM_Start+0x174>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d022      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc0:	d01d      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1f      	ldr	r2, [pc, #124]	; (800a044 <HAL_TIM_PWM_Start+0x17c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d018      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a1d      	ldr	r2, [pc, #116]	; (800a048 <HAL_TIM_PWM_Start+0x180>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d013      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1c      	ldr	r2, [pc, #112]	; (800a04c <HAL_TIM_PWM_Start+0x184>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d00e      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a16      	ldr	r2, [pc, #88]	; (800a040 <HAL_TIM_PWM_Start+0x178>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d009      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a18      	ldr	r2, [pc, #96]	; (800a050 <HAL_TIM_PWM_Start+0x188>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d004      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x136>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a16      	ldr	r2, [pc, #88]	; (800a054 <HAL_TIM_PWM_Start+0x18c>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d111      	bne.n	800a022 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b06      	cmp	r3, #6
 800a00e:	d010      	beq.n	800a032 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a020:	e007      	b.n	800a032 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0201 	orr.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40010000 	.word	0x40010000
 800a040:	40010400 	.word	0x40010400
 800a044:	40000400 	.word	0x40000400
 800a048:	40000800 	.word	0x40000800
 800a04c:	40000c00 	.word	0x40000c00
 800a050:	40014000 	.word	0x40014000
 800a054:	40001800 	.word	0x40001800

0800a058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d122      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d11b      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f06f 0202 	mvn.w	r2, #2
 800a084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa77 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a0a0:	e005      	b.n	800a0ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa69 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa7a 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d122      	bne.n	800a108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d11b      	bne.n	800a108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0204 	mvn.w	r2, #4
 800a0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa4d 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a0f4:	e005      	b.n	800a102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa3f 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fa50 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	f003 0308 	and.w	r3, r3, #8
 800a112:	2b08      	cmp	r3, #8
 800a114:	d122      	bne.n	800a15c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b08      	cmp	r3, #8
 800a122:	d11b      	bne.n	800a15c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f06f 0208 	mvn.w	r2, #8
 800a12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2204      	movs	r2, #4
 800a132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa23 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a148:	e005      	b.n	800a156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fa15 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fa26 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 0310 	and.w	r3, r3, #16
 800a166:	2b10      	cmp	r3, #16
 800a168:	d122      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b10      	cmp	r3, #16
 800a176:	d11b      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f06f 0210 	mvn.w	r2, #16
 800a180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2208      	movs	r2, #8
 800a186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9f9 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a19c:	e005      	b.n	800a1aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f9eb 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9fc 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d10e      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d107      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0201 	mvn.w	r2, #1
 800a1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7f8 fc7e 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e6:	2b80      	cmp	r3, #128	; 0x80
 800a1e8:	d10e      	bne.n	800a208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f4:	2b80      	cmp	r3, #128	; 0x80
 800a1f6:	d107      	bne.n	800a208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fdca 	bl	800ad9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a212:	2b40      	cmp	r3, #64	; 0x40
 800a214:	d10e      	bne.n	800a234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a220:	2b40      	cmp	r3, #64	; 0x40
 800a222:	d107      	bne.n	800a234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f9c1 	bl	800a5b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d10e      	bne.n	800a260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f003 0320 	and.w	r3, r3, #32
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d107      	bne.n	800a260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f06f 0220 	mvn.w	r2, #32
 800a258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fd94 	bl	800ad88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a282:	2302      	movs	r3, #2
 800a284:	e0ae      	b.n	800a3e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b0c      	cmp	r3, #12
 800a292:	f200 809f 	bhi.w	800a3d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a296:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2d1 	.word	0x0800a2d1
 800a2a0:	0800a3d5 	.word	0x0800a3d5
 800a2a4:	0800a3d5 	.word	0x0800a3d5
 800a2a8:	0800a3d5 	.word	0x0800a3d5
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a3d5 	.word	0x0800a3d5
 800a2b4:	0800a3d5 	.word	0x0800a3d5
 800a2b8:	0800a3d5 	.word	0x0800a3d5
 800a2bc:	0800a353 	.word	0x0800a353
 800a2c0:	0800a3d5 	.word	0x0800a3d5
 800a2c4:	0800a3d5 	.word	0x0800a3d5
 800a2c8:	0800a3d5 	.word	0x0800a3d5
 800a2cc:	0800a393 	.word	0x0800a393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fa18 	bl	800a70c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	699a      	ldr	r2, [r3, #24]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0208 	orr.w	r2, r2, #8
 800a2ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	699a      	ldr	r2, [r3, #24]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 0204 	bic.w	r2, r2, #4
 800a2fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6999      	ldr	r1, [r3, #24]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	691a      	ldr	r2, [r3, #16]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	619a      	str	r2, [r3, #24]
      break;
 800a30e:	e064      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fa68 	bl	800a7ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699a      	ldr	r2, [r3, #24]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a32a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a33a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6999      	ldr	r1, [r3, #24]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	021a      	lsls	r2, r3, #8
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	619a      	str	r2, [r3, #24]
      break;
 800a350:	e043      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fabd 	bl	800a8d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0208 	orr.w	r2, r2, #8
 800a36c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	69da      	ldr	r2, [r3, #28]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0204 	bic.w	r2, r2, #4
 800a37c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69d9      	ldr	r1, [r3, #28]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	61da      	str	r2, [r3, #28]
      break;
 800a390:	e023      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68b9      	ldr	r1, [r7, #8]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fb11 	bl	800a9c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69da      	ldr	r2, [r3, #28]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69da      	ldr	r2, [r3, #28]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69d9      	ldr	r1, [r3, #28]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	021a      	lsls	r2, r3, #8
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	61da      	str	r2, [r3, #28]
      break;
 800a3d2:	e002      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a400:	2b01      	cmp	r3, #1
 800a402:	d101      	bne.n	800a408 <HAL_TIM_ConfigClockSource+0x1c>
 800a404:	2302      	movs	r3, #2
 800a406:	e0b4      	b.n	800a572 <HAL_TIM_ConfigClockSource+0x186>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a42e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a440:	d03e      	beq.n	800a4c0 <HAL_TIM_ConfigClockSource+0xd4>
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a446:	f200 8087 	bhi.w	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44e:	f000 8086 	beq.w	800a55e <HAL_TIM_ConfigClockSource+0x172>
 800a452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a456:	d87f      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a458:	2b70      	cmp	r3, #112	; 0x70
 800a45a:	d01a      	beq.n	800a492 <HAL_TIM_ConfigClockSource+0xa6>
 800a45c:	2b70      	cmp	r3, #112	; 0x70
 800a45e:	d87b      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a460:	2b60      	cmp	r3, #96	; 0x60
 800a462:	d050      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x11a>
 800a464:	2b60      	cmp	r3, #96	; 0x60
 800a466:	d877      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a468:	2b50      	cmp	r3, #80	; 0x50
 800a46a:	d03c      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0xfa>
 800a46c:	2b50      	cmp	r3, #80	; 0x50
 800a46e:	d873      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a470:	2b40      	cmp	r3, #64	; 0x40
 800a472:	d058      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x13a>
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d86f      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a478:	2b30      	cmp	r3, #48	; 0x30
 800a47a:	d064      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a47c:	2b30      	cmp	r3, #48	; 0x30
 800a47e:	d86b      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a480:	2b20      	cmp	r3, #32
 800a482:	d060      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a484:	2b20      	cmp	r3, #32
 800a486:	d867      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d05c      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a48c:	2b10      	cmp	r3, #16
 800a48e:	d05a      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a490:	e062      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6899      	ldr	r1, [r3, #8]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f000 fb5d 	bl	800ab60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	609a      	str	r2, [r3, #8]
      break;
 800a4be:	e04f      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6818      	ldr	r0, [r3, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	6899      	ldr	r1, [r3, #8]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f000 fb46 	bl	800ab60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4e2:	609a      	str	r2, [r3, #8]
      break;
 800a4e4:	e03c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6859      	ldr	r1, [r3, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f000 faba 	bl	800aa6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2150      	movs	r1, #80	; 0x50
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fb13 	bl	800ab2a <TIM_ITRx_SetConfig>
      break;
 800a504:	e02c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6859      	ldr	r1, [r3, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	461a      	mov	r2, r3
 800a514:	f000 fad9 	bl	800aaca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2160      	movs	r1, #96	; 0x60
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fb03 	bl	800ab2a <TIM_ITRx_SetConfig>
      break;
 800a524:	e01c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	6859      	ldr	r1, [r3, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	461a      	mov	r2, r3
 800a534:	f000 fa9a 	bl	800aa6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2140      	movs	r1, #64	; 0x40
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 faf3 	bl	800ab2a <TIM_ITRx_SetConfig>
      break;
 800a544:	e00c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4619      	mov	r1, r3
 800a550:	4610      	mov	r0, r2
 800a552:	f000 faea 	bl	800ab2a <TIM_ITRx_SetConfig>
      break;
 800a556:	e003      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]
      break;
 800a55c:	e000      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a55e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a582:	bf00      	nop
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5aa:	bf00      	nop
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
	...

0800a5cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a40      	ldr	r2, [pc, #256]	; (800a6e0 <TIM_Base_SetConfig+0x114>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d013      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ea:	d00f      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3d      	ldr	r2, [pc, #244]	; (800a6e4 <TIM_Base_SetConfig+0x118>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00b      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3c      	ldr	r2, [pc, #240]	; (800a6e8 <TIM_Base_SetConfig+0x11c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d007      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a3b      	ldr	r2, [pc, #236]	; (800a6ec <TIM_Base_SetConfig+0x120>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d003      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a3a      	ldr	r2, [pc, #232]	; (800a6f0 <TIM_Base_SetConfig+0x124>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d108      	bne.n	800a61e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a2f      	ldr	r2, [pc, #188]	; (800a6e0 <TIM_Base_SetConfig+0x114>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d02b      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a62c:	d027      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2c      	ldr	r2, [pc, #176]	; (800a6e4 <TIM_Base_SetConfig+0x118>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d023      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a2b      	ldr	r2, [pc, #172]	; (800a6e8 <TIM_Base_SetConfig+0x11c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d01f      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a2a      	ldr	r2, [pc, #168]	; (800a6ec <TIM_Base_SetConfig+0x120>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d01b      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a29      	ldr	r2, [pc, #164]	; (800a6f0 <TIM_Base_SetConfig+0x124>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d017      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a28      	ldr	r2, [pc, #160]	; (800a6f4 <TIM_Base_SetConfig+0x128>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d013      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a27      	ldr	r2, [pc, #156]	; (800a6f8 <TIM_Base_SetConfig+0x12c>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00f      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a26      	ldr	r2, [pc, #152]	; (800a6fc <TIM_Base_SetConfig+0x130>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d00b      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a25      	ldr	r2, [pc, #148]	; (800a700 <TIM_Base_SetConfig+0x134>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d007      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a24      	ldr	r2, [pc, #144]	; (800a704 <TIM_Base_SetConfig+0x138>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d003      	beq.n	800a67e <TIM_Base_SetConfig+0xb2>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a23      	ldr	r2, [pc, #140]	; (800a708 <TIM_Base_SetConfig+0x13c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d108      	bne.n	800a690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a0a      	ldr	r2, [pc, #40]	; (800a6e0 <TIM_Base_SetConfig+0x114>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d003      	beq.n	800a6c4 <TIM_Base_SetConfig+0xf8>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a0c      	ldr	r2, [pc, #48]	; (800a6f0 <TIM_Base_SetConfig+0x124>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d103      	bne.n	800a6cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	615a      	str	r2, [r3, #20]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40010000 	.word	0x40010000
 800a6e4:	40000400 	.word	0x40000400
 800a6e8:	40000800 	.word	0x40000800
 800a6ec:	40000c00 	.word	0x40000c00
 800a6f0:	40010400 	.word	0x40010400
 800a6f4:	40014000 	.word	0x40014000
 800a6f8:	40014400 	.word	0x40014400
 800a6fc:	40014800 	.word	0x40014800
 800a700:	40001800 	.word	0x40001800
 800a704:	40001c00 	.word	0x40001c00
 800a708:	40002000 	.word	0x40002000

0800a70c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	f023 0201 	bic.w	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f023 0303 	bic.w	r3, r3, #3
 800a742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f023 0302 	bic.w	r3, r3, #2
 800a754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a20      	ldr	r2, [pc, #128]	; (800a7e4 <TIM_OC1_SetConfig+0xd8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_OC1_SetConfig+0x64>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a1f      	ldr	r2, [pc, #124]	; (800a7e8 <TIM_OC1_SetConfig+0xdc>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10c      	bne.n	800a78a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f023 0308 	bic.w	r3, r3, #8
 800a776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f023 0304 	bic.w	r3, r3, #4
 800a788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a15      	ldr	r2, [pc, #84]	; (800a7e4 <TIM_OC1_SetConfig+0xd8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d003      	beq.n	800a79a <TIM_OC1_SetConfig+0x8e>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a14      	ldr	r2, [pc, #80]	; (800a7e8 <TIM_OC1_SetConfig+0xdc>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d111      	bne.n	800a7be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	621a      	str	r2, [r3, #32]
}
 800a7d8:	bf00      	nop
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	40010000 	.word	0x40010000
 800a7e8:	40010400 	.word	0x40010400

0800a7ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	f023 0210 	bic.w	r2, r3, #16
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f023 0320 	bic.w	r3, r3, #32
 800a836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4313      	orrs	r3, r2
 800a842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a22      	ldr	r2, [pc, #136]	; (800a8d0 <TIM_OC2_SetConfig+0xe4>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d003      	beq.n	800a854 <TIM_OC2_SetConfig+0x68>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a21      	ldr	r2, [pc, #132]	; (800a8d4 <TIM_OC2_SetConfig+0xe8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d10d      	bne.n	800a870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	4313      	orrs	r3, r2
 800a866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a17      	ldr	r2, [pc, #92]	; (800a8d0 <TIM_OC2_SetConfig+0xe4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d003      	beq.n	800a880 <TIM_OC2_SetConfig+0x94>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <TIM_OC2_SetConfig+0xe8>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d113      	bne.n	800a8a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a88e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	4313      	orrs	r3, r2
 800a89a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	621a      	str	r2, [r3, #32]
}
 800a8c2:	bf00      	nop
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40010000 	.word	0x40010000
 800a8d4:	40010400 	.word	0x40010400

0800a8d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0303 	bic.w	r3, r3, #3
 800a90e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a21      	ldr	r2, [pc, #132]	; (800a9b8 <TIM_OC3_SetConfig+0xe0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d003      	beq.n	800a93e <TIM_OC3_SetConfig+0x66>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a20      	ldr	r2, [pc, #128]	; (800a9bc <TIM_OC3_SetConfig+0xe4>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d10d      	bne.n	800a95a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	021b      	lsls	r3, r3, #8
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	4313      	orrs	r3, r2
 800a950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a16      	ldr	r2, [pc, #88]	; (800a9b8 <TIM_OC3_SetConfig+0xe0>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d003      	beq.n	800a96a <TIM_OC3_SetConfig+0x92>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a15      	ldr	r2, [pc, #84]	; (800a9bc <TIM_OC3_SetConfig+0xe4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d113      	bne.n	800a992 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	011b      	lsls	r3, r3, #4
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	4313      	orrs	r3, r2
 800a984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	011b      	lsls	r3, r3, #4
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	4313      	orrs	r3, r2
 800a990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	621a      	str	r2, [r3, #32]
}
 800a9ac:	bf00      	nop
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	40010000 	.word	0x40010000
 800a9bc:	40010400 	.word	0x40010400

0800a9c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	031b      	lsls	r3, r3, #12
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a12      	ldr	r2, [pc, #72]	; (800aa64 <TIM_OC4_SetConfig+0xa4>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d003      	beq.n	800aa28 <TIM_OC4_SetConfig+0x68>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a11      	ldr	r2, [pc, #68]	; (800aa68 <TIM_OC4_SetConfig+0xa8>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d109      	bne.n	800aa3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	019b      	lsls	r3, r3, #6
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	621a      	str	r2, [r3, #32]
}
 800aa56:	bf00      	nop
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40010000 	.word	0x40010000
 800aa68:	40010400 	.word	0x40010400

0800aa6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f023 0201 	bic.w	r2, r3, #1
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f023 030a 	bic.w	r3, r3, #10
 800aaa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	621a      	str	r2, [r3, #32]
}
 800aabe:	bf00      	nop
 800aac0:	371c      	adds	r7, #28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b087      	sub	sp, #28
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	f023 0210 	bic.w	r2, r3, #16
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aaf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	031b      	lsls	r3, r3, #12
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	011b      	lsls	r3, r3, #4
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	621a      	str	r2, [r3, #32]
}
 800ab1e:	bf00      	nop
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	f043 0307 	orr.w	r3, r3, #7
 800ab4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	609a      	str	r2, [r3, #8]
}
 800ab54:	bf00      	nop
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	021a      	lsls	r2, r3, #8
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	609a      	str	r2, [r3, #8]
}
 800ab94:	bf00      	nop
 800ab96:	371c      	adds	r7, #28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f003 031f 	and.w	r3, r3, #31
 800abb2:	2201      	movs	r2, #1
 800abb4:	fa02 f303 	lsl.w	r3, r2, r3
 800abb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1a      	ldr	r2, [r3, #32]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	43db      	mvns	r3, r3
 800abc2:	401a      	ands	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a1a      	ldr	r2, [r3, #32]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f003 031f 	and.w	r3, r3, #31
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	fa01 f303 	lsl.w	r3, r1, r3
 800abd8:	431a      	orrs	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
}
 800abde:	bf00      	nop
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
	...

0800abec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d101      	bne.n	800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac00:	2302      	movs	r3, #2
 800ac02:	e05a      	b.n	800acba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a21      	ldr	r2, [pc, #132]	; (800acc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d022      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac50:	d01d      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a1d      	ldr	r2, [pc, #116]	; (800accc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d018      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a1b      	ldr	r2, [pc, #108]	; (800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d013      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00e      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d009      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a17      	ldr	r2, [pc, #92]	; (800acdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d004      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a15      	ldr	r2, [pc, #84]	; (800ace0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d10c      	bne.n	800aca8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	40010000 	.word	0x40010000
 800accc:	40000400 	.word	0x40000400
 800acd0:	40000800 	.word	0x40000800
 800acd4:	40000c00 	.word	0x40000c00
 800acd8:	40010400 	.word	0x40010400
 800acdc:	40014000 	.word	0x40014000
 800ace0:	40001800 	.word	0x40001800

0800ace4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e03d      	b.n	800ad7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	69db      	ldr	r3, [r3, #28]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adb0:	b084      	sub	sp, #16
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	f107 001c 	add.w	r0, r7, #28
 800adbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d122      	bne.n	800ae0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800addc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800adf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d105      	bne.n	800ae02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 fb16 	bl	800c434 <USB_CoreReset>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
 800ae0c:	e01a      	b.n	800ae44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 fb0a 	bl	800c434 <USB_CoreReset>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38
 800ae36:	e005      	b.n	800ae44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d10b      	bne.n	800ae62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f043 0206 	orr.w	r2, r3, #6
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f043 0220 	orr.w	r2, r3, #32
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae6e:	b004      	add	sp, #16
 800ae70:	4770      	bx	lr
	...

0800ae74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d165      	bne.n	800af54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4a41      	ldr	r2, [pc, #260]	; (800af90 <USB_SetTurnaroundTime+0x11c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d906      	bls.n	800ae9e <USB_SetTurnaroundTime+0x2a>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4a40      	ldr	r2, [pc, #256]	; (800af94 <USB_SetTurnaroundTime+0x120>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d202      	bcs.n	800ae9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae98:	230f      	movs	r3, #15
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e062      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	4a3c      	ldr	r2, [pc, #240]	; (800af94 <USB_SetTurnaroundTime+0x120>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d306      	bcc.n	800aeb4 <USB_SetTurnaroundTime+0x40>
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4a3b      	ldr	r2, [pc, #236]	; (800af98 <USB_SetTurnaroundTime+0x124>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d202      	bcs.n	800aeb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aeae:	230e      	movs	r3, #14
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e057      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	4a38      	ldr	r2, [pc, #224]	; (800af98 <USB_SetTurnaroundTime+0x124>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d306      	bcc.n	800aeca <USB_SetTurnaroundTime+0x56>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4a37      	ldr	r2, [pc, #220]	; (800af9c <USB_SetTurnaroundTime+0x128>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d202      	bcs.n	800aeca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aec4:	230d      	movs	r3, #13
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e04c      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4a33      	ldr	r2, [pc, #204]	; (800af9c <USB_SetTurnaroundTime+0x128>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d306      	bcc.n	800aee0 <USB_SetTurnaroundTime+0x6c>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	4a32      	ldr	r2, [pc, #200]	; (800afa0 <USB_SetTurnaroundTime+0x12c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d802      	bhi.n	800aee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aeda:	230c      	movs	r3, #12
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	e041      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4a2f      	ldr	r2, [pc, #188]	; (800afa0 <USB_SetTurnaroundTime+0x12c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d906      	bls.n	800aef6 <USB_SetTurnaroundTime+0x82>
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4a2e      	ldr	r2, [pc, #184]	; (800afa4 <USB_SetTurnaroundTime+0x130>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d802      	bhi.n	800aef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aef0:	230b      	movs	r3, #11
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e036      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4a2a      	ldr	r2, [pc, #168]	; (800afa4 <USB_SetTurnaroundTime+0x130>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d906      	bls.n	800af0c <USB_SetTurnaroundTime+0x98>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4a29      	ldr	r2, [pc, #164]	; (800afa8 <USB_SetTurnaroundTime+0x134>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d802      	bhi.n	800af0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800af06:	230a      	movs	r3, #10
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	e02b      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4a26      	ldr	r2, [pc, #152]	; (800afa8 <USB_SetTurnaroundTime+0x134>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d906      	bls.n	800af22 <USB_SetTurnaroundTime+0xae>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4a25      	ldr	r2, [pc, #148]	; (800afac <USB_SetTurnaroundTime+0x138>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d202      	bcs.n	800af22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800af1c:	2309      	movs	r3, #9
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e020      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a21      	ldr	r2, [pc, #132]	; (800afac <USB_SetTurnaroundTime+0x138>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d306      	bcc.n	800af38 <USB_SetTurnaroundTime+0xc4>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4a20      	ldr	r2, [pc, #128]	; (800afb0 <USB_SetTurnaroundTime+0x13c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d802      	bhi.n	800af38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800af32:	2308      	movs	r3, #8
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	e015      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4a1d      	ldr	r2, [pc, #116]	; (800afb0 <USB_SetTurnaroundTime+0x13c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d906      	bls.n	800af4e <USB_SetTurnaroundTime+0xda>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4a1c      	ldr	r2, [pc, #112]	; (800afb4 <USB_SetTurnaroundTime+0x140>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d202      	bcs.n	800af4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800af48:	2307      	movs	r3, #7
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e00a      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800af4e:	2306      	movs	r3, #6
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e007      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800af5a:	2309      	movs	r3, #9
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	e001      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800af60:	2309      	movs	r3, #9
 800af62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68da      	ldr	r2, [r3, #12]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	029b      	lsls	r3, r3, #10
 800af78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800af7c:	431a      	orrs	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	00d8acbf 	.word	0x00d8acbf
 800af94:	00e4e1c0 	.word	0x00e4e1c0
 800af98:	00f42400 	.word	0x00f42400
 800af9c:	01067380 	.word	0x01067380
 800afa0:	011a499f 	.word	0x011a499f
 800afa4:	01312cff 	.word	0x01312cff
 800afa8:	014ca43f 	.word	0x014ca43f
 800afac:	016e3600 	.word	0x016e3600
 800afb0:	01a6ab1f 	.word	0x01a6ab1f
 800afb4:	01e84800 	.word	0x01e84800

0800afb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f043 0201 	orr.w	r2, r3, #1
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f023 0201 	bic.w	r2, r3, #1
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d115      	bne.n	800b04a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b02a:	2001      	movs	r0, #1
 800b02c:	f7f9 fa2c 	bl	8004488 <HAL_Delay>
      ms++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 f96c 	bl	800c314 <USB_GetMode>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d01e      	beq.n	800b080 <USB_SetCurrentMode+0x84>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b31      	cmp	r3, #49	; 0x31
 800b046:	d9f0      	bls.n	800b02a <USB_SetCurrentMode+0x2e>
 800b048:	e01a      	b.n	800b080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d115      	bne.n	800b07c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b05c:	2001      	movs	r0, #1
 800b05e:	f7f9 fa13 	bl	8004488 <HAL_Delay>
      ms++;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3301      	adds	r3, #1
 800b066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 f953 	bl	800c314 <USB_GetMode>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <USB_SetCurrentMode+0x84>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b31      	cmp	r3, #49	; 0x31
 800b078:	d9f0      	bls.n	800b05c <USB_SetCurrentMode+0x60>
 800b07a:	e001      	b.n	800b080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e005      	b.n	800b08c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b32      	cmp	r3, #50	; 0x32
 800b084:	d101      	bne.n	800b08a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b094:	b084      	sub	sp, #16
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b0a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	e009      	b.n	800b0c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	3340      	adds	r3, #64	; 0x40
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b0e      	cmp	r3, #14
 800b0cc:	d9f2      	bls.n	800b0b4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d11c      	bne.n	800b10e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0e2:	f043 0302 	orr.w	r3, r3, #2
 800b0e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	e005      	b.n	800b11a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b120:	461a      	mov	r2, r3
 800b122:	2300      	movs	r3, #0
 800b124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	4619      	mov	r1, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b134:	461a      	mov	r2, r3
 800b136:	680b      	ldr	r3, [r1, #0]
 800b138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d10c      	bne.n	800b15a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b146:	2100      	movs	r1, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f945 	bl	800b3d8 <USB_SetDevSpeed>
 800b14e:	e008      	b.n	800b162 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b150:	2101      	movs	r1, #1
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f940 	bl	800b3d8 <USB_SetDevSpeed>
 800b158:	e003      	b.n	800b162 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b15a:	2103      	movs	r1, #3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f93b 	bl	800b3d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b162:	2110      	movs	r1, #16
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f8f3 	bl	800b350 <USB_FlushTxFifo>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f90f 	bl	800b398 <USB_FlushRxFifo>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18a:	461a      	mov	r2, r3
 800b18c:	2300      	movs	r3, #0
 800b18e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b196:	461a      	mov	r2, r3
 800b198:	2300      	movs	r3, #0
 800b19a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	613b      	str	r3, [r7, #16]
 800b1ac:	e043      	b.n	800b236 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1c4:	d118      	bne.n	800b1f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	e013      	b.n	800b20a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	015a      	lsls	r2, r3, #5
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	e008      	b.n	800b20a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	461a      	mov	r2, r3
 800b206:	2300      	movs	r3, #0
 800b208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b216:	461a      	mov	r2, r3
 800b218:	2300      	movs	r3, #0
 800b21a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b228:	461a      	mov	r2, r3
 800b22a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b22e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	3301      	adds	r3, #1
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d3b7      	bcc.n	800b1ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	e043      	b.n	800b2cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b25a:	d118      	bne.n	800b28e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26e:	461a      	mov	r2, r3
 800b270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e013      	b.n	800b2a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b284:	461a      	mov	r2, r3
 800b286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	e008      	b.n	800b2a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b29a:	461a      	mov	r2, r3
 800b29c:	2300      	movs	r3, #0
 800b29e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d3b7      	bcc.n	800b244 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b2f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d105      	bne.n	800b308 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	f043 0210 	orr.w	r2, r3, #16
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699a      	ldr	r2, [r3, #24]
 800b30c:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <USB_DevInit+0x2b8>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	f043 0208 	orr.w	r2, r3, #8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d107      	bne.n	800b33c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b334:	f043 0304 	orr.w	r3, r3, #4
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b348:	b004      	add	sp, #16
 800b34a:	4770      	bx	lr
 800b34c:	803c3800 	.word	0x803c3800

0800b350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	019b      	lsls	r3, r3, #6
 800b362:	f043 0220 	orr.w	r2, r3, #32
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	4a08      	ldr	r2, [pc, #32]	; (800b394 <USB_FlushTxFifo+0x44>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d901      	bls.n	800b37a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e006      	b.n	800b388 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b20      	cmp	r3, #32
 800b384:	d0f1      	beq.n	800b36a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	00030d40 	.word	0x00030d40

0800b398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2210      	movs	r2, #16
 800b3a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	4a08      	ldr	r2, [pc, #32]	; (800b3d4 <USB_FlushRxFifo+0x3c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d901      	bls.n	800b3ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e006      	b.n	800b3c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f003 0310 	and.w	r3, r3, #16
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	d0f1      	beq.n	800b3aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	00030d40 	.word	0x00030d40

0800b3d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	68f9      	ldr	r1, [r7, #12]
 800b3f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b087      	sub	sp, #28
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f003 0306 	and.w	r3, r3, #6
 800b422:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b42a:	2300      	movs	r3, #0
 800b42c:	75fb      	strb	r3, [r7, #23]
 800b42e:	e00a      	b.n	800b446 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b02      	cmp	r3, #2
 800b434:	d002      	beq.n	800b43c <USB_GetDevSpeed+0x32>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b06      	cmp	r3, #6
 800b43a:	d102      	bne.n	800b442 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b43c:	2302      	movs	r3, #2
 800b43e:	75fb      	strb	r3, [r7, #23]
 800b440:	e001      	b.n	800b446 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b442:	230f      	movs	r3, #15
 800b444:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	371c      	adds	r7, #28
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d13a      	bne.n	800b4e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b476:	69da      	ldr	r2, [r3, #28]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	f003 030f 	and.w	r3, r3, #15
 800b480:	2101      	movs	r1, #1
 800b482:	fa01 f303 	lsl.w	r3, r1, r3
 800b486:	b29b      	uxth	r3, r3
 800b488:	68f9      	ldr	r1, [r7, #12]
 800b48a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b48e:	4313      	orrs	r3, r2
 800b490:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	015a      	lsls	r2, r3, #5
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	4413      	add	r3, r2
 800b49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d155      	bne.n	800b554 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	78db      	ldrb	r3, [r3, #3]
 800b4c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	059b      	lsls	r3, r3, #22
 800b4ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	e036      	b.n	800b554 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ec:	69da      	ldr	r2, [r3, #28]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 030f 	and.w	r3, r3, #15
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4fc:	041b      	lsls	r3, r3, #16
 800b4fe:	68f9      	ldr	r1, [r7, #12]
 800b500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b504:	4313      	orrs	r3, r2
 800b506:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d11a      	bne.n	800b554 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	78db      	ldrb	r3, [r3, #3]
 800b538:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b53a:	430b      	orrs	r3, r1
 800b53c:	4313      	orrs	r3, r2
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b54a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b54e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b552:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
	...

0800b564 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	785b      	ldrb	r3, [r3, #1]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d161      	bne.n	800b644 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b596:	d11f      	bne.n	800b5d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	0151      	lsls	r1, r2, #5
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	440a      	add	r2, r1
 800b5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	f003 030f 	and.w	r3, r3, #15
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	43db      	mvns	r3, r3
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	f003 030f 	and.w	r3, r3, #15
 800b60c:	2101      	movs	r1, #1
 800b60e:	fa01 f303 	lsl.w	r3, r1, r3
 800b612:	b29b      	uxth	r3, r3
 800b614:	43db      	mvns	r3, r3
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b61c:	4013      	ands	r3, r2
 800b61e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	0159      	lsls	r1, r3, #5
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	440b      	add	r3, r1
 800b636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63a:	4619      	mov	r1, r3
 800b63c:	4b35      	ldr	r3, [pc, #212]	; (800b714 <USB_DeactivateEndpoint+0x1b0>)
 800b63e:	4013      	ands	r3, r2
 800b640:	600b      	str	r3, [r1, #0]
 800b642:	e060      	b.n	800b706 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b65a:	d11f      	bne.n	800b69c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	015a      	lsls	r2, r3, #5
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	4413      	add	r3, r2
 800b664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	0151      	lsls	r1, r2, #5
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	440a      	add	r2, r1
 800b672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b67a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	0151      	lsls	r1, r2, #5
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	440a      	add	r2, r1
 800b692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b69a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	f003 030f 	and.w	r3, r3, #15
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b6b2:	041b      	lsls	r3, r3, #16
 800b6b4:	43db      	mvns	r3, r3
 800b6b6:	68f9      	ldr	r1, [r7, #12]
 800b6b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6bc:	4013      	ands	r3, r2
 800b6be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c6:	69da      	ldr	r2, [r3, #28]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	43db      	mvns	r3, r3
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	0159      	lsls	r1, r3, #5
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	440b      	add	r3, r1
 800b6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6fe:	4619      	mov	r1, r3
 800b700:	4b05      	ldr	r3, [pc, #20]	; (800b718 <USB_DeactivateEndpoint+0x1b4>)
 800b702:	4013      	ands	r3, r2
 800b704:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	ec337800 	.word	0xec337800
 800b718:	eff37800 	.word	0xeff37800

0800b71c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	; 0x28
 800b720:	af02      	add	r7, sp, #8
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	4613      	mov	r3, r2
 800b728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	f040 815c 	bne.w	800b9f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d132      	bne.n	800b7ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	0151      	lsls	r1, r2, #5
 800b77c:	69fa      	ldr	r2, [r7, #28]
 800b77e:	440a      	add	r2, r1
 800b780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	4413      	add	r3, r2
 800b792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	69ba      	ldr	r2, [r7, #24]
 800b79a:	0151      	lsls	r1, r2, #5
 800b79c:	69fa      	ldr	r2, [r7, #28]
 800b79e:	440a      	add	r2, r1
 800b7a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a4:	0cdb      	lsrs	r3, r3, #19
 800b7a6:	04db      	lsls	r3, r3, #19
 800b7a8:	6113      	str	r3, [r2, #16]
 800b7aa:	e074      	b.n	800b896 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	69ba      	ldr	r2, [r7, #24]
 800b7bc:	0151      	lsls	r1, r2, #5
 800b7be:	69fa      	ldr	r2, [r7, #28]
 800b7c0:	440a      	add	r2, r1
 800b7c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c6:	0cdb      	lsrs	r3, r3, #19
 800b7c8:	04db      	lsls	r3, r3, #19
 800b7ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	0151      	lsls	r1, r2, #5
 800b7de:	69fa      	ldr	r2, [r7, #28]
 800b7e0:	440a      	add	r2, r1
 800b7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	6959      	ldr	r1, [r3, #20]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	440b      	add	r3, r1
 800b808:	1e59      	subs	r1, r3, #1
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b812:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b814:	4b9d      	ldr	r3, [pc, #628]	; (800ba8c <USB_EPStartXfer+0x370>)
 800b816:	400b      	ands	r3, r1
 800b818:	69b9      	ldr	r1, [r7, #24]
 800b81a:	0148      	lsls	r0, r1, #5
 800b81c:	69f9      	ldr	r1, [r7, #28]
 800b81e:	4401      	add	r1, r0
 800b820:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b824:	4313      	orrs	r3, r2
 800b826:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b834:	691a      	ldr	r2, [r3, #16]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b83e:	69b9      	ldr	r1, [r7, #24]
 800b840:	0148      	lsls	r0, r1, #5
 800b842:	69f9      	ldr	r1, [r7, #28]
 800b844:	4401      	add	r1, r0
 800b846:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b84a:	4313      	orrs	r3, r2
 800b84c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	78db      	ldrb	r3, [r3, #3]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d11f      	bne.n	800b896 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	0151      	lsls	r1, r2, #5
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	440a      	add	r2, r1
 800b86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b870:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b874:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	015a      	lsls	r2, r3, #5
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	4413      	add	r3, r2
 800b87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	0151      	lsls	r1, r2, #5
 800b888:	69fa      	ldr	r2, [r7, #28]
 800b88a:	440a      	add	r2, r1
 800b88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b890:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b894:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d14b      	bne.n	800b934 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d009      	beq.n	800b8b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	78db      	ldrb	r3, [r3, #3]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d128      	bne.n	800b912 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d110      	bne.n	800b8f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	0151      	lsls	r1, r2, #5
 800b8e2:	69fa      	ldr	r2, [r7, #28]
 800b8e4:	440a      	add	r2, r1
 800b8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8ee:	6013      	str	r3, [r2, #0]
 800b8f0:	e00f      	b.n	800b912 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	015a      	lsls	r2, r3, #5
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	0151      	lsls	r1, r2, #5
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	440a      	add	r2, r1
 800b908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b910:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	69ba      	ldr	r2, [r7, #24]
 800b922:	0151      	lsls	r1, r2, #5
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	440a      	add	r2, r1
 800b928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b92c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	e12f      	b.n	800bb94 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69ba      	ldr	r2, [r7, #24]
 800b944:	0151      	lsls	r1, r2, #5
 800b946:	69fa      	ldr	r2, [r7, #28]
 800b948:	440a      	add	r2, r1
 800b94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b94e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b952:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	78db      	ldrb	r3, [r3, #3]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d015      	beq.n	800b988 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 8117 	beq.w	800bb94 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	f003 030f 	and.w	r3, r3, #15
 800b976:	2101      	movs	r1, #1
 800b978:	fa01 f303 	lsl.w	r3, r1, r3
 800b97c:	69f9      	ldr	r1, [r7, #28]
 800b97e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b982:	4313      	orrs	r3, r2
 800b984:	634b      	str	r3, [r1, #52]	; 0x34
 800b986:	e105      	b.n	800bb94 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b994:	2b00      	cmp	r3, #0
 800b996:	d110      	bne.n	800b9ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	0151      	lsls	r1, r2, #5
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	440a      	add	r2, r1
 800b9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	e00f      	b.n	800b9da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	015a      	lsls	r2, r3, #5
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	69ba      	ldr	r2, [r7, #24]
 800b9ca:	0151      	lsls	r1, r2, #5
 800b9cc:	69fa      	ldr	r2, [r7, #28]
 800b9ce:	440a      	add	r2, r1
 800b9d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	68d9      	ldr	r1, [r3, #12]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	781a      	ldrb	r2, [r3, #0]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	b298      	uxth	r0, r3
 800b9e8:	79fb      	ldrb	r3, [r7, #7]
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fa2b 	bl	800be4a <USB_WritePacket>
 800b9f4:	e0ce      	b.n	800bb94 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	015a      	lsls	r2, r3, #5
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	0151      	lsls	r1, r2, #5
 800ba08:	69fa      	ldr	r2, [r7, #28]
 800ba0a:	440a      	add	r2, r1
 800ba0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba10:	0cdb      	lsrs	r3, r3, #19
 800ba12:	04db      	lsls	r3, r3, #19
 800ba14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	0151      	lsls	r1, r2, #5
 800ba28:	69fa      	ldr	r2, [r7, #28]
 800ba2a:	440a      	add	r2, r1
 800ba2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d126      	bne.n	800ba90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	015a      	lsls	r2, r3, #5
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	4413      	add	r3, r2
 800ba4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba4e:	691a      	ldr	r2, [r3, #16]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba58:	69b9      	ldr	r1, [r7, #24]
 800ba5a:	0148      	lsls	r0, r1, #5
 800ba5c:	69f9      	ldr	r1, [r7, #28]
 800ba5e:	4401      	add	r1, r0
 800ba60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba64:	4313      	orrs	r3, r2
 800ba66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	69fa      	ldr	r2, [r7, #28]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba86:	6113      	str	r3, [r2, #16]
 800ba88:	e036      	b.n	800baf8 <USB_EPStartXfer+0x3dc>
 800ba8a:	bf00      	nop
 800ba8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	695a      	ldr	r2, [r3, #20]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	4413      	add	r3, r2
 800ba9a:	1e5a      	subs	r2, r3, #1
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	015a      	lsls	r2, r3, #5
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	4413      	add	r3, r2
 800baae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	8afb      	ldrh	r3, [r7, #22]
 800bab6:	04d9      	lsls	r1, r3, #19
 800bab8:	4b39      	ldr	r3, [pc, #228]	; (800bba0 <USB_EPStartXfer+0x484>)
 800baba:	400b      	ands	r3, r1
 800babc:	69b9      	ldr	r1, [r7, #24]
 800babe:	0148      	lsls	r0, r1, #5
 800bac0:	69f9      	ldr	r1, [r7, #28]
 800bac2:	4401      	add	r1, r0
 800bac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bac8:	4313      	orrs	r3, r2
 800baca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad8:	691a      	ldr	r2, [r3, #16]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	8af9      	ldrh	r1, [r7, #22]
 800bae0:	fb01 f303 	mul.w	r3, r1, r3
 800bae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bae8:	69b9      	ldr	r1, [r7, #24]
 800baea:	0148      	lsls	r0, r1, #5
 800baec:	69f9      	ldr	r1, [r7, #28]
 800baee:	4401      	add	r1, r0
 800baf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800baf4:	4313      	orrs	r3, r2
 800baf6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800baf8:	79fb      	ldrb	r3, [r7, #7]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d10d      	bne.n	800bb1a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	68d9      	ldr	r1, [r3, #12]
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	015a      	lsls	r2, r3, #5
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	4413      	add	r3, r2
 800bb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb16:	460a      	mov	r2, r1
 800bb18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	78db      	ldrb	r3, [r3, #3]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d128      	bne.n	800bb74 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d110      	bne.n	800bb54 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	69ba      	ldr	r2, [r7, #24]
 800bb42:	0151      	lsls	r1, r2, #5
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	440a      	add	r2, r1
 800bb48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	e00f      	b.n	800bb74 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	015a      	lsls	r2, r3, #5
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69ba      	ldr	r2, [r7, #24]
 800bb64:	0151      	lsls	r1, r2, #5
 800bb66:	69fa      	ldr	r2, [r7, #28]
 800bb68:	440a      	add	r2, r1
 800bb6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	0151      	lsls	r1, r2, #5
 800bb86:	69fa      	ldr	r2, [r7, #28]
 800bb88:	440a      	add	r2, r1
 800bb8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3720      	adds	r7, #32
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	1ff80000 	.word	0x1ff80000

0800bba4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	785b      	ldrb	r3, [r3, #1]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	f040 80cd 	bne.w	800bd60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d132      	bne.n	800bc34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	0151      	lsls	r1, r2, #5
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	440a      	add	r2, r1
 800bbe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	0151      	lsls	r1, r2, #5
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	440a      	add	r2, r1
 800bc28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc2c:	0cdb      	lsrs	r3, r3, #19
 800bc2e:	04db      	lsls	r3, r3, #19
 800bc30:	6113      	str	r3, [r2, #16]
 800bc32:	e04e      	b.n	800bcd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	0151      	lsls	r1, r2, #5
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	440a      	add	r2, r1
 800bc4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc4e:	0cdb      	lsrs	r3, r3, #19
 800bc50:	04db      	lsls	r3, r3, #19
 800bc52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	0151      	lsls	r1, r2, #5
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	440a      	add	r2, r1
 800bc6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	695a      	ldr	r2, [r3, #20]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	0151      	lsls	r1, r2, #5
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	440a      	add	r2, r1
 800bca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb8:	691a      	ldr	r2, [r3, #16]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcc2:	6939      	ldr	r1, [r7, #16]
 800bcc4:	0148      	lsls	r0, r1, #5
 800bcc6:	6979      	ldr	r1, [r7, #20]
 800bcc8:	4401      	add	r1, r0
 800bcca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d11e      	bne.n	800bd16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d009      	beq.n	800bcf4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcec:	461a      	mov	r2, r3
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	0151      	lsls	r1, r2, #5
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	440a      	add	r2, r1
 800bd0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	e092      	b.n	800be3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	0151      	lsls	r1, r2, #5
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	440a      	add	r2, r1
 800bd2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d07e      	beq.n	800be3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	2101      	movs	r1, #1
 800bd50:	fa01 f303 	lsl.w	r3, r1, r3
 800bd54:	6979      	ldr	r1, [r7, #20]
 800bd56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	634b      	str	r3, [r1, #52]	; 0x34
 800bd5e:	e06d      	b.n	800be3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	015a      	lsls	r2, r3, #5
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	0151      	lsls	r1, r2, #5
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	440a      	add	r2, r1
 800bd76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd7a:	0cdb      	lsrs	r3, r3, #19
 800bd7c:	04db      	lsls	r3, r3, #19
 800bd7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	0151      	lsls	r1, r2, #5
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	440a      	add	r2, r1
 800bd96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bda2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	0151      	lsls	r1, r2, #5
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	440a      	add	r2, r1
 800bdca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde0:	691a      	ldr	r2, [r3, #16]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdea:	6939      	ldr	r1, [r7, #16]
 800bdec:	0148      	lsls	r0, r1, #5
 800bdee:	6979      	ldr	r1, [r7, #20]
 800bdf0:	4401      	add	r1, r0
 800bdf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d10d      	bne.n	800be1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	68d9      	ldr	r1, [r3, #12]
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be18:	460a      	mov	r2, r1
 800be1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	0151      	lsls	r1, r2, #5
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	440a      	add	r2, r1
 800be32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b089      	sub	sp, #36	; 0x24
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	4611      	mov	r1, r2
 800be56:	461a      	mov	r2, r3
 800be58:	460b      	mov	r3, r1
 800be5a:	71fb      	strb	r3, [r7, #7]
 800be5c:	4613      	mov	r3, r2
 800be5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800be68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d123      	bne.n	800beb8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800be70:	88bb      	ldrh	r3, [r7, #4]
 800be72:	3303      	adds	r3, #3
 800be74:	089b      	lsrs	r3, r3, #2
 800be76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800be78:	2300      	movs	r3, #0
 800be7a:	61bb      	str	r3, [r7, #24]
 800be7c:	e018      	b.n	800beb0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	031a      	lsls	r2, r3, #12
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	4413      	add	r3, r2
 800be86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be8a:	461a      	mov	r2, r3
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6013      	str	r3, [r2, #0]
      pSrc++;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	3301      	adds	r3, #1
 800be96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	3301      	adds	r3, #1
 800be9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	3301      	adds	r3, #1
 800bea2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	3301      	adds	r3, #1
 800bea8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	3301      	adds	r3, #1
 800beae:	61bb      	str	r3, [r7, #24]
 800beb0:	69ba      	ldr	r2, [r7, #24]
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d3e2      	bcc.n	800be7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3724      	adds	r7, #36	; 0x24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b08b      	sub	sp, #44	; 0x2c
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	4613      	mov	r3, r2
 800bed2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bedc:	88fb      	ldrh	r3, [r7, #6]
 800bede:	089b      	lsrs	r3, r3, #2
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bee4:	88fb      	ldrh	r3, [r7, #6]
 800bee6:	f003 0303 	and.w	r3, r3, #3
 800beea:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800beec:	2300      	movs	r3, #0
 800beee:	623b      	str	r3, [r7, #32]
 800bef0:	e014      	b.n	800bf1c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	601a      	str	r2, [r3, #0]
    pDest++;
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	3301      	adds	r3, #1
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	3301      	adds	r3, #1
 800bf08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	3301      	adds	r3, #1
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	623b      	str	r3, [r7, #32]
 800bf1c:	6a3a      	ldr	r2, [r7, #32]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d3e6      	bcc.n	800bef2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf24:	8bfb      	ldrh	r3, [r7, #30]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d01e      	beq.n	800bf68 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf34:	461a      	mov	r2, r3
 800bf36:	f107 0310 	add.w	r3, r7, #16
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	fa22 f303 	lsr.w	r3, r2, r3
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	701a      	strb	r2, [r3, #0]
      i++;
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	3301      	adds	r3, #1
 800bf54:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	3301      	adds	r3, #1
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bf5c:	8bfb      	ldrh	r3, [r7, #30]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf62:	8bfb      	ldrh	r3, [r7, #30]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1ea      	bne.n	800bf3e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	372c      	adds	r7, #44	; 0x2c
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b085      	sub	sp, #20
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d12c      	bne.n	800bfec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	015a      	lsls	r2, r3, #5
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	4413      	add	r3, r2
 800bf9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	db12      	blt.n	800bfca <USB_EPSetStall+0x54>
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00f      	beq.n	800bfca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	015a      	lsls	r2, r3, #5
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	0151      	lsls	r1, r2, #5
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	440a      	add	r2, r1
 800bfc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfc8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	0151      	lsls	r1, r2, #5
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	440a      	add	r2, r1
 800bfe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	e02b      	b.n	800c044 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	db12      	blt.n	800c024 <USB_EPSetStall+0xae>
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00f      	beq.n	800c024 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	015a      	lsls	r2, r3, #5
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4413      	add	r3, r2
 800c00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	0151      	lsls	r1, r2, #5
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	440a      	add	r2, r1
 800c01a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c01e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c022:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	0151      	lsls	r1, r2, #5
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	440a      	add	r2, r1
 800c03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c03e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d128      	bne.n	800c0c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	015a      	lsls	r2, r3, #5
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	4413      	add	r3, r2
 800c076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	0151      	lsls	r1, r2, #5
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	440a      	add	r2, r1
 800c084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c088:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c08c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	78db      	ldrb	r3, [r3, #3]
 800c092:	2b03      	cmp	r3, #3
 800c094:	d003      	beq.n	800c09e <USB_EPClearStall+0x4c>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	78db      	ldrb	r3, [r3, #3]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d138      	bne.n	800c110 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	015a      	lsls	r2, r3, #5
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	0151      	lsls	r1, r2, #5
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	440a      	add	r2, r1
 800c0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	e027      	b.n	800c110 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	0151      	lsls	r1, r2, #5
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	440a      	add	r2, r1
 800c0d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	78db      	ldrb	r3, [r3, #3]
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d003      	beq.n	800c0f0 <USB_EPClearStall+0x9e>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	78db      	ldrb	r3, [r3, #3]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d10f      	bne.n	800c110 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	0151      	lsls	r1, r2, #5
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	440a      	add	r2, r1
 800c106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c10a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c10e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c11e:	b480      	push	{r7}
 800c120:	b085      	sub	sp, #20
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	460b      	mov	r3, r1
 800c128:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c13c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c140:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	011b      	lsls	r3, r3, #4
 800c14e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c152:	68f9      	ldr	r1, [r7, #12]
 800c154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c158:	4313      	orrs	r3, r2
 800c15a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr

0800c16a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c16a:	b480      	push	{r7}
 800c16c:	b085      	sub	sp, #20
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c184:	f023 0303 	bic.w	r3, r3, #3
 800c188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c198:	f023 0302 	bic.w	r3, r3, #2
 800c19c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1c6:	f023 0303 	bic.w	r3, r3, #3
 800c1ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1da:	f043 0302 	orr.w	r3, r3, #2
 800c1de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3714      	adds	r7, #20
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	4013      	ands	r3, r2
 800c204:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c206:	68fb      	ldr	r3, [r7, #12]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c230:	69db      	ldr	r3, [r3, #28]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	4013      	ands	r3, r2
 800c236:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	0c1b      	lsrs	r3, r3, #16
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	4013      	ands	r3, r2
 800c26a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	b29b      	uxth	r3, r3
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4413      	add	r3, r2
 800c294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	f003 030f 	and.w	r3, r3, #15
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e8:	01db      	lsls	r3, r3, #7
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	4013      	ands	r3, r2
 800c304:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c306:	68bb      	ldr	r3, [r7, #8]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	371c      	adds	r7, #28
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	f003 0301 	and.w	r3, r3, #1
}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c34a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c34e:	f023 0307 	bic.w	r3, r3, #7
 800c352:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c366:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
	...

0800c378 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c378:	b480      	push	{r7}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	460b      	mov	r3, r1
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	333c      	adds	r3, #60	; 0x3c
 800c38e:	3304      	adds	r3, #4
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	4a26      	ldr	r2, [pc, #152]	; (800c430 <USB_EP0_OutStart+0xb8>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d90a      	bls.n	800c3b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3ac:	d101      	bne.n	800c3b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e037      	b.n	800c422 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3e0:	f043 0318 	orr.w	r3, r3, #24
 800c3e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c3f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c3fa:	7afb      	ldrb	r3, [r7, #11]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10f      	bne.n	800c420 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c406:	461a      	mov	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c41a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c41e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	371c      	adds	r7, #28
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	4f54300a 	.word	0x4f54300a

0800c434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c43c:	2300      	movs	r3, #0
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3301      	adds	r3, #1
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	4a13      	ldr	r2, [pc, #76]	; (800c494 <USB_CoreReset+0x60>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d901      	bls.n	800c450 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e01a      	b.n	800c486 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	daf3      	bge.n	800c440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	f043 0201 	orr.w	r2, r3, #1
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3301      	adds	r3, #1
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	4a09      	ldr	r2, [pc, #36]	; (800c494 <USB_CoreReset+0x60>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d901      	bls.n	800c478 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	e006      	b.n	800c486 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b01      	cmp	r3, #1
 800c482:	d0f1      	beq.n	800c468 <USB_CoreReset+0x34>

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	00030d40 	.word	0x00030d40

0800c498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c4a8:	f002 f9d4 	bl	800e854 <USBD_static_malloc>
 800c4ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	e066      	b.n	800c58e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	7c1b      	ldrb	r3, [r3, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d119      	bne.n	800c504 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	2181      	movs	r1, #129	; 0x81
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f002 f898 	bl	800e60e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f002 f88e 	bl	800e60e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2210      	movs	r2, #16
 800c4fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c502:	e016      	b.n	800c532 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c504:	2340      	movs	r3, #64	; 0x40
 800c506:	2202      	movs	r2, #2
 800c508:	2181      	movs	r1, #129	; 0x81
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f002 f87f 	bl	800e60e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c516:	2340      	movs	r3, #64	; 0x40
 800c518:	2202      	movs	r2, #2
 800c51a:	2101      	movs	r1, #1
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f002 f876 	bl	800e60e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2210      	movs	r2, #16
 800c52e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c532:	2308      	movs	r3, #8
 800c534:	2203      	movs	r2, #3
 800c536:	2182      	movs	r1, #130	; 0x82
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f002 f868 	bl	800e60e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7c1b      	ldrb	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d109      	bne.n	800c57c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c56e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c572:	2101      	movs	r1, #1
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f002 f939 	bl	800e7ec <USBD_LL_PrepareReceive>
 800c57a:	e007      	b.n	800c58c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c582:	2340      	movs	r3, #64	; 0x40
 800c584:	2101      	movs	r1, #1
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f002 f930 	bl	800e7ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5a2:	2181      	movs	r1, #129	; 0x81
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f002 f858 	bl	800e65a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f002 f851 	bl	800e65a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c5c0:	2182      	movs	r1, #130	; 0x82
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f002 f849 	bl	800e65a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00e      	beq.n	800c600 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f002 f93c 	bl	800e870 <USBD_static_free>
    pdev->pClassData = NULL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c61c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c61e:	2300      	movs	r3, #0
 800c620:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c630:	2303      	movs	r3, #3
 800c632:	e0af      	b.n	800c794 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d03f      	beq.n	800c6c0 <USBD_CDC_Setup+0xb4>
 800c640:	2b20      	cmp	r3, #32
 800c642:	f040 809f 	bne.w	800c784 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	88db      	ldrh	r3, [r3, #6]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d02e      	beq.n	800c6ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	b25b      	sxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	da16      	bge.n	800c686 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c664:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	88d2      	ldrh	r2, [r2, #6]
 800c66a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	88db      	ldrh	r3, [r3, #6]
 800c670:	2b07      	cmp	r3, #7
 800c672:	bf28      	it	cs
 800c674:	2307      	movcs	r3, #7
 800c676:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	89fa      	ldrh	r2, [r7, #14]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fb19 	bl	800dcb6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c684:	e085      	b.n	800c792 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	785a      	ldrb	r2, [r3, #1]
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	88db      	ldrh	r3, [r3, #6]
 800c694:	b2da      	uxtb	r2, r3
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c69c:	6939      	ldr	r1, [r7, #16]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	88db      	ldrh	r3, [r3, #6]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 fb32 	bl	800dd0e <USBD_CtlPrepareRx>
      break;
 800c6aa:	e072      	b.n	800c792 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	7850      	ldrb	r0, [r2, #1]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	4798      	blx	r3
      break;
 800c6be:	e068      	b.n	800c792 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	785b      	ldrb	r3, [r3, #1]
 800c6c4:	2b0b      	cmp	r3, #11
 800c6c6:	d852      	bhi.n	800c76e <USBD_CDC_Setup+0x162>
 800c6c8:	a201      	add	r2, pc, #4	; (adr r2, 800c6d0 <USBD_CDC_Setup+0xc4>)
 800c6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ce:	bf00      	nop
 800c6d0:	0800c701 	.word	0x0800c701
 800c6d4:	0800c77d 	.word	0x0800c77d
 800c6d8:	0800c76f 	.word	0x0800c76f
 800c6dc:	0800c76f 	.word	0x0800c76f
 800c6e0:	0800c76f 	.word	0x0800c76f
 800c6e4:	0800c76f 	.word	0x0800c76f
 800c6e8:	0800c76f 	.word	0x0800c76f
 800c6ec:	0800c76f 	.word	0x0800c76f
 800c6f0:	0800c76f 	.word	0x0800c76f
 800c6f4:	0800c76f 	.word	0x0800c76f
 800c6f8:	0800c72b 	.word	0x0800c72b
 800c6fc:	0800c755 	.word	0x0800c755
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d107      	bne.n	800c71c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c70c:	f107 030a 	add.w	r3, r7, #10
 800c710:	2202      	movs	r2, #2
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f001 face 	bl	800dcb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c71a:	e032      	b.n	800c782 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 fa58 	bl	800dbd4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c724:	2303      	movs	r3, #3
 800c726:	75fb      	strb	r3, [r7, #23]
          break;
 800c728:	e02b      	b.n	800c782 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b03      	cmp	r3, #3
 800c734:	d107      	bne.n	800c746 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c736:	f107 030d 	add.w	r3, r7, #13
 800c73a:	2201      	movs	r2, #1
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 fab9 	bl	800dcb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c744:	e01d      	b.n	800c782 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f001 fa43 	bl	800dbd4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c74e:	2303      	movs	r3, #3
 800c750:	75fb      	strb	r3, [r7, #23]
          break;
 800c752:	e016      	b.n	800c782 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d00f      	beq.n	800c780 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f001 fa36 	bl	800dbd4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c768:	2303      	movs	r3, #3
 800c76a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c76c:	e008      	b.n	800c780 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f001 fa2f 	bl	800dbd4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c776:	2303      	movs	r3, #3
 800c778:	75fb      	strb	r3, [r7, #23]
          break;
 800c77a:	e002      	b.n	800c782 <USBD_CDC_Setup+0x176>
          break;
 800c77c:	bf00      	nop
 800c77e:	e008      	b.n	800c792 <USBD_CDC_Setup+0x186>
          break;
 800c780:	bf00      	nop
      }
      break;
 800c782:	e006      	b.n	800c792 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 fa24 	bl	800dbd4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c78c:	2303      	movs	r3, #3
 800c78e:	75fb      	strb	r3, [r7, #23]
      break;
 800c790:	bf00      	nop
  }

  return (uint8_t)ret;
 800c792:	7dfb      	ldrb	r3, [r7, #23]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	e04f      	b.n	800c85e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c7c6:	78fa      	ldrb	r2, [r7, #3]
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	440b      	add	r3, r1
 800c7d4:	3318      	adds	r3, #24
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d029      	beq.n	800c830 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c7dc:	78fa      	ldrb	r2, [r7, #3]
 800c7de:	6879      	ldr	r1, [r7, #4]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	440b      	add	r3, r1
 800c7ea:	3318      	adds	r3, #24
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	78f9      	ldrb	r1, [r7, #3]
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	1a5b      	subs	r3, r3, r1
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4403      	add	r3, r0
 800c7fc:	3344      	adds	r3, #68	; 0x44
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	fbb2 f1f3 	udiv	r1, r2, r3
 800c804:	fb03 f301 	mul.w	r3, r3, r1
 800c808:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d110      	bne.n	800c830 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c80e:	78fa      	ldrb	r2, [r7, #3]
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	440b      	add	r3, r1
 800c81c:	3318      	adds	r3, #24
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c822:	78f9      	ldrb	r1, [r7, #3]
 800c824:	2300      	movs	r3, #0
 800c826:	2200      	movs	r2, #0
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f001 ffbe 	bl	800e7aa <USBD_LL_Transmit>
 800c82e:	e015      	b.n	800c85c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	2200      	movs	r2, #0
 800c834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c858:	78fa      	ldrb	r2, [r7, #3]
 800c85a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	460b      	mov	r3, r1
 800c870:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c878:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c884:	2303      	movs	r3, #3
 800c886:	e015      	b.n	800c8b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f001 ffce 	bl	800e82e <USBD_LL_GetRxDataSize>
 800c892:	4602      	mov	r2, r0
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e01b      	b.n	800c90e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d015      	beq.n	800c90c <USBD_CDC_EP0_RxReady+0x50>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c8e6:	2bff      	cmp	r3, #255	; 0xff
 800c8e8:	d010      	beq.n	800c90c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c8f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c900:	b292      	uxth	r2, r2
 800c902:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	22ff      	movs	r2, #255	; 0xff
 800c908:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2243      	movs	r2, #67	; 0x43
 800c924:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c926:	4b03      	ldr	r3, [pc, #12]	; (800c934 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr
 800c934:	20000094 	.word	0x20000094

0800c938 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2243      	movs	r2, #67	; 0x43
 800c944:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c946:	4b03      	ldr	r3, [pc, #12]	; (800c954 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c948:	4618      	mov	r0, r3
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	20000050 	.word	0x20000050

0800c958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2243      	movs	r2, #67	; 0x43
 800c964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c966:	4b03      	ldr	r3, [pc, #12]	; (800c974 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	200000d8 	.word	0x200000d8

0800c978 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	220a      	movs	r2, #10
 800c984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c986:	4b03      	ldr	r3, [pc, #12]	; (800c994 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	2000000c 	.word	0x2000000c

0800c998 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e004      	b.n	800c9b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b087      	sub	sp, #28
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e008      	b.n	800c9f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	371c      	adds	r7, #28
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c9fe:	b480      	push	{r7}
 800ca00:	b085      	sub	sp, #20
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e004      	b.n	800ca24 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ca40:	2301      	movs	r3, #1
 800ca42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e01a      	b.n	800ca88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d114      	bne.n	800ca86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ca7a:	2181      	movs	r1, #129	; 0x81
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 fe94 	bl	800e7aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800caaa:	2303      	movs	r3, #3
 800caac:	e016      	b.n	800cadc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	7c1b      	ldrb	r3, [r3, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d109      	bne.n	800caca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cabc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cac0:	2101      	movs	r1, #1
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 fe92 	bl	800e7ec <USBD_LL_PrepareReceive>
 800cac8:	e007      	b.n	800cada <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cad0:	2340      	movs	r3, #64	; 0x40
 800cad2:	2101      	movs	r1, #1
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f001 fe89 	bl	800e7ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	4613      	mov	r3, r2
 800caf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e01f      	b.n	800cb3c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	79fa      	ldrb	r2, [r7, #7]
 800cb2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f001 fd05 	bl	800e540 <USBD_LL_Init>
 800cb36:	4603      	mov	r3, r0
 800cb38:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d101      	bne.n	800cb5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e016      	b.n	800cb8a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00b      	beq.n	800cb88 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	f107 020e 	add.w	r2, r7, #14
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4798      	blx	r3
 800cb80:	4602      	mov	r2, r0
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b082      	sub	sp, #8
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f001 fd1c 	bl	800e5d8 <USBD_LL_Start>
 800cba0:	4603      	mov	r3, r0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d009      	beq.n	800cbee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	78fa      	ldrb	r2, [r7, #3]
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	4798      	blx	r3
 800cbea:	4603      	mov	r3, r0
 800cbec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d007      	beq.n	800cc1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	78fa      	ldrb	r2, [r7, #3]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3
  }

  return USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 ff90 	bl	800db60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cc5c:	f003 031f 	and.w	r3, r3, #31
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d01a      	beq.n	800cc9a <USBD_LL_SetupStage+0x72>
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d822      	bhi.n	800ccae <USBD_LL_SetupStage+0x86>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d002      	beq.n	800cc72 <USBD_LL_SetupStage+0x4a>
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d00a      	beq.n	800cc86 <USBD_LL_SetupStage+0x5e>
 800cc70:	e01d      	b.n	800ccae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fa62 	bl	800d144 <USBD_StdDevReq>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
      break;
 800cc84:	e020      	b.n	800ccc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fac6 	bl	800d220 <USBD_StdItfReq>
 800cc94:	4603      	mov	r3, r0
 800cc96:	73fb      	strb	r3, [r7, #15]
      break;
 800cc98:	e016      	b.n	800ccc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fb05 	bl	800d2b2 <USBD_StdEPReq>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ccac:	e00c      	b.n	800ccc8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ccb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	4619      	mov	r1, r3
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f001 fceb 	bl	800e698 <USBD_LL_StallEP>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73fb      	strb	r3, [r7, #15]
      break;
 800ccc6:	bf00      	nop
  }

  return ret;
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b086      	sub	sp, #24
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	607a      	str	r2, [r7, #4]
 800ccde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cce0:	7afb      	ldrb	r3, [r7, #11]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d138      	bne.n	800cd58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ccec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d14a      	bne.n	800cd8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	689a      	ldr	r2, [r3, #8]
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d913      	bls.n	800cd2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	689a      	ldr	r2, [r3, #8]
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	1ad2      	subs	r2, r2, r3
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	68da      	ldr	r2, [r3, #12]
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	bf28      	it	cs
 800cd1e:	4613      	movcs	r3, r2
 800cd20:	461a      	mov	r2, r3
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f001 f80f 	bl	800dd48 <USBD_CtlContinueRx>
 800cd2a:	e030      	b.n	800cd8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	d10b      	bne.n	800cd50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d005      	beq.n	800cd50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f001 f80a 	bl	800dd6a <USBD_CtlSendStatus>
 800cd56:	e01a      	b.n	800cd8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d114      	bne.n	800cd8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00e      	beq.n	800cd8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	7afa      	ldrb	r2, [r7, #11]
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	4798      	blx	r3
 800cd80:	4603      	mov	r3, r0
 800cd82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	e000      	b.n	800cd90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	460b      	mov	r3, r1
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d16b      	bne.n	800ce84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	3314      	adds	r3, #20
 800cdb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d156      	bne.n	800ce6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d914      	bls.n	800cdf2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	1ad2      	subs	r2, r2, r3
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	461a      	mov	r2, r3
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 ff84 	bl	800dcec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cde4:	2300      	movs	r3, #0
 800cde6:	2200      	movs	r2, #0
 800cde8:	2100      	movs	r1, #0
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f001 fcfe 	bl	800e7ec <USBD_LL_PrepareReceive>
 800cdf0:	e03b      	b.n	800ce6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	68da      	ldr	r2, [r3, #12]
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d11c      	bne.n	800ce38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d316      	bcc.n	800ce38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d20f      	bcs.n	800ce38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 ff65 	bl	800dcec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f001 fcdb 	bl	800e7ec <USBD_LL_PrepareReceive>
 800ce36:	e018      	b.n	800ce6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	2b03      	cmp	r3, #3
 800ce42:	d10b      	bne.n	800ce5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d005      	beq.n	800ce5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce5c:	2180      	movs	r1, #128	; 0x80
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f001 fc1a 	bl	800e698 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 ff93 	bl	800dd90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d122      	bne.n	800ceba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f7ff fe98 	bl	800cbaa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ce82:	e01a      	b.n	800ceba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	d114      	bne.n	800ceba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00e      	beq.n	800ceba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	7afa      	ldrb	r2, [r7, #11]
 800cea6:	4611      	mov	r1, r2
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	4798      	blx	r3
 800ceac:	4603      	mov	r3, r0
 800ceae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
 800ceb8:	e000      	b.n	800cebc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e02f      	b.n	800cf58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00f      	beq.n	800cf22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d009      	beq.n	800cf22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6852      	ldr	r2, [r2, #4]
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf22:	2340      	movs	r3, #64	; 0x40
 800cf24:	2200      	movs	r2, #0
 800cf26:	2100      	movs	r1, #0
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f001 fb70 	bl	800e60e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2240      	movs	r2, #64	; 0x40
 800cf3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf3e:	2340      	movs	r3, #64	; 0x40
 800cf40:	2200      	movs	r2, #0
 800cf42:	2180      	movs	r1, #128	; 0x80
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f001 fb62 	bl	800e60e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2240      	movs	r2, #64	; 0x40
 800cf54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	78fa      	ldrb	r2, [r7, #3]
 800cf70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2204      	movs	r2, #4
 800cf9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d106      	bne.n	800cfce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e012      	b.n	800d018 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d10b      	bne.n	800d016 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d005      	beq.n	800d016 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d036:	2303      	movs	r3, #3
 800d038:	e014      	b.n	800d064 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b03      	cmp	r3, #3
 800d044:	d10d      	bne.n	800d062 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	78fa      	ldrb	r2, [r7, #3]
 800d05c:	4611      	mov	r1, r2
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d082:	2303      	movs	r3, #3
 800d084:	e014      	b.n	800d0b0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d10d      	bne.n	800d0ae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d007      	beq.n	800d0ae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a6:	78fa      	ldrb	r2, [r7, #3]
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b082      	sub	sp, #8
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d009      	beq.n	800d0fc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	6852      	ldr	r2, [r2, #4]
 800d0f4:	b2d2      	uxtb	r2, r2
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	4798      	blx	r3
  }

  return USBD_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d106:	b480      	push	{r7}
 800d108:	b087      	sub	sp, #28
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	3301      	adds	r3, #1
 800d11c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d124:	8a3b      	ldrh	r3, [r7, #16]
 800d126:	021b      	lsls	r3, r3, #8
 800d128:	b21a      	sxth	r2, r3
 800d12a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d12e:	4313      	orrs	r3, r2
 800d130:	b21b      	sxth	r3, r3
 800d132:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d134:	89fb      	ldrh	r3, [r7, #14]
}
 800d136:	4618      	mov	r0, r3
 800d138:	371c      	adds	r7, #28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr
	...

0800d144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d15a:	2b40      	cmp	r3, #64	; 0x40
 800d15c:	d005      	beq.n	800d16a <USBD_StdDevReq+0x26>
 800d15e:	2b40      	cmp	r3, #64	; 0x40
 800d160:	d853      	bhi.n	800d20a <USBD_StdDevReq+0xc6>
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00b      	beq.n	800d17e <USBD_StdDevReq+0x3a>
 800d166:	2b20      	cmp	r3, #32
 800d168:	d14f      	bne.n	800d20a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	6839      	ldr	r1, [r7, #0]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	4798      	blx	r3
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]
      break;
 800d17c:	e04a      	b.n	800d214 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	785b      	ldrb	r3, [r3, #1]
 800d182:	2b09      	cmp	r3, #9
 800d184:	d83b      	bhi.n	800d1fe <USBD_StdDevReq+0xba>
 800d186:	a201      	add	r2, pc, #4	; (adr r2, 800d18c <USBD_StdDevReq+0x48>)
 800d188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18c:	0800d1e1 	.word	0x0800d1e1
 800d190:	0800d1f5 	.word	0x0800d1f5
 800d194:	0800d1ff 	.word	0x0800d1ff
 800d198:	0800d1eb 	.word	0x0800d1eb
 800d19c:	0800d1ff 	.word	0x0800d1ff
 800d1a0:	0800d1bf 	.word	0x0800d1bf
 800d1a4:	0800d1b5 	.word	0x0800d1b5
 800d1a8:	0800d1ff 	.word	0x0800d1ff
 800d1ac:	0800d1d7 	.word	0x0800d1d7
 800d1b0:	0800d1c9 	.word	0x0800d1c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f9de 	bl	800d578 <USBD_GetDescriptor>
          break;
 800d1bc:	e024      	b.n	800d208 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fb43 	bl	800d84c <USBD_SetAddress>
          break;
 800d1c6:	e01f      	b.n	800d208 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fb82 	bl	800d8d4 <USBD_SetConfig>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
          break;
 800d1d4:	e018      	b.n	800d208 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 fc21 	bl	800da20 <USBD_GetConfig>
          break;
 800d1de:	e013      	b.n	800d208 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fc52 	bl	800da8c <USBD_GetStatus>
          break;
 800d1e8:	e00e      	b.n	800d208 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fc81 	bl	800daf4 <USBD_SetFeature>
          break;
 800d1f2:	e009      	b.n	800d208 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fc90 	bl	800db1c <USBD_ClrFeature>
          break;
 800d1fc:	e004      	b.n	800d208 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fce7 	bl	800dbd4 <USBD_CtlError>
          break;
 800d206:	bf00      	nop
      }
      break;
 800d208:	e004      	b.n	800d214 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d20a:	6839      	ldr	r1, [r7, #0]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 fce1 	bl	800dbd4 <USBD_CtlError>
      break;
 800d212:	bf00      	nop
  }

  return ret;
 800d214:	7bfb      	ldrb	r3, [r7, #15]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop

0800d220 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d236:	2b40      	cmp	r3, #64	; 0x40
 800d238:	d005      	beq.n	800d246 <USBD_StdItfReq+0x26>
 800d23a:	2b40      	cmp	r3, #64	; 0x40
 800d23c:	d82f      	bhi.n	800d29e <USBD_StdItfReq+0x7e>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <USBD_StdItfReq+0x26>
 800d242:	2b20      	cmp	r3, #32
 800d244:	d12b      	bne.n	800d29e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	2b02      	cmp	r3, #2
 800d252:	d81d      	bhi.n	800d290 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	889b      	ldrh	r3, [r3, #4]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d813      	bhi.n	800d286 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	4798      	blx	r3
 800d26c:	4603      	mov	r3, r0
 800d26e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	88db      	ldrh	r3, [r3, #6]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d110      	bne.n	800d29a <USBD_StdItfReq+0x7a>
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10d      	bne.n	800d29a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fd73 	bl	800dd6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d284:	e009      	b.n	800d29a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fca3 	bl	800dbd4 <USBD_CtlError>
          break;
 800d28e:	e004      	b.n	800d29a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fc9e 	bl	800dbd4 <USBD_CtlError>
          break;
 800d298:	e000      	b.n	800d29c <USBD_StdItfReq+0x7c>
          break;
 800d29a:	bf00      	nop
      }
      break;
 800d29c:	e004      	b.n	800d2a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fc97 	bl	800dbd4 <USBD_CtlError>
      break;
 800d2a6:	bf00      	nop
  }

  return ret;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	889b      	ldrh	r3, [r3, #4]
 800d2c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2ce:	2b40      	cmp	r3, #64	; 0x40
 800d2d0:	d007      	beq.n	800d2e2 <USBD_StdEPReq+0x30>
 800d2d2:	2b40      	cmp	r3, #64	; 0x40
 800d2d4:	f200 8145 	bhi.w	800d562 <USBD_StdEPReq+0x2b0>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00c      	beq.n	800d2f6 <USBD_StdEPReq+0x44>
 800d2dc:	2b20      	cmp	r3, #32
 800d2de:	f040 8140 	bne.w	800d562 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	4798      	blx	r3
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2f4:	e13a      	b.n	800d56c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	785b      	ldrb	r3, [r3, #1]
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d007      	beq.n	800d30e <USBD_StdEPReq+0x5c>
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	f300 8129 	bgt.w	800d556 <USBD_StdEPReq+0x2a4>
 800d304:	2b00      	cmp	r3, #0
 800d306:	d07f      	beq.n	800d408 <USBD_StdEPReq+0x156>
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d03c      	beq.n	800d386 <USBD_StdEPReq+0xd4>
 800d30c:	e123      	b.n	800d556 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b02      	cmp	r3, #2
 800d318:	d002      	beq.n	800d320 <USBD_StdEPReq+0x6e>
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d016      	beq.n	800d34c <USBD_StdEPReq+0x9a>
 800d31e:	e02c      	b.n	800d37a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d320:	7bbb      	ldrb	r3, [r7, #14]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00d      	beq.n	800d342 <USBD_StdEPReq+0x90>
 800d326:	7bbb      	ldrb	r3, [r7, #14]
 800d328:	2b80      	cmp	r3, #128	; 0x80
 800d32a:	d00a      	beq.n	800d342 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d32c:	7bbb      	ldrb	r3, [r7, #14]
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f001 f9b1 	bl	800e698 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d336:	2180      	movs	r1, #128	; 0x80
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 f9ad 	bl	800e698 <USBD_LL_StallEP>
 800d33e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d340:	e020      	b.n	800d384 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fc45 	bl	800dbd4 <USBD_CtlError>
              break;
 800d34a:	e01b      	b.n	800d384 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	885b      	ldrh	r3, [r3, #2]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10e      	bne.n	800d372 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d354:	7bbb      	ldrb	r3, [r7, #14]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00b      	beq.n	800d372 <USBD_StdEPReq+0xc0>
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
 800d35c:	2b80      	cmp	r3, #128	; 0x80
 800d35e:	d008      	beq.n	800d372 <USBD_StdEPReq+0xc0>
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	88db      	ldrh	r3, [r3, #6]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d104      	bne.n	800d372 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d368:	7bbb      	ldrb	r3, [r7, #14]
 800d36a:	4619      	mov	r1, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 f993 	bl	800e698 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fcf9 	bl	800dd6a <USBD_CtlSendStatus>

              break;
 800d378:	e004      	b.n	800d384 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d37a:	6839      	ldr	r1, [r7, #0]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fc29 	bl	800dbd4 <USBD_CtlError>
              break;
 800d382:	bf00      	nop
          }
          break;
 800d384:	e0ec      	b.n	800d560 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d002      	beq.n	800d398 <USBD_StdEPReq+0xe6>
 800d392:	2b03      	cmp	r3, #3
 800d394:	d016      	beq.n	800d3c4 <USBD_StdEPReq+0x112>
 800d396:	e030      	b.n	800d3fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00d      	beq.n	800d3ba <USBD_StdEPReq+0x108>
 800d39e:	7bbb      	ldrb	r3, [r7, #14]
 800d3a0:	2b80      	cmp	r3, #128	; 0x80
 800d3a2:	d00a      	beq.n	800d3ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f001 f975 	bl	800e698 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ae:	2180      	movs	r1, #128	; 0x80
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f001 f971 	bl	800e698 <USBD_LL_StallEP>
 800d3b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3b8:	e025      	b.n	800d406 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fc09 	bl	800dbd4 <USBD_CtlError>
              break;
 800d3c2:	e020      	b.n	800d406 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	885b      	ldrh	r3, [r3, #2]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d11b      	bne.n	800d404 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d3cc:	7bbb      	ldrb	r3, [r7, #14]
 800d3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d004      	beq.n	800d3e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d3d6:	7bbb      	ldrb	r3, [r7, #14]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f001 f97b 	bl	800e6d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fcc2 	bl	800dd6a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	4798      	blx	r3
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d3f8:	e004      	b.n	800d404 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fbe9 	bl	800dbd4 <USBD_CtlError>
              break;
 800d402:	e000      	b.n	800d406 <USBD_StdEPReq+0x154>
              break;
 800d404:	bf00      	nop
          }
          break;
 800d406:	e0ab      	b.n	800d560 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b02      	cmp	r3, #2
 800d412:	d002      	beq.n	800d41a <USBD_StdEPReq+0x168>
 800d414:	2b03      	cmp	r3, #3
 800d416:	d032      	beq.n	800d47e <USBD_StdEPReq+0x1cc>
 800d418:	e097      	b.n	800d54a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <USBD_StdEPReq+0x17e>
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	2b80      	cmp	r3, #128	; 0x80
 800d424:	d004      	beq.n	800d430 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fbd3 	bl	800dbd4 <USBD_CtlError>
                break;
 800d42e:	e091      	b.n	800d554 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d434:	2b00      	cmp	r3, #0
 800d436:	da0b      	bge.n	800d450 <USBD_StdEPReq+0x19e>
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d43e:	4613      	mov	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	3310      	adds	r3, #16
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	4413      	add	r3, r2
 800d44c:	3304      	adds	r3, #4
 800d44e:	e00b      	b.n	800d468 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d450:	7bbb      	ldrb	r3, [r7, #14]
 800d452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d456:	4613      	mov	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4413      	add	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	4413      	add	r3, r2
 800d466:	3304      	adds	r3, #4
 800d468:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2200      	movs	r2, #0
 800d46e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2202      	movs	r2, #2
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fc1d 	bl	800dcb6 <USBD_CtlSendData>
              break;
 800d47c:	e06a      	b.n	800d554 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d47e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d482:	2b00      	cmp	r3, #0
 800d484:	da11      	bge.n	800d4aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d486:	7bbb      	ldrb	r3, [r7, #14]
 800d488:	f003 020f 	and.w	r2, r3, #15
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	4613      	mov	r3, r2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	4413      	add	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	440b      	add	r3, r1
 800d498:	3324      	adds	r3, #36	; 0x24
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d117      	bne.n	800d4d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fb96 	bl	800dbd4 <USBD_CtlError>
                  break;
 800d4a8:	e054      	b.n	800d554 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4aa:	7bbb      	ldrb	r3, [r7, #14]
 800d4ac:	f003 020f 	and.w	r2, r3, #15
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	440b      	add	r3, r1
 800d4bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d104      	bne.n	800d4d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fb83 	bl	800dbd4 <USBD_CtlError>
                  break;
 800d4ce:	e041      	b.n	800d554 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	da0b      	bge.n	800d4f0 <USBD_StdEPReq+0x23e>
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4de:	4613      	mov	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	3310      	adds	r3, #16
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	e00b      	b.n	800d508 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	4413      	add	r3, r2
 800d506:	3304      	adds	r3, #4
 800d508:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <USBD_StdEPReq+0x264>
 800d510:	7bbb      	ldrb	r3, [r7, #14]
 800d512:	2b80      	cmp	r3, #128	; 0x80
 800d514:	d103      	bne.n	800d51e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	e00e      	b.n	800d53c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d51e:	7bbb      	ldrb	r3, [r7, #14]
 800d520:	4619      	mov	r1, r3
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f001 f8f6 	bl	800e714 <USBD_LL_IsStallEP>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	2201      	movs	r2, #1
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	e002      	b.n	800d53c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2202      	movs	r2, #2
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fbb7 	bl	800dcb6 <USBD_CtlSendData>
              break;
 800d548:	e004      	b.n	800d554 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fb41 	bl	800dbd4 <USBD_CtlError>
              break;
 800d552:	bf00      	nop
          }
          break;
 800d554:	e004      	b.n	800d560 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fb3b 	bl	800dbd4 <USBD_CtlError>
          break;
 800d55e:	bf00      	nop
      }
      break;
 800d560:	e004      	b.n	800d56c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fb35 	bl	800dbd4 <USBD_CtlError>
      break;
 800d56a:	bf00      	nop
  }

  return ret;
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
	...

0800d578 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d586:	2300      	movs	r3, #0
 800d588:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d58a:	2300      	movs	r3, #0
 800d58c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	885b      	ldrh	r3, [r3, #2]
 800d592:	0a1b      	lsrs	r3, r3, #8
 800d594:	b29b      	uxth	r3, r3
 800d596:	3b01      	subs	r3, #1
 800d598:	2b06      	cmp	r3, #6
 800d59a:	f200 8128 	bhi.w	800d7ee <USBD_GetDescriptor+0x276>
 800d59e:	a201      	add	r2, pc, #4	; (adr r2, 800d5a4 <USBD_GetDescriptor+0x2c>)
 800d5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a4:	0800d5c1 	.word	0x0800d5c1
 800d5a8:	0800d5d9 	.word	0x0800d5d9
 800d5ac:	0800d619 	.word	0x0800d619
 800d5b0:	0800d7ef 	.word	0x0800d7ef
 800d5b4:	0800d7ef 	.word	0x0800d7ef
 800d5b8:	0800d78f 	.word	0x0800d78f
 800d5bc:	0800d7bb 	.word	0x0800d7bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	7c12      	ldrb	r2, [r2, #16]
 800d5cc:	f107 0108 	add.w	r1, r7, #8
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	4798      	blx	r3
 800d5d4:	60f8      	str	r0, [r7, #12]
      break;
 800d5d6:	e112      	b.n	800d7fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7c1b      	ldrb	r3, [r3, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10d      	bne.n	800d5fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e8:	f107 0208 	add.w	r2, r7, #8
 800d5ec:	4610      	mov	r0, r2
 800d5ee:	4798      	blx	r3
 800d5f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d5fa:	e100      	b.n	800d7fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d604:	f107 0208 	add.w	r2, r7, #8
 800d608:	4610      	mov	r0, r2
 800d60a:	4798      	blx	r3
 800d60c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3301      	adds	r3, #1
 800d612:	2202      	movs	r2, #2
 800d614:	701a      	strb	r2, [r3, #0]
      break;
 800d616:	e0f2      	b.n	800d7fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	885b      	ldrh	r3, [r3, #2]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b05      	cmp	r3, #5
 800d620:	f200 80ac 	bhi.w	800d77c <USBD_GetDescriptor+0x204>
 800d624:	a201      	add	r2, pc, #4	; (adr r2, 800d62c <USBD_GetDescriptor+0xb4>)
 800d626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62a:	bf00      	nop
 800d62c:	0800d645 	.word	0x0800d645
 800d630:	0800d679 	.word	0x0800d679
 800d634:	0800d6ad 	.word	0x0800d6ad
 800d638:	0800d6e1 	.word	0x0800d6e1
 800d63c:	0800d715 	.word	0x0800d715
 800d640:	0800d749 	.word	0x0800d749
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	7c12      	ldrb	r2, [r2, #16]
 800d65c:	f107 0108 	add.w	r1, r7, #8
 800d660:	4610      	mov	r0, r2
 800d662:	4798      	blx	r3
 800d664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d666:	e091      	b.n	800d78c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d668:	6839      	ldr	r1, [r7, #0]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fab2 	bl	800dbd4 <USBD_CtlError>
            err++;
 800d670:	7afb      	ldrb	r3, [r7, #11]
 800d672:	3301      	adds	r3, #1
 800d674:	72fb      	strb	r3, [r7, #11]
          break;
 800d676:	e089      	b.n	800d78c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	7c12      	ldrb	r2, [r2, #16]
 800d690:	f107 0108 	add.w	r1, r7, #8
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
 800d698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d69a:	e077      	b.n	800d78c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fa98 	bl	800dbd4 <USBD_CtlError>
            err++;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6aa:	e06f      	b.n	800d78c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	7c12      	ldrb	r2, [r2, #16]
 800d6c4:	f107 0108 	add.w	r1, r7, #8
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ce:	e05d      	b.n	800d78c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fa7e 	bl	800dbd4 <USBD_CtlError>
            err++;
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6de:	e055      	b.n	800d78c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00b      	beq.n	800d704 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	7c12      	ldrb	r2, [r2, #16]
 800d6f8:	f107 0108 	add.w	r1, r7, #8
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	4798      	blx	r3
 800d700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d702:	e043      	b.n	800d78c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fa64 	bl	800dbd4 <USBD_CtlError>
            err++;
 800d70c:	7afb      	ldrb	r3, [r7, #11]
 800d70e:	3301      	adds	r3, #1
 800d710:	72fb      	strb	r3, [r7, #11]
          break;
 800d712:	e03b      	b.n	800d78c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d726:	695b      	ldr	r3, [r3, #20]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	7c12      	ldrb	r2, [r2, #16]
 800d72c:	f107 0108 	add.w	r1, r7, #8
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d736:	e029      	b.n	800d78c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fa4a 	bl	800dbd4 <USBD_CtlError>
            err++;
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	3301      	adds	r3, #1
 800d744:	72fb      	strb	r3, [r7, #11]
          break;
 800d746:	e021      	b.n	800d78c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	7c12      	ldrb	r2, [r2, #16]
 800d760:	f107 0108 	add.w	r1, r7, #8
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d76a:	e00f      	b.n	800d78c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa30 	bl	800dbd4 <USBD_CtlError>
            err++;
 800d774:	7afb      	ldrb	r3, [r7, #11]
 800d776:	3301      	adds	r3, #1
 800d778:	72fb      	strb	r3, [r7, #11]
          break;
 800d77a:	e007      	b.n	800d78c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d77c:	6839      	ldr	r1, [r7, #0]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fa28 	bl	800dbd4 <USBD_CtlError>
          err++;
 800d784:	7afb      	ldrb	r3, [r7, #11]
 800d786:	3301      	adds	r3, #1
 800d788:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d78a:	bf00      	nop
      }
      break;
 800d78c:	e037      	b.n	800d7fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	7c1b      	ldrb	r3, [r3, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d109      	bne.n	800d7aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79e:	f107 0208 	add.w	r2, r7, #8
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	4798      	blx	r3
 800d7a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7a8:	e029      	b.n	800d7fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fa11 	bl	800dbd4 <USBD_CtlError>
        err++;
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d7b8:	e021      	b.n	800d7fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	7c1b      	ldrb	r3, [r3, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10d      	bne.n	800d7de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ca:	f107 0208 	add.w	r2, r7, #8
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	4798      	blx	r3
 800d7d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	2207      	movs	r2, #7
 800d7da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7dc:	e00f      	b.n	800d7fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 f9f7 	bl	800dbd4 <USBD_CtlError>
        err++;
 800d7e6:	7afb      	ldrb	r3, [r7, #11]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800d7ec:	e007      	b.n	800d7fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f9ef 	bl	800dbd4 <USBD_CtlError>
      err++;
 800d7f6:	7afb      	ldrb	r3, [r7, #11]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d7fc:	bf00      	nop
  }

  if (err != 0U)
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d11e      	bne.n	800d842 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	88db      	ldrh	r3, [r3, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d016      	beq.n	800d83a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d80c:	893b      	ldrh	r3, [r7, #8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00e      	beq.n	800d830 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	88da      	ldrh	r2, [r3, #6]
 800d816:	893b      	ldrh	r3, [r7, #8]
 800d818:	4293      	cmp	r3, r2
 800d81a:	bf28      	it	cs
 800d81c:	4613      	movcs	r3, r2
 800d81e:	b29b      	uxth	r3, r3
 800d820:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d822:	893b      	ldrh	r3, [r7, #8]
 800d824:	461a      	mov	r2, r3
 800d826:	68f9      	ldr	r1, [r7, #12]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fa44 	bl	800dcb6 <USBD_CtlSendData>
 800d82e:	e009      	b.n	800d844 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d830:	6839      	ldr	r1, [r7, #0]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f9ce 	bl	800dbd4 <USBD_CtlError>
 800d838:	e004      	b.n	800d844 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa95 	bl	800dd6a <USBD_CtlSendStatus>
 800d840:	e000      	b.n	800d844 <USBD_GetDescriptor+0x2cc>
    return;
 800d842:	bf00      	nop
  }
}
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop

0800d84c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	889b      	ldrh	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d131      	bne.n	800d8c2 <USBD_SetAddress+0x76>
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	88db      	ldrh	r3, [r3, #6]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d12d      	bne.n	800d8c2 <USBD_SetAddress+0x76>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	885b      	ldrh	r3, [r3, #2]
 800d86a:	2b7f      	cmp	r3, #127	; 0x7f
 800d86c:	d829      	bhi.n	800d8c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	885b      	ldrh	r3, [r3, #2]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d878:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b03      	cmp	r3, #3
 800d884:	d104      	bne.n	800d890 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f9a3 	bl	800dbd4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d88e:	e01d      	b.n	800d8cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7bfa      	ldrb	r2, [r7, #15]
 800d894:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	4619      	mov	r1, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 ff65 	bl	800e76c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fa61 	bl	800dd6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d004      	beq.n	800d8b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2202      	movs	r2, #2
 800d8b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b6:	e009      	b.n	800d8cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8c0:	e004      	b.n	800d8cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f985 	bl	800dbd4 <USBD_CtlError>
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	bf00      	nop
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	885b      	ldrh	r3, [r3, #2]
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	4b4c      	ldr	r3, [pc, #304]	; (800da1c <USBD_SetConfig+0x148>)
 800d8ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d8ec:	4b4b      	ldr	r3, [pc, #300]	; (800da1c <USBD_SetConfig+0x148>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d905      	bls.n	800d900 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d8f4:	6839      	ldr	r1, [r7, #0]
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f96c 	bl	800dbd4 <USBD_CtlError>
    return USBD_FAIL;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e088      	b.n	800da12 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d906:	b2db      	uxtb	r3, r3
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d002      	beq.n	800d912 <USBD_SetConfig+0x3e>
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d025      	beq.n	800d95c <USBD_SetConfig+0x88>
 800d910:	e071      	b.n	800d9f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d912:	4b42      	ldr	r3, [pc, #264]	; (800da1c <USBD_SetConfig+0x148>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d01c      	beq.n	800d954 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d91a:	4b40      	ldr	r3, [pc, #256]	; (800da1c <USBD_SetConfig+0x148>)
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d924:	4b3d      	ldr	r3, [pc, #244]	; (800da1c <USBD_SetConfig+0x148>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff f948 	bl	800cbc0 <USBD_SetClassConfig>
 800d930:	4603      	mov	r3, r0
 800d932:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d004      	beq.n	800d944 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f949 	bl	800dbd4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d942:	e065      	b.n	800da10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 fa10 	bl	800dd6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2203      	movs	r2, #3
 800d94e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d952:	e05d      	b.n	800da10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fa08 	bl	800dd6a <USBD_CtlSendStatus>
      break;
 800d95a:	e059      	b.n	800da10 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d95c:	4b2f      	ldr	r3, [pc, #188]	; (800da1c <USBD_SetConfig+0x148>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d112      	bne.n	800d98a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d96c:	4b2b      	ldr	r3, [pc, #172]	; (800da1c <USBD_SetConfig+0x148>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d976:	4b29      	ldr	r3, [pc, #164]	; (800da1c <USBD_SetConfig+0x148>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff f93b 	bl	800cbf8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f9f1 	bl	800dd6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d988:	e042      	b.n	800da10 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d98a:	4b24      	ldr	r3, [pc, #144]	; (800da1c <USBD_SetConfig+0x148>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d02a      	beq.n	800d9ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	4619      	mov	r1, r3
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7ff f929 	bl	800cbf8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9a6:	4b1d      	ldr	r3, [pc, #116]	; (800da1c <USBD_SetConfig+0x148>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9b0:	4b1a      	ldr	r3, [pc, #104]	; (800da1c <USBD_SetConfig+0x148>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff f902 	bl	800cbc0 <USBD_SetClassConfig>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00f      	beq.n	800d9e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f903 	bl	800dbd4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff f90e 	bl	800cbf8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2202      	movs	r2, #2
 800d9e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d9e4:	e014      	b.n	800da10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 f9bf 	bl	800dd6a <USBD_CtlSendStatus>
      break;
 800d9ec:	e010      	b.n	800da10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f9bb 	bl	800dd6a <USBD_CtlSendStatus>
      break;
 800d9f4:	e00c      	b.n	800da10 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f8eb 	bl	800dbd4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9fe:	4b07      	ldr	r3, [pc, #28]	; (800da1c <USBD_SetConfig+0x148>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff f8f7 	bl	800cbf8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da0a:	2303      	movs	r3, #3
 800da0c:	73fb      	strb	r3, [r7, #15]
      break;
 800da0e:	bf00      	nop
  }

  return ret;
 800da10:	7bfb      	ldrb	r3, [r7, #15]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20000204 	.word	0x20000204

0800da20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	88db      	ldrh	r3, [r3, #6]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d004      	beq.n	800da3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f8cd 	bl	800dbd4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da3a:	e023      	b.n	800da84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da42:	b2db      	uxtb	r3, r3
 800da44:	2b02      	cmp	r3, #2
 800da46:	dc02      	bgt.n	800da4e <USBD_GetConfig+0x2e>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	dc03      	bgt.n	800da54 <USBD_GetConfig+0x34>
 800da4c:	e015      	b.n	800da7a <USBD_GetConfig+0x5a>
 800da4e:	2b03      	cmp	r3, #3
 800da50:	d00b      	beq.n	800da6a <USBD_GetConfig+0x4a>
 800da52:	e012      	b.n	800da7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3308      	adds	r3, #8
 800da5e:	2201      	movs	r2, #1
 800da60:	4619      	mov	r1, r3
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 f927 	bl	800dcb6 <USBD_CtlSendData>
        break;
 800da68:	e00c      	b.n	800da84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3304      	adds	r3, #4
 800da6e:	2201      	movs	r2, #1
 800da70:	4619      	mov	r1, r3
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f91f 	bl	800dcb6 <USBD_CtlSendData>
        break;
 800da78:	e004      	b.n	800da84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f8a9 	bl	800dbd4 <USBD_CtlError>
        break;
 800da82:	bf00      	nop
}
 800da84:	bf00      	nop
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	3b01      	subs	r3, #1
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d81e      	bhi.n	800dae2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	88db      	ldrh	r3, [r3, #6]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d004      	beq.n	800dab6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800daac:	6839      	ldr	r1, [r7, #0]
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f890 	bl	800dbd4 <USBD_CtlError>
        break;
 800dab4:	e01a      	b.n	800daec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d005      	beq.n	800dad2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	f043 0202 	orr.w	r2, r3, #2
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	330c      	adds	r3, #12
 800dad6:	2202      	movs	r2, #2
 800dad8:	4619      	mov	r1, r3
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f8eb 	bl	800dcb6 <USBD_CtlSendData>
      break;
 800dae0:	e004      	b.n	800daec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dae2:	6839      	ldr	r1, [r7, #0]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 f875 	bl	800dbd4 <USBD_CtlError>
      break;
 800daea:	bf00      	nop
  }
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	885b      	ldrh	r3, [r3, #2]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d106      	bne.n	800db14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2201      	movs	r2, #1
 800db0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f92b 	bl	800dd6a <USBD_CtlSendStatus>
  }
}
 800db14:	bf00      	nop
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	3b01      	subs	r3, #1
 800db30:	2b02      	cmp	r3, #2
 800db32:	d80b      	bhi.n	800db4c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	885b      	ldrh	r3, [r3, #2]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d10c      	bne.n	800db56 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f910 	bl	800dd6a <USBD_CtlSendStatus>
      }
      break;
 800db4a:	e004      	b.n	800db56 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800db4c:	6839      	ldr	r1, [r7, #0]
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f840 	bl	800dbd4 <USBD_CtlError>
      break;
 800db54:	e000      	b.n	800db58 <USBD_ClrFeature+0x3c>
      break;
 800db56:	bf00      	nop
  }
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	781a      	ldrb	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	3301      	adds	r3, #1
 800db88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	f7ff fabb 	bl	800d106 <SWAPBYTE>
 800db90:	4603      	mov	r3, r0
 800db92:	461a      	mov	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3301      	adds	r3, #1
 800db9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	3301      	adds	r3, #1
 800dba2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f7ff faae 	bl	800d106 <SWAPBYTE>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	461a      	mov	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f7ff faa1 	bl	800d106 <SWAPBYTE>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	80da      	strh	r2, [r3, #6]
}
 800dbcc:	bf00      	nop
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbde:	2180      	movs	r1, #128	; 0x80
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 fd59 	bl	800e698 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fd55 	bl	800e698 <USBD_LL_StallEP>
}
 800dbee:	bf00      	nop
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b086      	sub	sp, #24
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	60f8      	str	r0, [r7, #12]
 800dbfe:	60b9      	str	r1, [r7, #8]
 800dc00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc02:	2300      	movs	r3, #0
 800dc04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d036      	beq.n	800dc7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc10:	6938      	ldr	r0, [r7, #16]
 800dc12:	f000 f836 	bl	800dc82 <USBD_GetLen>
 800dc16:	4603      	mov	r3, r0
 800dc18:	3301      	adds	r3, #1
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	4413      	add	r3, r2
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	7812      	ldrb	r2, [r2, #0]
 800dc2e:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	3301      	adds	r3, #1
 800dc34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc36:	7dfb      	ldrb	r3, [r7, #23]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	2203      	movs	r2, #3
 800dc3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	3301      	adds	r3, #1
 800dc44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc46:	e013      	b.n	800dc70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dc48:	7dfb      	ldrb	r3, [r7, #23]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	7812      	ldrb	r2, [r2, #0]
 800dc52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	3301      	adds	r3, #1
 800dc58:	613b      	str	r3, [r7, #16]
    idx++;
 800dc5a:	7dfb      	ldrb	r3, [r7, #23]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	4413      	add	r3, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	701a      	strb	r2, [r3, #0]
    idx++;
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1e7      	bne.n	800dc48 <USBD_GetString+0x52>
 800dc78:	e000      	b.n	800dc7c <USBD_GetString+0x86>
    return;
 800dc7a:	bf00      	nop
  }
}
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc82:	b480      	push	{r7}
 800dc84:	b085      	sub	sp, #20
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc92:	e005      	b.n	800dca0 <USBD_GetLen+0x1e>
  {
    len++;
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	3301      	adds	r3, #1
 800dc98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1f5      	bne.n	800dc94 <USBD_GetLen+0x12>
  }

  return len;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
 800dcbe:	60b9      	str	r1, [r7, #8]
 800dcc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	2100      	movs	r1, #0
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 fd64 	bl	800e7aa <USBD_LL_Transmit>

  return USBD_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f000 fd53 	bl	800e7aa <USBD_LL_Transmit>

  return USBD_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2203      	movs	r2, #3
 800dd1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	2100      	movs	r1, #0
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f000 fd57 	bl	800e7ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	2100      	movs	r1, #0
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 fd46 	bl	800e7ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2204      	movs	r2, #4
 800dd76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2100      	movs	r1, #0
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fd12 	bl	800e7aa <USBD_LL_Transmit>

  return USBD_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2205      	movs	r2, #5
 800dd9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dda0:	2300      	movs	r3, #0
 800dda2:	2200      	movs	r2, #0
 800dda4:	2100      	movs	r1, #0
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fd20 	bl	800e7ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	4912      	ldr	r1, [pc, #72]	; (800de08 <MX_USB_DEVICE_Init+0x50>)
 800ddc0:	4812      	ldr	r0, [pc, #72]	; (800de0c <MX_USB_DEVICE_Init+0x54>)
 800ddc2:	f7fe fe8f 	bl	800cae4 <USBD_Init>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ddcc:	f7f3 fa40 	bl	8001250 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ddd0:	490f      	ldr	r1, [pc, #60]	; (800de10 <MX_USB_DEVICE_Init+0x58>)
 800ddd2:	480e      	ldr	r0, [pc, #56]	; (800de0c <MX_USB_DEVICE_Init+0x54>)
 800ddd4:	f7fe feb6 	bl	800cb44 <USBD_RegisterClass>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d001      	beq.n	800dde2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ddde:	f7f3 fa37 	bl	8001250 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dde2:	490c      	ldr	r1, [pc, #48]	; (800de14 <MX_USB_DEVICE_Init+0x5c>)
 800dde4:	4809      	ldr	r0, [pc, #36]	; (800de0c <MX_USB_DEVICE_Init+0x54>)
 800dde6:	f7fe fdd7 	bl	800c998 <USBD_CDC_RegisterInterface>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ddf0:	f7f3 fa2e 	bl	8001250 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ddf4:	4805      	ldr	r0, [pc, #20]	; (800de0c <MX_USB_DEVICE_Init+0x54>)
 800ddf6:	f7fe fecc 	bl	800cb92 <USBD_Start>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de00:	f7f3 fa26 	bl	8001250 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de04:	bf00      	nop
 800de06:	bd80      	pop	{r7, pc}
 800de08:	20000130 	.word	0x20000130
 800de0c:	20001250 	.word	0x20001250
 800de10:	20000018 	.word	0x20000018
 800de14:	2000011c 	.word	0x2000011c

0800de18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de1c:	2200      	movs	r2, #0
 800de1e:	4905      	ldr	r1, [pc, #20]	; (800de34 <CDC_Init_FS+0x1c>)
 800de20:	4805      	ldr	r0, [pc, #20]	; (800de38 <CDC_Init_FS+0x20>)
 800de22:	f7fe fdce 	bl	800c9c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de26:	4905      	ldr	r1, [pc, #20]	; (800de3c <CDC_Init_FS+0x24>)
 800de28:	4803      	ldr	r0, [pc, #12]	; (800de38 <CDC_Init_FS+0x20>)
 800de2a:	f7fe fde8 	bl	800c9fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800de30:	4618      	mov	r0, r3
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20001d20 	.word	0x20001d20
 800de38:	20001250 	.word	0x20001250
 800de3c:	20001520 	.word	0x20001520

0800de40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de40:	b480      	push	{r7}
 800de42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de46:	4618      	mov	r0, r3
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	4603      	mov	r3, r0
 800de58:	6039      	str	r1, [r7, #0]
 800de5a:	71fb      	strb	r3, [r7, #7]
 800de5c:	4613      	mov	r3, r2
 800de5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de60:	79fb      	ldrb	r3, [r7, #7]
 800de62:	2b23      	cmp	r3, #35	; 0x23
 800de64:	f200 808c 	bhi.w	800df80 <CDC_Control_FS+0x130>
 800de68:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <CDC_Control_FS+0x20>)
 800de6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6e:	bf00      	nop
 800de70:	0800df81 	.word	0x0800df81
 800de74:	0800df81 	.word	0x0800df81
 800de78:	0800df81 	.word	0x0800df81
 800de7c:	0800df81 	.word	0x0800df81
 800de80:	0800df81 	.word	0x0800df81
 800de84:	0800df81 	.word	0x0800df81
 800de88:	0800df81 	.word	0x0800df81
 800de8c:	0800df81 	.word	0x0800df81
 800de90:	0800df81 	.word	0x0800df81
 800de94:	0800df81 	.word	0x0800df81
 800de98:	0800df81 	.word	0x0800df81
 800de9c:	0800df81 	.word	0x0800df81
 800dea0:	0800df81 	.word	0x0800df81
 800dea4:	0800df81 	.word	0x0800df81
 800dea8:	0800df81 	.word	0x0800df81
 800deac:	0800df81 	.word	0x0800df81
 800deb0:	0800df81 	.word	0x0800df81
 800deb4:	0800df81 	.word	0x0800df81
 800deb8:	0800df81 	.word	0x0800df81
 800debc:	0800df81 	.word	0x0800df81
 800dec0:	0800df81 	.word	0x0800df81
 800dec4:	0800df81 	.word	0x0800df81
 800dec8:	0800df81 	.word	0x0800df81
 800decc:	0800df81 	.word	0x0800df81
 800ded0:	0800df81 	.word	0x0800df81
 800ded4:	0800df81 	.word	0x0800df81
 800ded8:	0800df81 	.word	0x0800df81
 800dedc:	0800df81 	.word	0x0800df81
 800dee0:	0800df81 	.word	0x0800df81
 800dee4:	0800df81 	.word	0x0800df81
 800dee8:	0800df81 	.word	0x0800df81
 800deec:	0800df81 	.word	0x0800df81
 800def0:	0800df01 	.word	0x0800df01
 800def4:	0800df3b 	.word	0x0800df3b
 800def8:	0800df81 	.word	0x0800df81
 800defc:	0800df81 	.word	0x0800df81
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	USB_VCP_Parameters[0] = pbuf[0];
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	4b22      	ldr	r3, [pc, #136]	; (800df90 <CDC_Control_FS+0x140>)
 800df06:	701a      	strb	r2, [r3, #0]
    	USB_VCP_Parameters[1] = pbuf[1];
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	785a      	ldrb	r2, [r3, #1]
 800df0c:	4b20      	ldr	r3, [pc, #128]	; (800df90 <CDC_Control_FS+0x140>)
 800df0e:	705a      	strb	r2, [r3, #1]
    	USB_VCP_Parameters[2] = pbuf[2];
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	789a      	ldrb	r2, [r3, #2]
 800df14:	4b1e      	ldr	r3, [pc, #120]	; (800df90 <CDC_Control_FS+0x140>)
 800df16:	709a      	strb	r2, [r3, #2]
    	USB_VCP_Parameters[3] = pbuf[3];
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	78da      	ldrb	r2, [r3, #3]
 800df1c:	4b1c      	ldr	r3, [pc, #112]	; (800df90 <CDC_Control_FS+0x140>)
 800df1e:	70da      	strb	r2, [r3, #3]
    	USB_VCP_Parameters[4] = pbuf[4];
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	791a      	ldrb	r2, [r3, #4]
 800df24:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <CDC_Control_FS+0x140>)
 800df26:	711a      	strb	r2, [r3, #4]
    	USB_VCP_Parameters[5] = pbuf[5];
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	795a      	ldrb	r2, [r3, #5]
 800df2c:	4b18      	ldr	r3, [pc, #96]	; (800df90 <CDC_Control_FS+0x140>)
 800df2e:	715a      	strb	r2, [r3, #5]
    	USB_VCP_Parameters[6] = pbuf[6];
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	799a      	ldrb	r2, [r3, #6]
 800df34:	4b16      	ldr	r3, [pc, #88]	; (800df90 <CDC_Control_FS+0x140>)
 800df36:	719a      	strb	r2, [r3, #6]

    break;
 800df38:	e023      	b.n	800df82 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = USB_VCP_Parameters[0];
 800df3a:	4b15      	ldr	r3, [pc, #84]	; (800df90 <CDC_Control_FS+0x140>)
 800df3c:	781a      	ldrb	r2, [r3, #0]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = USB_VCP_Parameters[1];
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	4a12      	ldr	r2, [pc, #72]	; (800df90 <CDC_Control_FS+0x140>)
 800df48:	7852      	ldrb	r2, [r2, #1]
 800df4a:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = USB_VCP_Parameters[2];
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	3302      	adds	r3, #2
 800df50:	4a0f      	ldr	r2, [pc, #60]	; (800df90 <CDC_Control_FS+0x140>)
 800df52:	7892      	ldrb	r2, [r2, #2]
 800df54:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = USB_VCP_Parameters[3];
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	3303      	adds	r3, #3
 800df5a:	4a0d      	ldr	r2, [pc, #52]	; (800df90 <CDC_Control_FS+0x140>)
 800df5c:	78d2      	ldrb	r2, [r2, #3]
 800df5e:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = USB_VCP_Parameters[4];
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	3304      	adds	r3, #4
 800df64:	4a0a      	ldr	r2, [pc, #40]	; (800df90 <CDC_Control_FS+0x140>)
 800df66:	7912      	ldrb	r2, [r2, #4]
 800df68:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = USB_VCP_Parameters[5];
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	3305      	adds	r3, #5
 800df6e:	4a08      	ldr	r2, [pc, #32]	; (800df90 <CDC_Control_FS+0x140>)
 800df70:	7952      	ldrb	r2, [r2, #5]
 800df72:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = USB_VCP_Parameters[6];
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	3306      	adds	r3, #6
 800df78:	4a05      	ldr	r2, [pc, #20]	; (800df90 <CDC_Control_FS+0x140>)
 800df7a:	7992      	ldrb	r2, [r2, #6]
 800df7c:	701a      	strb	r2, [r3, #0]

    break;
 800df7e:	e000      	b.n	800df82 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df80:	bf00      	nop
  }

  return (USBD_OK);
 800df82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	20000430 	.word	0x20000430

0800df94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	4808      	ldr	r0, [pc, #32]	; (800dfc4 <CDC_Receive_FS+0x30>)
 800dfa2:	f7fe fd2c 	bl	800c9fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dfa6:	4807      	ldr	r0, [pc, #28]	; (800dfc4 <CDC_Receive_FS+0x30>)
 800dfa8:	f7fe fd72 	bl	800ca90 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7f4 fa2f 	bl	8002418 <PDM_USB_Process>

  return (USBD_OK);
 800dfba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	20001250 	.word	0x20001250

0800dfc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dfd8:	4b0d      	ldr	r3, [pc, #52]	; (800e010 <CDC_Transmit_FS+0x48>)
 800dfda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e00b      	b.n	800e006 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dfee:	887b      	ldrh	r3, [r7, #2]
 800dff0:	461a      	mov	r2, r3
 800dff2:	6879      	ldr	r1, [r7, #4]
 800dff4:	4806      	ldr	r0, [pc, #24]	; (800e010 <CDC_Transmit_FS+0x48>)
 800dff6:	f7fe fce4 	bl	800c9c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dffa:	4805      	ldr	r0, [pc, #20]	; (800e010 <CDC_Transmit_FS+0x48>)
 800dffc:	f7fe fd18 	bl	800ca30 <USBD_CDC_TransmitPacket>
 800e000:	4603      	mov	r3, r0
 800e002:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e004:	7bfb      	ldrb	r3, [r7, #15]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	20001250 	.word	0x20001250

0800e014 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	371c      	adds	r7, #28
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
	...

0800e038 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	6039      	str	r1, [r7, #0]
 800e042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2212      	movs	r2, #18
 800e048:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e04a:	4b03      	ldr	r3, [pc, #12]	; (800e058 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr
 800e058:	2000014c 	.word	0x2000014c

0800e05c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	4603      	mov	r3, r0
 800e064:	6039      	str	r1, [r7, #0]
 800e066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2204      	movs	r2, #4
 800e06c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e06e:	4b03      	ldr	r3, [pc, #12]	; (800e07c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	20000160 	.word	0x20000160

0800e080 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	6039      	str	r1, [r7, #0]
 800e08a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e08c:	79fb      	ldrb	r3, [r7, #7]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d105      	bne.n	800e09e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	4907      	ldr	r1, [pc, #28]	; (800e0b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e096:	4808      	ldr	r0, [pc, #32]	; (800e0b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e098:	f7ff fdad 	bl	800dbf6 <USBD_GetString>
 800e09c:	e004      	b.n	800e0a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	4904      	ldr	r1, [pc, #16]	; (800e0b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e0a2:	4805      	ldr	r0, [pc, #20]	; (800e0b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e0a4:	f7ff fda7 	bl	800dbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0a8:	4b02      	ldr	r3, [pc, #8]	; (800e0b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20002520 	.word	0x20002520
 800e0b8:	0800eb08 	.word	0x0800eb08

0800e0bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	6039      	str	r1, [r7, #0]
 800e0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	4904      	ldr	r1, [pc, #16]	; (800e0dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0cc:	4804      	ldr	r0, [pc, #16]	; (800e0e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0ce:	f7ff fd92 	bl	800dbf6 <USBD_GetString>
  return USBD_StrDesc;
 800e0d2:	4b02      	ldr	r3, [pc, #8]	; (800e0dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	20002520 	.word	0x20002520
 800e0e0:	0800eb20 	.word	0x0800eb20

0800e0e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	6039      	str	r1, [r7, #0]
 800e0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	221a      	movs	r2, #26
 800e0f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e0f6:	f000 f843 	bl	800e180 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e0fa:	4b02      	ldr	r3, [pc, #8]	; (800e104 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	20000164 	.word	0x20000164

0800e108 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	4603      	mov	r3, r0
 800e110:	6039      	str	r1, [r7, #0]
 800e112:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d105      	bne.n	800e126 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	4907      	ldr	r1, [pc, #28]	; (800e13c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e11e:	4808      	ldr	r0, [pc, #32]	; (800e140 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e120:	f7ff fd69 	bl	800dbf6 <USBD_GetString>
 800e124:	e004      	b.n	800e130 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	4904      	ldr	r1, [pc, #16]	; (800e13c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e12a:	4805      	ldr	r0, [pc, #20]	; (800e140 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e12c:	f7ff fd63 	bl	800dbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e130:	4b02      	ldr	r3, [pc, #8]	; (800e13c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e132:	4618      	mov	r0, r3
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	20002520 	.word	0x20002520
 800e140:	0800eb34 	.word	0x0800eb34

0800e144 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	4603      	mov	r3, r0
 800e14c:	6039      	str	r1, [r7, #0]
 800e14e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d105      	bne.n	800e162 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	4907      	ldr	r1, [pc, #28]	; (800e178 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e15a:	4808      	ldr	r0, [pc, #32]	; (800e17c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e15c:	f7ff fd4b 	bl	800dbf6 <USBD_GetString>
 800e160:	e004      	b.n	800e16c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e162:	683a      	ldr	r2, [r7, #0]
 800e164:	4904      	ldr	r1, [pc, #16]	; (800e178 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e166:	4805      	ldr	r0, [pc, #20]	; (800e17c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e168:	f7ff fd45 	bl	800dbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e16c:	4b02      	ldr	r3, [pc, #8]	; (800e178 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20002520 	.word	0x20002520
 800e17c:	0800eb40 	.word	0x0800eb40

0800e180 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e186:	4b0f      	ldr	r3, [pc, #60]	; (800e1c4 <Get_SerialNum+0x44>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e18c:	4b0e      	ldr	r3, [pc, #56]	; (800e1c8 <Get_SerialNum+0x48>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e192:	4b0e      	ldr	r3, [pc, #56]	; (800e1cc <Get_SerialNum+0x4c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4413      	add	r3, r2
 800e19e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d009      	beq.n	800e1ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e1a6:	2208      	movs	r2, #8
 800e1a8:	4909      	ldr	r1, [pc, #36]	; (800e1d0 <Get_SerialNum+0x50>)
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 f814 	bl	800e1d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e1b0:	2204      	movs	r2, #4
 800e1b2:	4908      	ldr	r1, [pc, #32]	; (800e1d4 <Get_SerialNum+0x54>)
 800e1b4:	68b8      	ldr	r0, [r7, #8]
 800e1b6:	f000 f80f 	bl	800e1d8 <IntToUnicode>
  }
}
 800e1ba:	bf00      	nop
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	1fff7a10 	.word	0x1fff7a10
 800e1c8:	1fff7a14 	.word	0x1fff7a14
 800e1cc:	1fff7a18 	.word	0x1fff7a18
 800e1d0:	20000166 	.word	0x20000166
 800e1d4:	20000176 	.word	0x20000176

0800e1d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b087      	sub	sp, #28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	75fb      	strb	r3, [r7, #23]
 800e1ee:	e027      	b.n	800e240 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	0f1b      	lsrs	r3, r3, #28
 800e1f4:	2b09      	cmp	r3, #9
 800e1f6:	d80b      	bhi.n	800e210 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	0f1b      	lsrs	r3, r3, #28
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	7dfb      	ldrb	r3, [r7, #23]
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	4619      	mov	r1, r3
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	440b      	add	r3, r1
 800e208:	3230      	adds	r2, #48	; 0x30
 800e20a:	b2d2      	uxtb	r2, r2
 800e20c:	701a      	strb	r2, [r3, #0]
 800e20e:	e00a      	b.n	800e226 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	0f1b      	lsrs	r3, r3, #28
 800e214:	b2da      	uxtb	r2, r3
 800e216:	7dfb      	ldrb	r3, [r7, #23]
 800e218:	005b      	lsls	r3, r3, #1
 800e21a:	4619      	mov	r1, r3
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	440b      	add	r3, r1
 800e220:	3237      	adds	r2, #55	; 0x37
 800e222:	b2d2      	uxtb	r2, r2
 800e224:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	011b      	lsls	r3, r3, #4
 800e22a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	3301      	adds	r3, #1
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	4413      	add	r3, r2
 800e236:	2200      	movs	r2, #0
 800e238:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e23a:	7dfb      	ldrb	r3, [r7, #23]
 800e23c:	3301      	adds	r3, #1
 800e23e:	75fb      	strb	r3, [r7, #23]
 800e240:	7dfa      	ldrb	r2, [r7, #23]
 800e242:	79fb      	ldrb	r3, [r7, #7]
 800e244:	429a      	cmp	r2, r3
 800e246:	d3d3      	bcc.n	800e1f0 <IntToUnicode+0x18>
  }
}
 800e248:	bf00      	nop
 800e24a:	bf00      	nop
 800e24c:	371c      	adds	r7, #28
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
	...

0800e258 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b0a0      	sub	sp, #128	; 0x80
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e260:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e264:	2200      	movs	r2, #0
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	605a      	str	r2, [r3, #4]
 800e26a:	609a      	str	r2, [r3, #8]
 800e26c:	60da      	str	r2, [r3, #12]
 800e26e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e270:	f107 0310 	add.w	r3, r7, #16
 800e274:	225c      	movs	r2, #92	; 0x5c
 800e276:	2100      	movs	r1, #0
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 fb69 	bl	800e950 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e286:	d161      	bne.n	800e34c <HAL_PCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e28c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800e28e:	2308      	movs	r3, #8
 800e290:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800e292:	23c0      	movs	r3, #192	; 0xc0
 800e294:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800e296:	2302      	movs	r3, #2
 800e298:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800e29a:	2304      	movs	r3, #4
 800e29c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800e2a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e2a8:	f107 0310 	add.w	r3, r7, #16
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fa fd53 	bl	8008d58 <HAL_RCCEx_PeriphCLKConfig>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800e2b8:	f7f2 ffca 	bl	8001250 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2bc:	2300      	movs	r3, #0
 800e2be:	60fb      	str	r3, [r7, #12]
 800e2c0:	4b24      	ldr	r3, [pc, #144]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c4:	4a23      	ldr	r2, [pc, #140]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e2c6:	f043 0301 	orr.w	r3, r3, #1
 800e2ca:	6313      	str	r3, [r2, #48]	; 0x30
 800e2cc:	4b21      	ldr	r3, [pc, #132]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	60fb      	str	r3, [r7, #12]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	481a      	ldr	r0, [pc, #104]	; (800e358 <HAL_PCD_MspInit+0x100>)
 800e2ee:	f7f8 f943 	bl	8006578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e2f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e2f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e300:	2303      	movs	r3, #3
 800e302:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e304:	230a      	movs	r3, #10
 800e306:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e308:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e30c:	4619      	mov	r1, r3
 800e30e:	4812      	ldr	r0, [pc, #72]	; (800e358 <HAL_PCD_MspInit+0x100>)
 800e310:	f7f8 f932 	bl	8006578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e314:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e318:	4a0e      	ldr	r2, [pc, #56]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e31e:	6353      	str	r3, [r2, #52]	; 0x34
 800e320:	2300      	movs	r3, #0
 800e322:	60bb      	str	r3, [r7, #8]
 800e324:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e328:	4a0a      	ldr	r2, [pc, #40]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e32a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e32e:	6453      	str	r3, [r2, #68]	; 0x44
 800e330:	4b08      	ldr	r3, [pc, #32]	; (800e354 <HAL_PCD_MspInit+0xfc>)
 800e332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e338:	60bb      	str	r3, [r7, #8]
 800e33a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e33c:	2200      	movs	r2, #0
 800e33e:	2100      	movs	r1, #0
 800e340:	2043      	movs	r0, #67	; 0x43
 800e342:	f7f7 fce8 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e346:	2043      	movs	r0, #67	; 0x43
 800e348:	f7f7 fd01 	bl	8005d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e34c:	bf00      	nop
 800e34e:	3780      	adds	r7, #128	; 0x80
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	40023800 	.word	0x40023800
 800e358:	40020000 	.word	0x40020000

0800e35c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e370:	4619      	mov	r1, r3
 800e372:	4610      	mov	r0, r2
 800e374:	f7fe fc58 	bl	800cc28 <USBD_LL_SetupStage>
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4613      	mov	r3, r2
 800e398:	00db      	lsls	r3, r3, #3
 800e39a:	1a9b      	subs	r3, r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	440b      	add	r3, r1
 800e3a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	78fb      	ldrb	r3, [r7, #3]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f7fe fc92 	bl	800ccd2 <USBD_LL_DataOutStage>
}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	460b      	mov	r3, r1
 800e3c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e3c8:	78fa      	ldrb	r2, [r7, #3]
 800e3ca:	6879      	ldr	r1, [r7, #4]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	1a9b      	subs	r3, r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	440b      	add	r3, r1
 800e3d6:	3348      	adds	r3, #72	; 0x48
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	f7fe fcdb 	bl	800cd98 <USBD_LL_DataInStage>
}
 800e3e2:	bf00      	nop
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fe fdef 	bl	800cfdc <USBD_LL_SOF>
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b084      	sub	sp, #16
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e40e:	2301      	movs	r3, #1
 800e410:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e41a:	2300      	movs	r3, #0
 800e41c:	73fb      	strb	r3, [r7, #15]
 800e41e:	e008      	b.n	800e432 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	2b02      	cmp	r3, #2
 800e426:	d102      	bne.n	800e42e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e428:	2301      	movs	r3, #1
 800e42a:	73fb      	strb	r3, [r7, #15]
 800e42c:	e001      	b.n	800e432 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e42e:	f7f2 ff0f 	bl	8001250 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e438:	7bfa      	ldrb	r2, [r7, #15]
 800e43a:	4611      	mov	r1, r2
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe fd8f 	bl	800cf60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe fd3b 	bl	800cec4 <USBD_LL_Reset>
}
 800e44e:	bf00      	nop
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
	...

0800e458 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fd8a 	bl	800cf80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	6812      	ldr	r2, [r2, #0]
 800e47a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e47e:	f043 0301 	orr.w	r3, r3, #1
 800e482:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a1b      	ldr	r3, [r3, #32]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d005      	beq.n	800e498 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e48c:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <HAL_PCD_SuspendCallback+0x48>)
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	4a03      	ldr	r2, [pc, #12]	; (800e4a0 <HAL_PCD_SuspendCallback+0x48>)
 800e492:	f043 0306 	orr.w	r3, r3, #6
 800e496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	e000ed00 	.word	0xe000ed00

0800e4a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe fd7a 	bl	800cfac <USBD_LL_Resume>
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4d2:	78fa      	ldrb	r2, [r7, #3]
 800e4d4:	4611      	mov	r1, r2
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fdc8 	bl	800d06c <USBD_LL_IsoOUTIncomplete>
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4f6:	78fa      	ldrb	r2, [r7, #3]
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe fd90 	bl	800d020 <USBD_LL_IsoINIncomplete>
}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe fdce 	bl	800d0b8 <USBD_LL_DevConnected>
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e532:	4618      	mov	r0, r3
 800e534:	f7fe fdcb 	bl	800d0ce <USBD_LL_DevDisconnected>
}
 800e538:	bf00      	nop
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d13c      	bne.n	800e5ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e550:	4a20      	ldr	r2, [pc, #128]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a1e      	ldr	r2, [pc, #120]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e55c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e560:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e562:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e566:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e568:	4b1a      	ldr	r3, [pc, #104]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e56a:	2206      	movs	r2, #6
 800e56c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e56e:	4b19      	ldr	r3, [pc, #100]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e570:	2202      	movs	r2, #2
 800e572:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e574:	4b17      	ldr	r3, [pc, #92]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e576:	2200      	movs	r2, #0
 800e578:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e57a:	4b16      	ldr	r3, [pc, #88]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e57c:	2202      	movs	r2, #2
 800e57e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e580:	4b14      	ldr	r3, [pc, #80]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e582:	2200      	movs	r2, #0
 800e584:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e586:	4b13      	ldr	r3, [pc, #76]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e588:	2200      	movs	r2, #0
 800e58a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e58c:	4b11      	ldr	r3, [pc, #68]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e58e:	2200      	movs	r2, #0
 800e590:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e592:	4b10      	ldr	r3, [pc, #64]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e594:	2201      	movs	r2, #1
 800e596:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e598:	4b0e      	ldr	r3, [pc, #56]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e59e:	480d      	ldr	r0, [pc, #52]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e5a0:	f7f9 f8a8 	bl	80076f4 <HAL_PCD_Init>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e5aa:	f7f2 fe51 	bl	8001250 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e5ae:	2180      	movs	r1, #128	; 0x80
 800e5b0:	4808      	ldr	r0, [pc, #32]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e5b2:	f7fa fa3a 	bl	8008a2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e5b6:	2240      	movs	r2, #64	; 0x40
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	4806      	ldr	r0, [pc, #24]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e5bc:	f7fa f9ee 	bl	800899c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e5c0:	2280      	movs	r2, #128	; 0x80
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	4803      	ldr	r0, [pc, #12]	; (800e5d4 <USBD_LL_Init+0x94>)
 800e5c6:	f7fa f9e9 	bl	800899c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20002720 	.word	0x20002720

0800e5d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7f9 f9a4 	bl	800793c <HAL_PCD_Start>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 f942 	bl	800e884 <USBD_Get_USB_Status>
 800e600:	4603      	mov	r3, r0
 800e602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e604:	7bbb      	ldrb	r3, [r7, #14]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b084      	sub	sp, #16
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	4608      	mov	r0, r1
 800e618:	4611      	mov	r1, r2
 800e61a:	461a      	mov	r2, r3
 800e61c:	4603      	mov	r3, r0
 800e61e:	70fb      	strb	r3, [r7, #3]
 800e620:	460b      	mov	r3, r1
 800e622:	70bb      	strb	r3, [r7, #2]
 800e624:	4613      	mov	r3, r2
 800e626:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e62c:	2300      	movs	r3, #0
 800e62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e636:	78bb      	ldrb	r3, [r7, #2]
 800e638:	883a      	ldrh	r2, [r7, #0]
 800e63a:	78f9      	ldrb	r1, [r7, #3]
 800e63c:	f7f9 fdb5 	bl	80081aa <HAL_PCD_EP_Open>
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	4618      	mov	r0, r3
 800e648:	f000 f91c 	bl	800e884 <USBD_Get_USB_Status>
 800e64c:	4603      	mov	r3, r0
 800e64e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e650:	7bbb      	ldrb	r3, [r7, #14]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	460b      	mov	r3, r1
 800e664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e666:	2300      	movs	r3, #0
 800e668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e66a:	2300      	movs	r3, #0
 800e66c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e674:	78fa      	ldrb	r2, [r7, #3]
 800e676:	4611      	mov	r1, r2
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f9 fdfe 	bl	800827a <HAL_PCD_EP_Close>
 800e67e:	4603      	mov	r3, r0
 800e680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e682:	7bfb      	ldrb	r3, [r7, #15]
 800e684:	4618      	mov	r0, r3
 800e686:	f000 f8fd 	bl	800e884 <USBD_Get_USB_Status>
 800e68a:	4603      	mov	r3, r0
 800e68c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e68e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6b2:	78fa      	ldrb	r2, [r7, #3]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f9 fed6 	bl	8008468 <HAL_PCD_EP_SetStall>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 f8de 	bl	800e884 <USBD_Get_USB_Status>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6f0:	78fa      	ldrb	r2, [r7, #3]
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7f9 ff1b 	bl	8008530 <HAL_PCD_EP_ClrStall>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
 800e700:	4618      	mov	r0, r3
 800e702:	f000 f8bf 	bl	800e884 <USBD_Get_USB_Status>
 800e706:	4603      	mov	r3, r0
 800e708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e726:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	da0b      	bge.n	800e748 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e730:	78fb      	ldrb	r3, [r7, #3]
 800e732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	4613      	mov	r3, r2
 800e73a:	00db      	lsls	r3, r3, #3
 800e73c:	1a9b      	subs	r3, r3, r2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	440b      	add	r3, r1
 800e742:	333e      	adds	r3, #62	; 0x3e
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	e00b      	b.n	800e760 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e748:	78fb      	ldrb	r3, [r7, #3]
 800e74a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e74e:	68f9      	ldr	r1, [r7, #12]
 800e750:	4613      	mov	r3, r2
 800e752:	00db      	lsls	r3, r3, #3
 800e754:	1a9b      	subs	r3, r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	440b      	add	r3, r1
 800e75a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e75e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e760:	4618      	mov	r0, r3
 800e762:	3714      	adds	r7, #20
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	460b      	mov	r3, r1
 800e776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e778:	2300      	movs	r3, #0
 800e77a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e786:	78fa      	ldrb	r2, [r7, #3]
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f9 fce8 	bl	8008160 <HAL_PCD_SetAddress>
 800e790:	4603      	mov	r3, r0
 800e792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e794:	7bfb      	ldrb	r3, [r7, #15]
 800e796:	4618      	mov	r0, r3
 800e798:	f000 f874 	bl	800e884 <USBD_Get_USB_Status>
 800e79c:	4603      	mov	r3, r0
 800e79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b086      	sub	sp, #24
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	60f8      	str	r0, [r7, #12]
 800e7b2:	607a      	str	r2, [r7, #4]
 800e7b4:	603b      	str	r3, [r7, #0]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e7c8:	7af9      	ldrb	r1, [r7, #11]
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	f7f9 fe01 	bl	80083d4 <HAL_PCD_EP_Transmit>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 f853 	bl	800e884 <USBD_Get_USB_Status>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	607a      	str	r2, [r7, #4]
 800e7f6:	603b      	str	r3, [r7, #0]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e80a:	7af9      	ldrb	r1, [r7, #11]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	f7f9 fd7d 	bl	800830e <HAL_PCD_EP_Receive>
 800e814:	4603      	mov	r3, r0
 800e816:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e818:	7dfb      	ldrb	r3, [r7, #23]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 f832 	bl	800e884 <USBD_Get_USB_Status>
 800e820:	4603      	mov	r3, r0
 800e822:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e824:	7dbb      	ldrb	r3, [r7, #22]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3718      	adds	r7, #24
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b082      	sub	sp, #8
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	460b      	mov	r3, r1
 800e838:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e840:	78fa      	ldrb	r2, [r7, #3]
 800e842:	4611      	mov	r1, r2
 800e844:	4618      	mov	r0, r3
 800e846:	f7f9 fdad 	bl	80083a4 <HAL_PCD_EP_GetRxCount>
 800e84a:	4603      	mov	r3, r0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e85c:	4b03      	ldr	r3, [pc, #12]	; (800e86c <USBD_static_malloc+0x18>)
}
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	20000208 	.word	0x20000208

0800e870 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]

}
 800e878:	bf00      	nop
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e88e:	2300      	movs	r3, #0
 800e890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e892:	79fb      	ldrb	r3, [r7, #7]
 800e894:	2b03      	cmp	r3, #3
 800e896:	d817      	bhi.n	800e8c8 <USBD_Get_USB_Status+0x44>
 800e898:	a201      	add	r2, pc, #4	; (adr r2, 800e8a0 <USBD_Get_USB_Status+0x1c>)
 800e89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89e:	bf00      	nop
 800e8a0:	0800e8b1 	.word	0x0800e8b1
 800e8a4:	0800e8b7 	.word	0x0800e8b7
 800e8a8:	0800e8bd 	.word	0x0800e8bd
 800e8ac:	0800e8c3 	.word	0x0800e8c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b4:	e00b      	b.n	800e8ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ba:	e008      	b.n	800e8ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	73fb      	strb	r3, [r7, #15]
    break;
 800e8c0:	e005      	b.n	800e8ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8c6:	e002      	b.n	800e8ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e8cc:	bf00      	nop
  }
  return usb_status;
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <__errno>:
 800e8dc:	4b01      	ldr	r3, [pc, #4]	; (800e8e4 <__errno+0x8>)
 800e8de:	6818      	ldr	r0, [r3, #0]
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	20000180 	.word	0x20000180

0800e8e8 <__libc_init_array>:
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	4d0d      	ldr	r5, [pc, #52]	; (800e920 <__libc_init_array+0x38>)
 800e8ec:	4c0d      	ldr	r4, [pc, #52]	; (800e924 <__libc_init_array+0x3c>)
 800e8ee:	1b64      	subs	r4, r4, r5
 800e8f0:	10a4      	asrs	r4, r4, #2
 800e8f2:	2600      	movs	r6, #0
 800e8f4:	42a6      	cmp	r6, r4
 800e8f6:	d109      	bne.n	800e90c <__libc_init_array+0x24>
 800e8f8:	4d0b      	ldr	r5, [pc, #44]	; (800e928 <__libc_init_array+0x40>)
 800e8fa:	4c0c      	ldr	r4, [pc, #48]	; (800e92c <__libc_init_array+0x44>)
 800e8fc:	f000 f8f8 	bl	800eaf0 <_init>
 800e900:	1b64      	subs	r4, r4, r5
 800e902:	10a4      	asrs	r4, r4, #2
 800e904:	2600      	movs	r6, #0
 800e906:	42a6      	cmp	r6, r4
 800e908:	d105      	bne.n	800e916 <__libc_init_array+0x2e>
 800e90a:	bd70      	pop	{r4, r5, r6, pc}
 800e90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e910:	4798      	blx	r3
 800e912:	3601      	adds	r6, #1
 800e914:	e7ee      	b.n	800e8f4 <__libc_init_array+0xc>
 800e916:	f855 3b04 	ldr.w	r3, [r5], #4
 800e91a:	4798      	blx	r3
 800e91c:	3601      	adds	r6, #1
 800e91e:	e7f2      	b.n	800e906 <__libc_init_array+0x1e>
 800e920:	0800eb78 	.word	0x0800eb78
 800e924:	0800eb78 	.word	0x0800eb78
 800e928:	0800eb78 	.word	0x0800eb78
 800e92c:	0800eb7c 	.word	0x0800eb7c

0800e930 <malloc>:
 800e930:	4b02      	ldr	r3, [pc, #8]	; (800e93c <malloc+0xc>)
 800e932:	4601      	mov	r1, r0
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f000 b863 	b.w	800ea00 <_malloc_r>
 800e93a:	bf00      	nop
 800e93c:	20000180 	.word	0x20000180

0800e940 <free>:
 800e940:	4b02      	ldr	r3, [pc, #8]	; (800e94c <free+0xc>)
 800e942:	4601      	mov	r1, r0
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	f000 b80b 	b.w	800e960 <_free_r>
 800e94a:	bf00      	nop
 800e94c:	20000180 	.word	0x20000180

0800e950 <memset>:
 800e950:	4402      	add	r2, r0
 800e952:	4603      	mov	r3, r0
 800e954:	4293      	cmp	r3, r2
 800e956:	d100      	bne.n	800e95a <memset+0xa>
 800e958:	4770      	bx	lr
 800e95a:	f803 1b01 	strb.w	r1, [r3], #1
 800e95e:	e7f9      	b.n	800e954 <memset+0x4>

0800e960 <_free_r>:
 800e960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e962:	2900      	cmp	r1, #0
 800e964:	d048      	beq.n	800e9f8 <_free_r+0x98>
 800e966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96a:	9001      	str	r0, [sp, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f1a1 0404 	sub.w	r4, r1, #4
 800e972:	bfb8      	it	lt
 800e974:	18e4      	addlt	r4, r4, r3
 800e976:	f000 f8ad 	bl	800ead4 <__malloc_lock>
 800e97a:	4a20      	ldr	r2, [pc, #128]	; (800e9fc <_free_r+0x9c>)
 800e97c:	9801      	ldr	r0, [sp, #4]
 800e97e:	6813      	ldr	r3, [r2, #0]
 800e980:	4615      	mov	r5, r2
 800e982:	b933      	cbnz	r3, 800e992 <_free_r+0x32>
 800e984:	6063      	str	r3, [r4, #4]
 800e986:	6014      	str	r4, [r2, #0]
 800e988:	b003      	add	sp, #12
 800e98a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e98e:	f000 b8a7 	b.w	800eae0 <__malloc_unlock>
 800e992:	42a3      	cmp	r3, r4
 800e994:	d90b      	bls.n	800e9ae <_free_r+0x4e>
 800e996:	6821      	ldr	r1, [r4, #0]
 800e998:	1862      	adds	r2, r4, r1
 800e99a:	4293      	cmp	r3, r2
 800e99c:	bf04      	itt	eq
 800e99e:	681a      	ldreq	r2, [r3, #0]
 800e9a0:	685b      	ldreq	r3, [r3, #4]
 800e9a2:	6063      	str	r3, [r4, #4]
 800e9a4:	bf04      	itt	eq
 800e9a6:	1852      	addeq	r2, r2, r1
 800e9a8:	6022      	streq	r2, [r4, #0]
 800e9aa:	602c      	str	r4, [r5, #0]
 800e9ac:	e7ec      	b.n	800e988 <_free_r+0x28>
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	b10b      	cbz	r3, 800e9b8 <_free_r+0x58>
 800e9b4:	42a3      	cmp	r3, r4
 800e9b6:	d9fa      	bls.n	800e9ae <_free_r+0x4e>
 800e9b8:	6811      	ldr	r1, [r2, #0]
 800e9ba:	1855      	adds	r5, r2, r1
 800e9bc:	42a5      	cmp	r5, r4
 800e9be:	d10b      	bne.n	800e9d8 <_free_r+0x78>
 800e9c0:	6824      	ldr	r4, [r4, #0]
 800e9c2:	4421      	add	r1, r4
 800e9c4:	1854      	adds	r4, r2, r1
 800e9c6:	42a3      	cmp	r3, r4
 800e9c8:	6011      	str	r1, [r2, #0]
 800e9ca:	d1dd      	bne.n	800e988 <_free_r+0x28>
 800e9cc:	681c      	ldr	r4, [r3, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	6053      	str	r3, [r2, #4]
 800e9d2:	4421      	add	r1, r4
 800e9d4:	6011      	str	r1, [r2, #0]
 800e9d6:	e7d7      	b.n	800e988 <_free_r+0x28>
 800e9d8:	d902      	bls.n	800e9e0 <_free_r+0x80>
 800e9da:	230c      	movs	r3, #12
 800e9dc:	6003      	str	r3, [r0, #0]
 800e9de:	e7d3      	b.n	800e988 <_free_r+0x28>
 800e9e0:	6825      	ldr	r5, [r4, #0]
 800e9e2:	1961      	adds	r1, r4, r5
 800e9e4:	428b      	cmp	r3, r1
 800e9e6:	bf04      	itt	eq
 800e9e8:	6819      	ldreq	r1, [r3, #0]
 800e9ea:	685b      	ldreq	r3, [r3, #4]
 800e9ec:	6063      	str	r3, [r4, #4]
 800e9ee:	bf04      	itt	eq
 800e9f0:	1949      	addeq	r1, r1, r5
 800e9f2:	6021      	streq	r1, [r4, #0]
 800e9f4:	6054      	str	r4, [r2, #4]
 800e9f6:	e7c7      	b.n	800e988 <_free_r+0x28>
 800e9f8:	b003      	add	sp, #12
 800e9fa:	bd30      	pop	{r4, r5, pc}
 800e9fc:	20000428 	.word	0x20000428

0800ea00 <_malloc_r>:
 800ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea02:	1ccd      	adds	r5, r1, #3
 800ea04:	f025 0503 	bic.w	r5, r5, #3
 800ea08:	3508      	adds	r5, #8
 800ea0a:	2d0c      	cmp	r5, #12
 800ea0c:	bf38      	it	cc
 800ea0e:	250c      	movcc	r5, #12
 800ea10:	2d00      	cmp	r5, #0
 800ea12:	4606      	mov	r6, r0
 800ea14:	db01      	blt.n	800ea1a <_malloc_r+0x1a>
 800ea16:	42a9      	cmp	r1, r5
 800ea18:	d903      	bls.n	800ea22 <_malloc_r+0x22>
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	6033      	str	r3, [r6, #0]
 800ea1e:	2000      	movs	r0, #0
 800ea20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea22:	f000 f857 	bl	800ead4 <__malloc_lock>
 800ea26:	4921      	ldr	r1, [pc, #132]	; (800eaac <_malloc_r+0xac>)
 800ea28:	680a      	ldr	r2, [r1, #0]
 800ea2a:	4614      	mov	r4, r2
 800ea2c:	b99c      	cbnz	r4, 800ea56 <_malloc_r+0x56>
 800ea2e:	4f20      	ldr	r7, [pc, #128]	; (800eab0 <_malloc_r+0xb0>)
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	b923      	cbnz	r3, 800ea3e <_malloc_r+0x3e>
 800ea34:	4621      	mov	r1, r4
 800ea36:	4630      	mov	r0, r6
 800ea38:	f000 f83c 	bl	800eab4 <_sbrk_r>
 800ea3c:	6038      	str	r0, [r7, #0]
 800ea3e:	4629      	mov	r1, r5
 800ea40:	4630      	mov	r0, r6
 800ea42:	f000 f837 	bl	800eab4 <_sbrk_r>
 800ea46:	1c43      	adds	r3, r0, #1
 800ea48:	d123      	bne.n	800ea92 <_malloc_r+0x92>
 800ea4a:	230c      	movs	r3, #12
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	4630      	mov	r0, r6
 800ea50:	f000 f846 	bl	800eae0 <__malloc_unlock>
 800ea54:	e7e3      	b.n	800ea1e <_malloc_r+0x1e>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	1b5b      	subs	r3, r3, r5
 800ea5a:	d417      	bmi.n	800ea8c <_malloc_r+0x8c>
 800ea5c:	2b0b      	cmp	r3, #11
 800ea5e:	d903      	bls.n	800ea68 <_malloc_r+0x68>
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	441c      	add	r4, r3
 800ea64:	6025      	str	r5, [r4, #0]
 800ea66:	e004      	b.n	800ea72 <_malloc_r+0x72>
 800ea68:	6863      	ldr	r3, [r4, #4]
 800ea6a:	42a2      	cmp	r2, r4
 800ea6c:	bf0c      	ite	eq
 800ea6e:	600b      	streq	r3, [r1, #0]
 800ea70:	6053      	strne	r3, [r2, #4]
 800ea72:	4630      	mov	r0, r6
 800ea74:	f000 f834 	bl	800eae0 <__malloc_unlock>
 800ea78:	f104 000b 	add.w	r0, r4, #11
 800ea7c:	1d23      	adds	r3, r4, #4
 800ea7e:	f020 0007 	bic.w	r0, r0, #7
 800ea82:	1ac2      	subs	r2, r0, r3
 800ea84:	d0cc      	beq.n	800ea20 <_malloc_r+0x20>
 800ea86:	1a1b      	subs	r3, r3, r0
 800ea88:	50a3      	str	r3, [r4, r2]
 800ea8a:	e7c9      	b.n	800ea20 <_malloc_r+0x20>
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	6864      	ldr	r4, [r4, #4]
 800ea90:	e7cc      	b.n	800ea2c <_malloc_r+0x2c>
 800ea92:	1cc4      	adds	r4, r0, #3
 800ea94:	f024 0403 	bic.w	r4, r4, #3
 800ea98:	42a0      	cmp	r0, r4
 800ea9a:	d0e3      	beq.n	800ea64 <_malloc_r+0x64>
 800ea9c:	1a21      	subs	r1, r4, r0
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f000 f808 	bl	800eab4 <_sbrk_r>
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	d1dd      	bne.n	800ea64 <_malloc_r+0x64>
 800eaa8:	e7cf      	b.n	800ea4a <_malloc_r+0x4a>
 800eaaa:	bf00      	nop
 800eaac:	20000428 	.word	0x20000428
 800eab0:	2000042c 	.word	0x2000042c

0800eab4 <_sbrk_r>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	4d06      	ldr	r5, [pc, #24]	; (800ead0 <_sbrk_r+0x1c>)
 800eab8:	2300      	movs	r3, #0
 800eaba:	4604      	mov	r4, r0
 800eabc:	4608      	mov	r0, r1
 800eabe:	602b      	str	r3, [r5, #0]
 800eac0:	f7f5 fbfe 	bl	80042c0 <_sbrk>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_sbrk_r+0x1a>
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	b103      	cbz	r3, 800eace <_sbrk_r+0x1a>
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	20002b28 	.word	0x20002b28

0800ead4 <__malloc_lock>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__malloc_lock+0x8>)
 800ead6:	f000 b809 	b.w	800eaec <__retarget_lock_acquire_recursive>
 800eada:	bf00      	nop
 800eadc:	20002b30 	.word	0x20002b30

0800eae0 <__malloc_unlock>:
 800eae0:	4801      	ldr	r0, [pc, #4]	; (800eae8 <__malloc_unlock+0x8>)
 800eae2:	f000 b804 	b.w	800eaee <__retarget_lock_release_recursive>
 800eae6:	bf00      	nop
 800eae8:	20002b30 	.word	0x20002b30

0800eaec <__retarget_lock_acquire_recursive>:
 800eaec:	4770      	bx	lr

0800eaee <__retarget_lock_release_recursive>:
 800eaee:	4770      	bx	lr

0800eaf0 <_init>:
 800eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf2:	bf00      	nop
 800eaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaf6:	bc08      	pop	{r3}
 800eaf8:	469e      	mov	lr, r3
 800eafa:	4770      	bx	lr

0800eafc <_fini>:
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	bf00      	nop
 800eb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb02:	bc08      	pop	{r3}
 800eb04:	469e      	mov	lr, r3
 800eb06:	4770      	bx	lr


Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc94  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bec0  0800bec0  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800bec0  0800bec0  0001bec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bec8  0800bec8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bec8  0800bec8  0001bec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800becc  0800becc  0001becc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800bed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000289c  20000190  0800c060  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a2c  0800c060  00022a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f0a  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044f6  00000000  00000000  000430ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  000475c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  00048d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a65  00000000  00000000  0004a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecee  00000000  00000000  00050df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4f41  00000000  00000000  0006fae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000642c  00000000  00000000  00154a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800be40 	.word	0x0800be40

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	0800be40 	.word	0x0800be40

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 faa0 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f822 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fbe8 	bl	8000cdc <MX_GPIO_Init>
  MX_ADC1_Init();
 800050c:	f000 f890 	bl	8000630 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000510:	f000 f91a 	bl	8000748 <MX_ADC2_Init>
  MX_DMA_Init();
 8000514:	f000 fba4 	bl	8000c60 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000518:	f00a fee4 	bl	800b2e4 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 800051c:	f000 f99e 	bl	800085c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000520:	f000 f9d2 	bl	80008c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000524:	f000 f9fe 	bl	8000924 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000528:	f000 fa4c 	bl	80009c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 faca 	bl	8000ac4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000530:	f000 fb4a 	bl	8000bc8 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(Accumulator_Delay > ADC_DELAY)
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <main+0x48>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2bc8      	cmp	r3, #200	; 0xc8
 800053a:	d9fb      	bls.n	8000534 <main+0x38>
	{
		PDM_Read_Data(&Data_Conversion);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <main+0x4c>)
 800053e:	f000 fdf9 	bl	8001134 <PDM_Read_Data>
	if(Accumulator_Delay > ADC_DELAY)
 8000542:	e7f7      	b.n	8000534 <main+0x38>
 8000544:	200010c0 	.word	0x200010c0
 8000548:	20000e64 	.word	0x20000e64

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f00b fc68 	bl	800be30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <SystemClock_Config+0xdc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a2b      	ldr	r2, [pc, #172]	; (8000628 <SystemClock_Config+0xdc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xdc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <SystemClock_Config+0xe0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <SystemClock_Config+0xe0>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xe0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005c0:	23b4      	movs	r3, #180	; 0xb4
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c8:	2303      	movs	r3, #3
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 fc6d 	bl	8006eb4 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e0:	f000 fc70 	bl	8000ec4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e4:	f005 fe34 	bl	8006250 <HAL_PWREx_EnableOverDrive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ee:	f000 fc69 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fe6d 	bl	80062f0 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800061c:	f000 fc52 	bl	8000ec4 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000642:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <MX_ADC1_Init+0x108>)
 8000644:	4a3d      	ldr	r2, [pc, #244]	; (800073c <MX_ADC1_Init+0x10c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <MX_ADC1_Init+0x108>)
 800064a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000650:	4b39      	ldr	r3, [pc, #228]	; (8000738 <MX_ADC1_Init+0x108>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_ADC1_Init+0x108>)
 8000658:	2201      	movs	r2, #1
 800065a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <MX_ADC1_Init+0x108>)
 800065e:	2201      	movs	r2, #1
 8000660:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_ADC1_Init+0x108>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b33      	ldr	r3, [pc, #204]	; (8000738 <MX_ADC1_Init+0x108>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <MX_ADC1_Init+0x108>)
 8000672:	4a33      	ldr	r2, [pc, #204]	; (8000740 <MX_ADC1_Init+0x110>)
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b30      	ldr	r3, [pc, #192]	; (8000738 <MX_ADC1_Init+0x108>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_ADC1_Init+0x108>)
 800067e:	2205      	movs	r2, #5
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_ADC1_Init+0x108>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_ADC1_Init+0x108>)
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4829      	ldr	r0, [pc, #164]	; (8000738 <MX_ADC1_Init+0x108>)
 8000692:	f001 fa6d 	bl	8001b70 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800069c:	f000 fc12 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006a8:	2307      	movs	r3, #7
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4821      	ldr	r0, [pc, #132]	; (8000738 <MX_ADC1_Init+0x108>)
 80006b2:	f001 faa1 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006bc:	f000 fc02 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	481a      	ldr	r0, [pc, #104]	; (8000738 <MX_ADC1_Init+0x108>)
 80006ce:	f001 fa93 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006d8:	f000 fbf4 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006dc:	2302      	movs	r3, #2
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <MX_ADC1_Init+0x108>)
 80006ea:	f001 fa85 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006f4:	f000 fbe6 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006f8:	2303      	movs	r3, #3
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_ADC1_Init+0x108>)
 8000706:	f001 fa77 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000710:	f000 fbd8 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_ADC1_Init+0x114>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000718:	2305      	movs	r3, #5
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC1_Init+0x108>)
 8000722:	f001 fa69 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800072c:	f000 fbca 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000e68 	.word	0x20000e68
 800073c:	40012000 	.word	0x40012000
 8000740:	0f000001 	.word	0x0f000001
 8000744:	10000012 	.word	0x10000012

08000748 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800075a:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <MX_ADC2_Init+0x108>)
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <MX_ADC2_Init+0x10c>)
 800075e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000760:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <MX_ADC2_Init+0x108>)
 8000762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000766:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000768:	4b39      	ldr	r3, [pc, #228]	; (8000850 <MX_ADC2_Init+0x108>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_ADC2_Init+0x108>)
 8000770:	2201      	movs	r2, #1
 8000772:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000774:	4b36      	ldr	r3, [pc, #216]	; (8000850 <MX_ADC2_Init+0x108>)
 8000776:	2201      	movs	r2, #1
 8000778:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <MX_ADC2_Init+0x108>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b33      	ldr	r3, [pc, #204]	; (8000850 <MX_ADC2_Init+0x108>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000788:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_ADC2_Init+0x108>)
 800078a:	4a33      	ldr	r2, [pc, #204]	; (8000858 <MX_ADC2_Init+0x110>)
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078e:	4b30      	ldr	r3, [pc, #192]	; (8000850 <MX_ADC2_Init+0x108>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <MX_ADC2_Init+0x108>)
 8000796:	2205      	movs	r2, #5
 8000798:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_ADC2_Init+0x108>)
 800079c:	2201      	movs	r2, #1
 800079e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_ADC2_Init+0x108>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007a8:	4829      	ldr	r0, [pc, #164]	; (8000850 <MX_ADC2_Init+0x108>)
 80007aa:	f001 f9e1 	bl	8001b70 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007b4:	f000 fb86 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007c0:	2307      	movs	r3, #7
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4821      	ldr	r0, [pc, #132]	; (8000850 <MX_ADC2_Init+0x108>)
 80007ca:	f001 fa15 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007d4:	f000 fb76 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d8:	2305      	movs	r3, #5
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <MX_ADC2_Init+0x108>)
 80007e6:	f001 fa07 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80007f0:	f000 fb68 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007f4:	2306      	movs	r3, #6
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007f8:	2303      	movs	r3, #3
 80007fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_ADC2_Init+0x108>)
 8000802:	f001 f9f9 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800080c:	f000 fb5a 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000810:	2307      	movs	r3, #7
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ADC2_Init+0x108>)
 800081e:	f001 f9eb 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000828:	f000 fb4c 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800082c:	230e      	movs	r3, #14
 800082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000830:	2305      	movs	r3, #5
 8000832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_ADC2_Init+0x108>)
 800083a:	f001 f9dd 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000844:	f000 fb3e 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000045c 	.word	0x2000045c
 8000854:	40012100 	.word	0x40012100
 8000858:	0f000001 	.word	0x0f000001

0800085c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_CAN1_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000868:	2205      	movs	r2, #5
 800086a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_CAN1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000874:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000878:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_CAN1_Init+0x64>)
 800087c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000880:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_CAN1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_CAN1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_CAN1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_CAN1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_CAN1_Init+0x64>)
 80008ae:	f001 fbd1 	bl	8002054 <HAL_CAN_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 fb04 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20001124 	.word	0x20001124
 80008c4:	40006400 	.word	0x40006400

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2C1_Init+0x50>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_I2C1_Init+0x54>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_I2C1_Init+0x50>)
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_I2C1_Init+0x58>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_I2C1_Init+0x50>)
 80008e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_I2C1_Init+0x50>)
 8000906:	f002 fdd5 	bl	80034b4 <HAL_I2C_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000910:	f000 fad8 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000504 	.word	0x20000504
 800091c:	40005400 	.word	0x40005400
 8000920:	00061a80 	.word	0x00061a80

08000924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_TIM1_Init+0x98>)
 8000942:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <MX_TIM1_Init+0x9c>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_TIM1_Init+0x98>)
 8000948:	22b3      	movs	r2, #179	; 0xb3
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_TIM1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_TIM1_Init+0x98>)
 8000954:	2263      	movs	r2, #99	; 0x63
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_TIM1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_TIM1_Init+0x98>)
 800096c:	f006 fd40 	bl	80073f0 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000976:	f000 faa5 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_TIM1_Init+0x98>)
 8000988:	f007 f844 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000992:	f000 fa97 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_TIM1_Init+0x98>)
 80009a4:	f007 fc10 	bl	80081c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009ae:	f000 fa89 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000f78 	.word	0x20000f78
 80009c0:	40010000 	.word	0x40010000

080009c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 80009fe:	2208      	movs	r2, #8
 8000a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a1e:	f006 fce7 	bl	80073f0 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a28:	f000 fa4c 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a3a:	f006 ffeb 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a44:	f000 fa3e 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a48:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a4a:	f006 fdc0 	bl	80075ce <HAL_TIM_PWM_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a54:	f000 fa36 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4619      	mov	r1, r3
 8000a66:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a68:	f007 fbae 	bl	80081c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a72:	f000 fa27 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a8e:	f006 feff 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a98:	f000 fa14 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000aa4:	f006 fef4 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000aae:	f000 fa09 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000ab4:	f000 feb2 	bl	800181c <HAL_TIM_MspPostInit>

}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	; 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20001058 	.word	0x20001058

08000ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000af6:	4a33      	ldr	r2, [pc, #204]	; (8000bc4 <MX_TIM3_Init+0x100>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000afc:	2208      	movs	r2, #8
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b1a:	4829      	ldr	r0, [pc, #164]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b1c:	f006 fc68 	bl	80073f0 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 f9cd 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4822      	ldr	r0, [pc, #136]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b38:	f006 ff6c 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b42:	f000 f9bf 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b46:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b48:	f006 fd41 	bl	80075ce <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b52:	f000 f9b7 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b66:	f007 fb2f 	bl	80081c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b70:	f000 f9a8 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	; 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2208      	movs	r2, #8
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000b8c:	f006 fe80 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b96:	f000 f995 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	220c      	movs	r2, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000ba2:	f006 fe75 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000bac:	f000 f98a 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <MX_TIM3_Init+0xfc>)
 8000bb2:	f000 fe33 	bl	800181c <HAL_TIM_MspPostInit>

}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	; 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000e1c 	.word	0x20000e1c
 8000bc4:	40000400 	.word	0x40000400

08000bc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000be6:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <MX_TIM4_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000bf8:	2259      	movs	r2, #89	; 0x59
 8000bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000c0a:	f006 fbf1 	bl	80073f0 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000c14:	f000 f956 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000c26:	f006 fef5 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000c30:	f000 f948 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_TIM4_Init+0x90>)
 8000c42:	f007 fac1 	bl	80081c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000c4c:	f000 f93a 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200003d4 	.word	0x200003d4
 8000c5c:	40000800 	.word	0x40000800

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2011      	movs	r0, #17
 8000ca4:	f001 feed 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ca8:	2011      	movs	r0, #17
 8000caa:	f001 ff06 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2038      	movs	r0, #56	; 0x38
 8000cb4:	f001 fee5 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cb8:	2038      	movs	r0, #56	; 0x38
 8000cba:	f001 fefe 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	203a      	movs	r0, #58	; 0x3a
 8000cc4:	f001 fedd 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cc8:	203a      	movs	r0, #58	; 0x3a
 8000cca:	f001 fef6 	bl	8002aba <HAL_NVIC_EnableIRQ>

}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a6b      	ldr	r2, [pc, #428]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000cfc:	f043 0310 	orr.w	r3, r3, #16
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b69      	ldr	r3, [pc, #420]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a64      	ldr	r2, [pc, #400]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0320 	and.w	r3, r3, #32
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a5d      	ldr	r2, [pc, #372]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a56      	ldr	r2, [pc, #344]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a3a      	ldr	r2, [pc, #232]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <MX_GPIO_Init+0x1cc>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	213c      	movs	r1, #60	; 0x3c
 8000dd6:	4835      	ldr	r0, [pc, #212]	; (8000eac <MX_GPIO_Init+0x1d0>)
 8000dd8:	f002 fb38 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000de2:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <MX_GPIO_Init+0x1d4>)
 8000de4:	f002 fb32 	bl	800344c <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000dee:	4831      	ldr	r0, [pc, #196]	; (8000eb4 <MX_GPIO_Init+0x1d8>)
 8000df0:	f002 fb2c 	bl	800344c <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8000df4:	233c      	movs	r3, #60	; 0x3c
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4828      	ldr	r0, [pc, #160]	; (8000eac <MX_GPIO_Init+0x1d0>)
 8000e0c:	f002 f98a 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8000e10:	230f      	movs	r3, #15
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <MX_GPIO_Init+0x1dc>)
 8000e26:	f002 f97d 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 8000e2a:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <MX_GPIO_Init+0x1e0>)
 8000e42:	f002 f96f 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8000e46:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_GPIO_Init+0x1d4>)
 8000e60:	f002 f960 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8000e64:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_GPIO_Init+0x1d8>)
 8000e7e:	f002 f951 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 8000e82:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_GPIO_Init+0x1e4>)
 8000e9a:	f002 f943 	bl	8003124 <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3738      	adds	r7, #56	; 0x38
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021400 	.word	0x40021400
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "pdm.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d114      	bne.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		Accumulator_Msg_10++;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000eea:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25++;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50++;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000efe:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100++;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f08:	6013      	str	r3, [r2, #0]
	}
	else if(htim->Instance == TIM4)
	{
		Accumulator_Delay++;
	}
}
 8000f0a:	e009      	b.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x50>
	else if(htim->Instance == TIM4)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d104      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x50>
		Accumulator_Delay++;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	20000edc 	.word	0x20000edc
 8000f34:	20000fc0 	.word	0x20000fc0
 8000f38:	20000fcc 	.word	0x20000fcc
 8000f3c:	20000458 	.word	0x20000458
 8000f40:	40000800 	.word	0x40000800
 8000f44:	200010c0 	.word	0x200010c0

08000f48 <HAL_CAN_RxFifo0MsgPendingCallback>:

	Output_Process();
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxMessage, CanRxData) == HAL_OK)
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f977 	bl	800224a <HAL_CAN_GetRxMessage>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f66:	f002 fa8a 	bl	800347e <HAL_GPIO_TogglePin>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20001050 	.word	0x20001050
 8000f78:	20000f5c 	.word	0x20000f5c
 8000f7c:	40021800 	.word	0x40021800

08000f80 <PDM_Convert_Current>:
 */

#include "pdm.h"

uint16_t PDM_Convert_Current(uint16_t adc_current)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	return (adc_current * 2750 * 330) / (374 * 4095);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <PDM_Convert_Current+0x2c>)
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <PDM_Convert_Current+0x30>)
 8000f94:	fb82 1203 	smull	r1, r2, r2, r3
 8000f98:	1492      	asrs	r2, r2, #18
 8000f9a:	17db      	asrs	r3, r3, #31
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	b29b      	uxth	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	000dd8ec 	.word	0x000dd8ec
 8000fb0:	2bd17489 	.word	0x2bd17489

08000fb4 <PDM_Convert_Temperature>:

uint16_t PDM_Convert_Temperature(uint16_t adc_temperature, uint16_t gnd_vnd)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	80bb      	strh	r3, [r7, #4]
	return (((gnd_vnd - adc_temperature + 1838) * (180 + 374) * 330 * 682) / (374 * 4095)) + 2500;
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f203 732e 	addw	r3, r3, #1838	; 0x72e
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <PDM_Convert_Temperature+0x40>)
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <PDM_Convert_Temperature+0x44>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1492      	asrs	r2, r2, #18
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	076e83e8 	.word	0x076e83e8
 8000ff8:	2bd17489 	.word	0x2bd17489

08000ffc <PDM_Convert_Voltage>:

uint16_t PDM_Convert_Voltage(uint16_t adc_voltage, uint16_t gnd_vnd)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	80fb      	strh	r3, [r7, #6]
 8001008:	4613      	mov	r3, r2
 800100a:	80bb      	strh	r3, [r7, #4]
	return ((adc_voltage - gnd_vnd) * (180 + 374) * 330) / (374 * 8 * 4095);
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <PDM_Convert_Voltage+0x38>)
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <PDM_Convert_Voltage+0x3c>)
 800101a:	fb82 1203 	smull	r1, r2, r2, r3
 800101e:	1552      	asrs	r2, r2, #21
 8001020:	17db      	asrs	r3, r3, #31
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	b29b      	uxth	r3, r3
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0002ca24 	.word	0x0002ca24
 8001038:	2bd17489 	.word	0x2bd17489

0800103c <PDM_Convert_MCU_Temperature>:

uint16_t PDM_Convert_MCU_Temperature(uint16_t adc_temperature)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
	return (((adc_temperature - 943) * 4964) / 4095) + 2500;
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	f2a3 33af 	subw	r3, r3, #943	; 0x3af
 800104c:	f241 3264 	movw	r2, #4964	; 0x1364
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <PDM_Convert_MCU_Temperature+0x3c>)
 8001056:	fb82 1203 	smull	r1, r2, r2, r3
 800105a:	441a      	add	r2, r3
 800105c:	12d2      	asrs	r2, r2, #11
 800105e:	17db      	asrs	r3, r3, #31
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001068:	b29b      	uxth	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	80080081 	.word	0x80080081

0800107c <PDM_Next_Data_Conversion>:

void PDM_Next_Data_Conversion(uint8_t Next_Data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	switch(Next_Data)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d84d      	bhi.n	8001128 <PDM_Next_Data_Conversion+0xac>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <PDM_Next_Data_Conversion+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a9 	.word	0x080010a9
 8001098:	08001129 	.word	0x08001129
 800109c:	080010c9 	.word	0x080010c9
 80010a0:	080010e9 	.word	0x080010e9
 80010a4:	08001109 	.word	0x08001109
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010ae:	f002 f9cd 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2108      	movs	r1, #8
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010b8:	f002 f9c8 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2104      	movs	r1, #4
 80010c0:	481b      	ldr	r0, [pc, #108]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010c2:	f002 f9c3 	bl	800344c <HAL_GPIO_WritePin>
		break;
 80010c6:	e02f      	b.n	8001128 <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2120      	movs	r1, #32
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010ce:	f002 f9bd 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	4816      	ldr	r0, [pc, #88]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010d8:	f002 f9b8 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2104      	movs	r1, #4
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010e2:	f002 f9b3 	bl	800344c <HAL_GPIO_WritePin>
		break;
 80010e6:	e01f      	b.n	8001128 <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2120      	movs	r1, #32
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010ee:	f002 f9ad 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2108      	movs	r1, #8
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 80010f8:	f002 f9a8 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2104      	movs	r1, #4
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 8001102:	f002 f9a3 	bl	800344c <HAL_GPIO_WritePin>
		break;
 8001106:	e00f      	b.n	8001128 <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2120      	movs	r1, #32
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 800110e:	f002 f99d 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 8001118:	f002 f998 	bl	800344c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2104      	movs	r1, #4
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <PDM_Next_Data_Conversion+0xb4>)
 8001122:	f002 f993 	bl	800344c <HAL_GPIO_WritePin>
		break;
 8001126:	bf00      	nop
	}
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000

08001134 <PDM_Read_Data>:

void PDM_Read_Data(uint8_t *Data_read)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim4);
 800113c:	4881      	ldr	r0, [pc, #516]	; (8001344 <PDM_Read_Data+0x210>)
 800113e:	f006 fa17 	bl	8007570 <HAL_TIM_Base_Stop_IT>

	switch(*Data_read)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b04      	cmp	r3, #4
 8001148:	f200 80e2 	bhi.w	8001310 <PDM_Read_Data+0x1dc>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <PDM_Read_Data+0x20>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	08001169 	.word	0x08001169
 8001158:	08001311 	.word	0x08001311
 800115c:	080011c5 	.word	0x080011c5
 8001160:	08001227 	.word	0x08001227
 8001164:	0800128b 	.word	0x0800128b
	{
	case Data_Read_Current0:
		*Data_read = Data_Read_Current0;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e023      	b.n	80011bc <PDM_Read_Data+0x88>
		{
			Converted_Data_Buffer[i * 2] = PDM_Convert_Current(ADC_BUFFER[i]);
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	4a74      	ldr	r2, [pc, #464]	; (8001348 <PDM_Read_Data+0x214>)
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	b29a      	uxth	r2, r3
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	005c      	lsls	r4, r3, #1
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff fefc 	bl	8000f80 <PDM_Convert_Current>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b6f      	ldr	r3, [pc, #444]	; (800134c <PDM_Read_Data+0x218>)
 800118e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

			if(ADC_BUFFER[i] < 4000)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <PDM_Read_Data+0x214>)
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800119e:	d205      	bcs.n	80011ac <PDM_Read_Data+0x78>
				Data_Verify_Buffer[i * 2] = 1;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4a6a      	ldr	r2, [pc, #424]	; (8001350 <PDM_Read_Data+0x21c>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	54d1      	strb	r1, [r2, r3]
 80011aa:	e004      	b.n	80011b6 <PDM_Read_Data+0x82>
			else
				Data_Verify_Buffer[i * 2] = 0;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4a67      	ldr	r2, [pc, #412]	; (8001350 <PDM_Read_Data+0x21c>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d9d8      	bls.n	8001174 <PDM_Read_Data+0x40>
		}
		break;
 80011c2:	e0a5      	b.n	8001310 <PDM_Read_Data+0x1dc>

	case Data_Read_Current1:
		*Data_read = Data_Read_Temperature;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	e026      	b.n	800121e <PDM_Read_Data+0xea>
		{
			Converted_Data_Buffer[(i * 2) + 1] = PDM_Convert_Current(ADC_BUFFER[i]);
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	4a5d      	ldr	r2, [pc, #372]	; (8001348 <PDM_Read_Data+0x214>)
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	1c5c      	adds	r4, r3, #1
 80011e0:	4610      	mov	r0, r2
 80011e2:	f7ff fecd 	bl	8000f80 <PDM_Convert_Current>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <PDM_Read_Data+0x218>)
 80011ec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

			if(ADC_BUFFER[i] < 4000)
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	4a55      	ldr	r2, [pc, #340]	; (8001348 <PDM_Read_Data+0x214>)
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011fc:	d206      	bcs.n	800120c <PDM_Read_Data+0xd8>
				Data_Verify_Buffer[(i * 2) + 1] = 1;
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3301      	adds	r3, #1
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <PDM_Read_Data+0x21c>)
 8001206:	2101      	movs	r1, #1
 8001208:	54d1      	strb	r1, [r2, r3]
 800120a:	e005      	b.n	8001218 <PDM_Read_Data+0xe4>
			else
				Data_Verify_Buffer[(i * 2) + 1] = 0;
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	3301      	adds	r3, #1
 8001212:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <PDM_Read_Data+0x21c>)
 8001214:	2100      	movs	r1, #0
 8001216:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	3301      	adds	r3, #1
 800121c:	73bb      	strb	r3, [r7, #14]
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d9d5      	bls.n	80011d0 <PDM_Read_Data+0x9c>
		}
		break;
 8001224:	e074      	b.n	8001310 <PDM_Read_Data+0x1dc>

	case Data_Read_Temperature:
		*Data_read = Data_Read_Voltage;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2204      	movs	r2, #4
 800122a:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	737b      	strb	r3, [r7, #13]
 8001230:	e027      	b.n	8001282 <PDM_Read_Data+0x14e>
		{
			Converted_Data_Buffer[16 + i] = PDM_Convert_Temperature(ADC_BUFFER[i], ADC_BUFFER[8]);
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	4a44      	ldr	r2, [pc, #272]	; (8001348 <PDM_Read_Data+0x214>)
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <PDM_Read_Data+0x214>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	b299      	uxth	r1, r3
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	f103 0410 	add.w	r4, r3, #16
 8001248:	4610      	mov	r0, r2
 800124a:	f7ff feb3 	bl	8000fb4 <PDM_Convert_Temperature>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <PDM_Read_Data+0x218>)
 8001254:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

			if(ADC_BUFFER[i] < 4000)
 8001258:	7b7b      	ldrb	r3, [r7, #13]
 800125a:	4a3b      	ldr	r2, [pc, #236]	; (8001348 <PDM_Read_Data+0x214>)
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001264:	d205      	bcs.n	8001272 <PDM_Read_Data+0x13e>
				Data_Verify_Buffer[16 + i] = 1;
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	3310      	adds	r3, #16
 800126a:	4a39      	ldr	r2, [pc, #228]	; (8001350 <PDM_Read_Data+0x21c>)
 800126c:	2101      	movs	r1, #1
 800126e:	54d1      	strb	r1, [r2, r3]
 8001270:	e004      	b.n	800127c <PDM_Read_Data+0x148>
			else
				Data_Verify_Buffer[16 + i] = 0;
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	3310      	adds	r3, #16
 8001276:	4a36      	ldr	r2, [pc, #216]	; (8001350 <PDM_Read_Data+0x21c>)
 8001278:	2100      	movs	r1, #0
 800127a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	3301      	adds	r3, #1
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	7b7b      	ldrb	r3, [r7, #13]
 8001284:	2b07      	cmp	r3, #7
 8001286:	d9d4      	bls.n	8001232 <PDM_Read_Data+0xfe>
		}
		break;
 8001288:	e042      	b.n	8001310 <PDM_Read_Data+0x1dc>

	case Data_Read_Voltage:
		*Data_read = Data_Read_Current0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	733b      	strb	r3, [r7, #12]
 8001294:	e026      	b.n	80012e4 <PDM_Read_Data+0x1b0>
		{
			if((ADC_BUFFER[i] < 10) || (ADC_BUFFER[i] > 4000))
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <PDM_Read_Data+0x214>)
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	2b09      	cmp	r3, #9
 80012a0:	d906      	bls.n	80012b0 <PDM_Read_Data+0x17c>
 80012a2:	7b3b      	ldrb	r3, [r7, #12]
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <PDM_Read_Data+0x214>)
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012ae:	d903      	bls.n	80012b8 <PDM_Read_Data+0x184>
				Data_Verify_Buffer[24] = 0;
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <PDM_Read_Data+0x21c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	761a      	strb	r2, [r3, #24]
 80012b6:	e012      	b.n	80012de <PDM_Read_Data+0x1aa>
			else
			{
				Converted_Data_Buffer[24] = PDM_Convert_Voltage(ADC_BUFFER[i], ADC_BUFFER[8]);
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <PDM_Read_Data+0x214>)
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <PDM_Read_Data+0x214>)
 80012c4:	6a12      	ldr	r2, [r2, #32]
 80012c6:	b292      	uxth	r2, r2
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe96 	bl	8000ffc <PDM_Convert_Voltage>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <PDM_Read_Data+0x218>)
 80012d6:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_Verify_Buffer[24] = 1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <PDM_Read_Data+0x21c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	761a      	strb	r2, [r3, #24]
		for(uint8_t i = 0; i < 8; i++)
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	733b      	strb	r3, [r7, #12]
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	d9d5      	bls.n	8001296 <PDM_Read_Data+0x162>
			}
		}

		if(Data_Verify_Buffer[24] == 0)
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <PDM_Read_Data+0x21c>)
 80012ec:	7e1b      	ldrb	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <PDM_Read_Data+0x1da>
			Converted_Data_Buffer[0] = PDM_Convert_Voltage(ADC_BUFFER[0], ADC_BUFFER[8]);
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <PDM_Read_Data+0x214>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4a13      	ldr	r2, [pc, #76]	; (8001348 <PDM_Read_Data+0x214>)
 80012fa:	6a12      	ldr	r2, [r2, #32]
 80012fc:	b292      	uxth	r2, r2
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe7b 	bl	8000ffc <PDM_Convert_Voltage>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <PDM_Read_Data+0x218>)
 800130c:	801a      	strh	r2, [r3, #0]
		break;
 800130e:	bf00      	nop
	}

	Converted_Data_Buffer[25] = PDM_Convert_MCU_Temperature(ADC_BUFFER[9]);
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <PDM_Read_Data+0x214>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe90 	bl	800103c <PDM_Convert_MCU_Temperature>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <PDM_Read_Data+0x218>)
 8001322:	865a      	strh	r2, [r3, #50]	; 0x32

	PDM_Next_Data_Conversion(*Data_read);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fea7 	bl	800107c <PDM_Next_Data_Conversion>

	Accumulator_Delay = 0;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <PDM_Read_Data+0x220>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim4);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <PDM_Read_Data+0x210>)
 8001336:	f006 f8ab 	bl	8007490 <HAL_TIM_Base_Start_IT>
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	bf00      	nop
 8001344:	200003d4 	.word	0x200003d4
 8001348:	20000eb4 	.word	0x20000eb4
 800134c:	20000558 	.word	0x20000558
 8001350:	2000041c 	.word	0x2000041c
 8001354:	200010c0 	.word	0x200010c0

08001358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x4c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <HAL_ADC_MspInit+0x1cc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d158      	bne.n	800147c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a62      	ldr	r2, [pc, #392]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8001402:	230f      	movs	r3, #15
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4859      	ldr	r0, [pc, #356]	; (800157c <HAL_ADC_MspInit+0x1d4>)
 8001416:	f001 fe85 	bl	8003124 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800141a:	4b59      	ldr	r3, [pc, #356]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 800141c:	4a59      	ldr	r2, [pc, #356]	; (8001584 <HAL_ADC_MspInit+0x1dc>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800142c:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143a:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 800143c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001442:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001452:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001458:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800145e:	4848      	ldr	r0, [pc, #288]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001460:	f001 fb46 	bl	8002af0 <HAL_DMA_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800146a:	f7ff fd2b 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a43      	ldr	r2, [pc, #268]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001472:	639a      	str	r2, [r3, #56]	; 0x38
 8001474:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_ADC_MspInit+0x1d8>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800147a:	e077      	b.n	800156c <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a41      	ldr	r2, [pc, #260]	; (8001588 <HAL_ADC_MspInit+0x1e0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d172      	bne.n	800156c <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG5_Pin|ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 80014da:	23f0      	movs	r3, #240	; 0xf0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4823      	ldr	r0, [pc, #140]	; (800157c <HAL_ADC_MspInit+0x1d4>)
 80014ee:	f001 fe19 	bl	8003124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG9_Pin;
 80014f2:	2310      	movs	r3, #16
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4821      	ldr	r0, [pc, #132]	; (800158c <HAL_ADC_MspInit+0x1e4>)
 8001506:	f001 fe0d 	bl	8003124 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <HAL_ADC_MspInit+0x1ec>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001516:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 800152e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001532:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 800153e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001542:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001552:	f001 facd 	bl	8002af0 <HAL_DMA_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800155c:	f7ff fcb2 	bl	8000ec4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001564:	639a      	str	r2, [r3, #56]	; 0x38
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_ADC_MspInit+0x1e8>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800156c:	bf00      	nop
 800156e:	3730      	adds	r7, #48	; 0x30
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40012000 	.word	0x40012000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	20000efc 	.word	0x20000efc
 8001584:	40026410 	.word	0x40026410
 8001588:	40012100 	.word	0x40012100
 800158c:	40020800 	.word	0x40020800
 8001590:	200010c4 	.word	0x200010c4
 8001594:	40026440 	.word	0x40026440

08001598 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d134      	bne.n	8001624 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_CAN_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_CAN_MspInit+0x98>)
 80015c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_CAN_MspInit+0x98>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_CAN_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_CAN_MspInit+0x98>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_CAN_MspInit+0x98>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001604:	2309      	movs	r3, #9
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <HAL_CAN_MspInit+0x9c>)
 8001610:	f001 fd88 	bl	8003124 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2014      	movs	r0, #20
 800161a:	f001 fa32 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800161e:	2014      	movs	r0, #20
 8001620:	f001 fa4b 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40006400 	.word	0x40006400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400

08001638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a34      	ldr	r2, [pc, #208]	; (8001728 <HAL_I2C_MspInit+0xf0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d161      	bne.n	800171e <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_I2C_MspInit+0xf4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a32      	ldr	r2, [pc, #200]	; (800172c <HAL_I2C_MspInit+0xf4>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b30      	ldr	r3, [pc, #192]	; (800172c <HAL_I2C_MspInit+0xf4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001676:	23c0      	movs	r3, #192	; 0xc0
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167a:	2312      	movs	r3, #18
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001686:	2304      	movs	r3, #4
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4827      	ldr	r0, [pc, #156]	; (8001730 <HAL_I2C_MspInit+0xf8>)
 8001692:	f001 fd47 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_I2C_MspInit+0xf4>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_I2C_MspInit+0xf4>)
 80016a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_I2C_MspInit+0xf4>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016b4:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_I2C_MspInit+0x100>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016f2:	4810      	ldr	r0, [pc, #64]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 80016f4:	f001 f9fc 	bl	8002af0 <HAL_DMA_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80016fe:	f7ff fbe1 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_I2C_MspInit+0xfc>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201f      	movs	r0, #31
 8001714:	f001 f9b5 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001718:	201f      	movs	r0, #31
 800171a:	f001 f9ce 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40005400 	.word	0x40005400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400
 8001734:	200004a4 	.word	0x200004a4
 8001738:	400260a0 	.word	0x400260a0

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <HAL_TIM_Base_MspInit+0xd0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d116      	bne.n	800177c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2019      	movs	r0, #25
 8001770:	f001 f987 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001774:	2019      	movs	r0, #25
 8001776:	f001 f9a0 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800177a:	e042      	b.n	8001802 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d10e      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
}
 80017a2:	e02e      	b.n	8001802 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_TIM_Base_MspInit+0xd8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
}
 80017ca:	e01a      	b.n	8001802 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_Base_MspInit+0xdc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d115      	bne.n	8001802 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_TIM_Base_MspInit+0xd4>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	201e      	movs	r0, #30
 80017f8:	f001 f943 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017fc:	201e      	movs	r0, #30
 80017fe:	f001 f95c 	bl	8002aba <HAL_NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40010000 	.word	0x40010000
 8001810:	40023800 	.word	0x40023800
 8001814:	40000400 	.word	0x40000400
 8001818:	40000800 	.word	0x40000800

0800181c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d11f      	bne.n	800187e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_TIM_MspPostInit+0xb0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_TIM_MspPostInit+0xb0>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_TIM_MspPostInit+0xb0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin|OUTPUT3_Pin;
 800185a:	f240 4304 	movw	r3, #1028	; 0x404
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186c:	2301      	movs	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <HAL_TIM_MspPostInit+0xb4>)
 8001878:	f001 fc54 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800187c:	e022      	b.n	80018c4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_TIM_MspPostInit+0xb8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d11d      	bne.n	80018c4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_TIM_MspPostInit+0xb0>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_TIM_MspPostInit+0xb0>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_TIM_MspPostInit+0xb0>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin|OUTPUT1_Pin;
 80018a4:	2303      	movs	r3, #3
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b4:	2302      	movs	r3, #2
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <HAL_TIM_MspPostInit+0xb4>)
 80018c0:	f001 fc30 	bl	8003124 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40000400 	.word	0x40000400

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f8e0 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA1_Stream6_IRQHandler+0x10>)
 8001932:	f001 f9ad 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200004a4 	.word	0x200004a4

08001940 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <CAN1_RX0_IRQHandler+0x10>)
 8001946:	f000 fd92 	bl	800246e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20001124 	.word	0x20001124

08001954 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800195a:	f005 fe91 	bl	8007680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000f78 	.word	0x20000f78

08001968 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM4_IRQHandler+0x10>)
 800196e:	f005 fe87 	bl	8007680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200003d4 	.word	0x200003d4

0800197c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <I2C1_EV_IRQHandler+0x10>)
 8001982:	f001 fedb 	bl	800373c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000504 	.word	0x20000504

08001990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001996:	f001 f97b 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000efc 	.word	0x20000efc

080019a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <DMA2_Stream2_IRQHandler+0x10>)
 80019aa:	f001 f971 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200010c4 	.word	0x200010c4

080019b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <OTG_FS_IRQHandler+0x10>)
 80019be:	f003 fbcf 	bl	8005160 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20002624 	.word	0x20002624

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a0c:	4c0b      	ldr	r4, [pc, #44]	; (8001a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a1a:	f7ff ffd7 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f00a f9e3 	bl	800bde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7fe fd6b 	bl	80004fc <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001a34:	0800bed0 	.word	0x0800bed0
  ldr r2, =_sbss
 8001a38:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001a3c:	20002a2c 	.word	0x20002a2c

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 fffd 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fc6e 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 f815 	bl	8002ad6 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 ffdd 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20001150 	.word	0x20001150

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20001150 	.word	0x20001150

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e033      	b.n	8001bee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fc0a 	bl	80013a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d118      	bne.n	8001be0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb6:	f023 0302 	bic.w	r3, r3, #2
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f94a 	bl	8001e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8001bde:	e001      	b.n	8001be4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1c>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e113      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x244>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d925      	bls.n	8001c70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68d9      	ldr	r1, [r3, #12]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	3b1e      	subs	r3, #30
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43da      	mvns	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	400a      	ands	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4403      	add	r3, r0
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	409a      	lsls	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	e022      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	2207      	movs	r2, #7
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	400a      	ands	r2, r1
 8001c92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6919      	ldr	r1, [r3, #16]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4403      	add	r3, r0
 8001cac:	409a      	lsls	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d824      	bhi.n	8001d08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b05      	subs	r3, #5
 8001cd0:	221f      	movs	r2, #31
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	400a      	ands	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b05      	subs	r3, #5
 8001cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
 8001d06:	e04c      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	d824      	bhi.n	8001d5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b23      	subs	r3, #35	; 0x23
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	400a      	ands	r2, r1
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b23      	subs	r3, #35	; 0x23
 8001d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
 8001d58:	e023      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b41      	subs	r3, #65	; 0x41
 8001d6c:	221f      	movs	r2, #31
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	400a      	ands	r2, r1
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b41      	subs	r3, #65	; 0x41
 8001d96:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_ADC_ConfigChannel+0x250>)
 8001da4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_ADC_ConfigChannel+0x254>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10f      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d8>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d10b      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_ADC_ConfigChannel+0x254>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d12b      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_ADC_ConfigChannel+0x258>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x1f4>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d122      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ADC_ConfigChannel+0x258>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d111      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_ADC_ConfigChannel+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_ADC_ConfigChannel+0x260>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	0c9a      	lsrs	r2, r3, #18
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	40012000 	.word	0x40012000
 8001e50:	10000012 	.word	0x10000012
 8001e54:	20000000 	.word	0x20000000
 8001e58:	431bde83 	.word	0x431bde83

08001e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e64:	4b79      	ldr	r3, [pc, #484]	; (800204c <ADC_Init+0x1f0>)
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	021a      	lsls	r2, r3, #8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <ADC_Init+0x1f4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e00f      	b.n	8001f5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0202 	bic.w	r2, r2, #2
 8001f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e1b      	ldrb	r3, [r3, #24]
 8001f74:	005a      	lsls	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	035a      	lsls	r2, r3, #13
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	e007      	b.n	8001fd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	051a      	lsls	r2, r3, #20
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6899      	ldr	r1, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002012:	025a      	lsls	r2, r3, #9
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	029a      	lsls	r2, r3, #10
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	0f000001 	.word	0x0f000001

08002054 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0ed      	b.n	8002242 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fa90 	bl	8001598 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002088:	f7ff fd42 	bl	8001b10 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800208e:	e012      	b.n	80020b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002090:	f7ff fd3e 	bl	8001b10 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b0a      	cmp	r3, #10
 800209c:	d90b      	bls.n	80020b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2205      	movs	r2, #5
 80020ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0c5      	b.n	8002242 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0e5      	beq.n	8002090 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0202 	bic.w	r2, r2, #2
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7ff fd1c 	bl	8001b10 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020da:	e012      	b.n	8002102 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020dc:	f7ff fd18 	bl	8001b10 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d90b      	bls.n	8002102 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e09f      	b.n	8002242 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e5      	bne.n	80020dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e007      	b.n	800213a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7e5b      	ldrb	r3, [r3, #25]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e9b      	ldrb	r3, [r3, #26]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0220 	orr.w	r2, r2, #32
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0220 	bic.w	r2, r2, #32
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7edb      	ldrb	r3, [r3, #27]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0210 	bic.w	r2, r2, #16
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0210 	orr.w	r2, r2, #16
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7f1b      	ldrb	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e007      	b.n	80021e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7f5b      	ldrb	r3, [r3, #29]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0204 	orr.w	r2, r2, #4
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e007      	b.n	800220c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	ea42 0103 	orr.w	r1, r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800224a:	b480      	push	{r7}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d003      	beq.n	800226e <HAL_CAN_GetRxMessage+0x24>
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 80f3 	bne.w	8002454 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10e      	bne.n	8002292 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d116      	bne.n	80022b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0e7      	b.n	8002462 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0d8      	b.n	8002462 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	331b      	adds	r3, #27
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0204 	and.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	331b      	adds	r3, #27
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0d5b      	lsrs	r3, r3, #21
 80022de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	331b      	adds	r3, #27
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	331b      	adds	r3, #27
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0202 	and.w	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	331b      	adds	r3, #27
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	331b      	adds	r3, #27
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	331b      	adds	r3, #27
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0a1a      	lsrs	r2, r3, #8
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0c1a      	lsrs	r2, r3, #16
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3302      	adds	r3, #2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e1a      	lsrs	r2, r3, #24
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3303      	adds	r3, #3
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3304      	adds	r3, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0a1a      	lsrs	r2, r3, #8
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3305      	adds	r3, #5
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3306      	adds	r3, #6
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e1a      	lsrs	r2, r3, #24
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3307      	adds	r3, #7
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0220 	orr.w	r2, r2, #32
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	e007      	b.n	8002450 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0220 	orr.w	r2, r2, #32
 800244e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e006      	b.n	8002462 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d07c      	beq.n	80025ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d023      	beq.n	8002506 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f983 	bl	80027dc <HAL_CAN_TxMailbox0CompleteCallback>
 80024d6:	e016      	b.n	8002506 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	e00c      	b.n	8002506 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	e002      	b.n	8002506 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f989 	bl	8002818 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d024      	beq.n	800255a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002518:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f963 	bl	80027f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800252a:	e016      	b.n	800255a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	e00c      	b.n	800255a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e002      	b.n	800255a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f969 	bl	800282c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d024      	beq.n	80025ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800256c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f943 	bl	8002804 <HAL_CAN_TxMailbox2CompleteCallback>
 800257e:	e016      	b.n	80025ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	e00c      	b.n	80025ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e002      	b.n	80025ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f949 	bl	8002840 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00c      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2210      	movs	r2, #16
 80025d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2208      	movs	r2, #8
 80025ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f930 	bl	8002854 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe fc9b 	bl	8000f48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2210      	movs	r2, #16
 8002634:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2208      	movs	r2, #8
 8002650:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f912 	bl	800287c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f8f9 	bl	8002868 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2210      	movs	r2, #16
 8002690:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8fc 	bl	8002890 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2208      	movs	r2, #8
 80026b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f8f5 	bl	80028a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d07b      	beq.n	80027bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d072      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002728:	2b00      	cmp	r3, #0
 800272a:	d043      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03e      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d02b      	beq.n	8002798 <HAL_CAN_IRQHandler+0x32a>
 8002740:	2b60      	cmp	r3, #96	; 0x60
 8002742:	d82e      	bhi.n	80027a2 <HAL_CAN_IRQHandler+0x334>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d022      	beq.n	800278e <HAL_CAN_IRQHandler+0x320>
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d82a      	bhi.n	80027a2 <HAL_CAN_IRQHandler+0x334>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d019      	beq.n	8002784 <HAL_CAN_IRQHandler+0x316>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d826      	bhi.n	80027a2 <HAL_CAN_IRQHandler+0x334>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d010      	beq.n	800277a <HAL_CAN_IRQHandler+0x30c>
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d822      	bhi.n	80027a2 <HAL_CAN_IRQHandler+0x334>
 800275c:	2b10      	cmp	r3, #16
 800275e:	d002      	beq.n	8002766 <HAL_CAN_IRQHandler+0x2f8>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d005      	beq.n	8002770 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002764:	e01d      	b.n	80027a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276e:	e019      	b.n	80027a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f043 0310 	orr.w	r3, r3, #16
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002778:	e014      	b.n	80027a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f043 0320 	orr.w	r3, r3, #32
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002782:	e00f      	b.n	80027a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800278c:	e00a      	b.n	80027a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002796:	e005      	b.n	80027a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a0:	e000      	b.n	80027a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80027a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2204      	movs	r2, #4
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f872 	bl	80028b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff f808 	bl	8001b10 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e099      	b.n	8002c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2c:	e00f      	b.n	8002b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b2e:	f7fe ffef 	bl	8001b10 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d908      	bls.n	8002b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e078      	b.n	8002c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e8      	bne.n	8002b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_DMA_Init+0x158>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d107      	bne.n	8002bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0307 	bic.w	r3, r3, #7
 8002bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d117      	bne.n	8002c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fa19 	bl	800302c <DMA_CheckFifoParam>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e016      	b.n	8002c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9d0 	bl	8002fc0 <DMA_CalcBaseAndBitshift>
 8002c20:	4603      	mov	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	223f      	movs	r2, #63	; 0x3f
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	f010803f 	.word	0xf010803f

08002c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c9c:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_DMA_IRQHandler+0x258>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a92      	ldr	r2, [pc, #584]	; (8002eec <HAL_DMA_IRQHandler+0x25c>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2208      	movs	r2, #8
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	2208      	movs	r2, #8
 8002cea:	409a      	lsls	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2201      	movs	r2, #1
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0202 	orr.w	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	2204      	movs	r2, #4
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2204      	movs	r2, #4
 8002d56:	409a      	lsls	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d043      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03c      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d024      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
 8002dbe:	e01f      	b.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
 8002dd0:	e016      	b.n	8002e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0208 	bic.w	r2, r2, #8
 8002dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2220      	movs	r2, #32
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 808e 	beq.w	8002f2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8086 	beq.w	8002f2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2220      	movs	r2, #32
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d136      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0216 	bic.w	r2, r2, #22
 8002e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <HAL_DMA_IRQHandler+0x1da>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0208 	bic.w	r2, r2, #8
 8002e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	223f      	movs	r2, #63	; 0x3f
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d07d      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
        }
        return;
 8002ea6:	e078      	b.n	8002f9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d108      	bne.n	8002ed6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d030      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e02b      	b.n	8002f2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d027      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
 8002ee6:	e022      	b.n	8002f2e <HAL_DMA_IRQHandler+0x29e>
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0210 	bic.w	r2, r2, #16
 8002f0c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d032      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d022      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2205      	movs	r2, #5
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d307      	bcc.n	8002f76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f2      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x2ca>
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f76:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
 8002f98:	e000      	b.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f9a:	bf00      	nop
    }
  }
}
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop

08002fa4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb2:	b2db      	uxtb	r3, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3b10      	subs	r3, #16
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <DMA_CalcBaseAndBitshift+0x64>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <DMA_CalcBaseAndBitshift+0x68>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d909      	bls.n	8003002 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	; 0x58
 8003000:	e007      	b.n	8003012 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	aaaaaaab 	.word	0xaaaaaaab
 8003028:	0800beb8 	.word	0x0800beb8

0800302c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11f      	bne.n	8003086 <DMA_CheckFifoParam+0x5a>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d856      	bhi.n	80030fa <DMA_CheckFifoParam+0xce>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <DMA_CheckFifoParam+0x28>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003065 	.word	0x08003065
 8003058:	08003077 	.word	0x08003077
 800305c:	08003065 	.word	0x08003065
 8003060:	080030fb 	.word	0x080030fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d046      	beq.n	80030fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003074:	e043      	b.n	80030fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800307e:	d140      	bne.n	8003102 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e03d      	b.n	8003102 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	d121      	bne.n	80030d4 <DMA_CheckFifoParam+0xa8>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d837      	bhi.n	8003106 <DMA_CheckFifoParam+0xda>
 8003096:	a201      	add	r2, pc, #4	; (adr r2, 800309c <DMA_CheckFifoParam+0x70>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b3 	.word	0x080030b3
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	080030c5 	.word	0x080030c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      break;
 80030b0:	e030      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d025      	beq.n	800310a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c2:	e022      	b.n	800310a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030cc:	d11f      	bne.n	800310e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030d2:	e01c      	b.n	800310e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d903      	bls.n	80030e2 <DMA_CheckFifoParam+0xb6>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d003      	beq.n	80030e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030e0:	e018      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      break;
 80030e6:	e015      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e00b      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 80030fa:	bf00      	nop
 80030fc:	e00a      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e008      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 8003102:	bf00      	nop
 8003104:	e006      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
 8003108:	e004      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
 800310c:	e002      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;   
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
    }
  } 
  
  return status; 
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e165      	b.n	800340c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 8154 	bne.w	8003406 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d005      	beq.n	8003176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	2b02      	cmp	r3, #2
 8003174:	d130      	bne.n	80031d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 0201 	and.w	r2, r3, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d017      	beq.n	8003214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d123      	bne.n	8003268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0203 	and.w	r2, r3, #3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80ae 	beq.w	8003406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <HAL_GPIO_Init+0x300>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	4a5c      	ldr	r2, [pc, #368]	; (8003424 <HAL_GPIO_Init+0x300>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ba:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <HAL_GPIO_Init+0x300>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a58      	ldr	r2, [pc, #352]	; (8003428 <HAL_GPIO_Init+0x304>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4f      	ldr	r2, [pc, #316]	; (800342c <HAL_GPIO_Init+0x308>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d025      	beq.n	800333e <HAL_GPIO_Init+0x21a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <HAL_GPIO_Init+0x30c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01f      	beq.n	800333a <HAL_GPIO_Init+0x216>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_GPIO_Init+0x310>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d019      	beq.n	8003336 <HAL_GPIO_Init+0x212>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <HAL_GPIO_Init+0x314>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_GPIO_Init+0x20e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4b      	ldr	r2, [pc, #300]	; (800343c <HAL_GPIO_Init+0x318>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00d      	beq.n	800332e <HAL_GPIO_Init+0x20a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_GPIO_Init+0x31c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x206>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a49      	ldr	r2, [pc, #292]	; (8003444 <HAL_GPIO_Init+0x320>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_GPIO_Init+0x202>
 8003322:	2306      	movs	r3, #6
 8003324:	e00c      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 8003326:	2307      	movs	r3, #7
 8003328:	e00a      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 800332a:	2305      	movs	r3, #5
 800332c:	e008      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 800332e:	2304      	movs	r3, #4
 8003330:	e006      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 8003332:	2303      	movs	r3, #3
 8003334:	e004      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 8003336:	2302      	movs	r3, #2
 8003338:	e002      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_GPIO_Init+0x21c>
 800333e:	2300      	movs	r3, #0
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f002 0203 	and.w	r2, r2, #3
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4093      	lsls	r3, r2
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003350:	4935      	ldr	r1, [pc, #212]	; (8003428 <HAL_GPIO_Init+0x304>)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_GPIO_Init+0x324>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003382:	4a31      	ldr	r2, [pc, #196]	; (8003448 <HAL_GPIO_Init+0x324>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_GPIO_Init+0x324>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_GPIO_Init+0x324>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b2:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_GPIO_Init+0x324>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_GPIO_Init+0x324>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_GPIO_Init+0x324>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_GPIO_Init+0x324>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	f67f ae96 	bls.w	8003140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40013800 	.word	0x40013800
 800342c:	40020000 	.word	0x40020000
 8003430:	40020400 	.word	0x40020400
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40021000 	.word	0x40021000
 8003440:	40021400 	.word	0x40021400
 8003444:	40021800 	.word	0x40021800
 8003448:	40013c00 	.word	0x40013c00

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003468:	e003      	b.n	8003472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	041a      	lsls	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	619a      	str	r2, [r3, #24]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003490:	887a      	ldrh	r2, [r7, #2]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4013      	ands	r3, r2
 8003496:	041a      	lsls	r2, r3, #16
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43d9      	mvns	r1, r3
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	400b      	ands	r3, r1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	619a      	str	r2, [r3, #24]
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e12b      	b.n	800371e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe f8ac 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003518:	f002 ffdc 	bl	80064d4 <HAL_RCC_GetPCLK1Freq>
 800351c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a81      	ldr	r2, [pc, #516]	; (8003728 <HAL_I2C_Init+0x274>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d807      	bhi.n	8003538 <HAL_I2C_Init+0x84>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a80      	ldr	r2, [pc, #512]	; (800372c <HAL_I2C_Init+0x278>)
 800352c:	4293      	cmp	r3, r2
 800352e:	bf94      	ite	ls
 8003530:	2301      	movls	r3, #1
 8003532:	2300      	movhi	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e006      	b.n	8003546 <HAL_I2C_Init+0x92>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a7d      	ldr	r2, [pc, #500]	; (8003730 <HAL_I2C_Init+0x27c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	bf94      	ite	ls
 8003540:	2301      	movls	r3, #1
 8003542:	2300      	movhi	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0e7      	b.n	800371e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a78      	ldr	r2, [pc, #480]	; (8003734 <HAL_I2C_Init+0x280>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0c9b      	lsrs	r3, r3, #18
 8003558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_I2C_Init+0x274>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d802      	bhi.n	8003588 <HAL_I2C_Init+0xd4>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3301      	adds	r3, #1
 8003586:	e009      	b.n	800359c <HAL_I2C_Init+0xe8>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_I2C_Init+0x284>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	3301      	adds	r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	495c      	ldr	r1, [pc, #368]	; (8003728 <HAL_I2C_Init+0x274>)
 80035b8:	428b      	cmp	r3, r1
 80035ba:	d819      	bhi.n	80035f0 <HAL_I2C_Init+0x13c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e59      	subs	r1, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d0:	400b      	ands	r3, r1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_I2C_Init+0x138>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e59      	subs	r1, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ea:	e051      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 80035ec:	2304      	movs	r3, #4
 80035ee:	e04f      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <HAL_I2C_Init+0x168>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e012      	b.n	8003642 <HAL_I2C_Init+0x18e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e58      	subs	r0, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	0099      	lsls	r1, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Init+0x196>
 8003646:	2301      	movs	r3, #1
 8003648:	e022      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <HAL_I2C_Init+0x1bc>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1e58      	subs	r0, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	440b      	add	r3, r1
 8003660:	fbb0 f3f3 	udiv	r3, r0, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366e:	e00f      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e58      	subs	r0, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	0099      	lsls	r1, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	fbb0 f3f3 	udiv	r3, r0, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	6809      	ldr	r1, [r1, #0]
 8003694:	4313      	orrs	r3, r2
 8003696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6911      	ldr	r1, [r2, #16]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	000186a0 	.word	0x000186a0
 800372c:	001e847f 	.word	0x001e847f
 8003730:	003d08ff 	.word	0x003d08ff
 8003734:	431bde83 	.word	0x431bde83
 8003738:	10624dd3 	.word	0x10624dd3

0800373c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b10      	cmp	r3, #16
 800376a:	d003      	beq.n	8003774 <HAL_I2C_EV_IRQHandler+0x38>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	f040 80c1 	bne.w	80038f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <HAL_I2C_EV_IRQHandler+0x6e>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003794:	d003      	beq.n	800379e <HAL_I2C_EV_IRQHandler+0x62>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_EV_IRQHandler+0x66>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x68>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f000 8132 	beq.w	8003a0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_I2C_EV_IRQHandler+0x92>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	0a5b      	lsrs	r3, r3, #9
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f001 fb5b 	bl	8004e7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fcd2 	bl	8004170 <I2C_Master_SB>
 80037cc:	e092      	b.n	80038f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	08db      	lsrs	r3, r3, #3
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0xb2>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	0a5b      	lsrs	r3, r3, #9
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fd48 	bl	800427c <I2C_Master_ADD10>
 80037ec:	e082      	b.n	80038f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0xd2>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	0a5b      	lsrs	r3, r3, #9
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fd62 	bl	80042d0 <I2C_Master_ADDR>
 800380c:	e072      	b.n	80038f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03b      	beq.n	8003892 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	f000 80f3 	beq.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	09db      	lsrs	r3, r3, #7
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <HAL_I2C_EV_IRQHandler+0x11c>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <HAL_I2C_EV_IRQHandler+0x11c>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f94c 	bl	8003aee <I2C_MasterTransmit_TXE>
 8003856:	e04d      	b.n	80038f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80d6 	beq.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	0a5b      	lsrs	r3, r3, #9
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80cf 	beq.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003874:	7bbb      	ldrb	r3, [r7, #14]
 8003876:	2b21      	cmp	r3, #33	; 0x21
 8003878:	d103      	bne.n	8003882 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9d3 	bl	8003c26 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003880:	e0c7      	b.n	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	f040 80c4 	bne.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa41 	bl	8003d12 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003890:	e0bf      	b.n	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	f000 80b7 	beq.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00f      	beq.n	80038d0 <HAL_I2C_EV_IRQHandler+0x194>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	0a9b      	lsrs	r3, r3, #10
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_I2C_EV_IRQHandler+0x194>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fab6 	bl	8003e3a <I2C_MasterReceive_RXNE>
 80038ce:	e011      	b.n	80038f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 809a 	beq.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	0a5b      	lsrs	r3, r3, #9
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8093 	beq.w	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fb55 	bl	8003f9c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f2:	e08e      	b.n	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80038f4:	e08d      	b.n	8003a12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e007      	b.n	8003918 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <HAL_I2C_EV_IRQHandler+0x20e>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	0a5b      	lsrs	r3, r3, #9
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003940:	69b9      	ldr	r1, [r7, #24]
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 ff13 	bl	800476e <I2C_Slave_ADDR>
 8003948:	e066      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_I2C_EV_IRQHandler+0x22e>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	0a5b      	lsrs	r3, r3, #9
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 ff4e 	bl	8004804 <I2C_Slave_STOPF>
 8003968:	e056      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	2b21      	cmp	r3, #33	; 0x21
 800396e:	d002      	beq.n	8003976 <HAL_I2C_EV_IRQHandler+0x23a>
 8003970:	7bbb      	ldrb	r3, [r7, #14]
 8003972:	2b29      	cmp	r3, #41	; 0x29
 8003974:	d125      	bne.n	80039c2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	09db      	lsrs	r3, r3, #7
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00f      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x266>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	0a9b      	lsrs	r3, r3, #10
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x266>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fe29 	bl	80045f2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a0:	e039      	b.n	8003a16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d033      	beq.n	8003a16 <HAL_I2C_EV_IRQHandler+0x2da>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	0a5b      	lsrs	r3, r3, #9
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02d      	beq.n	8003a16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fe56 	bl	800466c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c0:	e029      	b.n	8003a16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00f      	beq.n	80039ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	0a9b      	lsrs	r3, r3, #10
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fe61 	bl	80046ae <I2C_SlaveReceive_RXNE>
 80039ec:	e014      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	0a5b      	lsrs	r3, r3, #9
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fe8f 	bl	800472a <I2C_SlaveReceive_BTF>
 8003a0c:	e004      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b04:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d150      	bne.n	8003bb6 <I2C_MasterTransmit_TXE+0xc8>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b21      	cmp	r3, #33	; 0x21
 8003b18:	d14d      	bne.n	8003bb6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d01d      	beq.n	8003b5c <I2C_MasterTransmit_TXE+0x6e>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d01a      	beq.n	8003b5c <I2C_MasterTransmit_TXE+0x6e>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b2c:	d016      	beq.n	8003b5c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b3c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2211      	movs	r2, #17
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff62 	bl	8003a1e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b5a:	e060      	b.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b6a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d107      	bne.n	8003ba6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff7d 	bl	8003a9e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ba4:	e03b      	b.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff35 	bl	8003a1e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bb4:	e033      	b.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b21      	cmp	r3, #33	; 0x21
 8003bba:	d005      	beq.n	8003bc8 <I2C_MasterTransmit_TXE+0xda>
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d12d      	bne.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b22      	cmp	r3, #34	; 0x22
 8003bc6:	d12a      	bne.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003be2:	e01c      	b.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d103      	bne.n	8003bf8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f88e 	bl	8003d12 <I2C_MemoryTransmit_TXE_BTF>
}
 8003bf6:	e012      	b.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c1c:	e7ff      	b.n	8003c1e <I2C_MasterTransmit_TXE+0x130>
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b21      	cmp	r3, #33	; 0x21
 8003c3e:	d164      	bne.n	8003d0a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d012      	beq.n	8003c70 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c6e:	e04c      	b.n	8003d0a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d01d      	beq.n	8003cb2 <I2C_MasterTransmit_BTF+0x8c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d01a      	beq.n	8003cb2 <I2C_MasterTransmit_BTF+0x8c>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c82:	d016      	beq.n	8003cb2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c92:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2211      	movs	r2, #17
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff feb7 	bl	8003a1e <HAL_I2C_MasterTxCpltCallback>
}
 8003cb0:	e02b      	b.n	8003d0a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cc0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d107      	bne.n	8003cfc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fed2 	bl	8003a9e <HAL_I2C_MemTxCpltCallback>
}
 8003cfa:	e006      	b.n	8003d0a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe8a 	bl	8003a1e <HAL_I2C_MasterTxCpltCallback>
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11d      	bne.n	8003d66 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10b      	bne.n	8003d4a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003d48:	e073      	b.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	121b      	asrs	r3, r3, #8
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d64:	e065      	b.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10b      	bne.n	8003d86 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d84:	e055      	b.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d151      	bne.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b22      	cmp	r3, #34	; 0x22
 8003d92:	d10d      	bne.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dae:	e040      	b.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d015      	beq.n	8003de6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b21      	cmp	r3, #33	; 0x21
 8003dbe:	d112      	bne.n	8003de6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003de4:	e025      	b.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b21      	cmp	r3, #33	; 0x21
 8003df4:	d11d      	bne.n	8003e32 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e04:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fe36 	bl	8003a9e <HAL_I2C_MemTxCpltCallback>
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b22      	cmp	r3, #34	; 0x22
 8003e4c:	f040 80a2 	bne.w	8003f94 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d921      	bls.n	8003ea2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	f040 8082 	bne.w	8003f94 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003ea0:	e078      	b.n	8003f94 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d074      	beq.n	8003f94 <I2C_MasterReceive_RXNE+0x15a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <I2C_MasterReceive_RXNE+0x7c>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d16e      	bne.n	8003f94 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 ffae 	bl	8004e18 <I2C_WaitOnSTOPRequestThroughIT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d142      	bne.n	8003f48 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ee0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d10a      	bne.n	8003f32 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fdc1 	bl	8003ab2 <HAL_I2C_MemRxCpltCallback>
}
 8003f30:	e030      	b.n	8003f94 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2212      	movs	r2, #18
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fd76 	bl	8003a32 <HAL_I2C_MasterRxCpltCallback>
}
 8003f46:	e025      	b.n	8003f94 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fd99 	bl	8003ac6 <HAL_I2C_ErrorCallback>
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11b      	bne.n	8003fec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fea:	e0bd      	b.n	8004168 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d129      	bne.n	800404a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004004:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d00a      	beq.n	8004022 <I2C_MasterReceive_BTF+0x86>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d007      	beq.n	8004022 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004020:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004048:	e08e      	b.n	8004168 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d176      	bne.n	8004142 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <I2C_MasterReceive_BTF+0xc4>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b10      	cmp	r3, #16
 800405e:	d108      	bne.n	8004072 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e019      	b.n	80040a6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d002      	beq.n	800407e <I2C_MasterReceive_BTF+0xe2>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d108      	bne.n	8004090 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e00a      	b.n	80040a6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b10      	cmp	r3, #16
 8004094:	d007      	beq.n	80040a6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004100:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d10a      	bne.n	800412c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fcc4 	bl	8003ab2 <HAL_I2C_MemRxCpltCallback>
}
 800412a:	e01d      	b.n	8004168 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2212      	movs	r2, #18
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fc79 	bl	8003a32 <HAL_I2C_MasterRxCpltCallback>
}
 8004140:	e012      	b.n	8004168 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d117      	bne.n	80041b4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800419c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800419e:	e067      	b.n	8004270 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]
}
 80041b2:	e05d      	b.n	8004270 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041bc:	d133      	bne.n	8004226 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b21      	cmp	r3, #33	; 0x21
 80041c8:	d109      	bne.n	80041de <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041da:	611a      	str	r2, [r3, #16]
 80041dc:	e008      	b.n	80041f0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <I2C_Master_SB+0x92>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	2b00      	cmp	r3, #0
 8004208:	d032      	beq.n	8004270 <I2C_Master_SB+0x100>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02d      	beq.n	8004270 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004222:	605a      	str	r2, [r3, #4]
}
 8004224:	e024      	b.n	8004270 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10e      	bne.n	800424c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	b29b      	uxth	r3, r3
 8004234:	11db      	asrs	r3, r3, #7
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0306 	and.w	r3, r3, #6
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f063 030f 	orn	r3, r3, #15
 8004242:	b2da      	uxtb	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]
}
 800424a:	e011      	b.n	8004270 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10d      	bne.n	8004270 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	b29b      	uxth	r3, r3
 800425a:	11db      	asrs	r3, r3, #7
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0306 	and.w	r3, r3, #6
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f063 030e 	orn	r3, r3, #14
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	b2da      	uxtb	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <I2C_Master_ADD10+0x26>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00c      	beq.n	80042c4 <I2C_Master_ADD10+0x48>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c2:	605a      	str	r2, [r3, #4]
  }
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b091      	sub	sp, #68	; 0x44
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	f040 8169 	bne.w	80045ce <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10f      	bne.n	8004324 <I2C_Master_ADDR+0x54>
 8004304:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d10b      	bne.n	8004324 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	e160      	b.n	80045e6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <I2C_Master_ADDR+0x98>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004334:	d118      	bne.n	8004368 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	651a      	str	r2, [r3, #80]	; 0x50
 8004366:	e13e      	b.n	80045e6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d113      	bne.n	800439a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e115      	b.n	80045c6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 808a 	bne.w	80044ba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043ac:	d137      	bne.n	800441e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043cc:	d113      	bne.n	80043f6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	e0e7      	b.n	80045c6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	623b      	str	r3, [r7, #32]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e0d3      	b.n	80045c6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	2b08      	cmp	r3, #8
 8004422:	d02e      	beq.n	8004482 <I2C_Master_ADDR+0x1b2>
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	2b20      	cmp	r3, #32
 8004428:	d02b      	beq.n	8004482 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800442a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442c:	2b12      	cmp	r3, #18
 800442e:	d102      	bne.n	8004436 <I2C_Master_ADDR+0x166>
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	2b01      	cmp	r3, #1
 8004434:	d125      	bne.n	8004482 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b04      	cmp	r3, #4
 800443a:	d00e      	beq.n	800445a <I2C_Master_ADDR+0x18a>
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b02      	cmp	r3, #2
 8004440:	d00b      	beq.n	800445a <I2C_Master_ADDR+0x18a>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b10      	cmp	r3, #16
 8004446:	d008      	beq.n	800445a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e007      	b.n	800446a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004468:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	e0a1      	b.n	80045c6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e085      	b.n	80045c6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d14d      	bne.n	8004560 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d016      	beq.n	80044f8 <I2C_Master_ADDR+0x228>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d013      	beq.n	80044f8 <I2C_Master_ADDR+0x228>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d010      	beq.n	80044f8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004506:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	d117      	bne.n	8004548 <I2C_Master_ADDR+0x278>
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451e:	d00b      	beq.n	8004538 <I2C_Master_ADDR+0x268>
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	2b01      	cmp	r3, #1
 8004524:	d008      	beq.n	8004538 <I2C_Master_ADDR+0x268>
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	2b08      	cmp	r3, #8
 800452a:	d005      	beq.n	8004538 <I2C_Master_ADDR+0x268>
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	2b10      	cmp	r3, #16
 8004530:	d002      	beq.n	8004538 <I2C_Master_ADDR+0x268>
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	2b20      	cmp	r3, #32
 8004536:	d107      	bne.n	8004548 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004546:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	e032      	b.n	80045c6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800456e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d117      	bne.n	80045b0 <I2C_Master_ADDR+0x2e0>
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004586:	d00b      	beq.n	80045a0 <I2C_Master_ADDR+0x2d0>
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2b01      	cmp	r3, #1
 800458c:	d008      	beq.n	80045a0 <I2C_Master_ADDR+0x2d0>
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b08      	cmp	r3, #8
 8004592:	d005      	beq.n	80045a0 <I2C_Master_ADDR+0x2d0>
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	2b10      	cmp	r3, #16
 8004598:	d002      	beq.n	80045a0 <I2C_Master_ADDR+0x2d0>
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2b20      	cmp	r3, #32
 800459e:	d107      	bne.n	80045b0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045cc:	e00b      	b.n	80045e6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	e7ff      	b.n	80045e6 <I2C_Master_ADDR+0x316>
 80045e6:	bf00      	nop
 80045e8:	3744      	adds	r7, #68	; 0x44
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02b      	beq.n	8004664 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d114      	bne.n	8004664 <I2C_SlaveTransmit_TXE+0x72>
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b29      	cmp	r3, #41	; 0x29
 800463e:	d111      	bne.n	8004664 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2221      	movs	r2, #33	; 0x21
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2228      	movs	r2, #40	; 0x28
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff f9f1 	bl	8003a46 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02c      	beq.n	8004722 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d114      	bne.n	8004722 <I2C_SlaveReceive_RXNE+0x74>
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b2a      	cmp	r3, #42	; 0x2a
 80046fc:	d111      	bne.n	8004722 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2222      	movs	r2, #34	; 0x22
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2228      	movs	r2, #40	; 0x28
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff f99c 	bl	8003a5a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004788:	2b28      	cmp	r3, #40	; 0x28
 800478a:	d127      	bne.n	80047dc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	81bb      	strh	r3, [r7, #12]
 80047be:	e002      	b.n	80047c6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047ce:	89ba      	ldrh	r2, [r7, #12]
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff f94a 	bl	8003a6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047da:	e00e      	b.n	80047fa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004822:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004850:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004860:	d172      	bne.n	8004948 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b22      	cmp	r3, #34	; 0x22
 8004866:	d002      	beq.n	800486e <I2C_Slave_STOPF+0x6a>
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b2a      	cmp	r3, #42	; 0x2a
 800486c:	d135      	bne.n	80048da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fb7c 	bl	8002fa4 <HAL_DMA_GetState>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d049      	beq.n	8004946 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	4a69      	ldr	r2, [pc, #420]	; (8004a5c <I2C_Slave_STOPF+0x258>)
 80048b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe f9c4 	bl	8002c4c <HAL_DMA_Abort_IT>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d03d      	beq.n	8004946 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048d4:	4610      	mov	r0, r2
 80048d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048d8:	e035      	b.n	8004946 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0204 	orr.w	r2, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fb46 	bl	8002fa4 <HAL_DMA_GetState>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d014      	beq.n	8004948 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	4a4e      	ldr	r2, [pc, #312]	; (8004a5c <I2C_Slave_STOPF+0x258>)
 8004924:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f98e 	bl	8002c4c <HAL_DMA_Abort_IT>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004940:	4610      	mov	r0, r2
 8004942:	4798      	blx	r3
 8004944:	e000      	b.n	8004948 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004946:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d03e      	beq.n	80049d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d112      	bne.n	8004986 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d112      	bne.n	80049ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f843 	bl	8004a64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049de:	e039      	b.n	8004a54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b2a      	cmp	r3, #42	; 0x2a
 80049e4:	d109      	bne.n	80049fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2228      	movs	r2, #40	; 0x28
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff f830 	bl	8003a5a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b28      	cmp	r3, #40	; 0x28
 8004a04:	d111      	bne.n	8004a2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <I2C_Slave_STOPF+0x25c>)
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff f831 	bl	8003a8a <HAL_I2C_ListenCpltCallback>
}
 8004a28:	e014      	b.n	8004a54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	2b22      	cmp	r3, #34	; 0x22
 8004a30:	d002      	beq.n	8004a38 <I2C_Slave_STOPF+0x234>
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b22      	cmp	r3, #34	; 0x22
 8004a36:	d10d      	bne.n	8004a54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff f803 	bl	8003a5a <HAL_I2C_SlaveRxCpltCallback>
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08004cc9 	.word	0x08004cc9
 8004a60:	ffff0000 	.word	0xffff0000

08004a64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a7c:	7bbb      	ldrb	r3, [r7, #14]
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d002      	beq.n	8004a88 <I2C_ITError+0x24>
 8004a82:	7bbb      	ldrb	r3, [r7, #14]
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d10a      	bne.n	8004a9e <I2C_ITError+0x3a>
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b22      	cmp	r3, #34	; 0x22
 8004a8c:	d107      	bne.n	8004a9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aa4:	2b28      	cmp	r3, #40	; 0x28
 8004aa6:	d107      	bne.n	8004ab8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2228      	movs	r2, #40	; 0x28
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ab6:	e015      	b.n	8004ae4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac6:	d00a      	beq.n	8004ade <I2C_ITError+0x7a>
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b60      	cmp	r3, #96	; 0x60
 8004acc:	d007      	beq.n	8004ade <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af2:	d162      	bne.n	8004bba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d020      	beq.n	8004b54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <I2C_ITError+0x25c>)
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe f894 	bl	8002c4c <HAL_DMA_Abort_IT>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8089 	beq.w	8004c3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4798      	blx	r3
 8004b52:	e074      	b.n	8004c3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	4a59      	ldr	r2, [pc, #356]	; (8004cc0 <I2C_ITError+0x25c>)
 8004b5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe f873 	bl	8002c4c <HAL_DMA_Abort_IT>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d068      	beq.n	8004c3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d10b      	bne.n	8004b92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4798      	blx	r3
 8004bb8:	e041      	b.n	8004c3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b60      	cmp	r3, #96	; 0x60
 8004bc4:	d125      	bne.n	8004c12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d10b      	bne.n	8004bfa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fe ff65 	bl	8003ada <HAL_I2C_AbortCpltCallback>
 8004c10:	e015      	b.n	8004c3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d10b      	bne.n	8004c38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fe ff44 	bl	8003ac6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10e      	bne.n	8004c6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d113      	bne.n	8004cb8 <I2C_ITError+0x254>
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b28      	cmp	r3, #40	; 0x28
 8004c94:	d110      	bne.n	8004cb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <I2C_ITError+0x260>)
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fe fee9 	bl	8003a8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08004cc9 	.word	0x08004cc9
 8004cc4:	ffff0000 	.word	0xffff0000

08004cc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <I2C_DMAAbort+0x148>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <I2C_DMAAbort+0x14c>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	0a1a      	lsrs	r2, r3, #8
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d0e:	e00a      	b.n	8004d26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d0ea      	beq.n	8004cfc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	2200      	movs	r2, #0
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2200      	movs	r2, #0
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	2200      	movs	r2, #0
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d10e      	bne.n	8004db6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f7fe fe93 	bl	8003ada <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004db4:	e027      	b.n	8004e06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dbc:	2b28      	cmp	r3, #40	; 0x28
 8004dbe:	d117      	bne.n	8004df0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2228      	movs	r2, #40	; 0x28
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dee:	e007      	b.n	8004e00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e00:	6978      	ldr	r0, [r7, #20]
 8004e02:	f7fe fe60 	bl	8003ac6 <HAL_I2C_ErrorCallback>
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000000 	.word	0x20000000
 8004e14:	14f8b589 	.word	0x14f8b589

08004e18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	0a1a      	lsrs	r2, r3, #8
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e008      	b.n	8004e68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e64:	d0e9      	beq.n	8004e3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20000000 	.word	0x20000000
 8004e78:	14f8b589 	.word	0x14f8b589

08004e7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e8c:	d103      	bne.n	8004e96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e94:	e007      	b.n	8004ea6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e9e:	d102      	bne.n	8004ea6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb4:	b08f      	sub	sp, #60	; 0x3c
 8004eb6:	af0a      	add	r7, sp, #40	; 0x28
 8004eb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e116      	b.n	80050f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f006 fbf2 	bl	800b6c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 fb05 	bl	8008512 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	687e      	ldr	r6, [r7, #4]
 8004f10:	466d      	mov	r5, sp
 8004f12:	f106 0410 	add.w	r4, r6, #16
 8004f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f22:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f26:	1d33      	adds	r3, r6, #4
 8004f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f2a:	6838      	ldr	r0, [r7, #0]
 8004f2c:	f003 f9dc 	bl	80082e8 <USB_CoreInit>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0d7      	b.n	80050f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f003 faf3 	bl	8008534 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
 8004f52:	e04a      	b.n	8004fea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f54:	7bfa      	ldrb	r2, [r7, #15]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	333d      	adds	r3, #61	; 0x3d
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	333c      	adds	r3, #60	; 0x3c
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	b298      	uxth	r0, r3
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3342      	adds	r3, #66	; 0x42
 8004f90:	4602      	mov	r2, r0
 8004f92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	333f      	adds	r3, #63	; 0x3f
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3344      	adds	r3, #68	; 0x44
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	3348      	adds	r3, #72	; 0x48
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	3350      	adds	r3, #80	; 0x50
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	7bfa      	ldrb	r2, [r7, #15]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d3af      	bcc.n	8004f54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e044      	b.n	8005084 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	3301      	adds	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d3b5      	bcc.n	8004ffa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	687e      	ldr	r6, [r7, #4]
 8005096:	466d      	mov	r5, sp
 8005098:	f106 0410 	add.w	r4, r6, #16
 800509c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800509e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ac:	1d33      	adds	r3, r6, #4
 80050ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b0:	6838      	ldr	r0, [r7, #0]
 80050b2:	f003 fa8b 	bl	80085cc <USB_DevInit>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e014      	b.n	80050f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d102      	bne.n	80050e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f891 	bl	8006208 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f004 fafa 	bl	80096e4 <USB_DevDisconnect>

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_PCD_Start+0x1c>
 8005112:	2302      	movs	r3, #2
 8005114:	e020      	b.n	8005158 <HAL_PCD_Start+0x5e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	2b01      	cmp	r3, #1
 8005124:	d109      	bne.n	800513a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800512a:	2b01      	cmp	r3, #1
 800512c:	d005      	beq.n	800513a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f003 f9d6 	bl	80084f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f004 faaa 	bl	80096a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b08d      	sub	sp, #52	; 0x34
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f004 fb68 	bl	800984c <USB_GetMode>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 83ca 	bne.w	8005918 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f004 facc 	bl	8009726 <USB_ReadInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 83c0 	beq.w	8005916 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f004 fac3 	bl	8009726 <USB_ReadInterrupts>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d107      	bne.n	80051ba <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 0202 	and.w	r2, r2, #2
 80051b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fab1 	bl	8009726 <USB_ReadInterrupts>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d161      	bne.n	8005292 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0210 	bic.w	r2, r2, #16
 80051dc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	3304      	adds	r3, #4
 80051fc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	0c5b      	lsrs	r3, r3, #17
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	2b02      	cmp	r3, #2
 8005208:	d124      	bne.n	8005254 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d035      	beq.n	8005282 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6a38      	ldr	r0, [r7, #32]
 800522a:	f004 f8e8 	bl	80093fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800523a:	441a      	add	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800524c:	441a      	add	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	619a      	str	r2, [r3, #24]
 8005252:	e016      	b.n	8005282 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	0c5b      	lsrs	r3, r3, #17
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2b06      	cmp	r3, #6
 800525e:	d110      	bne.n	8005282 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005266:	2208      	movs	r2, #8
 8005268:	4619      	mov	r1, r3
 800526a:	6a38      	ldr	r0, [r7, #32]
 800526c:	f004 f8c7 	bl	80093fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800527c:	441a      	add	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0210 	orr.w	r2, r2, #16
 8005290:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f004 fa45 	bl	8009726 <USB_ReadInterrupts>
 800529c:	4603      	mov	r3, r0
 800529e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052a6:	d16e      	bne.n	8005386 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 fa4b 	bl	800974c <USB_ReadDevAllOutEpInterrupt>
 80052b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052b8:	e062      	b.n	8005380 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d057      	beq.n	8005374 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f004 fa70 	bl	80097b4 <USB_ReadDevOutEPInterrupt>
 80052d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00c      	beq.n	80052fa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	461a      	mov	r2, r3
 80052ee:	2301      	movs	r3, #1
 80052f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80052f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fddd 	bl	8005eb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00c      	beq.n	800531e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2308      	movs	r3, #8
 8005314:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fed7 	bl	80060cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	2310      	movs	r3, #16
 8005338:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	461a      	mov	r2, r3
 8005352:	2320      	movs	r3, #32
 8005354:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	461a      	mov	r2, r3
 800536e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005372:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	3301      	adds	r3, #1
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d199      	bne.n	80052ba <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f004 f9cb 	bl	8009726 <USB_ReadInterrupts>
 8005390:	4603      	mov	r3, r0
 8005392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005396:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800539a:	f040 80c0 	bne.w	800551e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f004 f9ec 	bl	8009780 <USB_ReadDevAllInEpInterrupt>
 80053a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80053ae:	e0b2      	b.n	8005516 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80a7 	beq.w	800550a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f004 fa12 	bl	80097f0 <USB_ReadDevInEPInterrupt>
 80053cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d057      	beq.n	8005488 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	2201      	movs	r2, #1
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f8:	4013      	ands	r3, r2
 80053fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	461a      	mov	r2, r3
 800540a:	2301      	movs	r3, #1
 800540c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d132      	bne.n	800547c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3348      	adds	r3, #72	; 0x48
 8005426:	6819      	ldr	r1, [r3, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4403      	add	r3, r0
 8005436:	3344      	adds	r3, #68	; 0x44
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4419      	add	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4403      	add	r3, r0
 800544a:	3348      	adds	r3, #72	; 0x48
 800544c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d113      	bne.n	800547c <HAL_PCD_IRQHandler+0x31c>
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	3350      	adds	r3, #80	; 0x50
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d108      	bne.n	800547c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005474:	461a      	mov	r2, r3
 8005476:	2101      	movs	r1, #1
 8005478:	f004 fa1a 	bl	80098b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	b2db      	uxtb	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f006 f9cf 	bl	800b826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	461a      	mov	r2, r3
 80054a0:	2308      	movs	r3, #8
 80054a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	461a      	mov	r2, r3
 80054bc:	2310      	movs	r3, #16
 80054be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	461a      	mov	r2, r3
 80054d8:	2340      	movs	r3, #64	; 0x40
 80054da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	461a      	mov	r2, r3
 80054f4:	2302      	movs	r3, #2
 80054f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fc48 	bl	8005d9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	3301      	adds	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	f47f af49 	bne.w	80053b0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f004 f8ff 	bl	8009726 <USB_ReadInterrupts>
 8005528:	4603      	mov	r3, r0
 800552a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005532:	d122      	bne.n	800557a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800554e:	2b01      	cmp	r3, #1
 8005550:	d108      	bne.n	8005564 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800555a:	2100      	movs	r1, #0
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f006 fbb1 	bl	800bcc4 <HAL_PCDEx_LPM_Callback>
 8005562:	e002      	b.n	800556a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f006 f9d5 	bl	800b914 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f004 f8d1 	bl	8009726 <USB_ReadInterrupts>
 8005584:	4603      	mov	r3, r0
 8005586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558e:	d112      	bne.n	80055b6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d102      	bne.n	80055a6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f006 f991 	bl	800b8c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80055b4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f004 f8b3 	bl	8009726 <USB_ReadInterrupts>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ca:	d121      	bne.n	8005610 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80055da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d111      	bne.n	800560a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	f003 020f 	and.w	r2, r3, #15
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005600:	2101      	movs	r1, #1
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f006 fb5e 	bl	800bcc4 <HAL_PCDEx_LPM_Callback>
 8005608:	e002      	b.n	8005610 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f006 f95c 	bl	800b8c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f004 f886 	bl	8009726 <USB_ReadInterrupts>
 800561a:	4603      	mov	r3, r0
 800561c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	f040 80c7 	bne.w	80057b6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2110      	movs	r1, #16
 8005642:	4618      	mov	r0, r3
 8005644:	f003 f920 	bl	8008888 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564c:	e056      	b.n	80056fc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	461a      	mov	r2, r3
 800565c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005660:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005680:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	461a      	mov	r2, r3
 80056b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	3301      	adds	r3, #1
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005702:	429a      	cmp	r2, r3
 8005704:	d3a3      	bcc.n	800564e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005714:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005718:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005732:	f043 030b 	orr.w	r3, r3, #11
 8005736:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005748:	f043 030b 	orr.w	r3, r3, #11
 800574c:	6453      	str	r3, [r2, #68]	; 0x44
 800574e:	e015      	b.n	800577c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005762:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005766:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005776:	f043 030b 	orr.w	r3, r3, #11
 800577a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800578e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057a0:	461a      	mov	r2, r3
 80057a2:	f004 f885 	bl	80098b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 ffb3 	bl	8009726 <USB_ReadInterrupts>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	d124      	bne.n	8005816 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f004 f849 	bl	8009868 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f003 f8b1 	bl	8008942 <USB_GetDevSpeed>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681c      	ldr	r4, [r3, #0]
 80057ec:	f000 fe66 	bl	80064bc <HAL_RCC_GetHCLKFreq>
 80057f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	4620      	mov	r0, r4
 80057fc:	f002 fdd6 	bl	80083ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f006 f838 	bl	800b876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005814:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f003 ff83 	bl	8009726 <USB_ReadInterrupts>
 8005820:	4603      	mov	r3, r0
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b08      	cmp	r3, #8
 8005828:	d10a      	bne.n	8005840 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f006 f815 	bl	800b85a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695a      	ldr	r2, [r3, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f002 0208 	and.w	r2, r2, #8
 800583e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f003 ff6e 	bl	8009726 <USB_ReadInterrupts>
 800584a:	4603      	mov	r3, r0
 800584c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005854:	d10f      	bne.n	8005876 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	b2db      	uxtb	r3, r3
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f006 f877 	bl	800b954 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f003 ff53 	bl	8009726 <USB_ReadInterrupts>
 8005880:	4603      	mov	r3, r0
 8005882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800588a:	d10f      	bne.n	80058ac <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f006 f84a 	bl	800b930 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 ff38 	bl	8009726 <USB_ReadInterrupts>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d10a      	bne.n	80058d8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f006 f858 	bl	800b978 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80058d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f003 ff22 	bl	8009726 <USB_ReadInterrupts>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d115      	bne.n	8005918 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f006 f848 	bl	800b994 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	e000      	b.n	8005918 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005916:	bf00      	nop
    }
  }
}
 8005918:	3734      	adds	r7, #52	; 0x34
 800591a:	46bd      	mov	sp, r7
 800591c:	bd90      	pop	{r4, r7, pc}

0800591e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_PCD_SetAddress+0x1a>
 8005934:	2302      	movs	r3, #2
 8005936:	e013      	b.n	8005960 <HAL_PCD_SetAddress+0x42>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f003 fe80 	bl	8009656 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4603      	mov	r3, r0
 8005978:	70fb      	strb	r3, [r7, #3]
 800597a:	460b      	mov	r3, r1
 800597c:	803b      	strh	r3, [r7, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da0f      	bge.n	80059ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	f003 020f 	and.w	r2, r3, #15
 8005994:	4613      	mov	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3338      	adds	r3, #56	; 0x38
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	3304      	adds	r3, #4
 80059a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	705a      	strb	r2, [r3, #1]
 80059ac:	e00f      	b.n	80059ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 020f 	and.w	r2, r3, #15
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	3304      	adds	r3, #4
 80059c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059da:	883a      	ldrh	r2, [r7, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	78ba      	ldrb	r2, [r7, #2]
 80059e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059f8:	78bb      	ldrb	r3, [r7, #2]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d102      	bne.n	8005a04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_PCD_EP_Open+0xaa>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e00e      	b.n	8005a30 <HAL_PCD_EP_Open+0xc8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 ffb3 	bl	800898c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da0f      	bge.n	8005a6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	f003 020f 	and.w	r2, r3, #15
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	3338      	adds	r3, #56	; 0x38
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	705a      	strb	r2, [r3, #1]
 8005a6a:	e00f      	b.n	8005a8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	3304      	adds	r3, #4
 8005a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_PCD_EP_Close+0x6e>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e00e      	b.n	8005ac4 <HAL_PCD_EP_Close+0x8c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f002 fff1 	bl	8008a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005adc:	7afb      	ldrb	r3, [r7, #11]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	3304      	adds	r3, #4
 8005af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d102      	bne.n	8005b28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	f003 facc 	bl	80090dc <USB_EP0StartXfer>
 8005b44:	e008      	b.n	8005b58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	f003 f87e 	bl	8008c54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f003 020f 	and.w	r2, r3, #15
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b84:	681b      	ldr	r3, [r3, #0]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	3338      	adds	r3, #56	; 0x38
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d102      	bne.n	8005bec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bec:	7afb      	ldrb	r3, [r7, #11]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	6979      	ldr	r1, [r7, #20]
 8005c04:	f003 fa6a 	bl	80090dc <USB_EP0StartXfer>
 8005c08:	e008      	b.n	8005c1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	6979      	ldr	r1, [r7, #20]
 8005c18:	f003 f81c 	bl	8008c54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	f003 020f 	and.w	r2, r3, #15
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d901      	bls.n	8005c44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e050      	b.n	8005ce6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da0f      	bge.n	8005c6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	f003 020f 	and.w	r2, r3, #15
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	3338      	adds	r3, #56	; 0x38
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	4413      	add	r3, r2
 8005c60:	3304      	adds	r3, #4
 8005c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	705a      	strb	r2, [r3, #1]
 8005c6a:	e00d      	b.n	8005c88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3304      	adds	r3, #4
 8005c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_PCD_EP_SetStall+0x82>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e01e      	b.n	8005ce6 <HAL_PCD_EP_SetStall+0xc0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f003 fbf9 	bl	80094ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	b2d9      	uxtb	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f003 fdea 	bl	80098b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d901      	bls.n	8005d0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e042      	b.n	8005d92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da0f      	bge.n	8005d34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	f003 020f 	and.w	r2, r3, #15
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	3338      	adds	r3, #56	; 0x38
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	3304      	adds	r3, #4
 8005d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	705a      	strb	r2, [r3, #1]
 8005d32:	e00f      	b.n	8005d54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_PCD_EP_ClrStall+0x86>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e00e      	b.n	8005d92 <HAL_PCD_EP_ClrStall+0xa4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68f9      	ldr	r1, [r7, #12]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f003 fc01 	bl	800958a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b08a      	sub	sp, #40	; 0x28
 8005d9e:	af02      	add	r7, sp, #8
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	3338      	adds	r3, #56	; 0x38
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d901      	bls.n	8005dd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e06c      	b.n	8005eac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d902      	bls.n	8005dee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3303      	adds	r3, #3
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005df6:	e02b      	b.n	8005e50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d902      	bls.n	8005e14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	3303      	adds	r3, #3
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68d9      	ldr	r1, [r3, #12]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4603      	mov	r3, r0
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f003 faa5 	bl	8009382 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	441a      	add	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d809      	bhi.n	8005e7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d203      	bcs.n	8005e7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1be      	bne.n	8005df8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d811      	bhi.n	8005eaa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	6939      	ldr	r1, [r7, #16]
 8005ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3720      	adds	r7, #32
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	333c      	adds	r3, #60	; 0x3c
 8005ecc:	3304      	adds	r3, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	f040 80a0 	bne.w	800602c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d015      	beq.n	8005f22 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a72      	ldr	r2, [pc, #456]	; (80060c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f240 80dd 	bls.w	80060ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80d7 	beq.w	80060ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1e:	6093      	str	r3, [r2, #8]
 8005f20:	e0cb      	b.n	80060ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2320      	movs	r3, #32
 8005f3c:	6093      	str	r3, [r2, #8]
 8005f3e:	e0bc      	b.n	80060ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 80b7 	bne.w	80060ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a5d      	ldr	r2, [pc, #372]	; (80060c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d90f      	bls.n	8005f74 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f70:	6093      	str	r3, [r2, #8]
 8005f72:	e0a2      	b.n	80060ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f86:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	0159      	lsls	r1, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	440b      	add	r3, r1
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005f9a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4403      	add	r3, r0
 8005faa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005fae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fc2:	6819      	ldr	r1, [r3, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4403      	add	r3, r0
 8005fd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4419      	add	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4403      	add	r3, r0
 8005fe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d114      	bne.n	800601e <PCD_EP_OutXfrComplete_int+0x16a>
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d108      	bne.n	800601e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006016:	461a      	mov	r2, r3
 8006018:	2101      	movs	r1, #1
 800601a:	f003 fc49 	bl	80098b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f005 fbe3 	bl	800b7f0 <HAL_PCD_DataOutStageCallback>
 800602a:	e046      	b.n	80060ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a26      	ldr	r2, [pc, #152]	; (80060c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d124      	bne.n	800607e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	461a      	mov	r2, r3
 800604c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	e032      	b.n	80060ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d008      	beq.n	8006070 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	461a      	mov	r2, r3
 800606c:	2320      	movs	r3, #32
 800606e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f005 fbba 	bl	800b7f0 <HAL_PCD_DataOutStageCallback>
 800607c:	e01d      	b.n	80060ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d114      	bne.n	80060ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060a6:	461a      	mov	r2, r3
 80060a8:	2100      	movs	r1, #0
 80060aa:	f003 fc01 	bl	80098b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f005 fb9b 	bl	800b7f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	4f54300a 	.word	0x4f54300a
 80060c8:	4f54310a 	.word	0x4f54310a

080060cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	333c      	adds	r3, #60	; 0x3c
 80060e4:	3304      	adds	r3, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a15      	ldr	r2, [pc, #84]	; (8006154 <PCD_EP_OutSetupPacket_int+0x88>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d90e      	bls.n	8006120 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	461a      	mov	r2, r3
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f005 fb53 	bl	800b7cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <PCD_EP_OutSetupPacket_int+0x88>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d90c      	bls.n	8006148 <PCD_EP_OutSetupPacket_int+0x7c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d108      	bne.n	8006148 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006140:	461a      	mov	r2, r3
 8006142:	2101      	movs	r1, #1
 8006144:	f003 fbb4 	bl	80098b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	4f54300a 	.word	0x4f54300a

08006158 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
 8006164:	4613      	mov	r3, r2
 8006166:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d107      	bne.n	8006186 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006176:	883b      	ldrh	r3, [r7, #0]
 8006178:	0419      	lsls	r1, r3, #16
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	430a      	orrs	r2, r1
 8006182:	629a      	str	r2, [r3, #40]	; 0x28
 8006184:	e028      	b.n	80061d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e00d      	b.n	80061b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	3340      	adds	r3, #64	; 0x40
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	3301      	adds	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
 80061b6:	7bfa      	ldrb	r2, [r7, #15]
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	429a      	cmp	r2, r3
 80061be:	d3ec      	bcc.n	800619a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061c0:	883b      	ldrh	r3, [r7, #0]
 80061c2:	0418      	lsls	r0, r3, #16
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	4302      	orrs	r2, r0
 80061d0:	3340      	adds	r3, #64	; 0x40
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	887a      	ldrh	r2, [r7, #2]
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623a:	f043 0303 	orr.w	r3, r3, #3
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a1f      	ldr	r2, [pc, #124]	; (80062e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6413      	str	r3, [r2, #64]	; 0x40
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800627c:	f7fb fc48 	bl	8001b10 <HAL_GetTick>
 8006280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006282:	e009      	b.n	8006298 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006284:	f7fb fc44 	bl	8001b10 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006292:	d901      	bls.n	8006298 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e01f      	b.n	80062d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a4:	d1ee      	bne.n	8006284 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ac:	f7fb fc30 	bl	8001b10 <HAL_GetTick>
 80062b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062b2:	e009      	b.n	80062c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062b4:	f7fb fc2c 	bl	8001b10 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c2:	d901      	bls.n	80062c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e007      	b.n	80062d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d4:	d1ee      	bne.n	80062b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40023800 	.word	0x40023800
 80062e4:	420e0040 	.word	0x420e0040
 80062e8:	40007000 	.word	0x40007000
 80062ec:	420e0044 	.word	0x420e0044

080062f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0cc      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006304:	4b68      	ldr	r3, [pc, #416]	; (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d90c      	bls.n	800632c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b65      	ldr	r3, [pc, #404]	; (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631a:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0b8      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d020      	beq.n	800637a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006344:	4b59      	ldr	r3, [pc, #356]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a58      	ldr	r2, [pc, #352]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800634e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800635c:	4b53      	ldr	r3, [pc, #332]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a52      	ldr	r2, [pc, #328]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006368:	4b50      	ldr	r3, [pc, #320]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	494d      	ldr	r1, [pc, #308]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d044      	beq.n	8006410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638e:	4b47      	ldr	r3, [pc, #284]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d119      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e07f      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d003      	beq.n	80063ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d107      	bne.n	80063be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ae:	4b3f      	ldr	r3, [pc, #252]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e06f      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063be:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e067      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ce:	4b37      	ldr	r3, [pc, #220]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 0203 	bic.w	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4934      	ldr	r1, [pc, #208]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e0:	f7fb fb96 	bl	8001b10 <HAL_GetTick>
 80063e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	e00a      	b.n	80063fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e8:	f7fb fb92 	bl	8001b10 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e04f      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	4b2b      	ldr	r3, [pc, #172]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 020c 	and.w	r2, r3, #12
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	429a      	cmp	r2, r3
 800640e:	d1eb      	bne.n	80063e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d20c      	bcs.n	8006438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b22      	ldr	r3, [pc, #136]	; (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006426:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d001      	beq.n	8006438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e032      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006444:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	4916      	ldr	r1, [pc, #88]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	490e      	ldr	r1, [pc, #56]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006476:	f000 fb6b 	bl	8006b50 <HAL_RCC_GetSysClockFreq>
 800647a:	4602      	mov	r2, r0
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	490a      	ldr	r1, [pc, #40]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006488:	5ccb      	ldrb	r3, [r1, r3]
 800648a:	fa22 f303 	lsr.w	r3, r2, r3
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fb faf6 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40023c00 	.word	0x40023c00
 80064ac:	40023800 	.word	0x40023800
 80064b0:	0800bea0 	.word	0x0800bea0
 80064b4:	20000000 	.word	0x20000000
 80064b8:	20000004 	.word	0x20000004

080064bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000000 	.word	0x20000000

080064d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064d8:	f7ff fff0 	bl	80064bc <HAL_RCC_GetHCLKFreq>
 80064dc:	4602      	mov	r2, r0
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	0a9b      	lsrs	r3, r3, #10
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	4903      	ldr	r1, [pc, #12]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ea:	5ccb      	ldrb	r3, [r1, r3]
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40023800 	.word	0x40023800
 80064f8:	0800beb0 	.word	0x0800beb0

080064fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08c      	sub	sp, #48	; 0x30
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d010      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006534:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	496c      	ldr	r1, [pc, #432]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006552:	2301      	movs	r3, #1
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d010      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006562:	4b64      	ldr	r3, [pc, #400]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006568:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	4960      	ldr	r1, [pc, #384]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006580:	2301      	movs	r3, #1
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d017      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006590:	4b58      	ldr	r3, [pc, #352]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	4955      	ldr	r1, [pc, #340]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ae:	d101      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80065b0:	2301      	movs	r3, #1
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80065bc:	2301      	movs	r3, #1
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065cc:	4b49      	ldr	r3, [pc, #292]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	4946      	ldr	r1, [pc, #280]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ea:	d101      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80065ec:	2301      	movs	r3, #1
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80065f8:	2301      	movs	r3, #1
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 808a 	beq.w	800671e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800660a:	2300      	movs	r3, #0
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006618:	6413      	str	r3, [r2, #64]	; 0x40
 800661a:	4b36      	ldr	r3, [pc, #216]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006622:	60bb      	str	r3, [r7, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006626:	4b34      	ldr	r3, [pc, #208]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800662c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006630:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006632:	f7fb fa6d 	bl	8001b10 <HAL_GetTick>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800663a:	f7fb fa69 	bl	8001b10 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e278      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800664c:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006658:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006660:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02f      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	429a      	cmp	r2, r3
 8006674:	d028      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006676:	4b1f      	ldr	r3, [pc, #124]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006680:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006692:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d114      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800669e:	f7fb fa37 	bl	8001b10 <HAL_GetTick>
 80066a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a4:	e00a      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a6:	f7fb fa33 	bl	8001b10 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e240      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0ee      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d4:	d114      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	4902      	ldr	r1, [pc, #8]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	608b      	str	r3, [r1, #8]
 80066f0:	e00c      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40007000 	.word	0x40007000
 80066fc:	42470e40 	.word	0x42470e40
 8006700:	4b4a      	ldr	r3, [pc, #296]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4a49      	ldr	r2, [pc, #292]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006706:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800670a:	6093      	str	r3, [r2, #8]
 800670c:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800670e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006718:	4944      	ldr	r1, [pc, #272]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800671a:	4313      	orrs	r3, r2
 800671c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006730:	4b3f      	ldr	r3, [pc, #252]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006732:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006740:	4b3a      	ldr	r3, [pc, #232]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006746:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674e:	4937      	ldr	r1, [pc, #220]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006762:	4b32      	ldr	r3, [pc, #200]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006768:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006770:	492e      	ldr	r1, [pc, #184]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006784:	4b29      	ldr	r3, [pc, #164]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800678a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	4926      	ldr	r1, [pc, #152]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a2:	d101      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80067a4:	2301      	movs	r3, #1
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	491a      	ldr	r1, [pc, #104]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d011      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	4911      	ldr	r1, [pc, #68]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f4:	d101      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80067f6:	2301      	movs	r3, #1
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d005      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006808:	f040 80ff 	bne.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006812:	f7fb f97d 	bl	8001b10 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006818:	e00e      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800681a:	f7fb f979 	bl	8001b10 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d907      	bls.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e188      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800682c:	40023800 	.word	0x40023800
 8006830:	424711e0 	.word	0x424711e0
 8006834:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006838:	4b7e      	ldr	r3, [pc, #504]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ea      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006860:	2b00      	cmp	r3, #0
 8006862:	d028      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d124      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800686c:	4b71      	ldr	r3, [pc, #452]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800686e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	3301      	adds	r3, #1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800687e:	4b6d      	ldr	r3, [pc, #436]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	431a      	orrs	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	3b01      	subs	r3, #1
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	431a      	orrs	r2, r3
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	061b      	lsls	r3, r3, #24
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	071b      	lsls	r3, r3, #28
 80068ae:	4961      	ldr	r1, [pc, #388]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ca:	d00a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d035      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e0:	d130      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80068e2:	4b54      	ldr	r3, [pc, #336]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e8:	0c1b      	lsrs	r3, r3, #16
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	3301      	adds	r3, #1
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068f4:	4b4f      	ldr	r3, [pc, #316]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fa:	0f1b      	lsrs	r3, r3, #28
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	019b      	lsls	r3, r3, #6
 800690c:	431a      	orrs	r2, r3
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	3b01      	subs	r3, #1
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	061b      	lsls	r3, r3, #24
 800691e:	431a      	orrs	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	071b      	lsls	r3, r3, #28
 8006924:	4943      	ldr	r1, [pc, #268]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800692c:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800692e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006932:	f023 021f 	bic.w	r2, r3, #31
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	3b01      	subs	r3, #1
 800693c:	493d      	ldr	r1, [pc, #244]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694c:	2b00      	cmp	r3, #0
 800694e:	d029      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006958:	d124      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800695a:	4b36      	ldr	r3, [pc, #216]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006960:	0c1b      	lsrs	r3, r3, #16
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	3301      	adds	r3, #1
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800696c:	4b31      	ldr	r3, [pc, #196]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800696e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006972:	0f1b      	lsrs	r3, r3, #28
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	019b      	lsls	r3, r3, #6
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	3b01      	subs	r3, #1
 800698e:	041b      	lsls	r3, r3, #16
 8006990:	431a      	orrs	r2, r3
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	061b      	lsls	r3, r3, #24
 8006996:	431a      	orrs	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	071b      	lsls	r3, r3, #28
 800699c:	4925      	ldr	r1, [pc, #148]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d016      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	019b      	lsls	r3, r3, #6
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	3b01      	subs	r3, #1
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	061b      	lsls	r3, r3, #24
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	071b      	lsls	r3, r3, #28
 80069d6:	4917      	ldr	r1, [pc, #92]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069de:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069e4:	f7fb f894 	bl	8001b10 <HAL_GetTick>
 80069e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069ec:	f7fb f890 	bl	8001b10 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e09f      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f040 8095 	bne.w	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a18:	f7fb f87a 	bl	8001b10 <HAL_GetTick>
 8006a1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a1e:	e00f      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a20:	f7fb f876 	bl	8001b10 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d908      	bls.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e085      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a32:	bf00      	nop
 8006a34:	40023800 	.word	0x40023800
 8006a38:	42470068 	.word	0x42470068
 8006a3c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a40:	4b41      	ldr	r3, [pc, #260]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4c:	d0e8      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d02b      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d127      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006a76:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7c:	0c1b      	lsrs	r3, r3, #16
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	3301      	adds	r3, #1
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	431a      	orrs	r2, r3
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	4928      	ldr	r1, [pc, #160]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006aac:	4b26      	ldr	r3, [pc, #152]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	3b01      	subs	r3, #1
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	4922      	ldr	r1, [pc, #136]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01d      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ada:	d118      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	0e1b      	lsrs	r3, r3, #24
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	019b      	lsls	r3, r3, #6
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	3b01      	subs	r3, #1
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	431a      	orrs	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	061b      	lsls	r3, r3, #24
 8006b06:	4910      	ldr	r1, [pc, #64]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b0e:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b14:	f7fa fffc 	bl	8001b10 <HAL_GetTick>
 8006b18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b1c:	f7fa fff8 	bl	8001b10 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e007      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b3a:	d1ef      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3730      	adds	r7, #48	; 0x30
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	42470070 	.word	0x42470070

08006b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b6c:	4bce      	ldr	r3, [pc, #824]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 030c 	and.w	r3, r3, #12
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	f200 818d 	bhi.w	8006e94 <HAL_RCC_GetSysClockFreq+0x344>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <HAL_RCC_GetSysClockFreq+0x30>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bb5 	.word	0x08006bb5
 8006b84:	08006e95 	.word	0x08006e95
 8006b88:	08006e95 	.word	0x08006e95
 8006b8c:	08006e95 	.word	0x08006e95
 8006b90:	08006bbb 	.word	0x08006bbb
 8006b94:	08006e95 	.word	0x08006e95
 8006b98:	08006e95 	.word	0x08006e95
 8006b9c:	08006e95 	.word	0x08006e95
 8006ba0:	08006bc1 	.word	0x08006bc1
 8006ba4:	08006e95 	.word	0x08006e95
 8006ba8:	08006e95 	.word	0x08006e95
 8006bac:	08006e95 	.word	0x08006e95
 8006bb0:	08006d35 	.word	0x08006d35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bb4:	4bbd      	ldr	r3, [pc, #756]	; (8006eac <HAL_RCC_GetSysClockFreq+0x35c>)
 8006bb6:	61bb      	str	r3, [r7, #24]
       break;
 8006bb8:	e16f      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bba:	4bbd      	ldr	r3, [pc, #756]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x360>)
 8006bbc:	61bb      	str	r3, [r7, #24]
      break;
 8006bbe:	e16c      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bc0:	4bb9      	ldr	r3, [pc, #740]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bc8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bca:	4bb7      	ldr	r3, [pc, #732]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d053      	beq.n	8006c7e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bd6:	4bb4      	ldr	r3, [pc, #720]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	099b      	lsrs	r3, r3, #6
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006be6:	f04f 0100 	mov.w	r1, #0
 8006bea:	ea02 0400 	and.w	r4, r2, r0
 8006bee:	603c      	str	r4, [r7, #0]
 8006bf0:	400b      	ands	r3, r1
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	014b      	lsls	r3, r1, #5
 8006c06:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c0a:	0142      	lsls	r2, r0, #5
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4623      	mov	r3, r4
 8006c12:	1ac0      	subs	r0, r0, r3
 8006c14:	462b      	mov	r3, r5
 8006c16:	eb61 0103 	sbc.w	r1, r1, r3
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	018b      	lsls	r3, r1, #6
 8006c24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c28:	0182      	lsls	r2, r0, #6
 8006c2a:	1a12      	subs	r2, r2, r0
 8006c2c:	eb63 0301 	sbc.w	r3, r3, r1
 8006c30:	f04f 0000 	mov.w	r0, #0
 8006c34:	f04f 0100 	mov.w	r1, #0
 8006c38:	00d9      	lsls	r1, r3, #3
 8006c3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c3e:	00d0      	lsls	r0, r2, #3
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4621      	mov	r1, r4
 8006c46:	1852      	adds	r2, r2, r1
 8006c48:	4629      	mov	r1, r5
 8006c4a:	eb43 0101 	adc.w	r1, r3, r1
 8006c4e:	460b      	mov	r3, r1
 8006c50:	f04f 0000 	mov.w	r0, #0
 8006c54:	f04f 0100 	mov.w	r1, #0
 8006c58:	0259      	lsls	r1, r3, #9
 8006c5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006c5e:	0250      	lsls	r0, r2, #9
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4610      	mov	r0, r2
 8006c66:	4619      	mov	r1, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	f7f9 fac8 	bl	8000204 <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4613      	mov	r3, r2
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	e04c      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c7e:	4b8a      	ldr	r3, [pc, #552]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	099b      	lsrs	r3, r3, #6
 8006c84:	461a      	mov	r2, r3
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c8e:	f04f 0100 	mov.w	r1, #0
 8006c92:	ea02 0a00 	and.w	sl, r2, r0
 8006c96:	ea03 0b01 	and.w	fp, r3, r1
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	014b      	lsls	r3, r1, #5
 8006ca8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cac:	0142      	lsls	r2, r0, #5
 8006cae:	4610      	mov	r0, r2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	ebb0 000a 	subs.w	r0, r0, sl
 8006cb6:	eb61 010b 	sbc.w	r1, r1, fp
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	018b      	lsls	r3, r1, #6
 8006cc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cc8:	0182      	lsls	r2, r0, #6
 8006cca:	1a12      	subs	r2, r2, r0
 8006ccc:	eb63 0301 	sbc.w	r3, r3, r1
 8006cd0:	f04f 0000 	mov.w	r0, #0
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	00d9      	lsls	r1, r3, #3
 8006cda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cde:	00d0      	lsls	r0, r2, #3
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	eb12 020a 	adds.w	r2, r2, sl
 8006ce8:	eb43 030b 	adc.w	r3, r3, fp
 8006cec:	f04f 0000 	mov.w	r0, #0
 8006cf0:	f04f 0100 	mov.w	r1, #0
 8006cf4:	0299      	lsls	r1, r3, #10
 8006cf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006cfa:	0290      	lsls	r0, r2, #10
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	f7f9 fa7a 	bl	8000204 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4613      	mov	r3, r2
 8006d16:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d18:	4b63      	ldr	r3, [pc, #396]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	0c1b      	lsrs	r3, r3, #16
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	3301      	adds	r3, #1
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	61bb      	str	r3, [r7, #24]
      break;
 8006d32:	e0b2      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d34:	4b5c      	ldr	r3, [pc, #368]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d3e:	4b5a      	ldr	r3, [pc, #360]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04d      	beq.n	8006de6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4a:	4b57      	ldr	r3, [pc, #348]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	461a      	mov	r2, r3
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	ea02 0800 	and.w	r8, r2, r0
 8006d62:	ea03 0901 	and.w	r9, r3, r1
 8006d66:	4640      	mov	r0, r8
 8006d68:	4649      	mov	r1, r9
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	014b      	lsls	r3, r1, #5
 8006d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d78:	0142      	lsls	r2, r0, #5
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	ebb0 0008 	subs.w	r0, r0, r8
 8006d82:	eb61 0109 	sbc.w	r1, r1, r9
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	018b      	lsls	r3, r1, #6
 8006d90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d94:	0182      	lsls	r2, r0, #6
 8006d96:	1a12      	subs	r2, r2, r0
 8006d98:	eb63 0301 	sbc.w	r3, r3, r1
 8006d9c:	f04f 0000 	mov.w	r0, #0
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	00d9      	lsls	r1, r3, #3
 8006da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006daa:	00d0      	lsls	r0, r2, #3
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	eb12 0208 	adds.w	r2, r2, r8
 8006db4:	eb43 0309 	adc.w	r3, r3, r9
 8006db8:	f04f 0000 	mov.w	r0, #0
 8006dbc:	f04f 0100 	mov.w	r1, #0
 8006dc0:	0259      	lsls	r1, r3, #9
 8006dc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006dc6:	0250      	lsls	r0, r2, #9
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4619      	mov	r1, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	f7f9 fa14 	bl	8000204 <__aeabi_uldivmod>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4613      	mov	r3, r2
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	e04a      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006de6:	4b30      	ldr	r3, [pc, #192]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	099b      	lsrs	r3, r3, #6
 8006dec:	461a      	mov	r2, r3
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006df6:	f04f 0100 	mov.w	r1, #0
 8006dfa:	ea02 0400 	and.w	r4, r2, r0
 8006dfe:	ea03 0501 	and.w	r5, r3, r1
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	014b      	lsls	r3, r1, #5
 8006e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e14:	0142      	lsls	r2, r0, #5
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	1b00      	subs	r0, r0, r4
 8006e1c:	eb61 0105 	sbc.w	r1, r1, r5
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	018b      	lsls	r3, r1, #6
 8006e2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e2e:	0182      	lsls	r2, r0, #6
 8006e30:	1a12      	subs	r2, r2, r0
 8006e32:	eb63 0301 	sbc.w	r3, r3, r1
 8006e36:	f04f 0000 	mov.w	r0, #0
 8006e3a:	f04f 0100 	mov.w	r1, #0
 8006e3e:	00d9      	lsls	r1, r3, #3
 8006e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e44:	00d0      	lsls	r0, r2, #3
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	1912      	adds	r2, r2, r4
 8006e4c:	eb45 0303 	adc.w	r3, r5, r3
 8006e50:	f04f 0000 	mov.w	r0, #0
 8006e54:	f04f 0100 	mov.w	r1, #0
 8006e58:	0299      	lsls	r1, r3, #10
 8006e5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e5e:	0290      	lsls	r0, r2, #10
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	f7f9 f9c8 	bl	8000204 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	0f1b      	lsrs	r3, r3, #28
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	61bb      	str	r3, [r7, #24]
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCC_GetSysClockFreq+0x35c>)
 8006e96:	61bb      	str	r3, [r7, #24]
      break;
 8006e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3720      	adds	r7, #32
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	007a1200 	.word	0x007a1200

08006eb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e28d      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8083 	beq.w	8006fda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ed4:	4b94      	ldr	r3, [pc, #592]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 030c 	and.w	r3, r3, #12
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d019      	beq.n	8006f14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ee0:	4b91      	ldr	r3, [pc, #580]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d106      	bne.n	8006efa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006eec:	4b8e      	ldr	r3, [pc, #568]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef8:	d00c      	beq.n	8006f14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006efa:	4b8b      	ldr	r3, [pc, #556]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f02:	2b0c      	cmp	r3, #12
 8006f04:	d112      	bne.n	8006f2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f06:	4b88      	ldr	r3, [pc, #544]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f12:	d10b      	bne.n	8006f2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f14:	4b84      	ldr	r3, [pc, #528]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d05b      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x124>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d157      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e25a      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f34:	d106      	bne.n	8006f44 <HAL_RCC_OscConfig+0x90>
 8006f36:	4b7c      	ldr	r3, [pc, #496]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a7b      	ldr	r2, [pc, #492]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e01d      	b.n	8006f80 <HAL_RCC_OscConfig+0xcc>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCC_OscConfig+0xb4>
 8006f4e:	4b76      	ldr	r3, [pc, #472]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a75      	ldr	r2, [pc, #468]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	4b73      	ldr	r3, [pc, #460]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a72      	ldr	r2, [pc, #456]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e00b      	b.n	8006f80 <HAL_RCC_OscConfig+0xcc>
 8006f68:	4b6f      	ldr	r3, [pc, #444]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6e      	ldr	r2, [pc, #440]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	4b6c      	ldr	r3, [pc, #432]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6b      	ldr	r2, [pc, #428]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fa fdc2 	bl	8001b10 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f90:	f7fa fdbe 	bl	8001b10 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	; 0x64
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e21f      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa2:	4b61      	ldr	r3, [pc, #388]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0xdc>
 8006fae:	e014      	b.n	8006fda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7fa fdae 	bl	8001b10 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fb8:	f7fa fdaa 	bl	8001b10 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	; 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e20b      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fca:	4b57      	ldr	r3, [pc, #348]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x104>
 8006fd6:	e000      	b.n	8006fda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d06f      	beq.n	80070c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fe6:	4b50      	ldr	r3, [pc, #320]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d017      	beq.n	8007022 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ff2:	4b4d      	ldr	r3, [pc, #308]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d105      	bne.n	800700a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ffe:	4b4a      	ldr	r3, [pc, #296]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800700a:	4b47      	ldr	r3, [pc, #284]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007012:	2b0c      	cmp	r3, #12
 8007014:	d11c      	bne.n	8007050 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007016:	4b44      	ldr	r3, [pc, #272]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d116      	bne.n	8007050 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007022:	4b41      	ldr	r3, [pc, #260]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_RCC_OscConfig+0x186>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d001      	beq.n	800703a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e1d3      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4937      	ldr	r1, [pc, #220]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800704e:	e03a      	b.n	80070c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d020      	beq.n	800709a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007058:	4b34      	ldr	r3, [pc, #208]	; (800712c <HAL_RCC_OscConfig+0x278>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705e:	f7fa fd57 	bl	8001b10 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007066:	f7fa fd53 	bl	8001b10 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e1b4      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007078:	4b2b      	ldr	r3, [pc, #172]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007084:	4b28      	ldr	r3, [pc, #160]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4925      	ldr	r1, [pc, #148]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]
 8007098:	e015      	b.n	80070c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <HAL_RCC_OscConfig+0x278>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fa fd36 	bl	8001b10 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fa fd32 	bl	8001b10 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e193      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ba:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d036      	beq.n	8007140 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d016      	beq.n	8007108 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <HAL_RCC_OscConfig+0x27c>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e0:	f7fa fd16 	bl	8001b10 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070e8:	f7fa fd12 	bl	8001b10 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e173      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_RCC_OscConfig+0x274>)
 80070fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x234>
 8007106:	e01b      	b.n	8007140 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <HAL_RCC_OscConfig+0x27c>)
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710e:	f7fa fcff 	bl	8001b10 <HAL_GetTick>
 8007112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007114:	e00e      	b.n	8007134 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007116:	f7fa fcfb 	bl	8001b10 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d907      	bls.n	8007134 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e15c      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
 8007128:	40023800 	.word	0x40023800
 800712c:	42470000 	.word	0x42470000
 8007130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007134:	4b8a      	ldr	r3, [pc, #552]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1ea      	bne.n	8007116 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8097 	beq.w	800727c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007152:	4b83      	ldr	r3, [pc, #524]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10f      	bne.n	800717e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800715e:	2300      	movs	r3, #0
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	4b7f      	ldr	r3, [pc, #508]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	4a7e      	ldr	r2, [pc, #504]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716c:	6413      	str	r3, [r2, #64]	; 0x40
 800716e:	4b7c      	ldr	r3, [pc, #496]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007176:	60bb      	str	r3, [r7, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800717e:	4b79      	ldr	r3, [pc, #484]	; (8007364 <HAL_RCC_OscConfig+0x4b0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d118      	bne.n	80071bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800718a:	4b76      	ldr	r3, [pc, #472]	; (8007364 <HAL_RCC_OscConfig+0x4b0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a75      	ldr	r2, [pc, #468]	; (8007364 <HAL_RCC_OscConfig+0x4b0>)
 8007190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007196:	f7fa fcbb 	bl	8001b10 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800719e:	f7fa fcb7 	bl	8001b10 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e118      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b0:	4b6c      	ldr	r3, [pc, #432]	; (8007364 <HAL_RCC_OscConfig+0x4b0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d106      	bne.n	80071d2 <HAL_RCC_OscConfig+0x31e>
 80071c4:	4b66      	ldr	r3, [pc, #408]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c8:	4a65      	ldr	r2, [pc, #404]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	6713      	str	r3, [r2, #112]	; 0x70
 80071d0:	e01c      	b.n	800720c <HAL_RCC_OscConfig+0x358>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d10c      	bne.n	80071f4 <HAL_RCC_OscConfig+0x340>
 80071da:	4b61      	ldr	r3, [pc, #388]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071de:	4a60      	ldr	r2, [pc, #384]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071e0:	f043 0304 	orr.w	r3, r3, #4
 80071e4:	6713      	str	r3, [r2, #112]	; 0x70
 80071e6:	4b5e      	ldr	r3, [pc, #376]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	4a5d      	ldr	r2, [pc, #372]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	6713      	str	r3, [r2, #112]	; 0x70
 80071f2:	e00b      	b.n	800720c <HAL_RCC_OscConfig+0x358>
 80071f4:	4b5a      	ldr	r3, [pc, #360]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	4a59      	ldr	r2, [pc, #356]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007200:	4b57      	ldr	r3, [pc, #348]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	4a56      	ldr	r2, [pc, #344]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007206:	f023 0304 	bic.w	r3, r3, #4
 800720a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d015      	beq.n	8007240 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007214:	f7fa fc7c 	bl	8001b10 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800721a:	e00a      	b.n	8007232 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800721c:	f7fa fc78 	bl	8001b10 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	; 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e0d7      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007232:	4b4b      	ldr	r3, [pc, #300]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0ee      	beq.n	800721c <HAL_RCC_OscConfig+0x368>
 800723e:	e014      	b.n	800726a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007240:	f7fa fc66 	bl	8001b10 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007246:	e00a      	b.n	800725e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007248:	f7fa fc62 	bl	8001b10 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f241 3288 	movw	r2, #5000	; 0x1388
 8007256:	4293      	cmp	r3, r2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e0c1      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800725e:	4b40      	ldr	r3, [pc, #256]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ee      	bne.n	8007248 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d105      	bne.n	800727c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007270:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	4a3a      	ldr	r2, [pc, #232]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800727a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80ad 	beq.w	80073e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007286:	4b36      	ldr	r3, [pc, #216]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b08      	cmp	r3, #8
 8007290:	d060      	beq.n	8007354 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d145      	bne.n	8007326 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729a:	4b33      	ldr	r3, [pc, #204]	; (8007368 <HAL_RCC_OscConfig+0x4b4>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a0:	f7fa fc36 	bl	8001b10 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a8:	f7fa fc32 	bl	8001b10 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e093      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ba:	4b29      	ldr	r3, [pc, #164]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69da      	ldr	r2, [r3, #28]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	019b      	lsls	r3, r3, #6
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	3b01      	subs	r3, #1
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	061b      	lsls	r3, r3, #24
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	071b      	lsls	r3, r3, #28
 80072f2:	491b      	ldr	r1, [pc, #108]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <HAL_RCC_OscConfig+0x4b4>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fe:	f7fa fc07 	bl	8001b10 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007306:	f7fa fc03 	bl	8001b10 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e064      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0f0      	beq.n	8007306 <HAL_RCC_OscConfig+0x452>
 8007324:	e05c      	b.n	80073e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <HAL_RCC_OscConfig+0x4b4>)
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732c:	f7fa fbf0 	bl	8001b10 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007334:	f7fa fbec 	bl	8001b10 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e04d      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007346:	4b06      	ldr	r3, [pc, #24]	; (8007360 <HAL_RCC_OscConfig+0x4ac>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1f0      	bne.n	8007334 <HAL_RCC_OscConfig+0x480>
 8007352:	e045      	b.n	80073e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d107      	bne.n	800736c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e040      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
 8007360:	40023800 	.word	0x40023800
 8007364:	40007000 	.word	0x40007000
 8007368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800736c:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCC_OscConfig+0x538>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d030      	beq.n	80073dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007384:	429a      	cmp	r2, r3
 8007386:	d129      	bne.n	80073dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d122      	bne.n	80073dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d119      	bne.n	80073dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	3b01      	subs	r3, #1
 80073b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d10f      	bne.n	80073dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d001      	beq.n	80073e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800

080073f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e041      	b.n	8007486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fa f990 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f000 fbe0 	bl	8007bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d001      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e04e      	b.n	8007546 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a23      	ldr	r2, [pc, #140]	; (8007554 <HAL_TIM_Base_Start_IT+0xc4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d022      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d2:	d01d      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <HAL_TIM_Base_Start_IT+0xc8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d018      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1e      	ldr	r2, [pc, #120]	; (800755c <HAL_TIM_Base_Start_IT+0xcc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_TIM_Base_Start_IT+0xd0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00e      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a1b      	ldr	r2, [pc, #108]	; (8007564 <HAL_TIM_Base_Start_IT+0xd4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d009      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a19      	ldr	r2, [pc, #100]	; (8007568 <HAL_TIM_Base_Start_IT+0xd8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x80>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a18      	ldr	r2, [pc, #96]	; (800756c <HAL_TIM_Base_Start_IT+0xdc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d111      	bne.n	8007534 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b06      	cmp	r3, #6
 8007520:	d010      	beq.n	8007544 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0201 	orr.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	e007      	b.n	8007544 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0201 	orr.w	r2, r2, #1
 8007542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40010400 	.word	0x40010400
 8007568:	40014000 	.word	0x40014000
 800756c:	40001800 	.word	0x40001800

08007570 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a1a      	ldr	r2, [r3, #32]
 800758e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10f      	bne.n	80075b8 <HAL_TIM_Base_Stop_IT+0x48>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	f240 4344 	movw	r3, #1092	; 0x444
 80075a2:	4013      	ands	r3, r2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_Base_Stop_IT+0x48>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e041      	b.n	8007664 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f839 	bl	800766c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f000 faf1 	bl	8007bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b02      	cmp	r3, #2
 8007694:	d122      	bne.n	80076dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d11b      	bne.n	80076dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0202 	mvn.w	r2, #2
 80076ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa77 	bl	8007bb6 <HAL_TIM_IC_CaptureCallback>
 80076c8:	e005      	b.n	80076d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa69 	bl	8007ba2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fa7a 	bl	8007bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d122      	bne.n	8007730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d11b      	bne.n	8007730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0204 	mvn.w	r2, #4
 8007700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2202      	movs	r2, #2
 8007706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa4d 	bl	8007bb6 <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa3f 	bl	8007ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa50 	bl	8007bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b08      	cmp	r3, #8
 800773c:	d122      	bne.n	8007784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b08      	cmp	r3, #8
 800774a:	d11b      	bne.n	8007784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0208 	mvn.w	r2, #8
 8007754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2204      	movs	r2, #4
 800775a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa23 	bl	8007bb6 <HAL_TIM_IC_CaptureCallback>
 8007770:	e005      	b.n	800777e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa15 	bl	8007ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa26 	bl	8007bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b10      	cmp	r3, #16
 8007790:	d122      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b10      	cmp	r3, #16
 800779e:	d11b      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0210 	mvn.w	r2, #16
 80077a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2208      	movs	r2, #8
 80077ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9f9 	bl	8007bb6 <HAL_TIM_IC_CaptureCallback>
 80077c4:	e005      	b.n	80077d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9eb 	bl	8007ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f9fc 	bl	8007bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d10e      	bne.n	8007804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d107      	bne.n	8007804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0201 	mvn.w	r2, #1
 80077fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7f9 fb66 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780e:	2b80      	cmp	r3, #128	; 0x80
 8007810:	d10e      	bne.n	8007830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b80      	cmp	r3, #128	; 0x80
 800781e:	d107      	bne.n	8007830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fd52 	bl	80082d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b40      	cmp	r3, #64	; 0x40
 800783c:	d10e      	bne.n	800785c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d107      	bne.n	800785c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9c1 	bl	8007bde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b20      	cmp	r3, #32
 8007868:	d10e      	bne.n	8007888 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b20      	cmp	r3, #32
 8007876:	d107      	bne.n	8007888 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0220 	mvn.w	r2, #32
 8007880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fd1c 	bl	80082c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e0ae      	b.n	8007a0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b0c      	cmp	r3, #12
 80078ba:	f200 809f 	bhi.w	80079fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078f9 	.word	0x080078f9
 80078c8:	080079fd 	.word	0x080079fd
 80078cc:	080079fd 	.word	0x080079fd
 80078d0:	080079fd 	.word	0x080079fd
 80078d4:	08007939 	.word	0x08007939
 80078d8:	080079fd 	.word	0x080079fd
 80078dc:	080079fd 	.word	0x080079fd
 80078e0:	080079fd 	.word	0x080079fd
 80078e4:	0800797b 	.word	0x0800797b
 80078e8:	080079fd 	.word	0x080079fd
 80078ec:	080079fd 	.word	0x080079fd
 80078f0:	080079fd 	.word	0x080079fd
 80078f4:	080079bb 	.word	0x080079bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fa18 	bl	8007d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0208 	orr.w	r2, r2, #8
 8007912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0204 	bic.w	r2, r2, #4
 8007922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6999      	ldr	r1, [r3, #24]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	619a      	str	r2, [r3, #24]
      break;
 8007936:	e064      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fa68 	bl	8007e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6999      	ldr	r1, [r3, #24]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	021a      	lsls	r2, r3, #8
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	619a      	str	r2, [r3, #24]
      break;
 8007978:	e043      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fabd 	bl	8007f00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0208 	orr.w	r2, r2, #8
 8007994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0204 	bic.w	r2, r2, #4
 80079a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69d9      	ldr	r1, [r3, #28]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	61da      	str	r2, [r3, #28]
      break;
 80079b8:	e023      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fb11 	bl	8007fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69d9      	ldr	r1, [r3, #28]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	021a      	lsls	r2, r3, #8
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	61da      	str	r2, [r3, #28]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_TIM_ConfigClockSource+0x1c>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e0b4      	b.n	8007b9a <HAL_TIM_ConfigClockSource+0x186>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a68:	d03e      	beq.n	8007ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	f200 8087 	bhi.w	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	f000 8086 	beq.w	8007b86 <HAL_TIM_ConfigClockSource+0x172>
 8007a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7e:	d87f      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007a80:	2b70      	cmp	r3, #112	; 0x70
 8007a82:	d01a      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0xa6>
 8007a84:	2b70      	cmp	r3, #112	; 0x70
 8007a86:	d87b      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007a88:	2b60      	cmp	r3, #96	; 0x60
 8007a8a:	d050      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x11a>
 8007a8c:	2b60      	cmp	r3, #96	; 0x60
 8007a8e:	d877      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007a90:	2b50      	cmp	r3, #80	; 0x50
 8007a92:	d03c      	beq.n	8007b0e <HAL_TIM_ConfigClockSource+0xfa>
 8007a94:	2b50      	cmp	r3, #80	; 0x50
 8007a96:	d873      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d058      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x13a>
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	d86f      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa0:	2b30      	cmp	r3, #48	; 0x30
 8007aa2:	d064      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x15a>
 8007aa4:	2b30      	cmp	r3, #48	; 0x30
 8007aa6:	d86b      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d060      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x15a>
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d867      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d05c      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x15a>
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d05a      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x15a>
 8007ab8:	e062      	b.n	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	6899      	ldr	r1, [r3, #8]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f000 fb5d 	bl	8008188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	609a      	str	r2, [r3, #8]
      break;
 8007ae6:	e04f      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	6899      	ldr	r1, [r3, #8]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f000 fb46 	bl	8008188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b0a:	609a      	str	r2, [r3, #8]
      break;
 8007b0c:	e03c      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f000 faba 	bl	8008094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2150      	movs	r1, #80	; 0x50
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fb13 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 8007b2c:	e02c      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6859      	ldr	r1, [r3, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f000 fad9 	bl	80080f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2160      	movs	r1, #96	; 0x60
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fb03 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 8007b4c:	e01c      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6859      	ldr	r1, [r3, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f000 fa9a 	bl	8008094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2140      	movs	r1, #64	; 0x40
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 faf3 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 8007b6c:	e00c      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f000 faea 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 8007b7e:	e003      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
      break;
 8007b84:	e000      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a40      	ldr	r2, [pc, #256]	; (8007d08 <TIM_Base_SetConfig+0x114>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d013      	beq.n	8007c34 <TIM_Base_SetConfig+0x40>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c12:	d00f      	beq.n	8007c34 <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a3d      	ldr	r2, [pc, #244]	; (8007d0c <TIM_Base_SetConfig+0x118>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00b      	beq.n	8007c34 <TIM_Base_SetConfig+0x40>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a3c      	ldr	r2, [pc, #240]	; (8007d10 <TIM_Base_SetConfig+0x11c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d007      	beq.n	8007c34 <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a3b      	ldr	r2, [pc, #236]	; (8007d14 <TIM_Base_SetConfig+0x120>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_Base_SetConfig+0x40>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a3a      	ldr	r2, [pc, #232]	; (8007d18 <TIM_Base_SetConfig+0x124>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d108      	bne.n	8007c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a2f      	ldr	r2, [pc, #188]	; (8007d08 <TIM_Base_SetConfig+0x114>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d02b      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c54:	d027      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a2c      	ldr	r2, [pc, #176]	; (8007d0c <TIM_Base_SetConfig+0x118>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d023      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <TIM_Base_SetConfig+0x11c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01f      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <TIM_Base_SetConfig+0x120>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d01b      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <TIM_Base_SetConfig+0x124>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d017      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a28      	ldr	r2, [pc, #160]	; (8007d1c <TIM_Base_SetConfig+0x128>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d013      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a27      	ldr	r2, [pc, #156]	; (8007d20 <TIM_Base_SetConfig+0x12c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00f      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a26      	ldr	r2, [pc, #152]	; (8007d24 <TIM_Base_SetConfig+0x130>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00b      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a25      	ldr	r2, [pc, #148]	; (8007d28 <TIM_Base_SetConfig+0x134>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d007      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a24      	ldr	r2, [pc, #144]	; (8007d2c <TIM_Base_SetConfig+0x138>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d003      	beq.n	8007ca6 <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a23      	ldr	r2, [pc, #140]	; (8007d30 <TIM_Base_SetConfig+0x13c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d108      	bne.n	8007cb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <TIM_Base_SetConfig+0x114>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <TIM_Base_SetConfig+0xf8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a0c      	ldr	r2, [pc, #48]	; (8007d18 <TIM_Base_SetConfig+0x124>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d103      	bne.n	8007cf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	615a      	str	r2, [r3, #20]
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40010400 	.word	0x40010400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800
 8007d28:	40001800 	.word	0x40001800
 8007d2c:	40001c00 	.word	0x40001c00
 8007d30:	40002000 	.word	0x40002000

08007d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f023 0302 	bic.w	r3, r3, #2
 8007d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a20      	ldr	r2, [pc, #128]	; (8007e0c <TIM_OC1_SetConfig+0xd8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_OC1_SetConfig+0x64>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <TIM_OC1_SetConfig+0xdc>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d10c      	bne.n	8007db2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f023 0308 	bic.w	r3, r3, #8
 8007d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f023 0304 	bic.w	r3, r3, #4
 8007db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <TIM_OC1_SetConfig+0xd8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_OC1_SetConfig+0x8e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a14      	ldr	r2, [pc, #80]	; (8007e10 <TIM_OC1_SetConfig+0xdc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d111      	bne.n	8007de6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	621a      	str	r2, [r3, #32]
}
 8007e00:	bf00      	nop
 8007e02:	371c      	adds	r7, #28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	40010000 	.word	0x40010000
 8007e10:	40010400 	.word	0x40010400

08007e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0210 	bic.w	r2, r3, #16
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 0320 	bic.w	r3, r3, #32
 8007e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a22      	ldr	r2, [pc, #136]	; (8007ef8 <TIM_OC2_SetConfig+0xe4>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_OC2_SetConfig+0x68>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a21      	ldr	r2, [pc, #132]	; (8007efc <TIM_OC2_SetConfig+0xe8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d10d      	bne.n	8007e98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <TIM_OC2_SetConfig+0xe4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d003      	beq.n	8007ea8 <TIM_OC2_SetConfig+0x94>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	; (8007efc <TIM_OC2_SetConfig+0xe8>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d113      	bne.n	8007ed0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40010400 	.word	0x40010400

08007f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a21      	ldr	r2, [pc, #132]	; (8007fe0 <TIM_OC3_SetConfig+0xe0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d003      	beq.n	8007f66 <TIM_OC3_SetConfig+0x66>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <TIM_OC3_SetConfig+0xe4>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d10d      	bne.n	8007f82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <TIM_OC3_SetConfig+0xe0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <TIM_OC3_SetConfig+0x92>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <TIM_OC3_SetConfig+0xe4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d113      	bne.n	8007fba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40010400 	.word	0x40010400

08007fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	031b      	lsls	r3, r3, #12
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a12      	ldr	r2, [pc, #72]	; (800808c <TIM_OC4_SetConfig+0xa4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_OC4_SetConfig+0x68>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a11      	ldr	r2, [pc, #68]	; (8008090 <TIM_OC4_SetConfig+0xa8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d109      	bne.n	8008064 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	019b      	lsls	r3, r3, #6
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	621a      	str	r2, [r3, #32]
}
 800807e:	bf00      	nop
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40010000 	.word	0x40010000
 8008090:	40010400 	.word	0x40010400

08008094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0201 	bic.w	r2, r3, #1
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f023 030a 	bic.w	r3, r3, #10
 80080d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	621a      	str	r2, [r3, #32]
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b087      	sub	sp, #28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0210 	bic.w	r2, r3, #16
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800811c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800812e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	f043 0307 	orr.w	r3, r3, #7
 8008174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	021a      	lsls	r2, r3, #8
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	609a      	str	r2, [r3, #8]
}
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d101      	bne.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081dc:	2302      	movs	r3, #2
 80081de:	e05a      	b.n	8008296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d022      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822c:	d01d      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d018      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d013      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1a      	ldr	r2, [pc, #104]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00e      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d009      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d004      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a15      	ldr	r2, [pc, #84]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d10c      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4313      	orrs	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00
 80082b4:	40010400 	.word	0x40010400
 80082b8:	40014000 	.word	0x40014000
 80082bc:	40001800 	.word	0x40001800

080082c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082e8:	b084      	sub	sp, #16
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	f107 001c 	add.w	r0, r7, #28
 80082f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d122      	bne.n	8008346 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800832a:	2b01      	cmp	r3, #1
 800832c:	d105      	bne.n	800833a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fb16 	bl	800996c <USB_CoreReset>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]
 8008344:	e01a      	b.n	800837c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fb0a 	bl	800996c <USB_CoreReset>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800835c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
 800836e:	e005      	b.n	800837c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	2b01      	cmp	r3, #1
 8008380:	d10b      	bne.n	800839a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f043 0206 	orr.w	r2, r3, #6
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f043 0220 	orr.w	r2, r3, #32
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083a6:	b004      	add	sp, #16
 80083a8:	4770      	bx	lr
	...

080083ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d165      	bne.n	800848c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4a41      	ldr	r2, [pc, #260]	; (80084c8 <USB_SetTurnaroundTime+0x11c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d906      	bls.n	80083d6 <USB_SetTurnaroundTime+0x2a>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4a40      	ldr	r2, [pc, #256]	; (80084cc <USB_SetTurnaroundTime+0x120>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d202      	bcs.n	80083d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80083d0:	230f      	movs	r3, #15
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e062      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4a3c      	ldr	r2, [pc, #240]	; (80084cc <USB_SetTurnaroundTime+0x120>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d306      	bcc.n	80083ec <USB_SetTurnaroundTime+0x40>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4a3b      	ldr	r2, [pc, #236]	; (80084d0 <USB_SetTurnaroundTime+0x124>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d202      	bcs.n	80083ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80083e6:	230e      	movs	r3, #14
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e057      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4a38      	ldr	r2, [pc, #224]	; (80084d0 <USB_SetTurnaroundTime+0x124>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d306      	bcc.n	8008402 <USB_SetTurnaroundTime+0x56>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4a37      	ldr	r2, [pc, #220]	; (80084d4 <USB_SetTurnaroundTime+0x128>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d202      	bcs.n	8008402 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083fc:	230d      	movs	r3, #13
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e04c      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4a33      	ldr	r2, [pc, #204]	; (80084d4 <USB_SetTurnaroundTime+0x128>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d306      	bcc.n	8008418 <USB_SetTurnaroundTime+0x6c>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <USB_SetTurnaroundTime+0x12c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d802      	bhi.n	8008418 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008412:	230c      	movs	r3, #12
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e041      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4a2f      	ldr	r2, [pc, #188]	; (80084d8 <USB_SetTurnaroundTime+0x12c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d906      	bls.n	800842e <USB_SetTurnaroundTime+0x82>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a2e      	ldr	r2, [pc, #184]	; (80084dc <USB_SetTurnaroundTime+0x130>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d802      	bhi.n	800842e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008428:	230b      	movs	r3, #11
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e036      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	4a2a      	ldr	r2, [pc, #168]	; (80084dc <USB_SetTurnaroundTime+0x130>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d906      	bls.n	8008444 <USB_SetTurnaroundTime+0x98>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	4a29      	ldr	r2, [pc, #164]	; (80084e0 <USB_SetTurnaroundTime+0x134>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d802      	bhi.n	8008444 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800843e:	230a      	movs	r3, #10
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e02b      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4a26      	ldr	r2, [pc, #152]	; (80084e0 <USB_SetTurnaroundTime+0x134>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d906      	bls.n	800845a <USB_SetTurnaroundTime+0xae>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4a25      	ldr	r2, [pc, #148]	; (80084e4 <USB_SetTurnaroundTime+0x138>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d202      	bcs.n	800845a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008454:	2309      	movs	r3, #9
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	e020      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	4a21      	ldr	r2, [pc, #132]	; (80084e4 <USB_SetTurnaroundTime+0x138>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d306      	bcc.n	8008470 <USB_SetTurnaroundTime+0xc4>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4a20      	ldr	r2, [pc, #128]	; (80084e8 <USB_SetTurnaroundTime+0x13c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d802      	bhi.n	8008470 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800846a:	2308      	movs	r3, #8
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e015      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4a1d      	ldr	r2, [pc, #116]	; (80084e8 <USB_SetTurnaroundTime+0x13c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d906      	bls.n	8008486 <USB_SetTurnaroundTime+0xda>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4a1c      	ldr	r2, [pc, #112]	; (80084ec <USB_SetTurnaroundTime+0x140>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d202      	bcs.n	8008486 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008480:	2307      	movs	r3, #7
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	e00a      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008486:	2306      	movs	r3, #6
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e007      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d102      	bne.n	8008498 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008492:	2309      	movs	r3, #9
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e001      	b.n	800849c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008498:	2309      	movs	r3, #9
 800849a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	029b      	lsls	r3, r3, #10
 80084b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80084b4:	431a      	orrs	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	00d8acbf 	.word	0x00d8acbf
 80084cc:	00e4e1c0 	.word	0x00e4e1c0
 80084d0:	00f42400 	.word	0x00f42400
 80084d4:	01067380 	.word	0x01067380
 80084d8:	011a499f 	.word	0x011a499f
 80084dc:	01312cff 	.word	0x01312cff
 80084e0:	014ca43f 	.word	0x014ca43f
 80084e4:	016e3600 	.word	0x016e3600
 80084e8:	01a6ab1f 	.word	0x01a6ab1f
 80084ec:	01e84800 	.word	0x01e84800

080084f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f043 0201 	orr.w	r2, r3, #1
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f023 0201 	bic.w	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d115      	bne.n	8008582 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008562:	2001      	movs	r0, #1
 8008564:	f7f9 fae0 	bl	8001b28 <HAL_Delay>
      ms++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 f96c 	bl	800984c <USB_GetMode>
 8008574:	4603      	mov	r3, r0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d01e      	beq.n	80085b8 <USB_SetCurrentMode+0x84>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b31      	cmp	r3, #49	; 0x31
 800857e:	d9f0      	bls.n	8008562 <USB_SetCurrentMode+0x2e>
 8008580:	e01a      	b.n	80085b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d115      	bne.n	80085b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008594:	2001      	movs	r0, #1
 8008596:	f7f9 fac7 	bl	8001b28 <HAL_Delay>
      ms++;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3301      	adds	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f953 	bl	800984c <USB_GetMode>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <USB_SetCurrentMode+0x84>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b31      	cmp	r3, #49	; 0x31
 80085b0:	d9f0      	bls.n	8008594 <USB_SetCurrentMode+0x60>
 80085b2:	e001      	b.n	80085b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e005      	b.n	80085c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b32      	cmp	r3, #50	; 0x32
 80085bc:	d101      	bne.n	80085c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085cc:	b084      	sub	sp, #16
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b086      	sub	sp, #24
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085e6:	2300      	movs	r3, #0
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	e009      	b.n	8008600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	3340      	adds	r3, #64	; 0x40
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	2200      	movs	r2, #0
 80085f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	3301      	adds	r3, #1
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b0e      	cmp	r3, #14
 8008604:	d9f2      	bls.n	80085ec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d11c      	bne.n	8008646 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800861a:	f043 0302 	orr.w	r3, r3, #2
 800861e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e005      	b.n	8008652 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008658:	461a      	mov	r2, r3
 800865a:	2300      	movs	r3, #0
 800865c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008664:	4619      	mov	r1, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866c:	461a      	mov	r2, r3
 800866e:	680b      	ldr	r3, [r1, #0]
 8008670:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	2b01      	cmp	r3, #1
 8008676:	d10c      	bne.n	8008692 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800867e:	2100      	movs	r1, #0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f945 	bl	8008910 <USB_SetDevSpeed>
 8008686:	e008      	b.n	800869a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008688:	2101      	movs	r1, #1
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f940 	bl	8008910 <USB_SetDevSpeed>
 8008690:	e003      	b.n	800869a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008692:	2103      	movs	r1, #3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f93b 	bl	8008910 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800869a:	2110      	movs	r1, #16
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f8f3 	bl	8008888 <USB_FlushTxFifo>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f90f 	bl	80088d0 <USB_FlushRxFifo>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c2:	461a      	mov	r2, r3
 80086c4:	2300      	movs	r3, #0
 80086c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	461a      	mov	r2, r3
 80086d0:	2300      	movs	r3, #0
 80086d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	461a      	mov	r2, r3
 80086dc:	2300      	movs	r3, #0
 80086de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	e043      	b.n	800876e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086fc:	d118      	bne.n	8008730 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008710:	461a      	mov	r2, r3
 8008712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	e013      	b.n	8008742 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008726:	461a      	mov	r2, r3
 8008728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	e008      	b.n	8008742 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	461a      	mov	r2, r3
 800873e:	2300      	movs	r3, #0
 8008740:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874e:	461a      	mov	r2, r3
 8008750:	2300      	movs	r3, #0
 8008752:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008760:	461a      	mov	r2, r3
 8008762:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008766:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	3301      	adds	r3, #1
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	d3b7      	bcc.n	80086e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008776:	2300      	movs	r3, #0
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	e043      	b.n	8008804 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800878e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008792:	d118      	bne.n	80087c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	461a      	mov	r2, r3
 80087a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e013      	b.n	80087d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087bc:	461a      	mov	r2, r3
 80087be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	e008      	b.n	80087d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	461a      	mov	r2, r3
 80087d4:	2300      	movs	r3, #0
 80087d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	461a      	mov	r2, r3
 80087e6:	2300      	movs	r3, #0
 80087e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	461a      	mov	r2, r3
 80087f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	3301      	adds	r3, #1
 8008802:	613b      	str	r3, [r7, #16]
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	429a      	cmp	r2, r3
 800880a:	d3b7      	bcc.n	800877c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800881a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800881e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800882c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f043 0210 	orr.w	r2, r3, #16
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699a      	ldr	r2, [r3, #24]
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <USB_DevInit+0x2b8>)
 8008846:	4313      	orrs	r3, r2
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800884c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	f043 0208 	orr.w	r2, r3, #8
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800885e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008860:	2b01      	cmp	r3, #1
 8008862:	d107      	bne.n	8008874 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800886c:	f043 0304 	orr.w	r3, r3, #4
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008880:	b004      	add	sp, #16
 8008882:	4770      	bx	lr
 8008884:	803c3800 	.word	0x803c3800

08008888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	019b      	lsls	r3, r3, #6
 800889a:	f043 0220 	orr.w	r2, r3, #32
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	4a08      	ldr	r2, [pc, #32]	; (80088cc <USB_FlushTxFifo+0x44>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d901      	bls.n	80088b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e006      	b.n	80088c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d0f1      	beq.n	80088a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	00030d40 	.word	0x00030d40

080088d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2210      	movs	r2, #16
 80088e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	4a08      	ldr	r2, [pc, #32]	; (800890c <USB_FlushRxFifo+0x3c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d901      	bls.n	80088f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e006      	b.n	8008900 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0310 	and.w	r3, r3, #16
 80088fa:	2b10      	cmp	r3, #16
 80088fc:	d0f1      	beq.n	80088e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	00030d40 	.word	0x00030d40

08008910 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008930:	4313      	orrs	r3, r2
 8008932:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008942:	b480      	push	{r7}
 8008944:	b087      	sub	sp, #28
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 0306 	and.w	r3, r3, #6
 800895a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]
 8008966:	e00a      	b.n	800897e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d002      	beq.n	8008974 <USB_GetDevSpeed+0x32>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b06      	cmp	r3, #6
 8008972:	d102      	bne.n	800897a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008974:	2302      	movs	r3, #2
 8008976:	75fb      	strb	r3, [r7, #23]
 8008978:	e001      	b.n	800897e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800897a:	230f      	movs	r3, #15
 800897c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008980:	4618      	mov	r0, r3
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d13a      	bne.n	8008a1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	2101      	movs	r1, #1
 80089ba:	fa01 f303 	lsl.w	r3, r1, r3
 80089be:	b29b      	uxth	r3, r3
 80089c0:	68f9      	ldr	r1, [r7, #12]
 80089c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c6:	4313      	orrs	r3, r2
 80089c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d155      	bne.n	8008a8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	78db      	ldrb	r3, [r3, #3]
 80089fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a04:	4313      	orrs	r3, r2
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	e036      	b.n	8008a8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	69da      	ldr	r2, [r3, #28]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	2101      	movs	r1, #1
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d11a      	bne.n	8008a8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	78db      	ldrb	r3, [r3, #3]
 8008a70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a72:	430b      	orrs	r3, r1
 8008a74:	4313      	orrs	r3, r2
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d161      	bne.n	8008b7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ace:	d11f      	bne.n	8008b10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	2101      	movs	r1, #1
 8008b22:	fa01 f303 	lsl.w	r3, r1, r3
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b30:	4013      	ands	r3, r2
 8008b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	2101      	movs	r1, #1
 8008b46:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b54:	4013      	ands	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	0159      	lsls	r1, r3, #5
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	4619      	mov	r1, r3
 8008b74:	4b35      	ldr	r3, [pc, #212]	; (8008c4c <USB_DeactivateEndpoint+0x1b0>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	600b      	str	r3, [r1, #0]
 8008b7a:	e060      	b.n	8008c3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b92:	d11f      	bne.n	8008bd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bea:	041b      	lsls	r3, r3, #16
 8008bec:	43db      	mvns	r3, r3
 8008bee:	68f9      	ldr	r1, [r7, #12]
 8008bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	f003 030f 	and.w	r3, r3, #15
 8008c08:	2101      	movs	r1, #1
 8008c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0e:	041b      	lsls	r3, r3, #16
 8008c10:	43db      	mvns	r3, r3
 8008c12:	68f9      	ldr	r1, [r7, #12]
 8008c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c18:	4013      	ands	r3, r2
 8008c1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	0159      	lsls	r1, r3, #5
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	440b      	add	r3, r1
 8008c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c36:	4619      	mov	r1, r3
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <USB_DeactivateEndpoint+0x1b4>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	ec337800 	.word	0xec337800
 8008c50:	eff37800 	.word	0xeff37800

08008c54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	; 0x28
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	f040 815c 	bne.w	8008f2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d132      	bne.n	8008ce4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cdc:	0cdb      	lsrs	r3, r3, #19
 8008cde:	04db      	lsls	r3, r3, #19
 8008ce0:	6113      	str	r3, [r2, #16]
 8008ce2:	e074      	b.n	8008dce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cfe:	0cdb      	lsrs	r3, r3, #19
 8008d00:	04db      	lsls	r3, r3, #19
 8008d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	0151      	lsls	r1, r2, #5
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	440a      	add	r2, r1
 8008d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6959      	ldr	r1, [r3, #20]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	440b      	add	r3, r1
 8008d40:	1e59      	subs	r1, r3, #1
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d4c:	4b9d      	ldr	r3, [pc, #628]	; (8008fc4 <USB_EPStartXfer+0x370>)
 8008d4e:	400b      	ands	r3, r1
 8008d50:	69b9      	ldr	r1, [r7, #24]
 8008d52:	0148      	lsls	r0, r1, #5
 8008d54:	69f9      	ldr	r1, [r7, #28]
 8008d56:	4401      	add	r1, r0
 8008d58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6c:	691a      	ldr	r2, [r3, #16]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d76:	69b9      	ldr	r1, [r7, #24]
 8008d78:	0148      	lsls	r0, r1, #5
 8008d7a:	69f9      	ldr	r1, [r7, #28]
 8008d7c:	4401      	add	r1, r0
 8008d7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d82:	4313      	orrs	r3, r2
 8008d84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	78db      	ldrb	r3, [r3, #3]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d11f      	bne.n	8008dce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008dac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	0151      	lsls	r1, r2, #5
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	440a      	add	r2, r1
 8008dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dcc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d14b      	bne.n	8008e6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d009      	beq.n	8008df0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de8:	461a      	mov	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	78db      	ldrb	r3, [r3, #3]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d128      	bne.n	8008e4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d110      	bne.n	8008e2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	0151      	lsls	r1, r2, #5
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	440a      	add	r2, r1
 8008e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	e00f      	b.n	8008e4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	e12f      	b.n	80090cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	78db      	ldrb	r3, [r3, #3]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d015      	beq.n	8008ec0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 8117 	beq.w	80090cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	2101      	movs	r1, #1
 8008eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb4:	69f9      	ldr	r1, [r7, #28]
 8008eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	634b      	str	r3, [r1, #52]	; 0x34
 8008ebe:	e105      	b.n	80090cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d110      	bne.n	8008ef2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	0151      	lsls	r1, r2, #5
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	e00f      	b.n	8008f12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	0151      	lsls	r1, r2, #5
 8008f04:	69fa      	ldr	r2, [r7, #28]
 8008f06:	440a      	add	r2, r1
 8008f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	68d9      	ldr	r1, [r3, #12]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	b298      	uxth	r0, r3
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	4603      	mov	r3, r0
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 fa2b 	bl	8009382 <USB_WritePacket>
 8008f2c:	e0ce      	b.n	80090cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f48:	0cdb      	lsrs	r3, r3, #19
 8008f4a:	04db      	lsls	r3, r3, #19
 8008f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d126      	bne.n	8008fc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f90:	69b9      	ldr	r1, [r7, #24]
 8008f92:	0148      	lsls	r0, r1, #5
 8008f94:	69f9      	ldr	r1, [r7, #28]
 8008f96:	4401      	add	r1, r0
 8008f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	0151      	lsls	r1, r2, #5
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	440a      	add	r2, r1
 8008fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fbe:	6113      	str	r3, [r2, #16]
 8008fc0:	e036      	b.n	8009030 <USB_EPStartXfer+0x3dc>
 8008fc2:	bf00      	nop
 8008fc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	695a      	ldr	r2, [r3, #20]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	1e5a      	subs	r2, r3, #1
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fdc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	8afb      	ldrh	r3, [r7, #22]
 8008fee:	04d9      	lsls	r1, r3, #19
 8008ff0:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <USB_EPStartXfer+0x484>)
 8008ff2:	400b      	ands	r3, r1
 8008ff4:	69b9      	ldr	r1, [r7, #24]
 8008ff6:	0148      	lsls	r0, r1, #5
 8008ff8:	69f9      	ldr	r1, [r7, #28]
 8008ffa:	4401      	add	r1, r0
 8008ffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009000:	4313      	orrs	r3, r2
 8009002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	8af9      	ldrh	r1, [r7, #22]
 8009018:	fb01 f303 	mul.w	r3, r1, r3
 800901c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009020:	69b9      	ldr	r1, [r7, #24]
 8009022:	0148      	lsls	r0, r1, #5
 8009024:	69f9      	ldr	r1, [r7, #28]
 8009026:	4401      	add	r1, r0
 8009028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800902c:	4313      	orrs	r3, r2
 800902e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d10d      	bne.n	8009052 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d009      	beq.n	8009052 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	68d9      	ldr	r1, [r3, #12]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904e:	460a      	mov	r2, r1
 8009050:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	78db      	ldrb	r3, [r3, #3]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d128      	bne.n	80090ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009066:	2b00      	cmp	r3, #0
 8009068:	d110      	bne.n	800908c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	0151      	lsls	r1, r2, #5
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	440a      	add	r2, r1
 8009080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009084:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	e00f      	b.n	80090ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	1ff80000 	.word	0x1ff80000

080090dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	f040 80cd 	bne.w	8009298 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d132      	bne.n	800916c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	440a      	add	r2, r1
 800911c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009120:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009124:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	0151      	lsls	r1, r2, #5
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	440a      	add	r2, r1
 8009160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009164:	0cdb      	lsrs	r3, r3, #19
 8009166:	04db      	lsls	r3, r3, #19
 8009168:	6113      	str	r3, [r2, #16]
 800916a:	e04e      	b.n	800920a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	440a      	add	r2, r1
 8009182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009186:	0cdb      	lsrs	r3, r3, #19
 8009188:	04db      	lsls	r3, r3, #19
 800918a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d903      	bls.n	80091c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	0151      	lsls	r1, r2, #5
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	440a      	add	r2, r1
 80091da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fa:	6939      	ldr	r1, [r7, #16]
 80091fc:	0148      	lsls	r0, r1, #5
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	4401      	add	r1, r0
 8009202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009206:	4313      	orrs	r3, r2
 8009208:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d11e      	bne.n	800924e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d009      	beq.n	800922c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	461a      	mov	r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	e092      	b.n	8009374 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009268:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800926c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d07e      	beq.n	8009374 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	2101      	movs	r1, #1
 8009288:	fa01 f303 	lsl.w	r3, r1, r3
 800928c:	6979      	ldr	r1, [r7, #20]
 800928e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009292:	4313      	orrs	r3, r2
 8009294:	634b      	str	r3, [r1, #52]	; 0x34
 8009296:	e06d      	b.n	8009374 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b2:	0cdb      	lsrs	r3, r3, #19
 80092b4:	04db      	lsls	r3, r3, #19
 80092b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	0151      	lsls	r1, r2, #5
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	440a      	add	r2, r1
 8009302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800930a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009322:	6939      	ldr	r1, [r7, #16]
 8009324:	0148      	lsls	r0, r1, #5
 8009326:	6979      	ldr	r1, [r7, #20]
 8009328:	4401      	add	r1, r0
 800932a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800932e:	4313      	orrs	r3, r2
 8009330:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d10d      	bne.n	8009354 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d009      	beq.n	8009354 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	68d9      	ldr	r1, [r3, #12]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009350:	460a      	mov	r2, r1
 8009352:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	371c      	adds	r7, #28
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009382:	b480      	push	{r7}
 8009384:	b089      	sub	sp, #36	; 0x24
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	4611      	mov	r1, r2
 800938e:	461a      	mov	r2, r3
 8009390:	460b      	mov	r3, r1
 8009392:	71fb      	strb	r3, [r7, #7]
 8009394:	4613      	mov	r3, r2
 8009396:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d123      	bne.n	80093f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093a8:	88bb      	ldrh	r3, [r7, #4]
 80093aa:	3303      	adds	r3, #3
 80093ac:	089b      	lsrs	r3, r3, #2
 80093ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093b0:	2300      	movs	r3, #0
 80093b2:	61bb      	str	r3, [r7, #24]
 80093b4:	e018      	b.n	80093e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	031a      	lsls	r2, r3, #12
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c2:	461a      	mov	r2, r3
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	3301      	adds	r3, #1
 80093ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	3301      	adds	r3, #1
 80093d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	3301      	adds	r3, #1
 80093e6:	61bb      	str	r3, [r7, #24]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d3e2      	bcc.n	80093b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3724      	adds	r7, #36	; 0x24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80093fe:	b480      	push	{r7}
 8009400:	b08b      	sub	sp, #44	; 0x2c
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	4613      	mov	r3, r2
 800940a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009414:	88fb      	ldrh	r3, [r7, #6]
 8009416:	089b      	lsrs	r3, r3, #2
 8009418:	b29b      	uxth	r3, r3
 800941a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009424:	2300      	movs	r3, #0
 8009426:	623b      	str	r3, [r7, #32]
 8009428:	e014      	b.n	8009454 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	601a      	str	r2, [r3, #0]
    pDest++;
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	3301      	adds	r3, #1
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	3301      	adds	r3, #1
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	3301      	adds	r3, #1
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	3301      	adds	r3, #1
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	3301      	adds	r3, #1
 8009452:	623b      	str	r3, [r7, #32]
 8009454:	6a3a      	ldr	r2, [r7, #32]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	429a      	cmp	r2, r3
 800945a:	d3e6      	bcc.n	800942a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800945c:	8bfb      	ldrh	r3, [r7, #30]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01e      	beq.n	80094a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946c:	461a      	mov	r2, r3
 800946e:	f107 0310 	add.w	r3, r7, #16
 8009472:	6812      	ldr	r2, [r2, #0]
 8009474:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	fa22 f303 	lsr.w	r3, r2, r3
 8009482:	b2da      	uxtb	r2, r3
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	701a      	strb	r2, [r3, #0]
      i++;
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	3301      	adds	r3, #1
 800948c:	623b      	str	r3, [r7, #32]
      pDest++;
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	3301      	adds	r3, #1
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009494:	8bfb      	ldrh	r3, [r7, #30]
 8009496:	3b01      	subs	r3, #1
 8009498:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800949a:	8bfb      	ldrh	r3, [r7, #30]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1ea      	bne.n	8009476 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	372c      	adds	r7, #44	; 0x2c
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d12c      	bne.n	8009524 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	db12      	blt.n	8009502 <USB_EPSetStall+0x54>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00f      	beq.n	8009502 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009500:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	e02b      	b.n	800957c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	db12      	blt.n	800955c <USB_EPSetStall+0xae>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00f      	beq.n	800955c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	0151      	lsls	r1, r2, #5
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	440a      	add	r2, r1
 8009552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800955a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800957a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800958a:	b480      	push	{r7}
 800958c:	b085      	sub	sp, #20
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d128      	bne.n	80095f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	78db      	ldrb	r3, [r3, #3]
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d003      	beq.n	80095d6 <USB_EPClearStall+0x4c>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	78db      	ldrb	r3, [r3, #3]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d138      	bne.n	8009648 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	e027      	b.n	8009648 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	0151      	lsls	r1, r2, #5
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	440a      	add	r2, r1
 800960e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	78db      	ldrb	r3, [r3, #3]
 800961c:	2b03      	cmp	r3, #3
 800961e:	d003      	beq.n	8009628 <USB_EPClearStall+0x9e>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	78db      	ldrb	r3, [r3, #3]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d10f      	bne.n	8009648 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	440a      	add	r2, r1
 800963e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009646:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009674:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009678:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009690:	4313      	orrs	r3, r2
 8009692:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096bc:	f023 0303 	bic.w	r3, r3, #3
 80096c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096d0:	f023 0302 	bic.w	r3, r3, #2
 80096d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009712:	f043 0302 	orr.w	r3, r3, #2
 8009716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4013      	ands	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4013      	ands	r3, r2
 800976e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	0c1b      	lsrs	r3, r3, #16
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4013      	ands	r3, r2
 80097a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	b29b      	uxth	r3, r3
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4013      	ands	r3, r2
 80097e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097e2:	68bb      	ldr	r3, [r7, #8]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009812:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	fa22 f303 	lsr.w	r3, r2, r3
 8009820:	01db      	lsls	r3, r3, #7
 8009822:	b2db      	uxtb	r3, r3
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4013      	ands	r3, r2
 800983c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800983e:	68bb      	ldr	r3, [r7, #8]
}
 8009840:	4618      	mov	r0, r3
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f003 0301 	and.w	r3, r3, #1
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009882:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009886:	f023 0307 	bic.w	r3, r3, #7
 800988a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800989a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
	...

080098b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	460b      	mov	r3, r1
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	333c      	adds	r3, #60	; 0x3c
 80098c6:	3304      	adds	r3, #4
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4a26      	ldr	r2, [pc, #152]	; (8009968 <USB_EP0_OutStart+0xb8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d90a      	bls.n	80098ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e4:	d101      	bne.n	80098ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	e037      	b.n	800995a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f0:	461a      	mov	r2, r3
 80098f2:	2300      	movs	r3, #0
 80098f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009918:	f043 0318 	orr.w	r3, r3, #24
 800991c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800992c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d10f      	bne.n	8009958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	461a      	mov	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009952:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	4f54300a 	.word	0x4f54300a

0800996c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
 800997e:	4a13      	ldr	r2, [pc, #76]	; (80099cc <USB_CoreReset+0x60>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d901      	bls.n	8009988 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e01a      	b.n	80099be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	daf3      	bge.n	8009978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	f043 0201 	orr.w	r2, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	4a09      	ldr	r2, [pc, #36]	; (80099cc <USB_CoreReset+0x60>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d901      	bls.n	80099b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e006      	b.n	80099be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d0f1      	beq.n	80099a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	00030d40 	.word	0x00030d40

080099d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80099dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80099e0:	f002 f9be 	bl	800bd60 <USBD_static_malloc>
 80099e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d105      	bne.n	80099f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80099f4:	2302      	movs	r3, #2
 80099f6:	e066      	b.n	8009ac6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7c1b      	ldrb	r3, [r3, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d119      	bne.n	8009a3c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	2181      	movs	r1, #129	; 0x81
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 f834 	bl	800ba7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a20:	2202      	movs	r2, #2
 8009a22:	2101      	movs	r1, #1
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f002 f82a 	bl	800ba7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2210      	movs	r2, #16
 8009a36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009a3a:	e016      	b.n	8009a6a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a3c:	2340      	movs	r3, #64	; 0x40
 8009a3e:	2202      	movs	r2, #2
 8009a40:	2181      	movs	r1, #129	; 0x81
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f002 f81b 	bl	800ba7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	2202      	movs	r2, #2
 8009a52:	2101      	movs	r1, #1
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f002 f812 	bl	800ba7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2210      	movs	r2, #16
 8009a66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	2182      	movs	r1, #130	; 0x82
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f002 f804 	bl	800ba7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7c1b      	ldrb	r3, [r3, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d109      	bne.n	8009ab4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aaa:	2101      	movs	r1, #1
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f002 f8d5 	bl	800bc5c <USBD_LL_PrepareReceive>
 8009ab2:	e007      	b.n	8009ac4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aba:	2340      	movs	r3, #64	; 0x40
 8009abc:	2101      	movs	r1, #1
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f002 f8cc 	bl	800bc5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ada:	2181      	movs	r1, #129	; 0x81
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 fff4 	bl	800baca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 ffed 	bl	800baca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009af8:	2182      	movs	r1, #130	; 0x82
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 ffe5 	bl	800baca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00e      	beq.n	8009b38 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f002 f926 	bl	800bd7c <USBD_static_free>
    pdev->pClassData = NULL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e0af      	b.n	8009ccc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d03f      	beq.n	8009bf8 <USBD_CDC_Setup+0xb4>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	f040 809f 	bne.w	8009cbc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	88db      	ldrh	r3, [r3, #6]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d02e      	beq.n	8009be4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b25b      	sxtb	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	da16      	bge.n	8009bbe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009b9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	88d2      	ldrh	r2, [r2, #6]
 8009ba2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	88db      	ldrh	r3, [r3, #6]
 8009ba8:	2b07      	cmp	r3, #7
 8009baa:	bf28      	it	cs
 8009bac:	2307      	movcs	r3, #7
 8009bae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	89fa      	ldrh	r2, [r7, #14]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fb13 	bl	800b1e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009bbc:	e085      	b.n	8009cca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	785a      	ldrb	r2, [r3, #1]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	88db      	ldrh	r3, [r3, #6]
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009bd4:	6939      	ldr	r1, [r7, #16]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	88db      	ldrh	r3, [r3, #6]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fb2c 	bl	800b23a <USBD_CtlPrepareRx>
      break;
 8009be2:	e072      	b.n	8009cca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	7850      	ldrb	r0, [r2, #1]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	4798      	blx	r3
      break;
 8009bf6:	e068      	b.n	8009cca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	2b0b      	cmp	r3, #11
 8009bfe:	d852      	bhi.n	8009ca6 <USBD_CDC_Setup+0x162>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <USBD_CDC_Setup+0xc4>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c39 	.word	0x08009c39
 8009c0c:	08009cb5 	.word	0x08009cb5
 8009c10:	08009ca7 	.word	0x08009ca7
 8009c14:	08009ca7 	.word	0x08009ca7
 8009c18:	08009ca7 	.word	0x08009ca7
 8009c1c:	08009ca7 	.word	0x08009ca7
 8009c20:	08009ca7 	.word	0x08009ca7
 8009c24:	08009ca7 	.word	0x08009ca7
 8009c28:	08009ca7 	.word	0x08009ca7
 8009c2c:	08009ca7 	.word	0x08009ca7
 8009c30:	08009c63 	.word	0x08009c63
 8009c34:	08009c8d 	.word	0x08009c8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d107      	bne.n	8009c54 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c44:	f107 030a 	add.w	r3, r7, #10
 8009c48:	2202      	movs	r2, #2
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f001 fac8 	bl	800b1e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c52:	e032      	b.n	8009cba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 fa52 	bl	800b100 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8009c60:	e02b      	b.n	8009cba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d107      	bne.n	8009c7e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c6e:	f107 030d 	add.w	r3, r7, #13
 8009c72:	2201      	movs	r2, #1
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 fab3 	bl	800b1e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c7c:	e01d      	b.n	8009cba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f001 fa3d 	bl	800b100 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c86:	2303      	movs	r3, #3
 8009c88:	75fb      	strb	r3, [r7, #23]
          break;
 8009c8a:	e016      	b.n	8009cba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d00f      	beq.n	8009cb8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 fa30 	bl	800b100 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ca4:	e008      	b.n	8009cb8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 fa29 	bl	800b100 <USBD_CtlError>
          ret = USBD_FAIL;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8009cb2:	e002      	b.n	8009cba <USBD_CDC_Setup+0x176>
          break;
 8009cb4:	bf00      	nop
 8009cb6:	e008      	b.n	8009cca <USBD_CDC_Setup+0x186>
          break;
 8009cb8:	bf00      	nop
      }
      break;
 8009cba:	e006      	b.n	8009cca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fa1e 	bl	800b100 <USBD_CtlError>
      ret = USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e04f      	b.n	8009d96 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	4613      	mov	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	3318      	adds	r3, #24
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d029      	beq.n	8009d68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	440b      	add	r3, r1
 8009d22:	3318      	adds	r3, #24
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	78f9      	ldrb	r1, [r7, #3]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	1a5b      	subs	r3, r3, r1
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4403      	add	r3, r0
 8009d34:	3344      	adds	r3, #68	; 0x44
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d3c:	fb03 f301 	mul.w	r3, r3, r1
 8009d40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d110      	bne.n	8009d68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	440b      	add	r3, r1
 8009d54:	3318      	adds	r3, #24
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d5a:	78f9      	ldrb	r1, [r7, #3]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 ff5a 	bl	800bc1a <USBD_LL_Transmit>
 8009d66:	e015      	b.n	8009d94 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e015      	b.n	8009dec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 ff6a 	bl	800bc9e <USBD_LL_GetRxDataSize>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009de6:	4611      	mov	r1, r2
 8009de8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e01b      	b.n	8009e46 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d015      	beq.n	8009e44 <USBD_CDC_EP0_RxReady+0x50>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e1e:	2bff      	cmp	r3, #255	; 0xff
 8009e20:	d010      	beq.n	8009e44 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009e30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	22ff      	movs	r2, #255	; 0xff
 8009e40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2243      	movs	r2, #67	; 0x43
 8009e5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009e5e:	4b03      	ldr	r3, [pc, #12]	; (8009e6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20000094 	.word	0x20000094

08009e70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2243      	movs	r2, #67	; 0x43
 8009e7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009e7e:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	20000050 	.word	0x20000050

08009e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2243      	movs	r2, #67	; 0x43
 8009e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009e9e:	4b03      	ldr	r3, [pc, #12]	; (8009eac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	200000d8 	.word	0x200000d8

08009eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	220a      	movs	r2, #10
 8009ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ebe:	4b03      	ldr	r3, [pc, #12]	; (8009ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	2000000c 	.word	0x2000000c

08009ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e004      	b.n	8009eee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b087      	sub	sp, #28
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f0c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e008      	b.n	8009f2a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e004      	b.n	8009f5c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e016      	b.n	8009fb4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7c1b      	ldrb	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d109      	bne.n	8009fa2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f98:	2101      	movs	r1, #1
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 fe5e 	bl	800bc5c <USBD_LL_PrepareReceive>
 8009fa0:	e007      	b.n	8009fb2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fa8:	2340      	movs	r3, #64	; 0x40
 8009faa:	2101      	movs	r1, #1
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 fe55 	bl	800bc5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e01f      	b.n	800a014 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	79fa      	ldrb	r2, [r7, #7]
 800a006:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f001 fcd1 	bl	800b9b0 <USBD_LL_Init>
 800a00e:	4603      	mov	r3, r0
 800a010:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a030:	2303      	movs	r3, #3
 800a032:	e016      	b.n	800a062 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	f107 020e 	add.w	r2, r7, #14
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	4602      	mov	r2, r0
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fce8 	bl	800ba48 <USBD_LL_Start>
 800a078:	4603      	mov	r3, r0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	4798      	blx	r3
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	4798      	blx	r3
  }

  return USBD_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 ffba 	bl	800b08c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a126:	461a      	mov	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a134:	f003 031f 	and.w	r3, r3, #31
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d01a      	beq.n	800a172 <USBD_LL_SetupStage+0x72>
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d822      	bhi.n	800a186 <USBD_LL_SetupStage+0x86>
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <USBD_LL_SetupStage+0x4a>
 800a144:	2b01      	cmp	r3, #1
 800a146:	d00a      	beq.n	800a15e <USBD_LL_SetupStage+0x5e>
 800a148:	e01d      	b.n	800a186 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa62 	bl	800a61c <USBD_StdDevReq>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]
      break;
 800a15c:	e020      	b.n	800a1a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fac6 	bl	800a6f8 <USBD_StdItfReq>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
      break;
 800a170:	e016      	b.n	800a1a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fb05 	bl	800a78a <USBD_StdEPReq>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]
      break;
 800a184:	e00c      	b.n	800a1a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a18c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a190:	b2db      	uxtb	r3, r3
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 fcb7 	bl	800bb08 <USBD_LL_StallEP>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]
      break;
 800a19e:	bf00      	nop
  }

  return ret;
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b086      	sub	sp, #24
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d138      	bne.n	800a230 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d14a      	bne.n	800a266 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d913      	bls.n	800a204 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	689a      	ldr	r2, [r3, #8]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	1ad2      	subs	r2, r2, r3
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	bf28      	it	cs
 800a1f6:	4613      	movcs	r3, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f001 f839 	bl	800b274 <USBD_CtlContinueRx>
 800a202:	e030      	b.n	800a266 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d10b      	bne.n	800a228 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f001 f834 	bl	800b296 <USBD_CtlSendStatus>
 800a22e:	e01a      	b.n	800a266 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d114      	bne.n	800a266 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00e      	beq.n	800a266 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	7afa      	ldrb	r2, [r7, #11]
 800a252:	4611      	mov	r1, r2
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	4798      	blx	r3
 800a258:	4603      	mov	r3, r0
 800a25a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	e000      	b.n	800a268 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	460b      	mov	r3, r1
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d16b      	bne.n	800a35c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3314      	adds	r3, #20
 800a288:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a290:	2b02      	cmp	r3, #2
 800a292:	d156      	bne.n	800a342 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d914      	bls.n	800a2ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	1ad2      	subs	r2, r2, r3
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6879      	ldr	r1, [r7, #4]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 ffae 	bl	800b218 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f001 fcca 	bl	800bc5c <USBD_LL_PrepareReceive>
 800a2c8:	e03b      	b.n	800a342 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d11c      	bne.n	800a310 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d316      	bcc.n	800a310 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d20f      	bcs.n	800a310 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 ff8f 	bl	800b218 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a302:	2300      	movs	r3, #0
 800a304:	2200      	movs	r2, #0
 800a306:	2100      	movs	r1, #0
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f001 fca7 	bl	800bc5c <USBD_LL_PrepareReceive>
 800a30e:	e018      	b.n	800a342 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d10b      	bne.n	800a334 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a334:	2180      	movs	r1, #128	; 0x80
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f001 fbe6 	bl	800bb08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 ffbd 	bl	800b2bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d122      	bne.n	800a392 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7ff fe98 	bl	800a082 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a35a:	e01a      	b.n	800a392 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b03      	cmp	r3, #3
 800a366:	d114      	bne.n	800a392 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00e      	beq.n	800a392 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	7afa      	ldrb	r2, [r7, #11]
 800a37e:	4611      	mov	r1, r2
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	4798      	blx	r3
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	e000      	b.n	800a394 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e02f      	b.n	800a430 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00f      	beq.n	800a3fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d009      	beq.n	800a3fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6852      	ldr	r2, [r2, #4]
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3fa:	2340      	movs	r3, #64	; 0x40
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2100      	movs	r1, #0
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fb3c 	bl	800ba7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2240      	movs	r2, #64	; 0x40
 800a412:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a416:	2340      	movs	r3, #64	; 0x40
 800a418:	2200      	movs	r2, #0
 800a41a:	2180      	movs	r1, #128	; 0x80
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 fb2e 	bl	800ba7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2240      	movs	r2, #64	; 0x40
 800a42c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a466:	b2da      	uxtb	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2204      	movs	r2, #4
 800a472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b04      	cmp	r3, #4
 800a496:	d106      	bne.n	800a4a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e012      	b.n	800a4f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d10b      	bne.n	800a4ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d005      	beq.n	800a4ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a50e:	2303      	movs	r3, #3
 800a510:	e014      	b.n	800a53c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d10d      	bne.n	800a53a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	78fa      	ldrb	r2, [r7, #3]
 800a534:	4611      	mov	r1, r2
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e014      	b.n	800a588 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b03      	cmp	r3, #3
 800a568:	d10d      	bne.n	800a586 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b00      	cmp	r3, #0
 800a574:	d007      	beq.n	800a586 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d009      	beq.n	800a5d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	6852      	ldr	r2, [r2, #4]
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
  }

  return USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b087      	sub	sp, #28
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5fc:	8a3b      	ldrh	r3, [r7, #16]
 800a5fe:	021b      	lsls	r3, r3, #8
 800a600:	b21a      	sxth	r2, r3
 800a602:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a606:	4313      	orrs	r3, r2
 800a608:	b21b      	sxth	r3, r3
 800a60a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a60c:	89fb      	ldrh	r3, [r7, #14]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
	...

0800a61c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a632:	2b40      	cmp	r3, #64	; 0x40
 800a634:	d005      	beq.n	800a642 <USBD_StdDevReq+0x26>
 800a636:	2b40      	cmp	r3, #64	; 0x40
 800a638:	d853      	bhi.n	800a6e2 <USBD_StdDevReq+0xc6>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00b      	beq.n	800a656 <USBD_StdDevReq+0x3a>
 800a63e:	2b20      	cmp	r3, #32
 800a640:	d14f      	bne.n	800a6e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4798      	blx	r3
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]
      break;
 800a654:	e04a      	b.n	800a6ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b09      	cmp	r3, #9
 800a65c:	d83b      	bhi.n	800a6d6 <USBD_StdDevReq+0xba>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <USBD_StdDevReq+0x48>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a6b9 	.word	0x0800a6b9
 800a668:	0800a6cd 	.word	0x0800a6cd
 800a66c:	0800a6d7 	.word	0x0800a6d7
 800a670:	0800a6c3 	.word	0x0800a6c3
 800a674:	0800a6d7 	.word	0x0800a6d7
 800a678:	0800a697 	.word	0x0800a697
 800a67c:	0800a68d 	.word	0x0800a68d
 800a680:	0800a6d7 	.word	0x0800a6d7
 800a684:	0800a6af 	.word	0x0800a6af
 800a688:	0800a6a1 	.word	0x0800a6a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f9de 	bl	800aa50 <USBD_GetDescriptor>
          break;
 800a694:	e024      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fb6d 	bl	800ad78 <USBD_SetAddress>
          break;
 800a69e:	e01f      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fbac 	bl	800ae00 <USBD_SetConfig>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]
          break;
 800a6ac:	e018      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fc4b 	bl	800af4c <USBD_GetConfig>
          break;
 800a6b6:	e013      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fc7c 	bl	800afb8 <USBD_GetStatus>
          break;
 800a6c0:	e00e      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fcab 	bl	800b020 <USBD_SetFeature>
          break;
 800a6ca:	e009      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fcba 	bl	800b048 <USBD_ClrFeature>
          break;
 800a6d4:	e004      	b.n	800a6e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fd11 	bl	800b100 <USBD_CtlError>
          break;
 800a6de:	bf00      	nop
      }
      break;
 800a6e0:	e004      	b.n	800a6ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fd0b 	bl	800b100 <USBD_CtlError>
      break;
 800a6ea:	bf00      	nop
  }

  return ret;
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop

0800a6f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a70e:	2b40      	cmp	r3, #64	; 0x40
 800a710:	d005      	beq.n	800a71e <USBD_StdItfReq+0x26>
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	d82f      	bhi.n	800a776 <USBD_StdItfReq+0x7e>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <USBD_StdItfReq+0x26>
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d12b      	bne.n	800a776 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a724:	b2db      	uxtb	r3, r3
 800a726:	3b01      	subs	r3, #1
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d81d      	bhi.n	800a768 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	889b      	ldrh	r3, [r3, #4]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b01      	cmp	r3, #1
 800a734:	d813      	bhi.n	800a75e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	88db      	ldrh	r3, [r3, #6]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d110      	bne.n	800a772 <USBD_StdItfReq+0x7a>
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10d      	bne.n	800a772 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fd9d 	bl	800b296 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a75c:	e009      	b.n	800a772 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fccd 	bl	800b100 <USBD_CtlError>
          break;
 800a766:	e004      	b.n	800a772 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fcc8 	bl	800b100 <USBD_CtlError>
          break;
 800a770:	e000      	b.n	800a774 <USBD_StdItfReq+0x7c>
          break;
 800a772:	bf00      	nop
      }
      break;
 800a774:	e004      	b.n	800a780 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fcc1 	bl	800b100 <USBD_CtlError>
      break;
 800a77e:	bf00      	nop
  }

  return ret;
 800a780:	7bfb      	ldrb	r3, [r7, #15]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	889b      	ldrh	r3, [r3, #4]
 800a79c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7a6:	2b40      	cmp	r3, #64	; 0x40
 800a7a8:	d007      	beq.n	800a7ba <USBD_StdEPReq+0x30>
 800a7aa:	2b40      	cmp	r3, #64	; 0x40
 800a7ac:	f200 8145 	bhi.w	800aa3a <USBD_StdEPReq+0x2b0>
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00c      	beq.n	800a7ce <USBD_StdEPReq+0x44>
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	f040 8140 	bne.w	800aa3a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a7cc:	e13a      	b.n	800aa44 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	785b      	ldrb	r3, [r3, #1]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d007      	beq.n	800a7e6 <USBD_StdEPReq+0x5c>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	f300 8129 	bgt.w	800aa2e <USBD_StdEPReq+0x2a4>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d07f      	beq.n	800a8e0 <USBD_StdEPReq+0x156>
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d03c      	beq.n	800a85e <USBD_StdEPReq+0xd4>
 800a7e4:	e123      	b.n	800aa2e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d002      	beq.n	800a7f8 <USBD_StdEPReq+0x6e>
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d016      	beq.n	800a824 <USBD_StdEPReq+0x9a>
 800a7f6:	e02c      	b.n	800a852 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00d      	beq.n	800a81a <USBD_StdEPReq+0x90>
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	2b80      	cmp	r3, #128	; 0x80
 800a802:	d00a      	beq.n	800a81a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a804:	7bbb      	ldrb	r3, [r7, #14]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 f97d 	bl	800bb08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a80e:	2180      	movs	r1, #128	; 0x80
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f001 f979 	bl	800bb08 <USBD_LL_StallEP>
 800a816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a818:	e020      	b.n	800a85c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fc6f 	bl	800b100 <USBD_CtlError>
              break;
 800a822:	e01b      	b.n	800a85c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	885b      	ldrh	r3, [r3, #2]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10e      	bne.n	800a84a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00b      	beq.n	800a84a <USBD_StdEPReq+0xc0>
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	2b80      	cmp	r3, #128	; 0x80
 800a836:	d008      	beq.n	800a84a <USBD_StdEPReq+0xc0>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	88db      	ldrh	r3, [r3, #6]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f95f 	bl	800bb08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fd23 	bl	800b296 <USBD_CtlSendStatus>

              break;
 800a850:	e004      	b.n	800a85c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fc53 	bl	800b100 <USBD_CtlError>
              break;
 800a85a:	bf00      	nop
          }
          break;
 800a85c:	e0ec      	b.n	800aa38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d002      	beq.n	800a870 <USBD_StdEPReq+0xe6>
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d016      	beq.n	800a89c <USBD_StdEPReq+0x112>
 800a86e:	e030      	b.n	800a8d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00d      	beq.n	800a892 <USBD_StdEPReq+0x108>
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	2b80      	cmp	r3, #128	; 0x80
 800a87a:	d00a      	beq.n	800a892 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 f941 	bl	800bb08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a886:	2180      	movs	r1, #128	; 0x80
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f001 f93d 	bl	800bb08 <USBD_LL_StallEP>
 800a88e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a890:	e025      	b.n	800a8de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fc33 	bl	800b100 <USBD_CtlError>
              break;
 800a89a:	e020      	b.n	800a8de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	885b      	ldrh	r3, [r3, #2]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11b      	bne.n	800a8dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d004      	beq.n	800a8b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 f947 	bl	800bb46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fcec 	bl	800b296 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	4798      	blx	r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a8d0:	e004      	b.n	800a8dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fc13 	bl	800b100 <USBD_CtlError>
              break;
 800a8da:	e000      	b.n	800a8de <USBD_StdEPReq+0x154>
              break;
 800a8dc:	bf00      	nop
          }
          break;
 800a8de:	e0ab      	b.n	800aa38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d002      	beq.n	800a8f2 <USBD_StdEPReq+0x168>
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d032      	beq.n	800a956 <USBD_StdEPReq+0x1cc>
 800a8f0:	e097      	b.n	800aa22 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d007      	beq.n	800a908 <USBD_StdEPReq+0x17e>
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2b80      	cmp	r3, #128	; 0x80
 800a8fc:	d004      	beq.n	800a908 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fbfd 	bl	800b100 <USBD_CtlError>
                break;
 800a906:	e091      	b.n	800aa2c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	da0b      	bge.n	800a928 <USBD_StdEPReq+0x19e>
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	3310      	adds	r3, #16
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	4413      	add	r3, r2
 800a924:	3304      	adds	r3, #4
 800a926:	e00b      	b.n	800a940 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	3304      	adds	r3, #4
 800a940:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2202      	movs	r2, #2
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fc47 	bl	800b1e2 <USBD_CtlSendData>
              break;
 800a954:	e06a      	b.n	800aa2c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	da11      	bge.n	800a982 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	f003 020f 	and.w	r2, r3, #15
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	4613      	mov	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	440b      	add	r3, r1
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d117      	bne.n	800a9a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fbc0 	bl	800b100 <USBD_CtlError>
                  break;
 800a980:	e054      	b.n	800aa2c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	f003 020f 	and.w	r2, r3, #15
 800a988:	6879      	ldr	r1, [r7, #4]
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	440b      	add	r3, r1
 800a994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fbad 	bl	800b100 <USBD_CtlError>
                  break;
 800a9a6:	e041      	b.n	800aa2c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	da0b      	bge.n	800a9c8 <USBD_StdEPReq+0x23e>
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	3310      	adds	r3, #16
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	e00b      	b.n	800a9e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	3304      	adds	r3, #4
 800a9e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <USBD_StdEPReq+0x264>
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b80      	cmp	r3, #128	; 0x80
 800a9ec:	d103      	bne.n	800a9f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	e00e      	b.n	800aa14 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f001 f8c2 	bl	800bb84 <USBD_LL_IsStallEP>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e002      	b.n	800aa14 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2200      	movs	r2, #0
 800aa12:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2202      	movs	r2, #2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fbe1 	bl	800b1e2 <USBD_CtlSendData>
              break;
 800aa20:	e004      	b.n	800aa2c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fb6b 	bl	800b100 <USBD_CtlError>
              break;
 800aa2a:	bf00      	nop
          }
          break;
 800aa2c:	e004      	b.n	800aa38 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fb65 	bl	800b100 <USBD_CtlError>
          break;
 800aa36:	bf00      	nop
      }
      break;
 800aa38:	e004      	b.n	800aa44 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fb5f 	bl	800b100 <USBD_CtlError>
      break;
 800aa42:	bf00      	nop
  }

  return ret;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	885b      	ldrh	r3, [r3, #2]
 800aa6a:	0a1b      	lsrs	r3, r3, #8
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	2b0e      	cmp	r3, #14
 800aa72:	f200 8152 	bhi.w	800ad1a <USBD_GetDescriptor+0x2ca>
 800aa76:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <USBD_GetDescriptor+0x2c>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800aaed 	.word	0x0800aaed
 800aa80:	0800ab05 	.word	0x0800ab05
 800aa84:	0800ab45 	.word	0x0800ab45
 800aa88:	0800ad1b 	.word	0x0800ad1b
 800aa8c:	0800ad1b 	.word	0x0800ad1b
 800aa90:	0800acbb 	.word	0x0800acbb
 800aa94:	0800ace7 	.word	0x0800ace7
 800aa98:	0800ad1b 	.word	0x0800ad1b
 800aa9c:	0800ad1b 	.word	0x0800ad1b
 800aaa0:	0800ad1b 	.word	0x0800ad1b
 800aaa4:	0800ad1b 	.word	0x0800ad1b
 800aaa8:	0800ad1b 	.word	0x0800ad1b
 800aaac:	0800ad1b 	.word	0x0800ad1b
 800aab0:	0800ad1b 	.word	0x0800ad1b
 800aab4:	0800aab9 	.word	0x0800aab9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	7c12      	ldrb	r2, [r2, #16]
 800aad0:	f107 0108 	add.w	r1, r7, #8
 800aad4:	4610      	mov	r0, r2
 800aad6:	4798      	blx	r3
 800aad8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aada:	e126      	b.n	800ad2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fb0e 	bl	800b100 <USBD_CtlError>
        err++;
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	3301      	adds	r3, #1
 800aae8:	72fb      	strb	r3, [r7, #11]
      break;
 800aaea:	e11e      	b.n	800ad2a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	7c12      	ldrb	r2, [r2, #16]
 800aaf8:	f107 0108 	add.w	r1, r7, #8
 800aafc:	4610      	mov	r0, r2
 800aafe:	4798      	blx	r3
 800ab00:	60f8      	str	r0, [r7, #12]
      break;
 800ab02:	e112      	b.n	800ad2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7c1b      	ldrb	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	f107 0208 	add.w	r2, r7, #8
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4798      	blx	r3
 800ab1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3301      	adds	r3, #1
 800ab22:	2202      	movs	r2, #2
 800ab24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab26:	e100      	b.n	800ad2a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	f107 0208 	add.w	r2, r7, #8
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	2202      	movs	r2, #2
 800ab40:	701a      	strb	r2, [r3, #0]
      break;
 800ab42:	e0f2      	b.n	800ad2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	885b      	ldrh	r3, [r3, #2]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	f200 80ac 	bhi.w	800aca8 <USBD_GetDescriptor+0x258>
 800ab50:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <USBD_GetDescriptor+0x108>)
 800ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab56:	bf00      	nop
 800ab58:	0800ab71 	.word	0x0800ab71
 800ab5c:	0800aba5 	.word	0x0800aba5
 800ab60:	0800abd9 	.word	0x0800abd9
 800ab64:	0800ac0d 	.word	0x0800ac0d
 800ab68:	0800ac41 	.word	0x0800ac41
 800ab6c:	0800ac75 	.word	0x0800ac75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab92:	e091      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fab2 	bl	800b100 <USBD_CtlError>
            err++;
 800ab9c:	7afb      	ldrb	r3, [r7, #11]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	72fb      	strb	r3, [r7, #11]
          break;
 800aba2:	e089      	b.n	800acb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	7c12      	ldrb	r2, [r2, #16]
 800abbc:	f107 0108 	add.w	r1, r7, #8
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abc6:	e077      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fa98 	bl	800b100 <USBD_CtlError>
            err++;
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	3301      	adds	r3, #1
 800abd4:	72fb      	strb	r3, [r7, #11]
          break;
 800abd6:	e06f      	b.n	800acb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7c12      	ldrb	r2, [r2, #16]
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abfa:	e05d      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa7e 	bl	800b100 <USBD_CtlError>
            err++;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
          break;
 800ac0a:	e055      	b.n	800acb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac2e:	e043      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa64 	bl	800b100 <USBD_CtlError>
            err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac3e:	e03b      	b.n	800acb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	7c12      	ldrb	r2, [r2, #16]
 800ac58:	f107 0108 	add.w	r1, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac62:	e029      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa4a 	bl	800b100 <USBD_CtlError>
            err++;
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	72fb      	strb	r3, [r7, #11]
          break;
 800ac72:	e021      	b.n	800acb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	7c12      	ldrb	r2, [r2, #16]
 800ac8c:	f107 0108 	add.w	r1, r7, #8
 800ac90:	4610      	mov	r0, r2
 800ac92:	4798      	blx	r3
 800ac94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac96:	e00f      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa30 	bl	800b100 <USBD_CtlError>
            err++;
 800aca0:	7afb      	ldrb	r3, [r7, #11]
 800aca2:	3301      	adds	r3, #1
 800aca4:	72fb      	strb	r3, [r7, #11]
          break;
 800aca6:	e007      	b.n	800acb8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa28 	bl	800b100 <USBD_CtlError>
          err++;
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	3301      	adds	r3, #1
 800acb4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800acb6:	bf00      	nop
      }
      break;
 800acb8:	e037      	b.n	800ad2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7c1b      	ldrb	r3, [r3, #16]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	f107 0208 	add.w	r2, r7, #8
 800acce:	4610      	mov	r0, r2
 800acd0:	4798      	blx	r3
 800acd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acd4:	e029      	b.n	800ad2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fa11 	bl	800b100 <USBD_CtlError>
        err++;
 800acde:	7afb      	ldrb	r3, [r7, #11]
 800ace0:	3301      	adds	r3, #1
 800ace2:	72fb      	strb	r3, [r7, #11]
      break;
 800ace4:	e021      	b.n	800ad2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	7c1b      	ldrb	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10d      	bne.n	800ad0a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	f107 0208 	add.w	r2, r7, #8
 800acfa:	4610      	mov	r0, r2
 800acfc:	4798      	blx	r3
 800acfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	2207      	movs	r2, #7
 800ad06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad08:	e00f      	b.n	800ad2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f9f7 	bl	800b100 <USBD_CtlError>
        err++;
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	3301      	adds	r3, #1
 800ad16:	72fb      	strb	r3, [r7, #11]
      break;
 800ad18:	e007      	b.n	800ad2a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f9ef 	bl	800b100 <USBD_CtlError>
      err++;
 800ad22:	7afb      	ldrb	r3, [r7, #11]
 800ad24:	3301      	adds	r3, #1
 800ad26:	72fb      	strb	r3, [r7, #11]
      break;
 800ad28:	bf00      	nop
  }

  if (err != 0U)
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d11e      	bne.n	800ad6e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	88db      	ldrh	r3, [r3, #6]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d016      	beq.n	800ad66 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ad38:	893b      	ldrh	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00e      	beq.n	800ad5c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	88da      	ldrh	r2, [r3, #6]
 800ad42:	893b      	ldrh	r3, [r7, #8]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	bf28      	it	cs
 800ad48:	4613      	movcs	r3, r2
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad4e:	893b      	ldrh	r3, [r7, #8]
 800ad50:	461a      	mov	r2, r3
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fa44 	bl	800b1e2 <USBD_CtlSendData>
 800ad5a:	e009      	b.n	800ad70 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f9ce 	bl	800b100 <USBD_CtlError>
 800ad64:	e004      	b.n	800ad70 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa95 	bl	800b296 <USBD_CtlSendStatus>
 800ad6c:	e000      	b.n	800ad70 <USBD_GetDescriptor+0x320>
    return;
 800ad6e:	bf00      	nop
  }
}
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop

0800ad78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	889b      	ldrh	r3, [r3, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d131      	bne.n	800adee <USBD_SetAddress+0x76>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	88db      	ldrh	r3, [r3, #6]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d12d      	bne.n	800adee <USBD_SetAddress+0x76>
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	2b7f      	cmp	r3, #127	; 0x7f
 800ad98:	d829      	bhi.n	800adee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	885b      	ldrh	r3, [r3, #2]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d104      	bne.n	800adbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9a3 	bl	800b100 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adba:	e01d      	b.n	800adf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7bfa      	ldrb	r2, [r7, #15]
 800adc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 ff07 	bl	800bbdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa61 	bl	800b296 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d004      	beq.n	800ade4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2202      	movs	r2, #2
 800adde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ade2:	e009      	b.n	800adf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adec:	e004      	b.n	800adf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f985 	bl	800b100 <USBD_CtlError>
  }
}
 800adf6:	bf00      	nop
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	885b      	ldrh	r3, [r3, #2]
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	4b4c      	ldr	r3, [pc, #304]	; (800af48 <USBD_SetConfig+0x148>)
 800ae16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae18:	4b4b      	ldr	r3, [pc, #300]	; (800af48 <USBD_SetConfig+0x148>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d905      	bls.n	800ae2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f96c 	bl	800b100 <USBD_CtlError>
    return USBD_FAIL;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e088      	b.n	800af3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d002      	beq.n	800ae3e <USBD_SetConfig+0x3e>
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d025      	beq.n	800ae88 <USBD_SetConfig+0x88>
 800ae3c:	e071      	b.n	800af22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae3e:	4b42      	ldr	r3, [pc, #264]	; (800af48 <USBD_SetConfig+0x148>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01c      	beq.n	800ae80 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ae46:	4b40      	ldr	r3, [pc, #256]	; (800af48 <USBD_SetConfig+0x148>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae50:	4b3d      	ldr	r3, [pc, #244]	; (800af48 <USBD_SetConfig+0x148>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff f91e 	bl	800a098 <USBD_SetClassConfig>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d004      	beq.n	800ae70 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f949 	bl	800b100 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae6e:	e065      	b.n	800af3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fa10 	bl	800b296 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2203      	movs	r2, #3
 800ae7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae7e:	e05d      	b.n	800af3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fa08 	bl	800b296 <USBD_CtlSendStatus>
      break;
 800ae86:	e059      	b.n	800af3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae88:	4b2f      	ldr	r3, [pc, #188]	; (800af48 <USBD_SetConfig+0x148>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d112      	bne.n	800aeb6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <USBD_SetConfig+0x148>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aea2:	4b29      	ldr	r3, [pc, #164]	; (800af48 <USBD_SetConfig+0x148>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff f911 	bl	800a0d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9f1 	bl	800b296 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aeb4:	e042      	b.n	800af3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aeb6:	4b24      	ldr	r3, [pc, #144]	; (800af48 <USBD_SetConfig+0x148>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d02a      	beq.n	800af1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff f8ff 	bl	800a0d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aed2:	4b1d      	ldr	r3, [pc, #116]	; (800af48 <USBD_SetConfig+0x148>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <USBD_SetConfig+0x148>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f8d8 	bl	800a098 <USBD_SetClassConfig>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00f      	beq.n	800af12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f903 	bl	800b100 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff f8e4 	bl	800a0d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af10:	e014      	b.n	800af3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f9bf 	bl	800b296 <USBD_CtlSendStatus>
      break;
 800af18:	e010      	b.n	800af3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f9bb 	bl	800b296 <USBD_CtlSendStatus>
      break;
 800af20:	e00c      	b.n	800af3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f8eb 	bl	800b100 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af2a:	4b07      	ldr	r3, [pc, #28]	; (800af48 <USBD_SetConfig+0x148>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff f8cd 	bl	800a0d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af36:	2303      	movs	r3, #3
 800af38:	73fb      	strb	r3, [r7, #15]
      break;
 800af3a:	bf00      	nop
  }

  return ret;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	200001ac 	.word	0x200001ac

0800af4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d004      	beq.n	800af68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f8cd 	bl	800b100 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af66:	e023      	b.n	800afb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	dc02      	bgt.n	800af7a <USBD_GetConfig+0x2e>
 800af74:	2b00      	cmp	r3, #0
 800af76:	dc03      	bgt.n	800af80 <USBD_GetConfig+0x34>
 800af78:	e015      	b.n	800afa6 <USBD_GetConfig+0x5a>
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d00b      	beq.n	800af96 <USBD_GetConfig+0x4a>
 800af7e:	e012      	b.n	800afa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3308      	adds	r3, #8
 800af8a:	2201      	movs	r2, #1
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f927 	bl	800b1e2 <USBD_CtlSendData>
        break;
 800af94:	e00c      	b.n	800afb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3304      	adds	r3, #4
 800af9a:	2201      	movs	r2, #1
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f91f 	bl	800b1e2 <USBD_CtlSendData>
        break;
 800afa4:	e004      	b.n	800afb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f8a9 	bl	800b100 <USBD_CtlError>
        break;
 800afae:	bf00      	nop
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d81e      	bhi.n	800b00e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	88db      	ldrh	r3, [r3, #6]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d004      	beq.n	800afe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f890 	bl	800b100 <USBD_CtlError>
        break;
 800afe0:	e01a      	b.n	800b018 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f043 0202 	orr.w	r2, r3, #2
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	330c      	adds	r3, #12
 800b002:	2202      	movs	r2, #2
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f8eb 	bl	800b1e2 <USBD_CtlSendData>
      break;
 800b00c:	e004      	b.n	800b018 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f875 	bl	800b100 <USBD_CtlError>
      break;
 800b016:	bf00      	nop
  }
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d106      	bne.n	800b040 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f92b 	bl	800b296 <USBD_CtlSendStatus>
  }
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	3b01      	subs	r3, #1
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d80b      	bhi.n	800b078 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	885b      	ldrh	r3, [r3, #2]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d10c      	bne.n	800b082 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f910 	bl	800b296 <USBD_CtlSendStatus>
      }
      break;
 800b076:	e004      	b.n	800b082 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f840 	bl	800b100 <USBD_CtlError>
      break;
 800b080:	e000      	b.n	800b084 <USBD_ClrFeature+0x3c>
      break;
 800b082:	bf00      	nop
  }
}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	781a      	ldrb	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff fa91 	bl	800a5de <SWAPBYTE>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	461a      	mov	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f7ff fa84 	bl	800a5de <SWAPBYTE>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f7ff fa77 	bl	800a5de <SWAPBYTE>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	80da      	strh	r2, [r3, #6]
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b10a:	2180      	movs	r1, #128	; 0x80
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fcfb 	bl	800bb08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b112:	2100      	movs	r1, #0
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fcf7 	bl	800bb08 <USBD_LL_StallEP>
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d036      	beq.n	800b1a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b13c:	6938      	ldr	r0, [r7, #16]
 800b13e:	f000 f836 	bl	800b1ae <USBD_GetLen>
 800b142:	4603      	mov	r3, r0
 800b144:	3301      	adds	r3, #1
 800b146:	b29b      	uxth	r3, r3
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	4413      	add	r3, r2
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	7812      	ldrb	r2, [r2, #0]
 800b15a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	3301      	adds	r3, #1
 800b160:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	4413      	add	r3, r2
 800b168:	2203      	movs	r2, #3
 800b16a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	3301      	adds	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b172:	e013      	b.n	800b19c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	4413      	add	r3, r2
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	7812      	ldrb	r2, [r2, #0]
 800b17e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	3301      	adds	r3, #1
 800b184:	613b      	str	r3, [r7, #16]
    idx++;
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	3301      	adds	r3, #1
 800b18a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	4413      	add	r3, r2
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
    idx++;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	3301      	adds	r3, #1
 800b19a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e7      	bne.n	800b174 <USBD_GetString+0x52>
 800b1a4:	e000      	b.n	800b1a8 <USBD_GetString+0x86>
    return;
 800b1a6:	bf00      	nop
  }
}
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b1be:	e005      	b.n	800b1cc <USBD_GetLen+0x1e>
  {
    len++;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f5      	bne.n	800b1c0 <USBD_GetLen+0x12>
  }

  return len;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	2100      	movs	r1, #0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fd06 	bl	800bc1a <USBD_LL_Transmit>

  return USBD_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	2100      	movs	r1, #0
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f000 fcf5 	bl	800bc1a <USBD_LL_Transmit>

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2203      	movs	r2, #3
 800b24a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	2100      	movs	r1, #0
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 fcf9 	bl	800bc5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	2100      	movs	r1, #0
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f000 fce8 	bl	800bc5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2204      	movs	r2, #4
 800b2a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fcb4 	bl	800bc1a <USBD_LL_Transmit>

  return USBD_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2205      	movs	r2, #5
 800b2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fcc2 	bl	800bc5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4912      	ldr	r1, [pc, #72]	; (800b334 <MX_USB_DEVICE_Init+0x50>)
 800b2ec:	4812      	ldr	r0, [pc, #72]	; (800b338 <MX_USB_DEVICE_Init+0x54>)
 800b2ee:	f7fe fe65 	bl	8009fbc <USBD_Init>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2f8:	f7f5 fde4 	bl	8000ec4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b2fc:	490f      	ldr	r1, [pc, #60]	; (800b33c <MX_USB_DEVICE_Init+0x58>)
 800b2fe:	480e      	ldr	r0, [pc, #56]	; (800b338 <MX_USB_DEVICE_Init+0x54>)
 800b300:	f7fe fe8c 	bl	800a01c <USBD_RegisterClass>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b30a:	f7f5 fddb 	bl	8000ec4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b30e:	490c      	ldr	r1, [pc, #48]	; (800b340 <MX_USB_DEVICE_Init+0x5c>)
 800b310:	4809      	ldr	r0, [pc, #36]	; (800b338 <MX_USB_DEVICE_Init+0x54>)
 800b312:	f7fe fddd 	bl	8009ed0 <USBD_CDC_RegisterInterface>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b31c:	f7f5 fdd2 	bl	8000ec4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b320:	4805      	ldr	r0, [pc, #20]	; (800b338 <MX_USB_DEVICE_Init+0x54>)
 800b322:	f7fe fea2 	bl	800a06a <USBD_Start>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b32c:	f7f5 fdca 	bl	8000ec4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b330:	bf00      	nop
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20000130 	.word	0x20000130
 800b338:	20001154 	.word	0x20001154
 800b33c:	20000018 	.word	0x20000018
 800b340:	2000011c 	.word	0x2000011c

0800b344 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b348:	2200      	movs	r2, #0
 800b34a:	4905      	ldr	r1, [pc, #20]	; (800b360 <CDC_Init_FS+0x1c>)
 800b34c:	4805      	ldr	r0, [pc, #20]	; (800b364 <CDC_Init_FS+0x20>)
 800b34e:	f7fe fdd4 	bl	8009efa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b352:	4905      	ldr	r1, [pc, #20]	; (800b368 <CDC_Init_FS+0x24>)
 800b354:	4803      	ldr	r0, [pc, #12]	; (800b364 <CDC_Init_FS+0x20>)
 800b356:	f7fe fdee 	bl	8009f36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b35a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20001c24 	.word	0x20001c24
 800b364:	20001154 	.word	0x20001154
 800b368:	20001424 	.word	0x20001424

0800b36c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b36c:	b480      	push	{r7}
 800b36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b370:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b372:	4618      	mov	r0, r3
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
 800b388:	4613      	mov	r3, r2
 800b38a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b23      	cmp	r3, #35	; 0x23
 800b390:	d84a      	bhi.n	800b428 <CDC_Control_FS+0xac>
 800b392:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <CDC_Control_FS+0x1c>)
 800b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b398:	0800b429 	.word	0x0800b429
 800b39c:	0800b429 	.word	0x0800b429
 800b3a0:	0800b429 	.word	0x0800b429
 800b3a4:	0800b429 	.word	0x0800b429
 800b3a8:	0800b429 	.word	0x0800b429
 800b3ac:	0800b429 	.word	0x0800b429
 800b3b0:	0800b429 	.word	0x0800b429
 800b3b4:	0800b429 	.word	0x0800b429
 800b3b8:	0800b429 	.word	0x0800b429
 800b3bc:	0800b429 	.word	0x0800b429
 800b3c0:	0800b429 	.word	0x0800b429
 800b3c4:	0800b429 	.word	0x0800b429
 800b3c8:	0800b429 	.word	0x0800b429
 800b3cc:	0800b429 	.word	0x0800b429
 800b3d0:	0800b429 	.word	0x0800b429
 800b3d4:	0800b429 	.word	0x0800b429
 800b3d8:	0800b429 	.word	0x0800b429
 800b3dc:	0800b429 	.word	0x0800b429
 800b3e0:	0800b429 	.word	0x0800b429
 800b3e4:	0800b429 	.word	0x0800b429
 800b3e8:	0800b429 	.word	0x0800b429
 800b3ec:	0800b429 	.word	0x0800b429
 800b3f0:	0800b429 	.word	0x0800b429
 800b3f4:	0800b429 	.word	0x0800b429
 800b3f8:	0800b429 	.word	0x0800b429
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b429 	.word	0x0800b429
 800b408:	0800b429 	.word	0x0800b429
 800b40c:	0800b429 	.word	0x0800b429
 800b410:	0800b429 	.word	0x0800b429
 800b414:	0800b429 	.word	0x0800b429
 800b418:	0800b429 	.word	0x0800b429
 800b41c:	0800b429 	.word	0x0800b429
 800b420:	0800b429 	.word	0x0800b429
 800b424:	0800b429 	.word	0x0800b429
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b428:	bf00      	nop
  }

  return (USBD_OK);
 800b42a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	4805      	ldr	r0, [pc, #20]	; (800b45c <CDC_Receive_FS+0x24>)
 800b446:	f7fe fd76 	bl	8009f36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b44a:	4804      	ldr	r0, [pc, #16]	; (800b45c <CDC_Receive_FS+0x24>)
 800b44c:	f7fe fd8c 	bl	8009f68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b450:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20001154 	.word	0x20001154

0800b460 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b476:	4618      	mov	r0, r3
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
	...

0800b484 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	6039      	str	r1, [r7, #0]
 800b48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2212      	movs	r2, #18
 800b494:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b496:	4b03      	ldr	r3, [pc, #12]	; (800b4a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	20000150 	.word	0x20000150

0800b4a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	6039      	str	r1, [r7, #0]
 800b4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2204      	movs	r2, #4
 800b4b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4ba:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	20000170 	.word	0x20000170

0800b4cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	6039      	str	r1, [r7, #0]
 800b4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4d8:	79fb      	ldrb	r3, [r7, #7]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d105      	bne.n	800b4ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	4907      	ldr	r1, [pc, #28]	; (800b500 <USBD_FS_ProductStrDescriptor+0x34>)
 800b4e2:	4808      	ldr	r0, [pc, #32]	; (800b504 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4e4:	f7ff fe1d 	bl	800b122 <USBD_GetString>
 800b4e8:	e004      	b.n	800b4f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4904      	ldr	r1, [pc, #16]	; (800b500 <USBD_FS_ProductStrDescriptor+0x34>)
 800b4ee:	4805      	ldr	r0, [pc, #20]	; (800b504 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4f0:	f7ff fe17 	bl	800b122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4f4:	4b02      	ldr	r3, [pc, #8]	; (800b500 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20002424 	.word	0x20002424
 800b504:	0800be58 	.word	0x0800be58

0800b508 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	6039      	str	r1, [r7, #0]
 800b512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	4904      	ldr	r1, [pc, #16]	; (800b528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b518:	4804      	ldr	r0, [pc, #16]	; (800b52c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b51a:	f7ff fe02 	bl	800b122 <USBD_GetString>
  return USBD_StrDesc;
 800b51e:	4b02      	ldr	r3, [pc, #8]	; (800b528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20002424 	.word	0x20002424
 800b52c:	0800be70 	.word	0x0800be70

0800b530 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	4603      	mov	r3, r0
 800b538:	6039      	str	r1, [r7, #0]
 800b53a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	221a      	movs	r2, #26
 800b540:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b542:	f000 f855 	bl	800b5f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b546:	4b02      	ldr	r3, [pc, #8]	; (800b550 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20000174 	.word	0x20000174

0800b554 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4603      	mov	r3, r0
 800b55c:	6039      	str	r1, [r7, #0]
 800b55e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d105      	bne.n	800b572 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	4907      	ldr	r1, [pc, #28]	; (800b588 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b56a:	4808      	ldr	r0, [pc, #32]	; (800b58c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b56c:	f7ff fdd9 	bl	800b122 <USBD_GetString>
 800b570:	e004      	b.n	800b57c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	4904      	ldr	r1, [pc, #16]	; (800b588 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b576:	4805      	ldr	r0, [pc, #20]	; (800b58c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b578:	f7ff fdd3 	bl	800b122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b57c:	4b02      	ldr	r3, [pc, #8]	; (800b588 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20002424 	.word	0x20002424
 800b58c:	0800be84 	.word	0x0800be84

0800b590 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	6039      	str	r1, [r7, #0]
 800b59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d105      	bne.n	800b5ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	4907      	ldr	r1, [pc, #28]	; (800b5c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5a6:	4808      	ldr	r0, [pc, #32]	; (800b5c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5a8:	f7ff fdbb 	bl	800b122 <USBD_GetString>
 800b5ac:	e004      	b.n	800b5b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	4904      	ldr	r1, [pc, #16]	; (800b5c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5b2:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5b4:	f7ff fdb5 	bl	800b122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20002424 	.word	0x20002424
 800b5c8:	0800be90 	.word	0x0800be90

0800b5cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	220c      	movs	r2, #12
 800b5dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b5de:	4b03      	ldr	r3, [pc, #12]	; (800b5ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	20000164 	.word	0x20000164

0800b5f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b5f6:	4b0f      	ldr	r3, [pc, #60]	; (800b634 <Get_SerialNum+0x44>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b5fc:	4b0e      	ldr	r3, [pc, #56]	; (800b638 <Get_SerialNum+0x48>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b602:	4b0e      	ldr	r3, [pc, #56]	; (800b63c <Get_SerialNum+0x4c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4413      	add	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d009      	beq.n	800b62a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b616:	2208      	movs	r2, #8
 800b618:	4909      	ldr	r1, [pc, #36]	; (800b640 <Get_SerialNum+0x50>)
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f000 f814 	bl	800b648 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b620:	2204      	movs	r2, #4
 800b622:	4908      	ldr	r1, [pc, #32]	; (800b644 <Get_SerialNum+0x54>)
 800b624:	68b8      	ldr	r0, [r7, #8]
 800b626:	f000 f80f 	bl	800b648 <IntToUnicode>
  }
}
 800b62a:	bf00      	nop
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	1fff7a10 	.word	0x1fff7a10
 800b638:	1fff7a14 	.word	0x1fff7a14
 800b63c:	1fff7a18 	.word	0x1fff7a18
 800b640:	20000176 	.word	0x20000176
 800b644:	20000186 	.word	0x20000186

0800b648 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4613      	mov	r3, r2
 800b654:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b65a:	2300      	movs	r3, #0
 800b65c:	75fb      	strb	r3, [r7, #23]
 800b65e:	e027      	b.n	800b6b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	0f1b      	lsrs	r3, r3, #28
 800b664:	2b09      	cmp	r3, #9
 800b666:	d80b      	bhi.n	800b680 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	0f1b      	lsrs	r3, r3, #28
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	4619      	mov	r1, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	440b      	add	r3, r1
 800b678:	3230      	adds	r2, #48	; 0x30
 800b67a:	b2d2      	uxtb	r2, r2
 800b67c:	701a      	strb	r2, [r3, #0]
 800b67e:	e00a      	b.n	800b696 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	0f1b      	lsrs	r3, r3, #28
 800b684:	b2da      	uxtb	r2, r3
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	4619      	mov	r1, r3
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	440b      	add	r3, r1
 800b690:	3237      	adds	r2, #55	; 0x37
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	75fb      	strb	r3, [r7, #23]
 800b6b0:	7dfa      	ldrb	r2, [r7, #23]
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d3d3      	bcc.n	800b660 <IntToUnicode+0x18>
  }
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	371c      	adds	r7, #28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
	...

0800b6c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b0a0      	sub	sp, #128	; 0x80
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	605a      	str	r2, [r3, #4]
 800b6da:	609a      	str	r2, [r3, #8]
 800b6dc:	60da      	str	r2, [r3, #12]
 800b6de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b6e0:	f107 0310 	add.w	r3, r7, #16
 800b6e4:	225c      	movs	r2, #92	; 0x5c
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fba1 	bl	800be30 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6f6:	d161      	bne.n	800b7bc <HAL_PCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b6f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 800b6fe:	2304      	movs	r3, #4
 800b700:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800b702:	2360      	movs	r3, #96	; 0x60
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800b706:	2302      	movs	r3, #2
 800b708:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800b70a:	2304      	movs	r3, #4
 800b70c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800b70e:	2301      	movs	r3, #1
 800b710:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800b712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b716:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fa feed 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d001      	beq.n	800b72c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800b728:	f7f5 fbcc 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	4b24      	ldr	r3, [pc, #144]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b734:	4a23      	ldr	r2, [pc, #140]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	6313      	str	r3, [r2, #48]	; 0x30
 800b73c:	4b21      	ldr	r3, [pc, #132]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b74c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b74e:	2300      	movs	r3, #0
 800b750:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b752:	2300      	movs	r3, #0
 800b754:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b756:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b75a:	4619      	mov	r1, r3
 800b75c:	481a      	ldr	r0, [pc, #104]	; (800b7c8 <HAL_PCD_MspInit+0x100>)
 800b75e:	f7f7 fce1 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b766:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b768:	2302      	movs	r3, #2
 800b76a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b770:	2303      	movs	r3, #3
 800b772:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b774:	230a      	movs	r3, #10
 800b776:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b778:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b77c:	4619      	mov	r1, r3
 800b77e:	4812      	ldr	r0, [pc, #72]	; (800b7c8 <HAL_PCD_MspInit+0x100>)
 800b780:	f7f7 fcd0 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b788:	4a0e      	ldr	r2, [pc, #56]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78e:	6353      	str	r3, [r2, #52]	; 0x34
 800b790:	2300      	movs	r3, #0
 800b792:	60bb      	str	r3, [r7, #8]
 800b794:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b798:	4a0a      	ldr	r2, [pc, #40]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b79a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b79e:	6453      	str	r3, [r2, #68]	; 0x44
 800b7a0:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <HAL_PCD_MspInit+0xfc>)
 800b7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7a8:	60bb      	str	r3, [r7, #8]
 800b7aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	2043      	movs	r0, #67	; 0x43
 800b7b2:	f7f7 f966 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7b6:	2043      	movs	r0, #67	; 0x43
 800b7b8:	f7f7 f97f 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b7bc:	bf00      	nop
 800b7be:	3780      	adds	r7, #128	; 0x80
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40023800 	.word	0x40023800
 800b7c8:	40020000 	.word	0x40020000

0800b7cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fe fc8c 	bl	800a100 <USBD_LL_SetupStage>
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b802:	78fa      	ldrb	r2, [r7, #3]
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	4613      	mov	r3, r2
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	440b      	add	r3, r1
 800b810:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	4619      	mov	r1, r3
 800b81a:	f7fe fcc6 	bl	800a1aa <USBD_LL_DataOutStage>
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	460b      	mov	r3, r1
 800b830:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b838:	78fa      	ldrb	r2, [r7, #3]
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	4613      	mov	r3, r2
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	1a9b      	subs	r3, r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	3348      	adds	r3, #72	; 0x48
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	78fb      	ldrb	r3, [r7, #3]
 800b84c:	4619      	mov	r1, r3
 800b84e:	f7fe fd0f 	bl	800a270 <USBD_LL_DataInStage>
}
 800b852:	bf00      	nop
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fe23 	bl	800a4b4 <USBD_LL_SOF>
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b87e:	2301      	movs	r3, #1
 800b880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d102      	bne.n	800b890 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]
 800b88e:	e008      	b.n	800b8a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d102      	bne.n	800b89e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b898:	2301      	movs	r3, #1
 800b89a:	73fb      	strb	r3, [r7, #15]
 800b89c:	e001      	b.n	800b8a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b89e:	f7f5 fb11 	bl	8000ec4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8a8:	7bfa      	ldrb	r2, [r7, #15]
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe fdc3 	bl	800a438 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe fd6f 	bl	800a39c <USBD_LL_Reset>
}
 800b8be:	bf00      	nop
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
	...

0800b8c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe fdbe 	bl	800a458 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	6812      	ldr	r2, [r2, #0]
 800b8ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8ee:	f043 0301 	orr.w	r3, r3, #1
 800b8f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <HAL_PCD_SuspendCallback+0x48>)
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	4a03      	ldr	r2, [pc, #12]	; (800b910 <HAL_PCD_SuspendCallback+0x48>)
 800b902:	f043 0306 	orr.w	r3, r3, #6
 800b906:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b908:	bf00      	nop
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	e000ed00 	.word	0xe000ed00

0800b914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fdae 	bl	800a484 <USBD_LL_Resume>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fdfc 	bl	800a544 <USBD_LL_IsoOUTIncomplete>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b966:	78fa      	ldrb	r2, [r7, #3]
 800b968:	4611      	mov	r1, r2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fdc4 	bl	800a4f8 <USBD_LL_IsoINIncomplete>
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fe02 	bl	800a590 <USBD_LL_DevConnected>
}
 800b98c:	bf00      	nop
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fdff 	bl	800a5a6 <USBD_LL_DevDisconnected>
}
 800b9a8:	bf00      	nop
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d13c      	bne.n	800ba3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b9c0:	4a20      	ldr	r2, [pc, #128]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b9d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9da:	2206      	movs	r2, #6
 800b9dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9e4:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9ea:	4b16      	ldr	r3, [pc, #88]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9f0:	4b14      	ldr	r3, [pc, #80]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b9fc:	4b11      	ldr	r3, [pc, #68]	; (800ba44 <USBD_LL_Init+0x94>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ba02:	4b10      	ldr	r3, [pc, #64]	; (800ba44 <USBD_LL_Init+0x94>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba08:	4b0e      	ldr	r3, [pc, #56]	; (800ba44 <USBD_LL_Init+0x94>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba0e:	480d      	ldr	r0, [pc, #52]	; (800ba44 <USBD_LL_Init+0x94>)
 800ba10:	f7f9 fa4f 	bl	8004eb2 <HAL_PCD_Init>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ba1a:	f7f5 fa53 	bl	8000ec4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba1e:	2180      	movs	r1, #128	; 0x80
 800ba20:	4808      	ldr	r0, [pc, #32]	; (800ba44 <USBD_LL_Init+0x94>)
 800ba22:	f7fa fbe0 	bl	80061e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba26:	2240      	movs	r2, #64	; 0x40
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4806      	ldr	r0, [pc, #24]	; (800ba44 <USBD_LL_Init+0x94>)
 800ba2c:	f7fa fb94 	bl	8006158 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba30:	2280      	movs	r2, #128	; 0x80
 800ba32:	2101      	movs	r1, #1
 800ba34:	4803      	ldr	r0, [pc, #12]	; (800ba44 <USBD_LL_Init+0x94>)
 800ba36:	f7fa fb8f 	bl	8006158 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20002624 	.word	0x20002624

0800ba48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f9 fb4b 	bl	80050fa <HAL_PCD_Start>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f990 	bl	800bd90 <USBD_Get_USB_Status>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	4608      	mov	r0, r1
 800ba88:	4611      	mov	r1, r2
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	70fb      	strb	r3, [r7, #3]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70bb      	strb	r3, [r7, #2]
 800ba94:	4613      	mov	r3, r2
 800ba96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800baa6:	78bb      	ldrb	r3, [r7, #2]
 800baa8:	883a      	ldrh	r2, [r7, #0]
 800baaa:	78f9      	ldrb	r1, [r7, #3]
 800baac:	f7f9 ff5c 	bl	8005968 <HAL_PCD_EP_Open>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 f96a 	bl	800bd90 <USBD_Get_USB_Status>
 800babc:	4603      	mov	r3, r0
 800babe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bae4:	78fa      	ldrb	r2, [r7, #3]
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f7f9 ffa5 	bl	8005a38 <HAL_PCD_EP_Close>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f94b 	bl	800bd90 <USBD_Get_USB_Status>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	460b      	mov	r3, r1
 800bb12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb22:	78fa      	ldrb	r2, [r7, #3]
 800bb24:	4611      	mov	r1, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fa f87d 	bl	8005c26 <HAL_PCD_EP_SetStall>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f92c 	bl	800bd90 <USBD_Get_USB_Status>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb60:	78fa      	ldrb	r2, [r7, #3]
 800bb62:	4611      	mov	r1, r2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fa f8c2 	bl	8005cee <HAL_PCD_EP_ClrStall>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 f90d 	bl	800bd90 <USBD_Get_USB_Status>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da0b      	bge.n	800bbb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bba6:	68f9      	ldr	r1, [r7, #12]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	1a9b      	subs	r3, r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	440b      	add	r3, r1
 800bbb2:	333e      	adds	r3, #62	; 0x3e
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	e00b      	b.n	800bbd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbbe:	68f9      	ldr	r1, [r7, #12]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	440b      	add	r3, r1
 800bbca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbf6:	78fa      	ldrb	r2, [r7, #3]
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f9 fe8f 	bl	800591e <HAL_PCD_SetAddress>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f8c2 	bl	800bd90 <USBD_Get_USB_Status>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b086      	sub	sp, #24
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
 800bc26:	460b      	mov	r3, r1
 800bc28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc38:	7af9      	ldrb	r1, [r7, #11]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	f7f9 ffa8 	bl	8005b92 <HAL_PCD_EP_Transmit>
 800bc42:	4603      	mov	r3, r0
 800bc44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f000 f8a1 	bl	800bd90 <USBD_Get_USB_Status>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc52:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	607a      	str	r2, [r7, #4]
 800bc66:	603b      	str	r3, [r7, #0]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc7a:	7af9      	ldrb	r1, [r7, #11]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	f7f9 ff24 	bl	8005acc <HAL_PCD_EP_Receive>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f880 	bl	800bd90 <USBD_Get_USB_Status>
 800bc90:	4603      	mov	r3, r0
 800bc92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f9 ff54 	bl	8005b62 <HAL_PCD_EP_GetRxCount>
 800bcba:	4603      	mov	r3, r0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <HAL_PCDEx_LPM_Callback+0x18>
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d01f      	beq.n	800bd1a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bcda:	e03b      	b.n	800bd54 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a1b      	ldr	r3, [r3, #32]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800bce4:	f7f4 fc32 	bl	800054c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bce8:	4b1c      	ldr	r3, [pc, #112]	; (800bd5c <HAL_PCDEx_LPM_Callback+0x98>)
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	4a1b      	ldr	r2, [pc, #108]	; (800bd5c <HAL_PCDEx_LPM_Callback+0x98>)
 800bcee:	f023 0306 	bic.w	r3, r3, #6
 800bcf2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd06:	f023 0301 	bic.w	r3, r3, #1
 800bd0a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fbb6 	bl	800a484 <USBD_LL_Resume>
    break;
 800bd18:	e01c      	b.n	800bd54 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd2c:	f043 0301 	orr.w	r3, r3, #1
 800bd30:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fb8d 	bl	800a458 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <HAL_PCDEx_LPM_Callback+0x98>)
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	4a04      	ldr	r2, [pc, #16]	; (800bd5c <HAL_PCDEx_LPM_Callback+0x98>)
 800bd4c:	f043 0306 	orr.w	r3, r3, #6
 800bd50:	6113      	str	r3, [r2, #16]
    break;
 800bd52:	bf00      	nop
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	e000ed00 	.word	0xe000ed00

0800bd60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <USBD_static_malloc+0x18>)
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	200001b0 	.word	0x200001b0

0800bd7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]

}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d817      	bhi.n	800bdd4 <USBD_Get_USB_Status+0x44>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <USBD_Get_USB_Status+0x1c>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800bdc3 	.word	0x0800bdc3
 800bdb4:	0800bdc9 	.word	0x0800bdc9
 800bdb8:	0800bdcf 	.word	0x0800bdcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc0:	e00b      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc6:	e008      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	73fb      	strb	r3, [r7, #15]
    break;
 800bdcc:	e005      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd2:	e002      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd8:	bf00      	nop
  }
  return usb_status;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <__libc_init_array>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	4d0d      	ldr	r5, [pc, #52]	; (800be20 <__libc_init_array+0x38>)
 800bdec:	4c0d      	ldr	r4, [pc, #52]	; (800be24 <__libc_init_array+0x3c>)
 800bdee:	1b64      	subs	r4, r4, r5
 800bdf0:	10a4      	asrs	r4, r4, #2
 800bdf2:	2600      	movs	r6, #0
 800bdf4:	42a6      	cmp	r6, r4
 800bdf6:	d109      	bne.n	800be0c <__libc_init_array+0x24>
 800bdf8:	4d0b      	ldr	r5, [pc, #44]	; (800be28 <__libc_init_array+0x40>)
 800bdfa:	4c0c      	ldr	r4, [pc, #48]	; (800be2c <__libc_init_array+0x44>)
 800bdfc:	f000 f820 	bl	800be40 <_init>
 800be00:	1b64      	subs	r4, r4, r5
 800be02:	10a4      	asrs	r4, r4, #2
 800be04:	2600      	movs	r6, #0
 800be06:	42a6      	cmp	r6, r4
 800be08:	d105      	bne.n	800be16 <__libc_init_array+0x2e>
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be10:	4798      	blx	r3
 800be12:	3601      	adds	r6, #1
 800be14:	e7ee      	b.n	800bdf4 <__libc_init_array+0xc>
 800be16:	f855 3b04 	ldr.w	r3, [r5], #4
 800be1a:	4798      	blx	r3
 800be1c:	3601      	adds	r6, #1
 800be1e:	e7f2      	b.n	800be06 <__libc_init_array+0x1e>
 800be20:	0800bec8 	.word	0x0800bec8
 800be24:	0800bec8 	.word	0x0800bec8
 800be28:	0800bec8 	.word	0x0800bec8
 800be2c:	0800becc 	.word	0x0800becc

0800be30 <memset>:
 800be30:	4402      	add	r2, r0
 800be32:	4603      	mov	r3, r0
 800be34:	4293      	cmp	r3, r2
 800be36:	d100      	bne.n	800be3a <memset+0xa>
 800be38:	4770      	bx	lr
 800be3a:	f803 1b01 	strb.w	r1, [r3], #1
 800be3e:	e7f9      	b.n	800be34 <memset+0x4>

0800be40 <_init>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	bf00      	nop
 800be44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be46:	bc08      	pop	{r3}
 800be48:	469e      	mov	lr, r3
 800be4a:	4770      	bx	lr

0800be4c <_fini>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	bf00      	nop
 800be50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be52:	bc08      	pop	{r3}
 800be54:	469e      	mov	lr, r3
 800be56:	4770      	bx	lr
